
* Loading screen
* 
* #UDGTABLE
* { #SCR(loading) | West Bank Loading Screen. }
* TABLE#
loading:                               ; 4000
       byte >FC,>00,>57,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>EA,>00,>3F,>FE,>7F,>CC,>FF,>FF,>FF,>FF ; {Pixels
       byte >FE,>00,>0F,>FF,>FF,>FF,>FF,>FC,>21,>9F,>1F,>9F,>93,>C3,>CD,>87,>0F,>FF,>FF,>FF,>FF,>FF,>F0,>00,>7F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
_4040:
       byte >FE,>00,>07,>FF,>FF,>FF,>FF,>FE,>53,>1A,>43,>2F,>43,>18,>88,>C9,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>00,>7F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
_4060:
       byte >FE,>80,>07,>FF,>FF,>FF,>FF,>FF,>27,>FF,>FF,>E0,>FF,>FF,>FF,>97,>CF,>FF,>FF,>FF,>FF,>FF,>E0,>01,>7F,>BE,>7E,>00,>AA,>AB,>7F,>BF ; 
_4080:
       byte >FE,>21,>07,>FF,>FF,>FF,>FF,>FF,>FF,>FE,>C0,>40,>0F,>00,>BF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>84,>7F,>EE,>7E,>3F,>FF,>FB,>FE,>FF ; 
       byte >7E,>20,>37,>FF,>FF,>FF,>FF,>FF,>FD,>E3,>E0,>08,>0C,>02,>2F,>FF,>87,>AA,>FF,>7F,>FF,>E7,>EC,>84,>7E,>BE,>7E,>3F,>EF,>FB,>FF,>FF ; 
       byte >FE,>00,>3F,>FF,>FF,>FF,>FF,>FF,>FF,>40,>00,>00,>C0,>01,>04,>00,>22,>FF,>FF,>FF,>67,>FF,>FC,>80,>7F,>FE,>7E,>3F,>FF,>FB,>FF,>FF ; 
       byte >FE,>81,>1F,>FF,>FF,>FF,>FF,>FF,>FF,>A9,>00,>00,>50,>F0,>54,>06,>FD,>17,>6F,>AF,>FF,>FF,>F8,>81,>7F,>FE,>7E,>3F,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>2F,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>F4,>00,>7F,>FE,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>0F,>FF,>F7,>F7,>F7,>FC,>21,>87,>9F,>9F,>87,>C3,>C5,>86,>4F,>F7,>F7,>F7,>FF,>FF,>F0,>00,>7F,>FC,>BF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>FF,>FE,>53,>1A,>07,>0F,>07,>5A,>88,>CD,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>00,>7F,>FE,>BF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>80,>87,>FF,>FF,>FF,>FF,>FF,>27,>FF,>FF,>9F,>1F,>FF,>FF,>87,>CF,>FF,>FF,>FF,>FF,>FF,>E1,>01,>7F,>7E,>BE,>15,>55,>FD,>FF,>7F ; 
       byte >BE,>21,>07,>FF,>FF,>FF,>FF,>FF,>FF,>FD,>00,>40,>1F,>00,>5F,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>84,>7D,>DE,>3E,>5F,>DF,>FD,>FF,>FF ; 
       byte >FE,>20,>37,>FF,>FF,>FF,>FF,>FF,>FD,>70,>F8,>08,>00,>01,>2F,>FC,>78,>55,>FE,>FF,>FF,>DB,>EC,>84,>7F,>7E,>BE,>7F,>DF,>FF,>FF,>7F ; 
       byte >FC,>00,>3F,>FF,>FF,>FF,>FF,>FF,>FF,>40,>00,>00,>E0,>00,>64,>00,>06,>FF,>FF,>FE,>8F,>FF,>FC,>80,>3F,>FC,>BE,>7F,>DF,>FF,>FF,>FF ; 
       byte >FC,>81,>17,>FF,>FF,>FF,>FF,>FF,>F0,>29,>40,>00,>07,>00,>A8,>09,>F8,>AF,>77,>5F,>FF,>FF,>E8,>81,>3F,>FE,>FE,>7F,>DF,>FD,>FF,>FF ; 
       byte >FC,>00,>17,>FF,>FF,>FF,>FF,>FC,>21,>03,>8A,>07,>07,>E7,>88,>87,>FF,>FF,>FF,>FF,>FF,>FF,>E8,>00,>3F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>0F,>FF,>F7,>F7,>F7,>FE,>73,>87,>8F,>9F,>93,>DB,>D1,>CC,>FF,>F7,>F7,>F7,>FF,>FF,>F0,>00,>7F,>FD,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>FF,>FF,>07,>42,>8F,>FF,>FF,>18,>8A,>84,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>00,>7F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >7E,>81,>07,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>60,>E1,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>81,>7E,>BE,>7E,>2A,>EB,>FB,>FE,>FF ; 
       byte >DE,>21,>07,>FF,>FF,>FF,>FF,>FF,>FF,>FA,>00,>20,>1F,>80,>5F,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>84,>7B,>EE,>7E,>3F,>FF,>FB,>FE,>FF ; 
       byte >FE,>00,>37,>FF,>FF,>FF,>FF,>FF,>FD,>A0,>3C,>04,>00,>00,>AF,>E3,>80,>3B,>F9,>FF,>FF,>A5,>EC,>80,>7F,>FE,>7E,>3F,>EF,>FB,>FF,>FF ; 
       byte >FE,>00,>3F,>FF,>FF,>FF,>FF,>FF,>FF,>40,>00,>00,>E0,>00,>0E,>00,>ED,>FF,>FF,>FD,>3F,>FF,>FC,>80,>7F,>FA,>7E,>7F,>FF,>FB,>FF,>FF ; 
       byte >FE,>C1,>17,>FF,>FF,>FF,>FF,>FE,>0F,>E9,>A0,>00,>38,>00,>70,>17,>F4,>5F,>57,>5F,>FF,>FF,>E8,>83,>7F,>FE,>7E,>3F,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>FF,>FD,>29,>43,>02,>07,>43,>E7,>A8,>A7,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>00,>7F,>FE,>BF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>0F,>FF,>80,>80,>80,>FE,>73,>9F,>C7,>9F,>99,>81,>D9,>CC,>FF,>80,>80,>80,>FF,>FF,>F0,>00,>7F,>BA,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>FF,>FF,>27,>03,>FF,>FF,>FF,>FF,>88,>86,>4F,>FF,>FF,>FF,>FF,>FF,>E0,>00,>7F,>FE,>BF,>FF,>FF,>7F,>FF,>FF ; 
       byte >FE,>81,>07,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FC,>80,>1E,>01,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>81,>7F,>5E,>FE,>57,>DF,>FD,>FF,>7F ; 
       byte >BE,>21,>07,>FF,>FF,>FF,>FF,>FF,>FF,>F4,>00,>20,>1C,>C0,>5F,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>84,>7D,>DE,>3E,>5F,>DF,>FD,>FF,>FF ; 
       byte >FE,>E0,>37,>FF,>FF,>FF,>FF,>FF,>FE,>E0,>DE,>02,>00,>00,>97,>1C,>07,>D7,>E7,>FF,>FF,>45,>EC,>87,>7F,>7C,>BE,>7F,>DF,>FF,>FF,>FF ; 
       byte >FC,>00,>1F,>FF,>FF,>FF,>FF,>FF,>FF,>A0,>00,>00,>C0,>00,>3E,>07,>1B,>F1,>FF,>FA,>7F,>FF,>F8,>80,>3F,>FC,>BE,>7F,>DF,>FF,>FF,>FF ; 
       byte >FE,>81,>17,>FF,>FF,>FF,>FF,>E1,>F1,>B9,>40,>01,>C0,>00,>C0,>6F,>F4,>5F,>B7,>7F,>FF,>FF,>E8,>81,>7F,>FE,>FE,>7F,>DF,>FD,>FF,>FF ; 
       byte >FC,>00,>0F,>FF,>FF,>FF,>FF,>FC,>A5,>1A,>B2,>97,>19,>E7,>88,>97,>CF,>FF,>FF,>FF,>FF,>FF,>F0,>00,>3F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FC,>00,>0F,>FF,>E3,>E3,>E3,>FE,>73,>9F,>C7,>9F,>99,>81,>DD,>C9,>FF,>E3,>E3,>E3,>FF,>FF,>F0,>00,>3F,>7D,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>FF,>FF,>27,>FF,>FF,>FF,>FF,>FF,>FF,>86,>4F,>FF,>FF,>FF,>FF,>FF,>E0,>00,>7F,>FE,>7F,>FF,>FE,>1F,>FE,>00 ; 
       byte >7E,>81,>07,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>F3,>20,>01,>FE,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>81,>7E,>BE,>7E,>3F,>EF,>FB,>FE,>FF ; 
       byte >7E,>21,>17,>FF,>FF,>FF,>FF,>FF,>FF,>88,>00,>20,>38,>40,>5F,>FF,>FF,>FF,>80,>FF,>FF,>FF,>E8,>84,>7E,>FE,>7E,>3F,>FF,>FB,>FE,>FF ; 
       byte >FE,>E0,>37,>FF,>FF,>FF,>FF,>FF,>FE,>A1,>1E,>02,>00,>00,>50,>E0,>FA,>BF,>DF,>FF,>FD,>CB,>EC,>87,>7F,>FE,>7E,>3F,>EF,>FB,>FF,>FF ; 
       byte >FE,>00,>1F,>FF,>FF,>FF,>FF,>FF,>FF,>A0,>00,>01,>40,>00,>D7,>08,>17,>CE,>7F,>F4,>FF,>FF,>F8,>80,>7F,>FA,>7E,>7F,>FF,>FB,>FF,>FF ; 
       byte >FE,>01,>17,>FF,>FF,>FE,>07,>1E,>02,>27,>C0,>FE,>00,>03,>80,>9F,>FB,>BF,>B6,>BF,>FF,>FF,>E8,>80,>7F,>FE,>7E,>3F,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>1F,>FF,>FF,>FF,>FF,>FC,>21,>1A,>7A,>97,>19,>E7,>88,>87,>CF,>FF,>FF,>FF,>FF,>FF,>F8,>00,>7F,>FE,>BF,>FF,>FF,>FF,>FF,>FF ; 
       byte >F8,>00,>07,>FF,>C9,>C9,>C9,>FE,>53,>9F,>E3,>9F,>99,>99,>DD,>C3,>FF,>C9,>C9,>C9,>FF,>FF,>E0,>00,>1F,>BE,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>FF,>FF,>27,>FF,>FF,>FF,>FF,>FF,>FF,>87,>0F,>FF,>FF,>FF,>FF,>FF,>E0,>00,>7F,>7E,>BF,>FF,>FE,>08,>01,>7E ; 
       byte >BE,>81,>07,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>EC,>4C,>00,>01,>7F,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>81,>7D,>DE,>3E,>5F,>DF,>FF,>FF,>FF ; 
       byte >BE,>21,>17,>FF,>FF,>FF,>FF,>FF,>FE,>70,>00,>20,>38,>00,>5F,>FF,>FF,>FC,>7F,>7F,>FF,>FF,>E8,>84,>7D,>DE,>3E,>5F,>DF,>FD,>FF,>FF ; 
       byte >FE,>80,>3F,>FF,>FF,>FF,>FF,>FF,>FE,>D5,>9C,>01,>00,>00,>2F,>00,>01,>7F,>3F,>FF,>F2,>37,>FC,>81,>7F,>7C,>BE,>7F,>DF,>FF,>FF,>FF ; 
       byte >FC,>00,>1F,>FF,>FF,>FF,>FF,>FF,>FF,>A0,>00,>06,>92,>83,>AF,>00,>6F,>B3,>BF,>E9,>FF,>FF,>F8,>80,>3F,>FC,>BE,>7F,>DF,>FD,>FF,>FF ; 
       byte >FE,>01,>07,>FF,>FF,>FD,>F8,>E0,>0C,>20,>3F,>00,>00,>0C,>01,>4F,>FC,>7F,>B6,>BF,>FF,>FF,>E0,>80,>7F,>FE,>FE,>3F,>FF,>FD,>FF,>FF ; 
       byte >FC,>00,>0F,>FF,>FF,>FF,>FF,>FC,>21,>9E,>7B,>9F,>99,>E7,>DD,>87,>8F,>FF,>FF,>FF,>FF,>FF,>F0,>00,>3F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>DD,>DD,>DD,>FE,>53,>9F,>EB,>0F,>19,>18,>DD,>C3,>FF,>DD,>DD,>DD,>FF,>FF,>E0,>00,>7F,>DE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>80,>07,>FF,>FF,>FF,>FF,>FF,>27,>FF,>FF,>FF,>FF,>FF,>FF,>87,>8F,>FF,>FF,>FF,>FF,>FF,>E0,>01,>7F,>FE,>7F,>FF,>E0,>02,>AA,>BF ; 
       byte >7E,>81,>07,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>D0,>50,>00,>00,>BF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>81,>7E,>EE,>7E,>3F,>EF,>FB,>FE,>FF ; 
       byte >7E,>21,>17,>FF,>FF,>FF,>FF,>FF,>FD,>88,>00,>10,>38,>00,>5F,>FF,>FF,>83,>9F,>BF,>FF,>FF,>E8,>84,>7E,>BE,>7E,>3F,>EF,>FB,>FE,>FF ; 
       byte >FE,>80,>3F,>FF,>FF,>FF,>FF,>FF,>FE,>B3,>88,>01,>80,>00,>08,>00,>BF,>E0,>FF,>FF,>EC,>0F,>FC,>81,>7F,>FE,>7E,>3F,>FF,>FB,>FF,>FF ; 
       byte >FA,>01,>1F,>FF,>FF,>FF,>FF,>FF,>FF,>A2,>00,>19,>2C,>0D,>57,>00,>9F,>47,>5F,>D3,>FF,>FF,>F8,>80,>5F,>FE,>7E,>7F,>FF,>FF,>FF,>FF ; 
       byte >FE,>81,>07,>FF,>FF,>FB,>FF,>00,>10,>10,>00,>5C,>00,>10,>02,>B7,>FF,>FF,>B6,>BF,>FF,>FF,>E0,>81,>7F,>FE,>7E,>3F,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>0F,>FF,>FF,>FF,>FF,>FC,>21,>9E,>3F,>9F,>99,>C3,>DD,>87,>0F,>FF,>FF,>FF,>FF,>FF,>F0,>00,>7F,>FE,>BF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>FF,>FE,>53,>9A,>E3,>4F,>19,>18,>D8,>C3,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>00,>7F,>BE,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>80,>07,>FF,>FF,>FF,>FF,>FF,>27,>FF,>FF,>FF,>FF,>FF,>FF,>A7,>8F,>FF,>FF,>FF,>FF,>FF,>E0,>01,>7F,>7E,>BE,>00,>05,>55,>D7,>7F ; 
       byte >BE,>21,>07,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>20,>40,>06,>00,>BF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E0,>84,>7D,>DE,>3E,>5F,>DF,>FF,>FF,>FF ; 
       byte >FE,>21,>17,>FF,>FF,>FF,>FF,>FF,>FD,>50,>00,>10,>1E,>04,>5F,>FF,>F8,>7D,>7F,>BF,>FF,>FF,>E8,>84,>7F,>5E,>BE,>7F,>DF,>FF,>FF,>FF ; 
       byte >FE,>00,>3F,>FF,>FF,>FF,>FF,>FF,>FF,>50,>00,>01,>40,>00,>E4,>01,>D5,>1F,>FF,>FF,>91,>FF,>FC,>80,>7F,>FC,>BE,>7F,>DF,>FF,>FF,>FF ; 
       byte >FC,>81,>1F,>FF,>FF,>FF,>FF,>FF,>FF,>A4,>80,>0E,>50,>1A,>2A,>01,>7F,>88,>AF,>D7,>FF,>FF,>F8,>81,>3F,>FE,>FE,>7F,>FF,>FD,>FF,>FF ; 
       byte >FE,>81,>07,>FF,>FF,>F7,>FF,>E0,>20,>F0,>00,>A0,>00,>60,>9D,>CF,>FF,>FF,>B6,>DF,>FF,>FF,>E0,>81,>7F,>FE,>BE,>3F,>FF,>FF,>FF,>FF ; 
       byte >FE,>81,>07,>FF,>FF,>EF,>FF,>F8,>03,>30,>00,>40,>03,>81,>FE,>8F,>FF,>FF,>B6,>DF,>FF,>FF,>E0,>81,>7F,>FE,>7E,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>20,>07,>FF,>FF,>FF,>FF,>FF,>F6,>E5,>FB,>FF,>F3,>EA,>EA,>55,>60,>6C,>C5,>9B,>FF,>FF,>EA,>7C,>7F,>DE,>7F,>CC,>FF,>FF,>FF,>FF ; 
       byte >DE,>00,>07,>FF,>FF,>FF,>AB,>FF,>E5,>FB,>EB,>CE,>80,>9B,>EB,>00,>19,>03,>46,>00,>81,>7F,>E9,>45,>7F,>BE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>FD,>AF,>AA,>13,>FF,>53,>CE,>A2,>70,>D2,>0D,>7E,>80,>16,>CC,>88,>FB,>00,>E1,>00,>7F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >DC,>C0,>2F,>FF,>FE,>AA,>00,>00,>0F,>9F,>FF,>C8,>40,>02,>2D,>34,>BD,>60,>50,>61,>F8,>30,>15,>03,>3F,>FE,>7F,>00,>AA,>AB,>7F,>BF ; 
       byte >FE,>00,>2F,>FF,>FF,>FB,>00,>FF,>FF,>F7,>EF,>B2,>89,>00,>53,>3B,>90,>A0,>51,>6B,>A8,>41,>35,>00,>7F,>FE,>7F,>3F,>FF,>FB,>FE,>FF ; 
       byte >FE,>00,>27,>FF,>FF,>FF,>6B,>A2,>4B,>50,>AB,>01,>FF,>FF,>F0,>F0,>47,>DE,>28,>2F,>EE,>1A,>04,>50,>7F,>FE,>7F,>3F,>EF,>FB,>FF,>FF ; 
_48e0:
       byte >DC,>00,>27,>FF,>FF,>FF,>D0,>4A,>30,>01,>24,>FE,>CB,>E1,>55,>86,>55,>03,>90,>02,>FF,>AA,>07,>40,>3F,>FE,>7F,>3F,>FF,>FB,>FF,>FF ; 
       byte >FE,>81,>07,>FF,>FF,>EF,>FF,>FF,>04,>10,>00,>C0,>1C,>06,>F4,>37,>E3,>FF,>A6,>DF,>FF,>FF,>E0,>81,>7F,>FE,>BE,>7F,>FF,>FF,>FF,>FF ; 
       byte >FD,>20,>0F,>FF,>FF,>FF,>FF,>FF,>F1,>9B,>5F,>55,>5D,>55,>C6,>C6,>B0,>33,>BA,>85,>FF,>FF,>F5,>57,>BF,>FE,>BF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>A5,>FF,>E9,>FE,>D5,>3D,>40,>4E,>1D,>A0,>86,>86,>AA,>00,>80,>8F,>E1,>44,>7F,>DE,>BF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>FD,>77,>B5,>0C,>FF,>99,>EF,>62,>CF,>A0,>19,>AE,>40,>1B,>84,>28,>F6,>80,>E1,>80,>7F,>FE,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>0F,>FF,>FE,>95,>04,>00,>07,>B7,>D7,>A4,>58,>FC,>13,>34,>99,>C0,>E2,>51,>70,>18,>6B,>00,>7F,>FE,>BF,>15,>55,>FD,>FF,>7F ; 
       byte >FE,>00,>0F,>FF,>FF,>FC,>BF,>FC,>BF,>EA,>FF,>69,>F4,>44,>AD,>A3,>64,>D0,>23,>75,>D4,>50,>CE,>00,>7F,>FE,>BF,>5F,>DF,>FD,>FF,>FF ; 
       byte >FE,>04,>07,>FF,>FF,>FE,>81,>52,>4A,>89,>5C,>00,>5F,>FF,>BF,>E0,>8E,>AE,>18,>2F,>F1,>05,>49,>60,>7F,>FE,>BF,>7F,>DF,>FF,>FF,>7F ; 
       byte >EE,>20,>27,>FF,>FF,>FF,>DE,>25,>18,>01,>24,>7D,>49,>E0,>EE,>0C,>EB,>03,>D0,>01,>7F,>56,>14,>04,>7F,>FE,>BF,>7F,>DF,>FF,>FF,>FF ; 
       byte >FE,>81,>07,>FF,>FF,>F7,>FF,>FF,>C0,>2E,>01,>40,>E0,>09,>EA,>57,>DD,>FF,>B6,>DF,>FF,>FF,>E0,>81,>7F,>FE,>7E,>BF,>FF,>FF,>FF,>FF ; 
       byte >FC,>21,>0F,>FF,>FF,>FF,>FF,>FF,>E5,>8D,>2A,>FF,>EB,>AE,>B9,>E9,>58,>18,>C6,>82,>FF,>FF,>FF,>AC,>3F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>20,>07,>FF,>FF,>FF,>45,>FF,>E5,>FF,>E2,>FB,>C0,>40,>01,>D0,>43,>47,>34,>00,>80,>73,>E1,>04,>7F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FC,>00,>07,>FF,>FD,>B9,>AA,>FF,>7F,>EC,>7E,>A2,>15,>40,>15,>52,>A0,>17,>14,>28,>EB,>40,>A1,>00,>3F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >DC,>00,>27,>FF,>FF,>4A,>AF,>28,>03,>EB,>5B,>90,>A7,>00,>55,>18,>9F,>00,>D1,>63,>E8,>14,>95,>00,>3F,>FE,>7F,>2A,>EB,>FB,>FE,>FF ; 
       byte >FE,>00,>0F,>FF,>FF,>FF,>7F,>F9,>55,>F5,>BF,>FC,>51,>39,>57,>CC,>E2,>B8,>32,>BA,>E8,>A0,>3D,>00,>7F,>FE,>7F,>3F,>FF,>FB,>FE,>FF ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>7F,>31,>4F,>15,>B8,>7C,>2F,>5D,>D5,>80,>99,>96,>10,>17,>FA,>02,>B1,>50,>7F,>FE,>7F,>3F,>EF,>FB,>FF,>FF ; 
       byte >DC,>80,>27,>FF,>FF,>FF,>D1,>93,>08,>02,>22,>3A,>89,>A0,>38,>09,>57,>05,>A0,>01,>7F,>AC,>16,>01,>3F,>FE,>7F,>7F,>FF,>FB,>FF,>FF ; 
       byte >FE,>81,>07,>FF,>FF,>F8,>00,>01,>FC,>15,>E0,>BF,>40,>33,>D6,>AF,>3E,>FF,>66,>DF,>FF,>FF,>E0,>81,>7F,>BE,>BE,>7F,>FF,>FF,>FF,>FF ; 
       byte >FC,>01,>0F,>FF,>FF,>FF,>FF,>FF,>E9,>ED,>D7,>D5,>11,>7D,>DD,>F4,>A8,>09,>83,>01,>7F,>FF,>FD,>F5,>1F,>FE,>BF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>20,>07,>FF,>FF,>FF,>45,>FF,>F2,>FF,>35,>76,>20,>30,>11,>F0,>21,>C6,>28,>01,>80,>9D,>E1,>04,>7F,>FE,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>87,>FF,>FD,>56,>D7,>00,>BF,>F6,>BB,>40,>0A,>82,>09,>20,>C0,>2A,>36,>48,>F2,>80,>61,>80,>7F,>FE,>BF,>FF,>FF,>7F,>FF,>FF ; 
       byte >FE,>00,>27,>FF,>FF,>A5,>78,>00,>03,>CB,>2B,>EA,>18,>3C,>9B,>2C,>BC,>00,>E0,>D3,>D4,>0B,>17,>00,>7F,>FE,>BF,>57,>DF,>FD,>FF,>7F ; 
       byte >FE,>C0,>0F,>FF,>FF,>FF,>8F,>C6,>FE,>8B,>1B,>EF,>2F,>EE,>AF,>B0,>6D,>B0,>24,>BD,>50,>C0,>1A,>83,>7F,>FE,>BF,>5F,>DF,>FD,>FF,>FF ; 
       byte >DE,>04,>07,>FF,>FF,>FF,>85,>99,>2A,>2A,>59,>87,>2F,>EA,>AB,>01,>12,>8F,>00,>0B,>F5,>01,>62,>60,>7F,>FE,>BF,>7F,>DF,>FF,>FF,>FF ; 
       byte >FE,>80,>07,>FF,>FF,>FF,>D0,>4F,>88,>02,>12,>15,>91,>30,>06,>1A,>6F,>04,>E0,>01,>7F,>D4,>27,>01,>7F,>DE,>FF,>7F,>DF,>FF,>FF,>FF ; 
       byte >BE,>81,>07,>FF,>FF,>FF,>FF,>FE,>0F,>8A,>BF,>EA,>88,>4F,>BB,>C0,>E3,>7F,>56,>DF,>FF,>FF,>E0,>81,>7F,>DE,>7E,>BF,>FF,>FF,>FC,>00 ; 
       byte >DE,>01,>07,>FF,>FF,>FF,>FF,>FF,>E3,>F6,>AE,>7C,>AA,>2A,>AB,>F9,>54,>0D,>43,>01,>7F,>FF,>EA,>AE,>1F,>AE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FC,>00,>07,>FF,>FF,>7F,>42,>FF,>F5,>7F,>2A,>CC,>E0,>08,>11,>F4,>80,>47,>58,>03,>03,>05,>E1,>40,>3F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FC,>00,>87,>FF,>FD,>31,>18,>00,>5F,>FB,>45,>80,>05,>05,>29,>7C,>80,>5E,>33,>00,>A9,>25,>41,>00,>3F,>FE,>7F,>FF,>FE,>1F,>FE,>00 ; 
       byte >DE,>00,>27,>FF,>FF,>A3,>80,>01,>F3,>F4,>D5,>C4,>40,>7E,>67,>7A,>E8,>00,>C0,>E3,>E8,>0A,>05,>00,>7F,>FE,>7F,>3F,>EF,>FB,>FE,>FF ; 
       byte >FE,>20,>27,>FF,>FF,>FF,>F0,>41,>91,>74,>AF,>7B,>D8,>55,>7F,>40,>ED,>78,>34,>5E,>A2,>A0,>0D,>04,>7F,>FE,>7F,>3F,>FF,>FB,>FE,>FF ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>DA,>69,>AD,>35,>B2,>3A,>97,>35,>7E,>02,>35,>97,>00,>0B,>F6,>80,>82,>D0,>7F,>FE,>7F,>3F,>EF,>FB,>FF,>FF ; 
       byte >FC,>80,>07,>FF,>FF,>FF,>E8,>21,>00,>02,>E9,>AB,>21,>B0,>F9,>0C,>DF,>04,>68,>00,>BF,>E8,>36,>01,>3F,>FE,>7F,>7F,>FF,>FB,>FF,>FF ; 
       byte >FE,>21,>07,>FF,>FF,>FF,>FF,>FF,>EE,>45,>55,>55,>11,>9F,>76,>8F,>01,>BF,>6E,>DF,>FF,>FF,>E0,>84,>7F,>EE,>FE,>7F,>FF,>F8,>00,>55 ; 
       byte >FE,>08,>0F,>FF,>FF,>FF,>F7,>FF,>EB,>F0,>DA,>25,>55,>45,>55,>AC,>AC,>07,>85,>02,>1F,>FF,>F5,>55,>1F,>FE,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>FE,>BF,>41,>7F,>FA,>BF,>F5,>B9,>20,>1C,>09,>70,>C0,>0E,>70,>62,>0F,>05,>E1,>80,>7F,>FE,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FA,>00,>87,>FF,>FD,>58,>D0,>00,>5F,>FC,>EA,>80,>00,>09,>02,>3C,>C0,>7C,>6B,>00,>F1,>AA,>A9,>80,>5F,>FE,>BF,>FF,>FE,>08,>01,>7E ; 
       byte >FE,>00,>07,>FF,>FF,>D0,>00,>02,>AF,>FA,>AF,>65,>31,>86,>2B,>3D,>B4,>80,>E0,>F3,>D0,>04,>0A,>00,>7F,>FE,>BF,>5F,>DF,>FF,>FF,>FF ; 
       byte >FE,>01,>07,>FF,>FF,>FF,>FF,>82,>EA,>F8,>D4,>EF,>A6,>AA,>DF,>82,>DD,>3C,>24,>5F,>55,>50,>02,>80,>7F,>FE,>BF,>5F,>DF,>FD,>FF,>FF ; 
       byte >FE,>04,>07,>FF,>FF,>FF,>A1,>38,>E7,>6B,>62,>7D,>8B,>9F,>80,>02,>6A,>8B,>00,>0B,>F5,>00,>62,>E0,>7F,>FE,>BF,>7F,>DF,>FF,>FF,>FF ; 
       byte >FE,>80,>87,>FF,>FF,>FF,>E8,>20,>02,>02,>58,>7C,>21,>1B,>01,>15,>3F,>05,>D8,>00,>5F,>F4,>27,>01,>7F,>FE,>FF,>7F,>DF,>FD,>FF,>FF ; 
       byte >BE,>21,>07,>FF,>FF,>FF,>FF,>FF,>F6,>F0,>A2,>20,>06,>FA,>AA,>77,>00,>8F,>4D,>DF,>FF,>FF,>E0,>84,>7F,>FE,>7E,>BF,>C0,>01,>5F,>EE ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>EB,>FF,>E3,>EA,>B9,>CA,>BF,>A8,>8B,>FF,>96,>03,>45,>03,>E0,>FF,>EB,>6E,>1F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FC,>00,>07,>FF,>FE,>BF,>40,>9F,>FD,>4F,>CA,>29,>10,>64,>09,>58,>40,>0C,>F0,>96,>3F,>02,>E1,>40,>3F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >DC,>00,>2F,>FF,>FD,>24,>3C,>00,>2E,>FF,>1E,>88,>3C,>75,>17,>3C,>20,>F8,>71,>80,>F8,>D4,>75,>00,>3F,>FE,>7F,>FF,>E0,>02,>AA,>BF ; 
       byte >FE,>00,>07,>FF,>FF,>E8,>00,>00,>51,>FC,>D5,>FA,>4E,>02,>B7,>6A,>EC,>80,>51,>3B,>AA,>1C,>0D,>00,>7F,>FE,>7F,>3F,>EF,>FB,>FE,>FF ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>FF,>82,>5D,>3C,>60,>94,>FD,>FF,>FF,>0C,>FE,>D8,>24,>5F,>AB,>E8,>01,>40,>7F,>FE,>7F,>3F,>EF,>FB,>FE,>FF ; 
       byte >FE,>00,>27,>FF,>FF,>FF,>40,>9C,>65,>52,>A4,>FE,>CF,>C0,>03,>E4,>D5,>87,>80,>05,>FA,>80,>14,>D0,>7F,>DE,>7F,>3F,>FF,>FB,>FF,>FF ; 
       byte >FC,>80,>07,>FF,>FF,>FF,>EA,>06,>01,>02,>B4,>00,>41,>8C,>0E,>19,>7F,>0A,>68,>00,>2F,>FB,>5E,>01,>3F,>FE,>7F,>7F,>FF,>FF,>FF,>FF ; 
       byte >FE,>21,>0F,>FF,>FF,>FF,>FF,>FF,>F1,>4E,>54,>00,>7F,>B7,>1B,>EA,>C0,>F2,>AD,>A7,>FF,>FF,>FF,>84,>7F,>EE,>FE,>00,>18,>FF,>FF,>FF ; 
       byte >FC,>08,>07,>FF,>FF,>FF,>DB,>FF,>EB,>DD,>54,>35,>60,>F5,>55,>7C,>6B,>03,>85,>00,>1F,>7F,>E9,>3F,>3F,>FE,>BF,>FF,>FF,>FF,>FF,>FF ; 
       byte >DE,>00,>07,>FF,>FD,>5F,>B0,>6F,>FE,>A7,>F5,>52,>00,>62,>09,>7C,>00,>09,>58,>9C,>7E,>81,>E1,>80,>7F,>FE,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>80,>0F,>FF,>FE,>B4,>00,>00,>13,>FF,>DD,>58,>43,>8A,>0F,>3C,>CF,>F0,>68,>C1,>F4,>48,>19,>01,>7F,>FE,>BF,>00,>05,>55,>D7,>7F ; 
       byte >DE,>00,>0F,>FF,>FF,>F4,>00,>0F,>AA,>ED,>EA,>D5,>80,>0A,>6B,>75,>FC,>C0,>61,>57,>D4,>22,>1A,>00,>7F,>FE,>BF,>5F,>DF,>FF,>FF,>FF ; 
       byte >FE,>01,>07,>FF,>FF,>FF,>FF,>42,>4A,>A2,>38,>FE,>6F,>80,>FF,>18,>FE,>AC,>28,>2F,>D6,>34,>00,>A0,>7F,>FE,>BF,>7F,>DF,>FF,>FF,>FF ; 
       byte >FE,>04,>27,>FF,>FF,>FF,>A0,>54,>60,>E4,>24,>FD,>4B,>C0,>3E,>E7,>AB,>03,>08,>02,>FD,>41,>0D,>A0,>7F,>FE,>BF,>7F,>DF,>FF,>FF,>FF ; 
       byte >FE,>90,>87,>FF,>FF,>FF,>D1,>71,>81,>02,>13,>01,>81,>04,>30,>2A,>BF,>0C,>B0,>00,>2F,>FC,>FD,>09,>7F,>FE,>FF,>7F,>FF,>FD,>FF,>FF ; 
_5000:
       byte >FC,>00,>07,>FF,>FF,>FF,>D1,>0C,>60,>02,>E0,>FE,>71,>C2,>20,>55,>FE,>15,>C0,>00,>2F,>FF,>EA,>00,>3F,>FE,>7F,>3F,>FF,>FF,>FF,>FF ; 
_5020:
       byte >BA,>00,>0F,>FF,>FF,>F7,>C0,>01,>38,>07,>5A,>AA,>E5,>5F,>40,>D6,>82,>30,>A3,>E0,>02,>FF,>F0,>00,>7F,>FE,>7F,>3F,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>FB,>01,>0E,>00,>7D,>85,>55,>40,>9D,>D0,>BF,>FE,>08,>01,>05,>55,>C0,>5F,>E0,>00,>7F,>DE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>80,>47,>FE,>80,>A0,>15,>30,>08,>80,>0B,>FF,>C1,>E0,>03,>10,>04,>14,>03,>FF,>D7,>0B,>E2,>01,>3F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>20,>0F,>FD,>01,>90,>41,>21,>C2,>65,>40,>49,>0F,>04,>26,>88,>C0,>04,>0F,>FF,>FD,>59,>F0,>04,>7F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FF,>90,>07,>FE,>A6,>20,>00,>AA,>83,>40,>75,>5D,>FE,>86,>82,>11,>50,>02,>1F,>FF,>FF,>54,>F0,>00,>7F,>FE,>7F,>00,>AA,>AB,>7F,>BF ; 
_50c0:
       byte >FF,>10,>87,>FF,>60,>80,>02,>A6,>4A,>AA,>BF,>FF,>00,>80,>3A,>85,>80,>A0,>0F,>FF,>FF,>D5,>E0,>00,>3F,>FE,>7F,>3F,>FF,>FB,>FE,>FF ; 
       byte >00,>00,>00,>00,>E8,>00,>80,>0A,>2A,>AA,>8B,>AA,>A0,>07,>87,>80,>28,>06,>02,>FF,>FF,>D7,>E2,>01,>7F,>FE,>7F,>3F,>FF,>FB,>FE,>FF ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>B0,>02,>10,>02,>00,>44,>A9,>A1,>20,>AA,>F6,>2B,>E0,>00,>2F,>FF,>F4,>00,>7F,>FE,>FF,>7F,>DF,>FD,>FF,>FF ; 
       byte >FE,>00,>0F,>FF,>FF,>E8,>3E,>3F,>E6,>0E,>67,>FF,>DD,>1F,>B1,>AA,>C2,>28,>A2,>A0,>02,>FF,>F0,>00,>7F,>FC,>BF,>3F,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>E4,>06,>34,>80,>EA,>C0,>A9,>80,>8A,>A8,>3F,>F4,>10,>03,>01,>AA,>40,>5F,>E0,>00,>7F,>FE,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>80,>07,>FE,>81,>40,>1A,>28,>10,>C0,>15,>95,>60,>E0,>03,>20,>0A,>08,>03,>FA,>A9,>0B,>E0,>01,>7F,>FE,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>80,>0F,>FD,>01,>10,>41,>A0,>31,>35,>40,>55,>10,>24,>05,>89,>80,>08,>0F,>FE,>EA,>A8,>F0,>01,>7F,>FE,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >DE,>90,>07,>FE,>CC,>20,>01,>56,>43,>C0,>1A,>AB,>F8,>0F,>45,>16,>B8,>02,>3F,>FF,>FA,>AC,>F0,>00,>7F,>FE,>BF,>15,>55,>FD,>FF,>7F ; 
       byte >FF,>10,>1F,>FF,>50,>00,>03,>17,>25,>55,>95,>5D,>00,>60,>C5,>07,>00,>C0,>0F,>FF,>FF,>A9,>E0,>00,>7F,>FE,>BF,>5F,>DF,>FD,>FF,>FF ; 
       byte >00,>00,>00,>00,>E8,>01,>00,>00,>15,>54,>1D,>5E,>40,>01,>1F,>00,>40,>0C,>05,>FF,>FE,>A7,>E0,>01,>7F,>FE,>BF,>5F,>DF,>FD,>FF,>FF ; 
       byte >FC,>00,>07,>FF,>FF,>FF,>AF,>FC,>08,>02,>18,>6F,>99,>E1,>11,>4D,>E8,>26,>F0,>00,>2F,>FF,>E8,>00,>3F,>FE,>7F,>3F,>FF,>FF,>FF,>FF ; 
       byte >BA,>00,>0F,>FF,>FF,>D0,>07,>F5,>58,>1F,>7B,>AA,>D8,>8F,>4F,>55,>C4,>50,>A6,>70,>01,>7F,>F0,>00,>7F,>FD,>7F,>3F,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>47,>FF,>D8,>08,>E9,>41,>D5,>80,>07,>00,>85,>78,>3D,>F8,>60,>01,>01,>D5,>20,>5F,>E2,>00,>7F,>DE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>80,>47,>FE,>82,>80,>12,>50,>10,>80,>0A,>89,>B1,>E0,>00,>C0,>0C,>19,>17,>FF,>D5,>85,>E2,>01,>3F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>80,>0F,>FD,>02,>90,>01,>02,>88,>AF,>40,>49,>35,>44,>07,>11,>00,>10,>0F,>FF,>FF,>49,>F0,>01,>7F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FF,>80,>07,>FE,>A8,>20,>01,>AA,>4D,>C0,>0D,>56,>F8,>1E,>8B,>2C,>70,>04,>3F,>FF,>FF,>55,>F0,>00,>3F,>FE,>7F,>2A,>EB,>FB,>FE,>FF ; 
       byte >FF,>10,>BF,>FF,>A0,>00,>06,>AE,>FA,>AB,>FF,>AA,>80,>1F,>06,>0C,>01,>80,>0F,>FF,>FB,>D3,>E2,>00,>3F,>FE,>7F,>3F,>FF,>FB,>FE,>FF ; 
       byte >3F,>29,>F6,>A6,>F4,>02,>00,>00,>00,>A0,>20,>65,>A0,>00,>98,>00,>00,>08,>15,>FF,>FD,>D7,>E2,>01,>7F,>FE,>7F,>3F,>FF,>FB,>FE,>FF ; 
       byte >FE,>00,>07,>FF,>FF,>FF,>40,>03,>C0,>02,>2C,>54,>49,>F1,>10,>9A,>D0,>46,>F8,>00,>17,>FF,>E0,>00,>7F,>FE,>BF,>7F,>DF,>FD,>FF,>FF ; 
       byte >FE,>00,>0F,>FF,>FF,>D0,>3A,>80,>00,>3F,>FF,>FF,>70,>47,>AA,>BA,>C8,>A0,>A5,>B8,>01,>7F,>F0,>00,>7F,>FA,>FF,>3F,>FF,>FF,>FF,>FF ; 
       byte >EE,>00,>27,>FF,>A0,>11,>52,>83,>A2,>C0,>09,>FF,>82,>B8,>1E,>F0,>00,>03,>01,>AA,>90,>2F,>E4,>00,>7F,>FE,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>80,>07,>FD,>04,>00,>20,>A0,>10,>C0,>05,>55,>50,>E0,>B1,>00,>18,>09,>0F,>EE,>AA,>C5,>E0,>01,>7F,>FE,>BF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>80,>0F,>FD,>03,>10,>00,>82,>80,>9F,>C3,>C1,>CA,>88,>03,>21,>00,>00,>2F,>FF,>EA,>A8,>F0,>03,>7F,>FE,>BF,>FF,>FF,>7F,>FF,>FF ; 
       byte >FF,>90,>07,>FE,>CC,>20,>01,>16,>53,>E0,>02,>BC,>F0,>2D,>0D,>50,>20,>08,>3F,>FF,>FA,>AD,>F0,>00,>7F,>FE,>BF,>57,>DF,>FD,>FF,>7F ; 
       byte >FF,>10,>8F,>FF,>D0,>00,>04,>5D,>55,>5F,>55,>71,>40,>00,>04,>18,>03,>01,>0F,>FF,>FF,>AB,>E4,>00,>7F,>FE,>BF,>5F,>DF,>FD,>FF,>FF ; 
       byte >41,>A4,>48,>A9,>F4,>03,>00,>00,>01,>41,>C0,>46,>C0,>00,>00,>00,>00,>18,>0B,>FF,>FF,>AF,>E0,>01,>7F,>FE,>BF,>5F,>DF,>FD,>FF,>FF ; 
       byte >BA,>00,>0F,>FF,>FF,>FE,>80,>00,>21,>02,>56,>38,>33,>D8,>80,>35,>E0,>44,>FC,>00,>17,>FF,>F0,>00,>3F,>FE,>7F,>3F,>FF,>FF,>FF,>FF ; 
       byte >BE,>00,>0F,>FF,>FF,>D0,>D0,>3F,>C0,>7F,>FD,>92,>E7,>C7,>D5,>75,>81,>00,>6D,>5C,>01,>7F,>F0,>00,>3F,>FD,>7F,>3F,>FF,>FF,>FC,>00 ; 
       byte >FE,>00,>47,>FF,>40,>22,>83,>0F,>04,>60,>16,>02,>41,>70,>0F,>E0,>00,>06,>03,>F5,>58,>2F,>E2,>00,>7F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>20,>47,>FD,>08,>00,>30,>C0,>12,>A2,>02,>C9,>A9,>E0,>42,>00,>30,>19,>2F,>FF,>FD,>65,>E2,>04,>7F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>80,>0F,>FD,>A6,>10,>00,>1D,>80,>95,>FF,>C1,>85,>08,>00,>22,>00,>00,>2F,>FB,>FF,>5D,>F0,>01,>7F,>FF,>7F,>FF,>FE,>1F,>FE,>00 ; 
       byte >FF,>90,>07,>FE,>A8,>20,>01,>2B,>2A,>FF,>C1,>E0,>E0,>3A,>07,>40,>50,>18,>3F,>FF,>FF,>55,>F0,>00,>3F,>FE,>7F,>3F,>EF,>FB,>FE,>FF ; 
       byte >FF,>10,>8F,>FF,>E8,>00,>06,>0A,>AB,>EA,>AA,>BF,>80,>00,>08,>30,>04,>81,>03,>FF,>FF,>D3,>E2,>00,>7F,>FE,>7F,>3F,>FF,>FB,>FE,>FF ; 
       byte >39,>6E,>48,>E9,>FA,>02,>00,>00,>00,>0E,>00,>45,>A0,>00,>00,>00,>00,>18,>17,>FF,>FD,>5F,>E2,>04,>7F,>FE,>7F,>3F,>FF,>FB,>FE,>FF ; 
       byte >BA,>00,>1F,>FF,>FF,>FE,>83,>F8,>00,>01,>62,>00,>22,>EC,>80,>2A,>C0,>8A,>FC,>00,>0B,>FF,>F8,>00,>7F,>FE,>BF,>3F,>FF,>FD,>FF,>FF ; 
       byte >BE,>00,>07,>FF,>FF,>A3,>07,>EA,>E0,>7F,>29,>8A,>98,>27,>BA,>EB,>02,>00,>68,>AA,>00,>BF,>E0,>00,>1F,>FE,>FF,>7F,>FF,>F8,>03,>D5 ; 
       byte >FE,>80,>27,>FF,>40,>4D,>06,>36,>84,>40,>2A,>E3,>43,>F0,>0B,>A0,>00,>0A,>0B,>AA,>AC,>17,>E4,>01,>7F,>FE,>FF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>20,>0F,>FD,>10,>00,>20,>80,>0C,>C4,>85,>55,>5A,>E0,>84,>00,>20,>32,>0F,>FA,>AA,>A5,>F0,>04,>7F,>FE,>BF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>81,>0F,>FD,>55,>10,>00,>35,>81,>4A,>BA,>C1,>8A,>10,>3A,>44,>00,>00,>2F,>FF,>FA,>A4,>F0,>C1,>7F,>FE,>BF,>FF,>FE,>08,>01,>7E ; 
       byte >FF,>90,>07,>FE,>C8,>40,>02,>45,>35,>BF,>F0,>03,>40,>15,>00,>90,>A0,>10,>3F,>FF,>FE,>AD,>E0,>00,>5F,>FE,>BF,>5F,>DF,>FF,>FF,>FF ; 
       byte >FB,>54,>0F,>FF,>E8,>00,>0C,>55,>D7,>55,>55,>5F,>40,>03,>C0,>70,>05,>03,>0C,>FF,>FF,>AB,>E4,>01,>7F,>FE,>BF,>5F,>DF,>FD,>FF,>FF ; 
       byte >85,>21,>48,>A9,>FD,>01,>00,>00,>00,>48,>00,>86,>50,>00,>00,>00,>00,>10,>0F,>FF,>BA,>9F,>F0,>04,>7F,>FE,>BF,>5F,>DF,>FD,>FF,>FF ; 
       byte >FE,>00,>0F,>FF,>FF,>FD,>05,>5E,>00,>01,>4C,>00,>22,>F6,>00,>55,>A1,>0C,>FE,>80,>0B,>FF,>F0,>00,>3F,>FE,>7F,>3F,>FF,>FF,>FF,>FF ; 
       byte >BE,>00,>07,>FF,>FF,>5C,>38,>00,>01,>FF,>15,>52,>A7,>D3,>D7,>D7,>04,>00,>65,>55,>00,>BF,>E0,>00,>7F,>DE,>7F,>7F,>C3,>07,>FF,>FF ; 
       byte >FE,>80,>47,>FF,>40,>1A,>0C,>4D,>08,>65,>56,>A2,>41,>F0,>05,>40,>00,>06,>03,>FD,>54,>0B,>E2,>01,>3F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>20,>4F,>FD,>00,>90,>41,>40,>04,>A4,>82,>C9,>8F,>C0,>48,>00,>40,>14,>0F,>FF,>FD,>55,>F2,>04,>7F,>FE,>7F,>FF,>FF,>FF,>FF,>FF ; 
       byte >FA,>80,>0F,>FD,>A6,>20,>00,>6A,>81,>47,>55,>41,>88,>20,>E8,>84,>00,>01,>1F,>FF,>FF,>54,>F1,>53,>5B,>FE,>7F,>FF,>E0,>02,>AA,>BF ; 
       byte >FF,>90,>07,>FF,>68,>40,>02,>AA,>AA,>D7,>FC,>0C,>80,>0A,>A1,>21,>40,>20,>1F,>FF,>FF,>D5,>E0,>00,>3F,>FE,>7F,>3F,>EF,>FB,>FE,>FF ; 
       byte >FB,>44,>CF,>FF,>E8,>00,>38,>0A,>FA,>AA,>AA,>EE,>80,>04,>00,>E0,>0A,>06,>03,>FF,>FF,>D3,>E2,>01,>7F,>FE,>7F,>3F,>EF,>FB,>FE,>FF ; 
       byte >79,>20,>C7,>A6,>FE,>81,>00,>00,>00,>08,>00,>83,>AA,>00,>00,>00,>00,>28,>1F,>FF,>FD,>3F,>F2,>04,>7F,>FE,>7F,>3F,>EF,>FB,>FE,>FF ; 
       byte >FE,>00,>0F,>FF,>FF,>F9,>02,>83,>C0,>00,>25,>55,>26,>FB,>80,>AA,>C1,>18,>F7,>60,>05,>FF,>F0,>00,>7F,>FE,>BF,>3F,>FF,>FF,>FF,>FF ; 
       byte >FE,>00,>07,>FF,>FC,>E0,>C1,>80,>1F,>FF,>09,>4A,>8F,>F3,>FB,>AF,>04,>00,>5D,>AB,>80,>BF,>E0,>00,>7F,>FE,>FF,>00,>15,>BF,>FF,>FF ; 
       byte >EE,>C0,>27,>FE,>80,>74,>08,>9A,>08,>42,>A6,>1C,>40,>E0,>03,>80,>02,>0C,>03,>6A,>AA,>0B,>E4,>03,>7F,>FE,>BF,>FF,>FF,>FF,>FF,>FF ; 
       byte >FE,>20,>0F,>FD,>01,>10,>61,>9E,>02,>D5,>20,>55,>0F,>C0,>13,>04,>60,>24,>0F,>FF,>AA,>92,>F0,>04,>7F,>FE,>BF,>FF,>FF,>FF,>FF,>FF ; 
       byte >8E,>91,>07,>FD,>44,>20,>00,>56,>81,>C1,>AA,>A3,>01,>41,>51,>08,>E0,>01,>1F,>FF,>DA,>AD,>E0,>C0,>7B,>FE,>BF,>00,>05,>55,>D7,>7F ; 
       byte >FF,>90,>07,>FF,>48,>40,>02,>5D,>95,>7D,>77,>F5,>00,>07,>51,>42,>80,>50,>1F,>FF,>FE,>A9,>E0,>00,>7F,>FE,>BF,>5F,>DF,>FF,>FF,>FF ; 
       byte >E3,>5C,>EF,>FF,>E8,>00,>40,>15,>55,>55,>45,>FD,>40,>08,>03,>C0,>14,>04,>02,>FF,>FE,>AB,>E4,>03,>7F,>FE,>BF,>7F,>DF,>FF,>FF,>FF ; 
       byte >00,>00,>00,>00,>FF,>41,>00,>00,>00,>18,>01,>02,>D5,>50,>00,>00,>00,>10,>3F,>FF,>FA,>7F,>F0,>04,>7F,>FE,>BF,>7F,>DF,>FF,>FF,>FF ; }
_5800:
       byte >01,>38,>38,>38,>38,>38,>38,>18,>18,>18,>18,>18,>18,>18,>18,>18,>18,>38,>38,>38,>38,>38,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; {Attributes
       byte >01,>38,>38,>38,>38,>38,>38,>18,>18,>18,>18,>18,>18,>18,>18,>18,>18,>38,>38,>38,>38,>38,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>38,>38,>38,>38,>18,>18,>18,>18,>18,>18,>18,>18,>18,>18,>38,>38,>38,>38,>38,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
_5860:
       byte >01,>38,>38,>38,>38,>38,>38,>10,>18,>30,>30,>30,>30,>30,>30,>18,>18,>38,>38,>38,>38,>38,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
_5880:
       byte >01,>38,>38,>38,>38,>38,>38,>38,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>38,>38,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
_58a0:
       byte >01,>38,>38,>38,>38,>38,>38,>38,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>28,>28,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>38,>38,>38,>38,>38,>30,>30,>30,>30,>30,>30,>30,>30,>30,>28,>28,>28,>28,>28,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>28,>28,>28,>28,>10,>38,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>38,>28,>28,>28,>28,>28,>38,>38,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>38,>38,>38,>10,>38,>28,>38,>38,>38,>38,>38,>38,>28,>28,>28,>28,>28,>28,>30,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>38,>10,>10,>10,>10,>28,>28,>38,>38,>38,>38,>38,>02,>28,>28,>28,>28,>28,>30,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>38,>10,>10,>10,>10,>10,>28,>28,>38,>38,>38,>38,>02,>28,>28,>28,>28,>30,>30,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>38,>10,>10,>10,>10,>10,>10,>10,>38,>38,>38,>38,>02,>28,>28,>28,>28,>30,>30,>30,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>38,>38,>10,>10,>28,>28,>28,>28,>38,>38,>38,>38,>02,>02,>28,>28,>28,>30,>30,>30,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>38,>28,>28,>28,>28,>28,>28,>38,>38,>38,>10,>10,>10,>10,>20,>28,>28,>30,>30,>30,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>38,>28,>28,>28,>28,>28,>28,>38,>38,>38,>10,>10,>10,>10,>20,>28,>28,>28,>30,>30,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>38,>28,>28,>28,>28,>28,>28,>38,>38,>38,>10,>10,>10,>20,>20,>2C,>28,>28,>28,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
_5a20:
       byte >01,>38,>38,>38,>28,>28,>28,>28,>28,>2E,>30,>38,>30,>20,>10,>10,>20,>20,>20,>28,>28,>28,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>28,>28,>28,>28,>28,>28,>30,>30,>38,>30,>20,>20,>20,>20,>20,>20,>28,>28,>28,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>28,>28,>28,>28,>28,>28,>30,>30,>38,>30,>20,>20,>20,>20,>20,>20,>28,>28,>28,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>28,>28,>28,>28,>28,>28,>30,>30,>38,>30,>20,>20,>20,>20,>20,>20,>28,>28,>28,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>28,>28,>28,>28,>28,>28,>30,>30,>30,>26,>20,>20,>20,>20,>20,>20,>28,>28,>28,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >01,>38,>38,>28,>28,>28,>28,>28,>28,>28,>28,>28,>20,>20,>20,>20,>20,>20,>20,>28,>28,>28,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; 
       byte >02,>02,>02,>02,>28,>28,>28,>28,>28,>28,>28,>28,>20,>20,>20,>20,>20,>20,>20,>28,>28,>28,>38,>38,>01,>01,>01,>01,>01,>01,>01,>01 ; }

_5b00:
       byte >00                                                      ; @start=$6000

_5b01:
       ;                               ;                   

* Draw Text (alias).
* 
* This is an alias for a jump to #R$CBD2.
print_two_tone_text_alias:             ; 5b80
       b    @print_two_tone_text       ; JP $CBD2          ; 

* Displays The "Life" Images.
* 
* An alias for a jump to #R$CC5A.
draw_life_images_alias:                ; 5b83
       b    @life_images               ; JP $CC5A          ; 

* Lives Memory Address.
lives_addr:                            ; 5b86
       data lives                                                    ; The 16 bit memory location for the address that holds
                                                                     ; how many lives the player has remaining.

* Jump Controls.
* 
* Loads the 16 bit address stored at #R$CE12 into #REGhl and jumps to it.
jump_control_method:                   ; 5b88
       mov  @control_routine_alias,hl  ; LD HL,($CE12)     ; 
       b    *hl                        ; JP (HL)           ; TODO. 

* Scoring Preparation (alias).
* 
* Used by the routine at #R$C607.
scoring_prep_alias:                    ; 5b8c
       b    @scoring_prep              ; JP $CDDC          ; 

* Character Address (alias).
* 
* An alias for #R$D5B0 which returns the 16 bit memory location of a character
* from a given character index.
character_addr_alias:                  ; 5b8f
       b    @character_addr            ; JP $D5B0          ; 

* Draw Character (alias).
* 
* Used by the routines at #R$6380, #R$C661, #R$C720 and #R$FE00.
draw_character:                        ; 5b92
       b    @copy_routine              ; JP $D5E6          ; 

* Merge Shot (alias).
merge_shot_alias:                      ; 5b95
       b    @merge_shot                ; JP $D5FA          ; 

* Display The "Score" Images (alias).
* 
* Used by the routines at #R$C422 and #R$C607.
draw_score_alias:                      ; 5b98
       b    @draw_score                ; JP $CD90          ; 

* Routine at 5B9B
_5b9b:
       li   bc,>0705                   ; LD BC,$0705       ; {Stashes a text attribute at #R$CBD0.
       mov  bc,@two_tone_attributes_buffer ; LD ($CBD0),BC     ; #TABLE(default,centre)
                                                           ; { =h Value | =h Ink | =h Paper | =h Bright }
                                                           ; { $07 | $07 | $00 | $00 }
                                                           ; { $05 | $05 | $00 | $00 }
                                                           ; TABLE#}
_5ba2:
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@b255                    ; CP $FF            ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       cb   a,@bytes+48                ; CP $30            ; 
       jne  _5bac                      ; JR NZ,$5BAC       ; 
       movb @bytes+58,a                ; LD A,$3A          ; 
_5bac:
       .push hl                        ; PUSH HL           ; 
       .push de                        ; PUSH DE           ; 
       .call @print_tt_text_space_check ; CALL $CBFC        ; 
       .pop de                         ; POP DE            ; 
       .pop hl                         ; POP HL            ; 
       inc  hl                         ; INC HL            ; 
       ab   one,@e                     ; INC E             ; 
       movb @e,a                       ; LD A,E            ; 
       andi a,31*256                   ; AND $1F           ; 
       jne  _5ba2                      ; JR NZ,$5BA2       ; 
       movb @e,a                       ; LD A,E            ; 
       ab   @bytes+32,a                ; ADD A,$20         ; 
       movb a,@e                       ; LD E,A            ; 
       andi a,224*256                  ; AND $E0           ; 

* Dueller Number 1.
* 
* Populated initially by #R$C3EA.
dueller_1:                             ; 5bc0
       byte >00                                                      ; Dueller state ("0" is complete).
_5bc1:
       byte >00                                                      ; Dueller timer.
       byte >00
       byte >00                                                      ; Dueller position.
       data 0                                                        ; Screen position above dueller to display "EXTRA" or
                                                                     ; points.
       byte >00
       byte >00                                                      ; Bonus points (x100, e.g. "9" == "900").
       byte >00
       byte >00                                                      ; Current frame?
       byte >00                                                      ; Character index frame 1.
       byte >00                                                      ; Character index frame 2.
       byte >00                                                      ; Character index frame 3.
       byte >00
       byte >00
       byte >00
       byte >00

* Dueller Number 2.
* 
* Populated initially by #R$C3EA.
dueller_2:                             ; 5bd1
       byte >00                                                      ; Dueller state ("0" is complete).
       byte >00                                                      ; Dueller timer.
       byte >00
       byte >00                                                      ; Dueller position.
       data 0                                                        ; Screen position above dueller to display "EXTRA" or
                                                                     ; points.
       byte >00
       byte >00                                                      ; Bonus points (x100, e.g. "9" == "900").
       byte >00
       byte >00                                                      ; Current frame?
       byte >00                                                      ; Character index frame 1.
       byte >00                                                      ; Character index frame 2.
       byte >00                                                      ; Character index frame 3.
       byte >00
       byte >00
       byte >00
       byte >00

* Dueller Number 3.
* 
* Populated initially by #R$C3EA.
dueller_3:                             ; 5be2
       byte >00                                                      ; Dueller state ("0" is complete).
       byte >00                                                      ; Dueller timer.
       byte >00
       byte >00                                                      ; Dueller position.
       byte >00,>00                                                  ; Screen position above dueller to display "EXTRA" or
                                                                     ; points.
       byte >00
       byte >00                                                      ; Bonus points (x100, e.g. "9" == "900").
       byte >00
       byte >00                                                      ; Current frame?
       byte >00                                                      ; Character index frame 1.
       byte >00                                                      ; Character index frame 2.
       byte >00                                                      ; Character index frame 3.
       byte >00
       byte >00
       byte >00
       byte >00

* Data block at 5BF3
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>FF,>00,>00
       byte >00,>20,>05,>23,>20,>20,>23,>05
       byte >00,>00,>00,>00,>00,>01,>00,>06
       byte >00,>0B,>00,>01,>00,>01,>00,>06
       byte >00,>10,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>3C,>40,>00,>FF
       byte >CD,>00,>00,>5F,>00,>00,>00,>0A
       byte >00,>FF,>0A,>00,>0B,>07,>00,>00
       byte >C8,>5D,>C8,>5D,>B6,>5C,>BB,>5C
       byte >CB,>5C,>5B,>5D,>CA,>5C,>DC,>5D
       byte >DF,>5D,>5A,>5D,>36,>5E,>E1,>5D
       byte >E1,>5D,>E1,>5D,>2D,>92,>5C,>00
       byte >02,>00,>00,>00,>00,>00,>00,>66
       byte >CC,>B6,>1A,>00,>00,>47,>03,>00
       byte >58,>FF,>00,>00,>21,>00,>5B,>21
       byte >17,>80,>40,>E0,>50,>21,>14,>21
       byte >17,>03,>38,>00,>38,>00,>00,>00
       byte >00,>01,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00

* Control method
* 
* Whether to utilise keyboard or joystick for input.
controller:                            ; 5cb0
       byte >00
* #TABLE(default,centre)
* { =h Value | =h Method }
* { $00 | Kempston }
* { $01 | Keyboard }
* TABLE#

* Current Level
level:                                 ; 5cb1
       byte >00

       ;                               ;                   

* Data block at 5CF0
       byte >36,>34,>39,>34,>34,>0E,>00,>00
       byte >B0,>FD,>00,>3A,>F4,>66,>2C,>30
       byte >0E,>00,>00,>00,>00,>00,>3A,>F3
       byte >66,>3A,>F4,>36,>34,>39,>33,>36
       byte >0E,>00,>00,>A8,>FD,>00,>2C,>32
       byte >35,>31,>0E,>00,>00,>FB,>00,>00
       byte >3A,>EF,>22,>22,>AA,>3A,>E7,>30
       byte >0E,>00,>00,>00,>00,>00,>3A,>F2
       byte >30,>0E,>00,>00,>00,>00,>00,>3A
       byte >F4,>32,>33,>36,>31,>33,>0E,>00
       byte >00,>3D,>5C,>00,>2C,>30,>0E,>00
       byte >00,>00,>00,>00,>3A,>F9,>C0,>35
       byte >36,>30,>37,>30,>0E,>00,>00,>06
       byte >DB,>00,>0D,>00,>14,>3B,>00,>F8
       byte >22,>77,>65,>73,>74,>20,>62,>61
       byte >6E,>6B,>22,>CA,>31,>30,>0E,>00
       byte >00,>0A,>00,>00,>3A,>F8,>22,>57
       byte >45,>53,>54,>20,>42,>41,>4E,>4B
       byte >22,>AF,>32,>34,>35,>37,>36,>0E
       byte >00,>00,>00,>60,>00,>2C,>34,>30
       byte >39,>36,>30,>0E,>00,>00,>00,>A0
       byte >00,>0D,>03,>E8,>2A,>00,>EB,>66
       byte >3D,>32,>35,>37,>34,>36,>0E,>00
       byte >00,>92,>64,>00,>CC,>37,>30,>30
       byte >30,>30,>0E,>91,>08,>B8,>00,>00
       byte >3A,>F5,>66,>3B,>22,>5F,>5F,>22
       byte >3B,>C2,>BE,>66,>3A,>F3,>66,>0D
       byte >E6,>00,>00,>B1,>FD,>00,>00,>00
       byte >B0,>FD,>00,>00,>00,>01,>00,>00
       byte >0A,>00,>04,>80,>EF,>22,>22,>0D
       byte >80,>00,>00,>06,>DB,>00,>00,>00
       byte >00,>00,>00,>20,>00,>1B,>00,>40
       byte >00,>00,>03,>AA,>20,>20,>20,>20
       byte >20,>20,>20,>20,>20,>00,>1B,>00
       byte >80,>20,>80,>AA,>23,>5D,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>DB,>02,>4D,>00
       byte >A0,>3F,>CE,>0B,>6D,>40,>CE,>0B
       byte >B7,>2D,>E1,>5D,>DC,>5D,>06,>DB
       byte >2B,>2D,>65,>33,>02,>80,>ED,>10
       byte >0D,>00,>09,>00,>85,>1C,>10,>1C
       byte >52,>1B,>76,>1A,>DB,>82,>FD,>3E

* High Score Table
highscore_table:                       ; 6000
       text 'LUCKY LUCKE     '
       text 'BILLY THE KID   '
       text 'BUFALO BILL     '
       text 'CALAMITY JANE   '
       text 'JESSE JAMES     '
       text 'JOE DALTON      '
       text 'THE GOOD        '
       text 'JACK THE FAST   '
       text 'DAVY CROCKETT   '
       text 'PANCHO VILLA    '
       text 'ALVARO MATEOS H '
       text 'JACK DALTON     '
       text 'THOMY WILLIANS  '
       text 'LIBERTY B       '
       text 'THE UGLY        '
       text 'GRAL GRANT      '
       text 'JIMMY THE BLACK '
       text 'WILLIAM DALTON  '
       text 'THE BAD         '
       text 'GRAL CASTER     '
       text 'FRANK MATA      '
       text 'KIT WILLIANS    '
       text 'ALBERT THE HEAVY'
       text 'THE SCREW MAN   '
       text 'AVERELL DALTON  '
       text 'ANDREW THE BELL '
       text 'GRAL LEE        '
       text 'THE CHICKEN MAN '
       text 'THE BLONDE GIRL '
       text 'TOM SMITH       '
       ; DEFS $20                      ; DEFS $20          
       text '275430'
       text '265980'
       text '263230'
       text '258980'
       text '254070'
       text '255430'
       text '250990'
       text '245430'
       text '240510'
       text '241610'
       text '231940'
       text '226450'
       text '226520'
       text '223320'
       text '213230'
       text '204510'
       text '200640'
       text '195910'
       text '196900'
       text '193030'
       text '188320'
       text '176510'
       text '164760'
       text '157110'
       text '149070'
       text '139970'
       text '135150'
       text '129110'
       text '129730'
       text '125960'
       text '115240'
       text '115040'
       text '105590'
       text '102670'
       text '099200'
       text '096960'
       text '088620'
       text '084720'
       text '078000'
       text '069990'
       text '063130'
       text '058530'
       text '000500'

       ;                               ;                   

* Level Selection
* 
* Used by the routine at #R$FE00.
level_select:                          ; 6380
       li   de,print_two_tone_text_alias ; LD DE,$5B80       ; {#REGhl points to $5B80 on entry as #REGde is also $5B80
       li   bc,>0040                   ; LD BC,$0040       ; - this does nothing, it just creates a very short pause.
       .ldir                           ; LDIR              ; }
       li   hl,loading                 ; LD HL,$4000       ; {Writes $00 to all 6144 bytes of the screen bufffer
       li   de,loading+1               ; LD DE,$4001       ; (i.e. "blanks it").
       li   bc,>1aff                   ; LD BC,$1AFF       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .ldir                           ; LDIR              ; }
       li   hl,_58a0                   ; LD HL,$58A0       ; {Writes $28 to $58A0 in the attribute buffer $100 times.
       li   de,_58a0+1                 ; LD DE,$58A1       ; #TABLE(default,centre)
       li   bc,>0100                   ; LD BC,$0100       ; { =h Value | =h Ink | =h Paper | =h Bright }
       movb @bytes+40,*hl              ; LD (HL),$28       ; { $28 | $00 | $05 | $00 }
       .ldir                           ; LDIR              ; TABLE#}
       movb @bytes+32,*hl              ; LD (HL),$20       ; {...and $20 to the attribute buffer another $5F times (following on from the previous location).
       li   bc,>005f                   ; LD BC,$005F       ; #TABLE(default,centre)
       .ldir                           ; LDIR              ; { =h Value | =h Ink | =h Paper | =h Bright }
                                                           ; { $20 | $00 | $04 | $00 }
                                                           ; TABLE#}
* Prints the labels to the screen.
       li   hl,level_select_one        ; LD HL,$64AC       ; {Pass #R$64AC to #R$647C (index "1").
       movb one,a                      ; LD A,$01          ; 
       .call @level_select_print       ; CALL $647C        ; }
       li   hl,level_select_three      ; LD HL,$64B3       ; {Pass #R$64B3 to #R$647C (index "2").
       movb @bytes+2,a                 ; LD A,$02          ; 
       .call @level_select_print       ; CALL $647C        ; }
       li   hl,level_select_six        ; LD HL,$64BA       ; {Pass #R$64BA to #R$647C (index "3").
       movb @bytes+3,a                 ; LD A,$03          ; 
       .call @level_select_print       ; CALL $647C        ; }
       li   hl,level_select_copy       ; LD HL,$6492       ; {Points to #R$6492 and sends it to #R$5B80
       li   de,loading+35              ; LD DE,$4023       ; #TABLE(default,centre)
       li   bc,>0706                   ; LD BC,$0706       ; { =h Value | =h Ink | =h Paper | =h Bright }
       .call @print_two_tone_text_alias ; CALL $5B80        ; { $07 | $07 | $00 | $00 }
                                                           ; { $06 | $06 | $00 | $00 }
                                                           ; TABLE#}
* Prints the images to the screen.
       movb @bytes+37,a                ; LD A,$25          ; {Calls #R$643A with (#R$B450(draw | $25)) for index "1".
       movb one,b                      ; LD B,$01          ; 
       .call @level_select_graphics    ; CALL $643A        ; }
       movb @bytes+8,a                 ; LD A,$08          ; {Calls #R$643A with (#R$7880(draw | $08)) for index "2".
       movb @bytes+2,b                 ; LD B,$02          ; 
       .call @level_select_graphics    ; CALL $643A        ; }
       movb @bytes+25,a                ; LD A,$19          ; {Calls #R$643A with (#R$9B90(draw | $19)) for index "3".
       movb @bytes+3,b                 ; LD B,$03          ; 
       .call @level_select_graphics    ; CALL $643A        ; }
* Loop for getting user keyboard input.
       li   hl,level                   ; LD HL,$5CB1       ; Used later for setting the current level at #R$5CB1.
level_select_input:                    ; 63e5
       movb @bytes+247,a               ; LD A,$F7          ; {Read keys 1-2-3-4-5.
       ; IN A,($FE)                    ; IN A,($FE)        ; }
       ; RRA                           ; RRA               ; {If "1" is pressed, jump to #R$63F4.
       jnc  level_select_level_1       ; JR NC,$63F4       ; TODO: check code. }
       ; RRA                           ; RRA               ; {If "2" is pressed, jump to #R$6405.
       jnc  level_select_level_3       ; JR NC,$6405       ; TODO: check code. }
       ; RRA                           ; RRA               ; {If "3" is pressed, jump to #R$6416.
       jnc  level_select_level_6       ; JR NC,$6416       ; TODO: check code. }
       jmp  level_select_input         ; JR $63E5          ; Cycle back to #R$63E5.
* Act on level being selected.
level_select_level_1:                  ; 63f4
       movb one,*hl                    ; LD (HL),$01       ; {Store $01 at #R$5CB1 and call #R$6427 with
       movb @bytes+38,a                ; LD A,$26          ; (#R$B660(shot | $26)) for index "1".
       movb one,b                      ; LD B,$01          ; 
       .call @ls_animate_shot          ; CALL $6427        ; }
       movb one,a                      ; LD A,$01          ; {Jump to #R$6457 with #REGhl=#R$64AC and #REGa=$01.
       li   hl,level_select_one        ; LD HL,$64AC       ; 
       b    @ls_text_flash             ; JP $6457          ; }
level_select_level_3:                  ; 6405
       movb @bytes+2,*hl               ; LD (HL),$02       ; {Store $02 at #R$5CB1 and call #R$6427 with
       movb @bytes+9,a                 ; LD A,$09          ; (#R$7A90(shot | $09)) for index "2".
       movb @bytes+2,b                 ; LD B,$02          ; 
       .call @ls_animate_shot          ; CALL $6427        ; }
       movb @bytes+2,a                 ; LD A,$02          ; {Jump to #R$6457 with #REGhl=#R$64B3 and #REGa=$02.
       li   hl,level_select_three      ; LD HL,$64B3       ; 
       b    @ls_text_flash             ; JP $6457          ; }
level_select_level_6:                  ; 6416
       movb @bytes+3,*hl               ; LD (HL),$03       ; {Store $03 at #R$5CB1 and call #R$6427 with
       movb @bytes+26,a                ; LD A,$1A          ; (#R$9DA0(shot | $1A)) for index "3".
       movb @bytes+3,b                 ; LD B,$03          ; 
       .call @ls_animate_shot          ; CALL $6427        ; }
       movb @bytes+3,a                 ; LD A,$03          ; {Jump to #R$6457 with #REGhl=#R$64BA and #REGa=$03.
       li   hl,level_select_six        ; LD HL,$64BA       ; 
       b    @ls_text_flash             ; JP $6457          ; }
* Animates the selected bandit being shot.
ls_animate_shot:                       ; 6427
       .push bc                        ; PUSH BC           ; 
       .call @level_select_graphics    ; CALL $643A        ; Call #R$643A.
       .call @shot_sound_1_alias       ; CALL $6500        ; Call #R$6500.
       movb @bytes+16,b                ; LD B,$10          ; {Short interrupt driven halt loop.
ls_animate_shot_halt_loop:             ; 6430
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $6430        ; }
       jne  ls_animate_shot_halt_loop  ;                   
       .pop bc                         ; POP BC            ; 
       movb @bytes+39,a                ; LD A,$27          ; {Call #R$643A with (#R$B870(floor | $27)).
       .call @level_select_graphics    ; CALL $643A        ; }
       .ret                            ; RET               ; Return.
* Prints the images to the screen.
level_select_graphics:                 ; 643a
       .push bc                        ; PUSH BC           ; {Stash the current counter and convert the accumulator
       .call @character_addr_alias     ; CALL $5B8F        ; which is holding a character ID into their memory
                                                           ; location.}
       .ex_de_hl                       ; EX DE,HL          ; 
       .pop af                         ; POP AF            ; 
       li   hl,_4080+34                ; LD HL,$40A2       ; {Work out which screen position to use;
       sb   one,a                      ; DEC A             ; #TABLE(default,centre)
       jeq  ls_graphics_skip           ; JR Z,$644F        ; { =h #REGa | =h Screen Address }
       li   hl,_4080+45                ; LD HL,$40AD       ; { $01 | $40A2 }
       sb   one,a                      ; DEC A             ; { $02 | $40AD }
       jeq  ls_graphics_skip           ; JR Z,$644F        ; { $03 | $40B8 }
       li   hl,_4080+56                ; LD HL,$40B8       ; TABLE#}
ls_graphics_skip:                      ; 644f
       movb @bytes+88,b                ; LD B,$58          ; {Set the dimensions and call #R$5B92.
       movb @bytes+6,@c                ; LD C,$06          ; 
       .call @draw_character           ; CALL $5B92        ; }
       .ret                            ; RET               ; Return.
* Flashes the selected level text.
ls_text_flash:                         ; 6457
       movb @bytes+8,b                 ; LD B,$08          ; {This prints #R$64C1 and the passed level copy alternately with a delay caused by a HALT loop
       movb a,@c                       ; LD C,A            ; (which continues execution after an interrupt is fired), the sequence repeats $08 times.
ls_text_flash_loop:                    ; 645a
       .push hl                        ; PUSH HL           ; 
       .push bc                        ; PUSH BC           ; 
       movb @c,a                       ; LD A,C            ; 
       .call @level_select_print       ; CALL $647C        ; 
       movb @bytes+16,b                ; LD B,$10          ; 
ls_flash_halt_loop_1:                  ; 6462
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $6462        ; 
       jne  ls_flash_halt_loop_1       ;                   
       li   hl,level_select_whitespace ; LD HL,$64C1       ; 
       .pop bc                         ; POP BC            ; 
       .push bc                        ; PUSH BC           ; 
       movb @c,a                       ; LD A,C            ; 
       .call @level_select_print       ; CALL $647C        ; 
       movb @bytes+16,b                ; LD B,$10          ; 
ls_flash_halt_loop_2:                  ; 6470
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $6470        ; 
       jne  ls_flash_halt_loop_2       ;                   
       .pop bc                         ; POP BC            ; 
       .pop hl                         ; POP HL            ; 
       sb   one,b                      ; DJNZ $645A        ; 
       jne  ls_text_flash_loop         ;                   
       movb @c,a                       ; LD A,C            ; 
       .call @level_select_print       ; CALL $647C        ; }
       .ret                            ; RET               ; Return.
* Print level select copy to the screen.
level_select_print:                    ; 647c
       li   de,_5020+2                 ; LD DE,$5022       ; {First, work out which screen position to use;
       sb   one,a                      ; DEC A             ; #TABLE(default,centre)
       jeq  _648b                      ; JR Z,$648B        ; { =h #REGa | =h Screen Address }
       li   de,_5020+13                ; LD DE,$502D       ; { $01 | $5022 }
       sb   one,a                      ; DEC A             ; { $02 | $502D }
       jeq  _648b                      ; JR Z,$648B        ; { $03 | $5038 }
       li   de,_5020+24                ; LD DE,$5038       ; TABLE#}
_648b:
       li   bc,>0702                   ; LD BC,$0702       ; {Then call the print routine at #R$5B80.
       .call @print_two_tone_text_alias ; CALL $5B80        ; #TABLE(default,centre)
                                                           ; { =h Value | =h Ink | =h Paper | =h Bright }
                                                           ; { $07 | $07 | $00 | $00 }
                                                           ; { $02 | $02 | $00 | $00 }
                                                           ; TABLE#}
       .ret                            ; RET               ; Return.

* Level Selection Text
level_select_copy:                     ; 6492
       text 'CHOOSE THE LEVEL PREFERED',>ff                          ; "CHOOSE THE LEVEL PREFERED"
level_select_one:                      ; 64ac
       text ' ONE  ',>ff                                             ; "ONE"
level_select_three:                    ; 64b3
       text ' THREE',>ff                                             ; "THREE"
level_select_six:                      ; 64ba
       text '  SIX ',>ff                                             ; "SIX"
level_select_whitespace:               ; 64c1
       text '      ',>ff                                             ; "WHITESPACE"

* Unused
       byte >C3,>90,>EA

       ;                               ;                   

* Sounds.
* 
* Used by the routines at #R$6380, #R$C422 and #R$D307.
shot_sound_1_alias:                    ; 6500
       jmp  shot_sound_1               ; JR $6537          ; 
* This entry point is used by the routines at #R$C000 and #R$D307.
shot_sound_2_alias:                    ; 6502
       jmp  shot_sound_2               ; JR $653F          ; 
* This entry point is used by the routine at #R$D307.
shot_sound_3_alias:                    ; 6504
       jmp  shot_sound_3               ; JR $6547          ; 
       data 8224                                                     ; 
       data 8224                                                     ; 
       data 8224                                                     ; 
       data 8224                                                     ; 
       data 8224                                                     ; 
       data 8224                                                     ; 
       data 8224                                                     ; 
       data 8224                                                     ; 
       data 8224                                                     ; 
       data 8224                                                     ; 
       byte >20,>00,>00,>00,>00                                      ; 
* Sound data.
data_sound_1:                          ; 651f
       data >0A02                                                    ; 
       data _4060                                                    ; 
       data >0803                                                    ; 
       data 192                                                      ; 
data_sound_2:                          ; 6527
       data >0A02                                                    ; 
       data >2040                                                    ; 
       data >0803                                                    ; 
       data _80f0                                                    ; 
data_sound_3:                          ; 652f
       data >0A02                                                    ; 
       data _4040+16                                                 ; 
       data >0803                                                    ; 
       data _8000                                                    ; 
* Shot sound 1.
shot_sound_1:                          ; 6537
       li   ix,data_sound_1            ; LD IX,$651F       ; {Calls #R$654F using #R$651F.
       .call @play_shot_sound          ; CALL $654F        ; }
       .ret                            ; RET               ; Return.
* Shot sound 2.
shot_sound_2:                          ; 653f
       li   ix,data_sound_2            ; LD IX,$6527       ; {Calls #R$654F using #R$6527.
       .call @play_shot_sound          ; CALL $654F        ; }
       .ret                            ; RET               ; Return.
* Shot sound 3.
shot_sound_3:                          ; 6547
       li   ix,data_sound_3            ; LD IX,$652F       ; {Calls #R$654F using #R$652F.
       .call @play_shot_sound          ; CALL $654F        ; }
       .ret                            ; RET               ; Return.
play_shot_sound:                       ; 654f
       .call @shot_sound               ; CALL $655E        ; Call #R$655E.
       inc  ix                         ; INC IX            ; {Increase #REGix by 4.
       inc  ix                         ; INC IX            ; 
       inc  ix                         ; INC IX            ; 
       inc  ix                         ; INC IX            ; }
       .call @shot_sound               ; CALL $655E        ; Call #R$655E.
       .ret                            ; RET               ; Return.
shot_sound:                            ; 655e
       movb *ix,@e                     ; LD E,(IX+$00)     ; {jjj
       movb @bytes+24,a                ; LD A,$18          ; 
_6563:
       li   tmp0,24*256                ; XOR $18           ; 
       xor  tmp0,a                     ;                   
       ; OUT ($FE),A                   ; OUT ($FE),A       ; 
       movb @1(ix),@c                  ; LD C,(IX+$01)     ; 
_656a:
       li   tmp0,24*256                ; XOR $18           ; 
       xor  tmp0,a                     ;                   
       ; OUT ($FE),A                   ; OUT ($FE),A       ; }
       movb @2(ix),b                   ; LD B,(IX+$02)     ; 
shot_sound_loopback:                   ; 6571
       sb   one,b                      ; DJNZ $6571        ; 
       jne  shot_sound_loopback        ;                   
       sb   one,@c                     ; DEC C             ; 
       jne  _656a                      ; JR NZ,$656A       ; 
       movb @3(ix),d                   ; LD D,(IX+$03)     ; 
_6579:
       sb   one,d                      ; DEC D             ; 
       jne  _6579                      ; JR NZ,$6579       ; 
       sb   one,@e                     ; DEC E             ; 
       jne  _6563                      ; JR NZ,$6563       ; 
       .ret                            ; RET               ; Return.

* Unused
       byte >00,>00,>00,>00,>CD,>A2,>65,>06
       byte >03,>76,>10,>FD,>CD,>A2,>65,>06
       byte >05,>76,>10,>FD,>CD,>A2,>65,>76
       byte >76,>CD,>A2,>65,>76,>76,>CD,>A2
       byte >65,>C9,>DD,>21,>2F,>65,>CD,>4F
       byte >65,>C9,>C3,>90,>EA,>C9

* Unused
       byte >C3,>90,>EA

       ;                               ;                   

* Routine at 6600
* 
* Used by the routine at #R$D3EA.
_6600:
       movb @bytes+11,b                ; LD B,$0B          ; 
_6602:
       .push bc                        ; PUSH BC           ; 
       .call @_6610                    ; CALL $6610        ; 
       .call @_6647                    ; CALL $6647        ; 
       .call @_6647                    ; CALL $6647        ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $6602        ; 
       jne  _6602                      ;                   
       .ret                            ; RET               ; 
_6610:
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       li   hl,_4060+10                ; LD HL,$406A       ; 
       movb @bytes+13,b                ; LD B,$0D          ; 
       .call @_6664                    ; CALL $6664        ; 
       li   hl,_4060+30                ; LD HL,$407E       ; 
       li   de,_4060+31                ; LD DE,$407F       ; 
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       movb @bytes+13,b                ; LD B,$0D          ; 
       .call @_66a0                    ; CALL $66A0        ; 
       li   hl,_58a0+330               ; LD HL,$59EA       ; 
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       movb @bytes+13,b                ; LD B,$0D          ; 
       .call @_6681                    ; CALL $6681        ; 
       li   hl,_58a0+350               ; LD HL,$59FE       ; 
       li   de,_58a0+351               ; LD DE,$59FF       ; 
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       movb @bytes+13,b                ; LD B,$0D          ; 
       .call @_668e                    ; CALL $668E        ; 
       .ret                            ; RET               ; 
_6647:
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       li   hl,_5020+10                ; LD HL,$502A       ; 
       movb @bytes+4,b                 ; LD B,$04          ; 
       .call @_6664                    ; CALL $6664        ; 
       li   hl,_5020+30                ; LD HL,$503E       ; 
       li   de,_5020+31                ; LD DE,$503F       ; 
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       movb @bytes+4,b                 ; LD B,$04          ; 
       .call @_66a0                    ; CALL $66A0        ; 
       .ret                            ; RET               ; 
       .ret                            ; RET               ; 
_6664:
       movb @bytes+8,@c                ; LD C,$08          ; 
_6666:
       movb *hl,a                      ; LD A,(HL)         ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       inc  ix                         ; INC IX            ; 
       ab   one,h                      ; INC H             ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _6666                      ; JR NZ,$6666       ; 
       movb h,a                        ; LD A,H            ; 
       sb   @bytes+8,a                 ; SUB $08           ; 
       movb a,h                        ; LD H,A            ; 
       li   de,>0020                   ; LD DE,$0020       ; 
       a    de,hl                      ; ADD HL,DE         ; 
       movb h,a                        ; LD A,H            ; 
       andi a,7*256                    ; AND $07           ; 
       jeq  !                          ; CALL NZ,$66D2     ; 
       .call @_66d2                    ;                   
!
       sb   one,b                      ; DJNZ $6664        ; 
       jne  _6664                      ;                   
       .ret                            ; RET               ; 
_6681:
       movb *hl,a                      ; LD A,(HL)         ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       li   de,_ffe0                   ; LD DE,$FFE0       ; 
       a    de,hl                      ; ADD HL,DE         ; 
       inc  ix                         ; INC IX            ; 
       sb   one,b                      ; DJNZ $6681        ; 
       jne  _6681                      ;                   
       .ret                            ; RET               ; 
_668e:
       .push bc                        ; PUSH BC           ; 
       li   bc,>001f                   ; LD BC,$001F       ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; LDDR                          ; LDDR              ; 
       movb a,*de                      ; LD (DE),A         ; 
       inc  ix                         ; INC IX            ; 
       dec  hl                         ; DEC HL            ; 
       dec  de                         ; DEC DE            ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $668E        ; 
       jne  _668e                      ;                   
       .ret                            ; RET               ; 
_66a0:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       .call @_66ba                    ; CALL $66BA        ; 
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb h,a                        ; LD A,H            ; 
       andi a,7*256                    ; AND $07           ; 
       jeq  _66b3                      ; JR Z,$66B3        ; 
       movb h,a                        ; LD A,H            ; 
       ab   @bytes+7,a                 ; ADD A,$07         ; 
       movb a,h                        ; LD H,A            ; 
_66b3:
       .push hl                        ; PUSH HL           ; 
       .pop de                         ; POP DE            ; 
       inc  de                         ; INC DE            ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $66A0        ; 
       jne  _66a0                      ;                   
       .ret                            ; RET               ; 
_66ba:
       .push hl                        ; PUSH HL           ; 
       .push hl                        ; PUSH HL           ; 
       li   bc,>001f                   ; LD BC,$001F       ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       inc  ix                         ; INC IX            ; 
       ; LDDR                          ; LDDR              ; 
       movb a,*de                      ; LD (DE),A         ; 
       .pop de                         ; POP DE            ; 
       .pop hl                         ; POP HL            ; 
       ab   one,h                      ; INC H             ; 
       ab   one,d                      ; INC D             ; 
       inc  de                         ; INC DE            ; 
       movb h,a                        ; LD A,H            ; 
       andi a,7*256                    ; AND $07           ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       jmp  _66ba                      ; JR $66BA          ; 
_66d2:
       movb h,a                        ; LD A,H            ; 
       ab   @bytes+7,a                 ; ADD A,$07         ; 
       movb a,h                        ; LD H,A            ; 
       .ret                            ; RET               ; 
       b    @door_buffer               ; JP $EA90          ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
* This entry point is used by the routine at #R$D3EA.
_6700:
       movb @bytes+11,b                ; LD B,$0B          ; 
_6702:
       .push bc                        ; PUSH BC           ; 
       .call @_6710                    ; CALL $6710        ; 
       .call @_6747                    ; CALL $6747        ; 
       .call @_6747                    ; CALL $6747        ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $6702        ; 
       jne  _6702                      ;                   
       .ret                            ; RET               ; 
_6710:
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       li   hl,_4060+10                ; LD HL,$406A       ; 
       movb @bytes+13,b                ; LD B,$0D          ; 
       .call @_677e                    ; CALL $677E        ; 
       li   hl,_4060+1                 ; LD HL,$4061       ; 
       li   de,_4060                   ; LD DE,$4060       ; 
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       movb @bytes+13,b                ; LD B,$0D          ; 
       .call @_67ba                    ; CALL $67BA        ; 
       li   hl,_5860+10                ; LD HL,$586A       ; 
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       movb @bytes+13,b                ; LD B,$0D          ; 
       .call @_679b                    ; CALL $679B        ; 
       li   hl,_5860+1                 ; LD HL,$5861       ; 
       li   de,_5860                   ; LD DE,$5860       ; 
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       movb @bytes+13,b                ; LD B,$0D          ; 
       .call @_67a8                    ; CALL $67A8        ; 
       .ret                            ; RET               ; 
_6747:
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       li   hl,_5020+10                ; LD HL,$502A       ; 
       movb @bytes+4,b                 ; LD B,$04          ; 
       .call @_677e                    ; CALL $677E        ; 
       li   hl,_5020+1                 ; LD HL,$5021       ; 
       li   de,_5020                   ; LD DE,$5020       ; 
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       movb @bytes+4,b                 ; LD B,$04          ; 
       .call @_67ba                    ; CALL $67BA        ; 
       li   hl,_5a20                   ; LD HL,$5A20       ; 
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       movb @bytes+4,b                 ; LD B,$04          ; 
       .call @_679b                    ; CALL $679B        ; 
       li   hl,_5a20+1                 ; LD HL,$5A21       ; 
       li   de,_5a20                   ; LD DE,$5A20       ; 
       li   ix,_5b00                   ; LD IX,$5B00       ; 
       movb @bytes+4,b                 ; LD B,$04          ; 
       .call @_67a8                    ; CALL $67A8        ; 
       .ret                            ; RET               ; 
_677e:
       movb @bytes+8,@c                ; LD C,$08          ; 
_6780:
       movb *hl,a                      ; LD A,(HL)         ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       inc  ix                         ; INC IX            ; 
       ab   one,h                      ; INC H             ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _6780                      ; JR NZ,$6780       ; 
       movb h,a                        ; LD A,H            ; 
       sb   @bytes+8,a                 ; SUB $08           ; 
       movb a,h                        ; LD H,A            ; 
       li   de,>0020                   ; LD DE,$0020       ; 
       a    de,hl                      ; ADD HL,DE         ; 
       movb h,a                        ; LD A,H            ; 
       andi a,7*256                    ; AND $07           ; 
       jeq  !                          ; CALL NZ,$67EC     ; 
       .call @_67ec                    ;                   
!
       sb   one,b                      ; DJNZ $677E        ; 
       jne  _677e                      ;                   
       .ret                            ; RET               ; 
_679b:
       movb *hl,a                      ; LD A,(HL)         ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       li   de,>0020                   ; LD DE,$0020       ; 
       a    de,hl                      ; ADD HL,DE         ; 
       inc  ix                         ; INC IX            ; 
       sb   one,b                      ; DJNZ $679B        ; 
       jne  _679b                      ;                   
       .ret                            ; RET               ; 
_67a8:
       .push bc                        ; PUSH BC           ; 
       li   bc,>001f                   ; LD BC,$001F       ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       .ldir                           ; LDIR              ; 
       movb a,*de                      ; LD (DE),A         ; 
       inc  ix                         ; INC IX            ; 
       inc  hl                         ; INC HL            ; 
       inc  de                         ; INC DE            ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $67A8        ; 
       jne  _67a8                      ;                   
       .ret                            ; RET               ; 
_67ba:
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .call @_67d4                    ; CALL $67D4        ; 
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb h,a                        ; LD A,H            ; 
       andi a,7*256                    ; AND $07           ; 
       jeq  _67cd                      ; JR Z,$67CD        ; 
       movb h,a                        ; LD A,H            ; 
       ab   @bytes+7,a                 ; ADD A,$07         ; 
       movb a,h                        ; LD H,A            ; 
_67cd:
       .push hl                        ; PUSH HL           ; 
       .pop de                         ; POP DE            ; 
       inc  hl                         ; INC HL            ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $67BA        ; 
       jne  _67ba                      ;                   
       .ret                            ; RET               ; 
_67d4:
       .push de                        ; PUSH DE           ; 
       .push de                        ; PUSH DE           ; 
       li   bc,>001f                   ; LD BC,$001F       ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       inc  ix                         ; INC IX            ; 
       .ldir                           ; LDIR              ; 
       movb a,*de                      ; LD (DE),A         ; 
       .pop de                         ; POP DE            ; 
       .pop hl                         ; POP HL            ; 
       ab   one,h                      ; INC H             ; 
       ab   one,d                      ; INC D             ; 
       inc  hl                         ; INC HL            ; 
       movb h,a                        ; LD A,H            ; 
       andi a,7*256                    ; AND $07           ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       jmp  _67d4                      ; JR $67D4          ; 
_67ec:
       movb h,a                        ; LD A,H            ; 
       ab   @bytes+7,a                 ; ADD A,$07         ; 
       movb a,h                        ; LD H,A            ; 
       .ret                            ; RET               ; 
       b    @door_buffer               ; JP $EA90          ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 

* Jack Vicious (bandit)
* 
* JACK VISCIOUS - The sponging swindler of the WEST. Don't hesitate
* - shoot whenever you see his face.
* 
* .
* 
* Bandit 1 (draw | $00)
character_00:                          ; 6800
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-00*)
       byte >00,>00,>02,>00,>00,>00                                  ; 
       byte >00,>00,>0D,>80,>00,>00                                  ; 
       byte >00,>00,>10,>40,>00,>00                                  ; 
       byte >00,>01,>9F,>C6,>00,>00                                  ; 
       byte >00,>03,>7F,>F9,>00,>00                                  ; 
       byte >00,>02,>8F,>C1,>00,>00                                  ; 
       byte >00,>05,>00,>00,>80,>00                                  ; 
       byte >00,>06,>AA,>A0,>80,>00                                  ; 
       byte >00,>0D,>40,>18,>40,>00                                  ; 
       byte >00,>0A,>90,>44,>40,>00                                  ; 
       byte >00,>0D,>98,>C4,>40,>00                                  ; 
       byte >00,>06,>85,>44,>80,>00                                  ; 
       byte >00,>03,>0F,>84,>00,>00                                  ; 
       byte >00,>00,>DF,>E8,>00,>00                                  ; 
       byte >00,>00,>FF,>F0,>00,>00                                  ; 
       byte >00,>00,>7F,>E0,>00,>00                                  ; 
       byte >00,>00,>7F,>F0,>00,>00                                  ; 
       byte >00,>01,>BF,>EC,>00,>00                                  ; 
       byte >00,>07,>DF,>DF,>80,>00                                  ; 
       byte >00,>1B,>EF,>DF,>E0,>00                                  ; 
       byte >00,>23,>FF,>9F,>98,>00                                  ; 
       byte >00,>63,>E7,>9F,>C4,>00                                  ; 
       byte >00,>73,>E7,>8F,>C4,>00                                  ; 
       byte >00,>73,>E3,>0F,>CC,>00                                  ; 
       byte >00,>57,>E2,>0F,>CC,>00                                  ; 
       byte >00,>47,>E1,>1F,>D4,>00                                  ; 
       byte >00,>27,>E0,>9F,>C4,>00                                  ; 
       byte >00,>47,>E1,>1F,>C8,>00                                  ; 
       byte >00,>47,>E1,>1F,>C8,>00                                  ; 
       byte >00,>47,>E0,>9F,>C4,>00                                  ; 
       byte >00,>47,>E1,>1F,>C4,>00                                  ; 
       byte >00,>43,>E1,>0F,>C8,>00                                  ; 
       byte >01,>E1,>C0,>8F,>C8,>00                                  ; 
       byte >02,>D1,>81,>03,>D0,>80                                  ; 
       byte >05,>29,>01,>01,>15,>40                                  ; 
       byte >05,>E9,>01,>02,>AB,>40                                  ; 
       byte >04,>C9,>00,>82,>9A,>80                                  ; 
       byte >04,>CB,>10,>82,>8D,>C0                                  ; 
       byte >02,>12,>8B,>42,>8F,>E0                                  ; 
       byte >05,>ED,>FF,>26,>91,>E0                                  ; 
       byte >0E,>DD,>44,>3A,>7F,>E0                                  ; 
       byte >0E,>CD,>FF,>FE,>11,>E0                                  ; 
       byte >0F,>F8,>0F,>FE,>1F,>E0                                  ; 
       byte >0F,>08,>7E,>FE,>19,>C0                                  ; 
       byte >0F,>F9,>F8,>FC,>0F,>A0                                  ; 
       byte >07,>1F,>F3,>FC,>12,>10                                  ; 
       byte >03,>EF,>FF,>FC,>27,>90                                  ; 
       byte >00,>47,>8F,>FC,>26,>10                                  ; 
       byte >00,>76,>7E,>7E,>27,>90                                  ; 
       byte >00,>75,>FC,>7E,>12,>A0                                  ; 
       byte >00,>77,>F0,>3E,>0B,>C0                                  ; 
       byte >00,>37,>F0,>3E,>04,>80                                  ; 
       byte >00,>37,>F0,>1E,>03,>00                                  ; 
       byte >00,>27,>E0,>1F,>00,>00                                  ; 
       byte >00,>37,>E0,>1F,>00,>00                                  ; 
       byte >00,>37,>C0,>1F,>00,>00                                  ; 
       byte >00,>17,>C0,>1F,>00,>00                                  ; 
       byte >00,>1F,>C0,>1F,>00,>00                                  ; 
       byte >00,>1F,>C0,>0F,>80,>00                                  ; 
       byte >00,>1F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>C0,>1D,>80,>00                                  ; 
       byte >00,>0E,>C0,>0A,>40,>00                                  ; 
       byte >00,>0D,>00,>1F,>C0,>00                                  ; 
       byte >00,>1B,>C0,>1F,>80,>00                                  ; 
       byte >00,>1F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>C0,>1F,>80,>00                                  ; 
       byte >00,>07,>C0,>0F,>80,>00                                  ; 
       byte >00,>07,>C0,>0F,>80,>00                                  ; 
       byte >00,>07,>C0,>0F,>80,>00                                  ; 
       byte >00,>07,>C0,>0F,>80,>00                                  ; 
       byte >00,>07,>C0,>0F,>80,>00                                  ; 
       byte >00,>07,>C0,>0F,>80,>00                                  ; 
       byte >00,>07,>C0,>0F,>80,>00                                  ; 
       byte >00,>07,>F5,>5F,>80,>00                                  ; 
       byte >00,>07,>EA,>BF,>80,>00                                  ; 
       byte >00,>3F,>F5,>5F,>C0,>00                                  ; 
       byte >01,>FF,>FA,>BF,>E0,>00                                  ; 
       byte >07,>FF,>F5,>5F,>F8,>00                                  ; 
       byte >07,>FE,>6A,>A9,>FE,>00                                  ; 
       byte >05,>55,>55,>55,>7E,>00                                  ; 
       byte >0A,>AA,>AA,>AA,>AA,>00                                  ; 
       byte >05,>55,>55,>55,>54,>00                                  ; 
       byte >00,>2A,>AA,>AA,>A0,>00                                  ; 
       byte >00,>05,>55,>54,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 1 (shot | $01)
character_01:                          ; 6a10
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-01*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>7F,>C0,>00                                  ; 
       byte >00,>00,>01,>80,>30,>00                                  ; 
       byte >00,>00,>02,>1E,>08,>00                                  ; 
       byte >00,>00,>04,>21,>04,>00                                  ; 
       byte >00,>00,>04,>22,>84,>00                                  ; 
       byte >00,>00,>04,>2C,>84,>00                                  ; 
       byte >00,>2E,>04,>21,>84,>00                                  ; 
       byte >00,>57,>BC,>3F,>84,>00                                  ; 
       byte >00,>8F,>C4,>1F,>07,>80                                  ; 
       byte >01,>17,>E2,>00,>08,>E0                                  ; 
       byte >02,>B1,>ED,>00,>10,>F8                                  ; 
       byte >05,>61,>CE,>C0,>7C,>84                                  ; 
       byte >0A,>20,>8F,>BF,>FF,>02                                  ; 
       byte >14,>41,>0F,>EC,>FC,>82                                  ; 
       byte >28,>42,>0F,>E4,>FC,>60                                  ; 
       byte >50,>84,>0F,>E4,>FC,>11                                  ; 
       byte >A0,>84,>0F,>E4,>FC,>01                                  ; 
       byte >40,>84,>0F,>E8,>FC,>09                                  ; 
       byte >01,>08,>0F,>E4,>FC,>C5                                  ; 
       byte >01,>88,>0F,>E0,>FC,>35                                  ; 
       byte >1C,>48,>0F,>E4,>FC,>0B                                  ; 
       byte >03,>48,>03,>E4,>F8,>77                                  ; 
       byte >7D,>56,>03,>C2,>78,>0D                                  ; 
       byte >02,>B8,>02,>04,>08,>00                                  ; 
       byte >01,>F8,>02,>04,>08,>00                                  ; 
       byte >00,>B0,>61,>08,>08,>00                                  ; 
       byte >00,>00,>F3,>BF,>B8,>00                                  ; 
       byte >00,>01,>FB,>B1,>B8,>00                                  ; 
       byte >00,>1B,>F7,>FF,>FF,>80                                  ; 
       byte >00,>3B,>B0,>7B,>FF,>CE                                  ; 
       byte >07,>FF,>FF,>FB,>FF,>F1                                  ; 
       byte >08,>19,>FF,>FB,>FF,>E1                                  ; 
       byte >08,>09,>FF,>80,>07,>C1                                  ; 
       byte >08,>07,>F8,>00,>07,>83                                  ; 
       byte >06,>03,>F8,>00,>0F,>C4                                  ; 
       byte >01,>86,>F8,>00,>0F,>68                                  ; 
       byte >00,>6D,>38,>00,>0C,>B0                                  ; 
       byte >00,>02,>10,>00,>08,>40                                  ; 
       byte >00,>01,>20,>00,>08,>80                                  ; 
       byte >00,>00,>C0,>00,>05,>00                                  ; 
       byte >00,>00,>00,>00,>02,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>05,>55,>00,>00                                  ; 
       byte >00,>00,>AA,>AA,>A0,>00                                  ; 
       byte >00,>01,>55,>55,>50,>00                                  ; 
       byte >00,>02,>AA,>AA,>A8,>00                                  ; 
       byte >00,>01,>55,>55,>54,>00                                  ; 
       byte >00,>02,>AA,>AA,>A8,>00                                  ; 
       byte >00,>05,>55,>55,>54,>00                                  ; 
       byte >00,>02,>AA,>AA,>A8,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 1 (floor | $02)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-02*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>38,>00,>00                                  ; 
       byte >00,>00,>01,>C7,>00,>00                                  ; 
       byte >00,>00,>02,>10,>80,>00                                  ; 
       byte >00,>00,>04,>EE,>40,>00                                  ; 
       byte >00,>00,>07,>FF,>E0,>00                                  ; 
       byte >00,>00,>0F,>13,>E0,>00                                  ; 
       byte >00,>00,>07,>D7,>E0,>07                                  ; 
       byte >00,>00,>0F,>FF,>E0,>19                                  ; 
       byte >07,>E0,>1C,>CC,>30,>31                                  ; 
       byte >08,>18,>7F,>FF,>FC,>61                                  ; 
       byte >08,>0F,>FF,>EF,>FF,>C1                                  ; 
       byte >08,>07,>FF,>EF,>FF,>81                                  ; 
       byte >06,>03,>FF,>FF,>FE,>C2                                  ; 
       byte >01,>86,>FF,>55,>FD,>6C                                  ; 
       byte >0A,>ED,>3E,>AA,>B8,>B8                                  ; 
       byte >15,>52,>15,>55,>78,>50                                  ; 
       byte >0A,>AC,>2A,>AA,>B8,>A8                                  ; 
       byte >01,>56,>75,>55,>5D,>50                                  ; 
       byte >00,>AB,>EA,>02,>AE,>A0                                  ; 
       byte >00,>15,>50,>00,>55,>40                                  ; 
       byte >00,>0A,>A0,>00,>0A,>80                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* #UDGARRAY*character-00,100;character-01;character-02;(jack-frames)

* Green Jordan (customer)
* 
* GREEN JORDAN - The farmer. The untiring worker who goes to the
* bank to put in his savings. You should not shoot
* him.
* 
* .
* 
* Green Jordan (depositing | $03)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-03*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>01,>F0,>00,>00                                  ; 
       byte >00,>00,>03,>F8,>00,>00                                  ; 
       byte >00,>00,>03,>F8,>00,>00                                  ; 
       byte >00,>00,>03,>F8,>00,>00                                  ; 
       byte >00,>00,>73,>F8,>E0,>00                                  ; 
       byte >00,>00,>FE,>0F,>F0,>00                                  ; 
       byte >00,>01,>FF,>FF,>F8,>00                                  ; 
       byte >00,>01,>FA,>0F,>F8,>00                                  ; 
       byte >00,>00,>F0,>01,>F0,>00                                  ; 
       byte >00,>00,>60,>90,>E0,>00                                  ; 
       byte >00,>00,>30,>01,>80,>00                                  ; 
       byte >00,>00,>28,>62,>80,>00                                  ; 
       byte >00,>00,>34,>05,>00,>00                                  ; 
       byte >00,>00,>1A,>AB,>00,>00                                  ; 
       byte >00,>00,>14,>06,>00,>00                                  ; 
       byte >00,>00,>0A,>AA,>00,>00                                  ; 
       byte >00,>00,>35,>55,>80,>00                                  ; 
       byte >00,>00,>CE,>AC,>60,>00                                  ; 
       byte >00,>03,>0D,>FC,>18,>00                                  ; 
       byte >00,>04,>0C,>4C,>04,>00                                  ; 
       byte >00,>08,>0C,>4C,>02,>00                                  ; 
       byte >00,>08,>0C,>4C,>02,>00                                  ; 
       byte >00,>08,>0C,>8C,>42,>00                                  ; 
       byte >00,>10,>2C,>8C,>41,>00                                  ; 
       byte >00,>10,>2C,>8C,>21,>00                                  ; 
       byte >00,>10,>EC,>4C,>21,>00                                  ; 
       byte >00,>11,>4C,>46,>21,>00                                  ; 
       byte >00,>FA,>58,>46,>21,>E0                                  ; 
       byte >00,>76,>98,>87,>F2,>40                                  ; 
       byte >00,>0B,>18,>47,>95,>80                                  ; 
       byte >00,>3F,>98,>86,>6E,>00                                  ; 
       byte >00,>30,>18,>86,>3E,>00                                  ; 
       byte >00,>3F,>98,>46,>03,>00                                  ; 
       byte >00,>30,>38,>86,>7F,>00                                  ; 
       byte >00,>3F,>38,>86,>03,>00                                  ; 
       byte >00,>20,>B8,>46,>FF,>00                                  ; 
       byte >00,>44,>78,>46,>82,>00                                  ; 
       byte >00,>5F,>30,>86,>BD,>00                                  ; 
       byte >00,>54,>30,>4D,>01,>00                                  ; 
       byte >00,>5F,>30,>FE,>7C,>80                                  ; 
       byte >00,>45,>7F,>FE,>50,>80                                  ; 
       byte >00,>5F,>7F,>FE,>7C,>80                                  ; 
       byte >00,>24,>FF,>FE,>15,>00                                  ; 
       byte >00,>1F,>FB,>FF,>7D,>00                                  ; 
       byte >00,>01,>FB,>FF,>82,>00                                  ; 
       byte >00,>01,>FD,>FF,>FC,>00                                  ; 
       byte >00,>01,>F5,>FF,>C0,>00                                  ; 
       byte >00,>01,>F5,>FF,>C0,>00                                  ; 
       byte >00,>00,>FA,>FF,>C0,>00                                  ; 
       byte >00,>00,>EE,>FF,>80,>00                                  ; 
       byte >00,>00,>F3,>7F,>80,>00                                  ; 
       byte >00,>00,>FF,>7F,>80,>00                                  ; 
       byte >00,>00,>FF,>7F,>80,>00                                  ; 
       byte >00,>00,>FF,>7F,>80,>00                                  ; 
       byte >00,>00,>FF,>7F,>00,>00                                  ; 
       byte >00,>00,>FF,>7F,>00,>00                                  ; 
       byte >00,>00,>6F,>6F,>00,>00                                  ; 
       byte >00,>00,>1E,>73,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3C,>38,>00,>00                                  ; 
       byte >00,>00,>76,>3F,>00,>00                                  ; 
       byte >00,>00,>5E,>2F,>00,>00                                  ; 
       byte >00,>00,>5E,>2F,>00,>00                                  ; 
       byte >00,>00,>5E,>2F,>00,>00                                  ; 
       byte >00,>00,>5E,>2F,>00,>00                                  ; 
       byte >00,>00,>5E,>2F,>00,>00                                  ; 
       byte >00,>00,>5E,>2F,>00,>00                                  ; 
       byte >00,>00,>5E,>2F,>00,>00                                  ; 
       byte >00,>00,>DF,>6F,>00,>00                                  ; 
       byte >00,>0B,>7E,>AC,>80,>00                                  ; 
       byte >00,>1C,>FF,>64,>D0,>00                                  ; 
       byte >00,>B1,>FE,>B8,>68,>00                                  ; 
       byte >01,>43,>DD,>78,>34,>00                                  ; 
       byte >02,>BF,>AA,>AC,>2A,>00                                  ; 
       byte >01,>55,>55,>57,>F4,>00                                  ; 
       byte >00,>AA,>AA,>AA,>A8,>00                                  ; 
       byte >00,>05,>55,>55,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Green Jordan (hands up | $04)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-04*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>80,>00,>00,>00,>00                                  ; 
       byte >02,>80,>00,>00,>00,>08                                  ; 
       byte >02,>A0,>01,>F0,>00,>08                                  ; 
       byte >02,>A0,>03,>F8,>00,>2A                                  ; 
       byte >0A,>A0,>03,>F8,>00,>2B                                  ; 
       byte >0B,>A0,>03,>F8,>00,>2B                                  ; 
       byte >08,>04,>73,>F8,>E0,>3B                                  ; 
       byte >08,>C8,>FE,>0F,>F1,>83                                  ; 
       byte >07,>91,>FF,>FF,>F8,>4E                                  ; 
       byte >03,>01,>FA,>0F,>F8,>1C                                  ; 
       byte >01,>00,>F0,>01,>F0,>18                                  ; 
       byte >03,>C0,>60,>90,>E0,>18                                  ; 
       byte >04,>20,>30,>01,>80,>3E                                  ; 
       byte >04,>20,>28,>62,>80,>42                                  ; 
       byte >04,>20,>34,>05,>00,>42                                  ; 
       byte >04,>20,>1A,>AB,>00,>42                                  ; 
       byte >04,>20,>15,>F6,>00,>42                                  ; 
       byte >04,>20,>0B,>1A,>00,>42                                  ; 
       byte >02,>10,>75,>57,>00,>44                                  ; 
       byte >02,>11,>8E,>AC,>C0,>84                                  ; 
       byte >02,>1E,>0D,>FC,>30,>84                                  ; 
       byte >02,>10,>0C,>4C,>0F,>84                                  ; 
       byte >01,>10,>0C,>4C,>00,>84                                  ; 
       byte >01,>00,>8C,>4C,>00,>88                                  ; 
       byte >01,>03,>0C,>8C,>10,>08                                  ; 
       byte >00,>9D,>0C,>8C,>2C,>08                                  ; 
       byte >00,>61,>0C,>8C,>23,>F0                                  ; 
       byte >00,>01,>0C,>4C,>20,>00                                  ; 
       byte >00,>01,>0C,>46,>20,>00                                  ; 
       byte >02,>01,>18,>46,>41,>00                                  ; 
       byte >07,>09,>18,>86,>41,>9E                                  ; 
       byte >09,>19,>18,>46,>40,>A4                                  ; 
       byte >02,>B0,>98,>86,>40,>48                                  ; 
       byte >00,>50,>98,>86,>40,>50                                  ; 
       byte >01,>60,>98,>46,>80,>A8                                  ; 
       byte >02,>A0,>B8,>86,>82,>44                                  ; 
       byte >05,>10,>B8,>86,>82,>04                                  ; 
       byte >07,>D0,>B8,>46,>84,>F2                                  ; 
       byte >0B,>08,>B8,>46,>84,>C2                                  ; 
       byte >0B,>C8,>B0,>86,>84,>F2                                  ; 
       byte >09,>48,>B0,>4E,>82,>54                                  ; 
       byte >07,>D0,>B0,>FF,>C2,>F4                                  ; 
       byte >04,>11,>FF,>FF,>C1,>08                                  ; 
       byte >03,>61,>FE,>9F,>80,>F0                                  ; 
       byte >00,>81,>FF,>FF,>80,>00                                  ; 
       byte >00,>00,>FF,>FF,>C0,>00                                  ; 
       byte >00,>00,>FB,>FF,>C0,>00                                  ; 
       byte >00,>00,>FD,>FF,>C0,>00                                  ; 
       byte >00,>00,>F5,>FF,>C0,>00                                  ; 
       byte >00,>00,>F5,>FF,>C0,>00                                  ; 
       byte >00,>00,>FA,>FF,>C0,>00                                  ; 
       byte >00,>00,>EE,>FF,>80,>00                                  ; 
       byte >00,>00,>F3,>7F,>80,>00                                  ; 
       byte >00,>00,>FF,>7F,>80,>00                                  ; 
       byte >00,>00,>FF,>7F,>80,>00                                  ; 
       byte >00,>00,>FF,>7F,>80,>00                                  ; 
       byte >00,>00,>FF,>7F,>00,>00                                  ; 
       byte >00,>00,>FF,>7F,>00,>00                                  ; 
       byte >00,>00,>6F,>6F,>00,>00                                  ; 
       byte >00,>00,>1E,>73,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3C,>38,>00,>00                                  ; 
       byte >00,>00,>76,>3F,>00,>00                                  ; 
       byte >00,>00,>5E,>2F,>00,>00                                  ; 
       byte >00,>00,>5E,>2F,>00,>00                                  ; 
       byte >00,>00,>5E,>2F,>00,>00                                  ; 
       byte >00,>00,>5E,>2F,>00,>00                                  ; 
       byte >00,>00,>5E,>2F,>00,>00                                  ; 
       byte >00,>00,>5E,>2F,>00,>00                                  ; 
       byte >00,>00,>5E,>AF,>00,>00                                  ; 
       byte >00,>00,>DF,>6F,>40,>00                                  ; 
       byte >00,>0B,>7E,>AC,>A0,>00                                  ; 
       byte >00,>1C,>FF,>64,>D4,>00                                  ; 
       byte >00,>B1,>FE,>B8,>6A,>00                                  ; 
       byte >01,>43,>DD,>78,>35,>00                                  ; 
       byte >02,>BF,>AA,>AC,>2A,>80                                  ; 
       byte >05,>55,>55,>57,>F5,>00                                  ; 
       byte >02,>AA,>AA,>AA,>AA,>00                                  ; 
       byte >01,>55,>55,>55,>50,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Green Jordan (uncover | $05)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-05*)
       byte >00,>00,>02,>00,>00,>00                                  ; 
       byte >00,>00,>0D,>80,>00,>00                                  ; 
       byte >00,>02,>10,>40,>00,>00                                  ; 
       byte >00,>0A,>9F,>C6,>00,>00                                  ; 
       byte >0F,>0A,>FF,>F9,>00,>00                                  ; 
       byte >1F,>8A,>8F,>C1,>00,>00                                  ; 
       byte >1F,>8A,>80,>00,>80,>00                                  ; 
       byte >3F,>6A,>AA,>A0,>80,>00                                  ; 
       byte >7F,>B0,>C0,>18,>40,>00                                  ; 
       byte >FF,>D9,>90,>44,>40,>00                                  ; 
       byte >FF,>F9,>98,>C4,>40,>00                                  ; 
       byte >E0,>FE,>85,>44,>80,>00                                  ; 
       byte >40,>7E,>0F,>84,>00,>00                                  ; 
       byte >40,>FF,>DF,>E8,>00,>00                                  ; 
       byte >48,>10,>FF,>F0,>00,>00                                  ; 
       byte >40,>90,>FF,>E0,>00,>00                                  ; 
       byte >40,>70,>FF,>F0,>00,>00                                  ; 
       byte >60,>B0,>BF,>EC,>00,>00                                  ; 
       byte >41,>60,>DF,>DF,>80,>00                                  ; 
       byte >5E,>A0,>EF,>DF,>E0,>00                                  ; 
       byte >43,>40,>FF,>9F,>98,>00                                  ; 
       byte >29,>A0,>C7,>9F,>C4,>00                                  ; 
       byte >15,>61,>87,>8F,>C4,>00                                  ; 
       byte >1F,>E1,>03,>0F,>CC,>00                                  ; 
       byte >19,>C1,>82,>0F,>CC,>00                                  ; 
       byte >19,>C1,>81,>1F,>D4,>00                                  ; 
       byte >19,>81,>80,>9F,>C4,>00                                  ; 
       byte >19,>91,>81,>1F,>C8,>00                                  ; 
       byte >19,>93,>81,>1F,>C8,>00                                  ; 
       byte >19,>8C,>40,>9F,>C4,>00                                  ; 
       byte >19,>80,>41,>1F,>C4,>00                                  ; 
       byte >19,>80,>41,>0F,>C8,>00                                  ; 
       byte >39,>80,>40,>8F,>C8,>00                                  ; 
       byte >31,>80,>41,>03,>D0,>80                                  ; 
       byte >B0,>60,>41,>01,>15,>40                                  ; 
       byte >B2,>60,>41,>02,>AB,>40                                  ; 
       byte >B4,>60,>40,>82,>9A,>80                                  ; 
       byte >B2,>60,>40,>82,>8D,>C0                                  ; 
       byte >72,>60,>43,>42,>8F,>E0                                  ; 
       byte >72,>60,>47,>26,>91,>E0                                  ; 
       byte >74,>60,>84,>3A,>7F,>E0                                  ; 
       byte >72,>60,>8F,>FE,>11,>E0                                  ; 
       byte >72,>60,>8F,>FE,>1F,>E0                                  ; 
       byte >31,>60,>FE,>FE,>19,>C0                                  ; 
       byte >33,>FF,>F8,>FC,>0F,>A0                                  ; 
       byte >3F,>FF,>F3,>FC,>12,>10                                  ; 
       byte >7F,>FF,>FF,>FC,>27,>90                                  ; 
       byte >7F,>FF,>8F,>FC,>26,>10                                  ; 
       byte >7B,>FF,>FE,>7E,>27,>90                                  ; 
       byte >7B,>FF,>FC,>7E,>12,>A0                                  ; 
       byte >3B,>FF,>F0,>3E,>0B,>C0                                  ; 
       byte >3F,>FF,>F0,>3E,>04,>80                                  ; 
       byte >3F,>FF,>F0,>1E,>03,>00                                  ; 
       byte >1F,>FF,>E0,>1F,>00,>00                                  ; 
       byte >0F,>FD,>E0,>1F,>00,>00                                  ; 
       byte >1F,>FB,>C0,>1F,>00,>00                                  ; 
       byte >3F,>F7,>C0,>1F,>00,>00                                  ; 
       byte >7F,>E7,>C0,>1F,>00,>00                                  ; 
       byte >6F,>F7,>C0,>0F,>80,>00                                  ; 
       byte >9F,>37,>C0,>0F,>80,>00                                  ; 
       byte >FE,>FB,>C0,>0F,>80,>00                                  ; 
       byte >FF,>FB,>C0,>1D,>80,>00                                  ; 
       byte >F9,>FD,>C0,>0A,>40,>00                                  ; 
       byte >F1,>FC,>00,>1F,>C0,>00                                  ; 
       byte >E0,>FD,>C0,>1F,>80,>00                                  ; 
       byte >C0,>7F,>C0,>0F,>80,>00                                  ; 
       byte >80,>77,>C0,>1F,>80,>00                                  ; 
       byte >00,>3F,>C0,>0F,>80,>00                                  ; 
       byte >00,>3B,>C0,>0F,>80,>00                                  ; 
       byte >00,>1D,>C0,>0F,>80,>00                                  ; 
       byte >00,>1D,>C0,>0F,>80,>00                                  ; 
       byte >00,>1E,>C0,>0F,>80,>00                                  ; 
       byte >00,>0E,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>07,>F5,>5F,>80,>00                                  ; 
       byte >00,>07,>EA,>BF,>80,>00                                  ; 
       byte >00,>07,>F5,>5F,>C0,>00                                  ; 
       byte >00,>05,>FA,>BF,>E0,>00                                  ; 
       byte >00,>05,>F5,>5F,>F8,>00                                  ; 
       byte >A0,>79,>6A,>A9,>FE,>00                                  ; 
       byte >54,>C3,>55,>55,>7E,>00                                  ; 
       byte >AA,>86,>AA,>AA,>AA,>00                                  ; 
       byte >55,>FD,>55,>55,>50,>00                                  ; 
       byte >AA,>AA,>AA,>AA,>00,>00                                  ; 
       byte >55,>55,>55,>50,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Green Jordan (shot | $06)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-06*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>02                                  ; 
       byte >00,>00,>00,>00,>02,>85                                  ; 
       byte >00,>00,>00,>00,>01,>C6                                  ; 
       byte >00,>00,>00,>00,>00,>C4                                  ; 
       byte >00,>00,>00,>00,>00,>64                                  ; 
       byte >00,>00,>20,>08,>00,>3C                                  ; 
       byte >00,>10,>18,>08,>01,>24                                  ; 
       byte >1C,>30,>04,>00,>06,>4A                                  ; 
       byte >0A,>50,>00,>00,>00,>BD                                  ; 
       byte >05,>A1,>C0,>7F,>C0,>A9                                  ; 
       byte >03,>42,>E1,>FF,>F1,>3E                                  ; 
       byte >07,>83,>03,>FF,>F9,>0A                                  ; 
       byte >08,>80,>07,>FF,>FC,>BF                                  ; 
       byte >14,>40,>07,>FE,>FC,>89                                  ; 
       byte >2F,>40,>07,>FC,>FC,>42                                  ; 
       byte >2C,>40,>07,>E1,>FC,>3C                                  ; 
       byte >4F,>21,>FF,>FF,>FC,>00                                  ; 
       byte >45,>26,>07,>FF,>FF,>80                                  ; 
       byte >4F,>28,>03,>FF,>F8,>E0                                  ; 
       byte >24,>50,>01,>FF,>F0,>F8                                  ; 
       byte >20,>50,>7C,>FF,>E4,>84                                  ; 
       byte >1F,>A0,>8A,>3F,>C3,>02                                  ; 
       byte >00,>41,>08,>6C,>C2,>82                                  ; 
       byte >00,>42,>08,>64,>C2,>60                                  ; 
       byte >00,>84,>08,>64,>C2,>11                                  ; 
       byte >00,>84,>C8,>64,>C2,>01                                  ; 
       byte >00,>85,>90,>68,>C2,>09                                  ; 
       byte >01,>09,>10,>64,>C1,>C5                                  ; 
       byte >01,>88,>10,>60,>C1,>35                                  ; 
       byte >1C,>48,>10,>64,>C1,>0B                                  ; 
       byte >03,>48,>10,>E4,>E1,>77                                  ; 
       byte >7D,>56,>10,>C2,>61,>0D                                  ; 
       byte >02,>B8,>08,>C4,>61,>00                                  ; 
       byte >01,>F8,>08,>C4,>62,>00                                  ; 
       byte >00,>B0,>68,>C8,>62,>00                                  ; 
       byte >00,>00,>FB,>BF,>E2,>00                                  ; 
       byte >00,>01,>FB,>FF,>FA,>00                                  ; 
       byte >00,>1B,>F7,>FF,>FF,>80                                  ; 
       byte >00,>3B,>B3,>FB,>FF,>CE                                  ; 
       byte >07,>FF,>FF,>FB,>FF,>F1                                  ; 
       byte >08,>19,>FF,>9B,>FF,>E1                                  ; 
       byte >08,>09,>FF,>FA,>FF,>C1                                  ; 
       byte >08,>07,>FF,>F7,>FF,>83                                  ; 
       byte >06,>03,>F9,>FF,>CF,>C4                                  ; 
       byte >01,>86,>F8,>00,>0F,>68                                  ; 
       byte >00,>6D,>38,>00,>0C,>B0                                  ; 
       byte >00,>02,>10,>00,>08,>40                                  ; 
       byte >00,>01,>20,>00,>08,>80                                  ; 
       byte >00,>00,>C0,>00,>05,>00                                  ; 
       byte >00,>00,>00,>00,>02,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>15,>55,>00,>00                                  ; 
       byte >00,>00,>AA,>AA,>A0,>00                                  ; 
       byte >00,>01,>55,>55,>50,>00                                  ; 
       byte >00,>02,>AA,>AA,>A8,>00                                  ; 
       byte >00,>05,>55,>55,>54,>00                                  ; 
       byte >00,>02,>AA,>AA,>A8,>00                                  ; 
       byte >00,>01,>55,>55,>50,>00                                  ; 
       byte >00,>00,>AA,>AA,>A0,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Green Jordan (floor | $07)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-07*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>7C,>00,>00                                  ; 
       byte >00,>00,>01,>FF,>00,>00                                  ; 
       byte >00,>00,>03,>FF,>80,>00                                  ; 
       byte >00,>00,>07,>FF,>C0,>00                                  ; 
       byte >00,>00,>0F,>EF,>E0,>00                                  ; 
       byte >00,>00,>0F,>FF,>F0,>00                                  ; 
       byte >00,>00,>1F,>13,>F0,>00                                  ; 
       byte >00,>00,>3F,>D7,>F8,>07                                  ; 
       byte >00,>00,>7F,>FF,>FC,>19                                  ; 
       byte >07,>E0,>BC,>CC,>32,>31                                  ; 
       byte >08,>19,>3F,>FF,>FD,>61                                  ; 
       byte >08,>0E,>FF,>EF,>FF,>C1                                  ; 
       byte >08,>07,>FF,>EF,>FF,>81                                  ; 
       byte >06,>03,>FF,>FF,>FE,>C2                                  ; 
       byte >01,>86,>FF,>FF,>FD,>6C                                  ; 
       byte >02,>ED,>3E,>AA,>B8,>B8                                  ; 
       byte >01,>52,>15,>55,>78,>50                                  ; 
       byte >00,>AC,>2A,>AA,>B8,>A8                                  ; 
       byte >00,>56,>75,>55,>5D,>50                                  ; 
       byte >00,>2B,>EA,>02,>AE,>A0                                  ; 
       byte >00,>15,>50,>00,>55,>40                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* #UDGARRAY*character-03,50;character-04;character-05;character-00(green-jordan-uncover-frames)
* #UDGARRAY*character-03,50;character-04;character-06;character-07(green-jordan-shot-frames)

* Bandit 2
* 
* ALFRED DALTON - A real baddie. Shoot as soon as he takes out his
* gun!
* 
* .
* 
* Bandit 2 (draw | $08)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-08*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>03,>F0,>00,>00                                  ; 
       byte >00,>00,>07,>F8,>00,>00                                  ; 
       byte >00,>00,>0F,>FC,>00,>00                                  ; 
       byte >00,>00,>10,>FC,>00,>00                                  ; 
       byte >00,>00,>7F,>FE,>00,>00                                  ; 
       byte >00,>03,>FF,>FF,>80,>00                                  ; 
       byte >00,>0F,>FF,>FF,>E0,>00                                  ; 
       byte >00,>1F,>FF,>FF,>F0,>00                                  ; 
       byte >00,>1F,>F8,>1F,>F8,>00                                  ; 
       byte >00,>1F,>E0,>03,>F8,>00                                  ; 
       byte >00,>1F,>C0,>03,>F8,>00                                  ; 
       byte >00,>0F,>C4,>13,>F8,>00                                  ; 
       byte >00,>0F,>C2,>23,>F0,>00                                  ; 
       byte >00,>07,>C3,>C3,>E0,>00                                  ; 
       byte >00,>03,>CF,>E7,>C0,>00                                  ; 
       byte >00,>01,>FF,>FF,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>7F,>FF,>80,>00                                  ; 
       byte >00,>07,>FF,>FF,>F0,>00                                  ; 
       byte >00,>19,>F7,>EF,>8C,>00                                  ; 
       byte >00,>61,>F3,>CF,>C2,>00                                  ; 
       byte >01,>83,>F8,>8F,>C2,>00                                  ; 
       byte >02,>03,>F8,>8F,>C1,>00                                  ; 
       byte >02,>07,>F8,>9F,>E0,>80                                  ; 
       byte >04,>0F,>F8,>DF,>F0,>40                                  ; 
       byte >04,>1F,>F8,>5F,>F0,>40                                  ; 
       byte >04,>1F,>F8,>5F,>F8,>20                                  ; 
       byte >08,>2F,>F8,>9F,>F4,>20                                  ; 
       byte >08,>2F,>F8,>9F,>F4,>20                                  ; 
       byte >08,>2F,>F8,>9F,>F4,>10                                  ; 
       byte >10,>4F,>F8,>8F,>F4,>10                                  ; 
       byte >10,>4F,>F8,>8F,>F2,>10                                  ; 
       byte >10,>4F,>F1,>0F,>F2,>10                                  ; 
       byte >10,>5F,>F1,>8F,>FA,>30                                  ; 
       byte >16,>5F,>F0,>CF,>FA,>48                                  ; 
       byte >19,>5F,>F0,>41,>FA,>CC                                  ; 
       byte >19,>9E,>00,>40,>19,>7A                                  ; 
       byte >2F,>50,>00,>40,>11,>32                                  ; 
       byte >26,>50,>00,>80,>10,>86                                  ; 
       byte >20,>48,>00,>80,>10,>7E                                  ; 
       byte >30,>88,>01,>80,>10,>FE                                  ; 
       byte >3F,>08,>01,>80,>20,>0E                                  ; 
       byte >3F,>84,>03,>C0,>20,>FC                                  ; 
       byte >30,>07,>0F,>F3,>F0,>0C                                  ; 
       byte >3F,>04,>F8,>3E,>38,>78                                  ; 
       byte >30,>0F,>47,>C9,>DC,>00                                  ; 
       byte >1F,>1F,>FE,>FF,>FC,>00                                  ; 
       byte >00,>3F,>FE,>FF,>FC,>00                                  ; 
       byte >00,>3F,>FE,>FF,>FC,>00                                  ; 
       byte >00,>3B,>FE,>FF,>B8,>00                                  ; 
       byte >00,>3B,>FE,>FF,>B8,>00                                  ; 
       byte >00,>03,>FE,>FF,>80,>00                                  ; 
       byte >00,>33,>FF,>FF,>98,>00                                  ; 
       byte >00,>33,>FE,>3F,>98,>00                                  ; 
       byte >00,>30,>FE,>3F,>98,>00                                  ; 
       byte >00,>30,>FC,>1F,>88,>00                                  ; 
       byte >00,>20,>FC,>1F,>00,>00                                  ; 
       byte >00,>00,>F8,>0E,>00,>00                                  ; 
       byte >00,>00,>78,>0E,>00,>00                                  ; 
       byte >00,>00,>7C,>3E,>00,>00                                  ; 
       byte >00,>00,>F8,>1F,>00,>00                                  ; 
       byte >00,>00,>F8,>1F,>00,>00                                  ; 
       byte >00,>00,>F8,>17,>00,>00                                  ; 
       byte >00,>00,>D8,>17,>00,>00                                  ; 
       byte >00,>00,>D8,>17,>00,>00                                  ; 
       byte >00,>00,>D8,>17,>00,>00                                  ; 
       byte >00,>00,>D8,>17,>00,>00                                  ; 
       byte >00,>00,>D8,>17,>00,>00                                  ; 
       byte >00,>00,>D8,>17,>00,>00                                  ; 
       byte >00,>03,>DA,>B7,>80,>00                                  ; 
       byte >00,>0E,>FD,>76,>40,>00                                  ; 
       byte >00,>31,>FE,>BE,>20,>00                                  ; 
       byte >00,>C3,>FD,>7F,>18,>00                                  ; 
       byte >00,>FF,>BA,>BB,>84,>00                                  ; 
       byte >01,>55,>55,>55,>FC,>00                                  ; 
       byte >02,>AA,>AA,>AA,>AA,>00                                  ; 
       byte >01,>55,>55,>55,>54,>00                                  ; 
       byte >00,>AA,>AA,>AA,>A8,>00                                  ; 
       byte >00,>01,>55,>50,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 2 (shot | $09)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-09*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >38,>00,>00,>00,>00,>00                                  ; 
       byte >28,>00,>00,>00,>00,>00                                  ; 
       byte >28,>00,>00,>00,>00,>00                                  ; 
       byte >28,>00,>00,>00,>04,>00                                  ; 
       byte >28,>00,>10,>00,>0A,>00                                  ; 
       byte >28,>00,>08,>00,>05,>00                                  ; 
       byte >28,>00,>08,>00,>02,>80                                  ; 
       byte >28,>00,>04,>00,>01,>40                                  ; 
       byte >28,>01,>C0,>00,>00,>A0                                  ; 
       byte >28,>02,>E0,>00,>00,>50                                  ; 
       byte >28,>03,>10,>3F,>80,>38                                  ; 
       byte >3E,>00,>00,>FF,>F0,>34                                  ; 
       byte >2A,>10,>03,>FF,>F8,>4A                                  ; 
       byte >2A,>70,>07,>FF,>FC,>25                                  ; 
       byte >2B,>F0,>0F,>FF,>FE,>13                                  ; 
       byte >23,>F0,>0F,>FE,>FE,>3A                                  ; 
       byte >1F,>F0,>0F,>FE,>FE,>FC                                  ; 
       byte >00,>F0,>0F,>F1,>FE,>FC                                  ; 
       byte >00,>00,>3F,>FF,>FE,>78                                  ; 
       byte >00,>0F,>CF,>FF,>FF,>B8                                  ; 
       byte >00,>10,>07,>FF,>FC,>F0                                  ; 
       byte >00,>10,>1F,>FF,>F8,>B8                                  ; 
       byte >00,>20,>5F,>FF,>FC,>04                                  ; 
       byte >00,>20,>BF,>FF,>FF,>02                                  ; 
       byte >00,>41,>3F,>CC,>7F,>82                                  ; 
       byte >00,>42,>3F,>C4,>FF,>E0                                  ; 
       byte >00,>82,>3F,>C4,>FF,>A1                                  ; 
       byte >00,>84,>3F,>C4,>FF,>A1                                  ; 
       byte >00,>84,>3F,>C8,>FF,>A9                                  ; 
       byte >01,>04,>3F,>C4,>7F,>C5                                  ; 
       byte >01,>84,>3F,>80,>7F,>B5                                  ; 
       byte >1C,>44,>3F,>84,>7F,>8B                                  ; 
       byte >03,>4C,>30,>04,>02,>F7                                  ; 
       byte >7D,>56,>30,>02,>02,>0D                                  ; 
       byte >02,>B8,>10,>04,>01,>00                                  ; 
       byte >01,>F8,>10,>0C,>01,>00                                  ; 
       byte >00,>B0,>68,>1E,>01,>00                                  ; 
       byte >00,>00,>FF,>BF,>B9,>00                                  ; 
       byte >00,>01,>FF,>B1,>BF,>80                                  ; 
       byte >00,>1B,>F7,>FF,>FF,>C0                                  ; 
       byte >00,>3B,>B0,>7B,>FF,>CE                                  ; 
       byte >07,>FF,>FF,>FB,>FF,>D1                                  ; 
       byte >08,>19,>FF,>FB,>FF,>E1                                  ; 
       byte >08,>09,>FF,>FF,>E7,>C1                                  ; 
       byte >08,>07,>F9,>FF,>07,>83                                  ; 
       byte >06,>03,>F8,>00,>0F,>C4                                  ; 
       byte >01,>86,>F8,>00,>0F,>68                                  ; 
       byte >00,>6D,>38,>00,>0C,>B0                                  ; 
       byte >00,>02,>10,>00,>08,>40                                  ; 
       byte >00,>01,>20,>00,>08,>80                                  ; 
       byte >00,>00,>C0,>00,>05,>00                                  ; 
       byte >00,>00,>00,>00,>02,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>15,>50,>00,>00                                  ; 
       byte >00,>00,>AA,>AA,>00,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>02,>AA,>AA,>A0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>02,>AA,>AA,>A0,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>00,>AA,>AA,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* #UDGARRAY*character-08,100;character-09;character-07;(bandit-2-frames)

* Daisy (customer)
* 
* DAISY - The beautiful daughter of the City Jeweller.
* Always loaded with money - never hurt her.
* 
* .
* 
* Normal 2 (depositing | $0A)
       byte >00,>06,>0C,>38,>1C,>00                                  ; {#CHARACTERS(character-0A*)
       byte >00,>09,>92,>44,>62,>00                                  ; 
       byte >00,>08,>69,>44,>81,>00                                  ; 
       byte >00,>06,>18,>C5,>11,>00                                  ; 
       byte >00,>01,>8C,>66,>2D,>00                                  ; 
       byte >00,>00,>64,>6A,>46,>00                                  ; 
       byte >00,>00,>1A,>2A,>80,>00                                  ; 
       byte >00,>00,>05,>34,>80,>00                                  ; 
       byte >00,>00,>0F,>FE,>00,>00                                  ; 
       byte >00,>00,>1F,>FF,>00,>00                                  ; 
       byte >00,>00,>1F,>FF,>80,>00                                  ; 
       byte >00,>00,>1F,>0F,>80,>00                                  ; 
       byte >00,>00,>3D,>FF,>C0,>00                                  ; 
       byte >00,>00,>3C,>01,>C0,>00                                  ; 
       byte >00,>00,>38,>89,>C0,>00                                  ; 
       byte >00,>00,>38,>01,>C0,>00                                  ; 
       byte >00,>00,>38,>01,>80,>00                                  ; 
       byte >00,>00,>18,>21,>80,>00                                  ; 
       byte >00,>00,>04,>02,>00,>00                                  ; 
       byte >00,>00,>02,>62,>00,>00                                  ; 
       byte >00,>00,>02,>04,>00,>00                                  ; 
       byte >00,>00,>01,>08,>00,>00                                  ; 
       byte >00,>00,>06,>E6,>00,>00                                  ; 
       byte >00,>00,>18,>01,>80,>00                                  ; 
       byte >00,>00,>60,>00,>E0,>00                                  ; 
       byte >00,>00,>90,>00,>90,>00                                  ; 
       byte >00,>00,>90,>01,>08,>00                                  ; 
       byte >00,>00,>88,>A2,>08,>00                                  ; 
       byte >00,>01,>04,>42,>04,>00                                  ; 
       byte >00,>01,>04,>44,>02,>00                                  ; 
       byte >00,>01,>02,>48,>02,>00                                  ; 
       byte >00,>01,>01,>F0,>41,>00                                  ; 
       byte >00,>71,>00,>40,>41,>00                                  ; 
       byte >00,>29,>D0,>40,>A1,>00                                  ; 
       byte >00,>2A,>50,>40,>90,>80                                  ; 
       byte >00,>36,>4A,>A9,>10,>80                                  ; 
       byte >00,>0F,>88,>02,>11,>00                                  ; 
       byte >00,>10,>84,>02,>11,>00                                  ; 
       byte >00,>1F,>C4,>02,>22,>00                                  ; 
       byte >00,>11,>44,>62,>44,>00                                  ; 
       byte >00,>1F,>45,>FA,>98,>00                                  ; 
       byte >00,>09,>A7,>FE,>24,>00                                  ; 
       byte >00,>0F,>27,>FD,>14,>00                                  ; 
       byte >00,>10,>8E,>FB,>0A,>00                                  ; 
       byte >00,>24,>57,>0E,>84,>00                                  ; 
       byte >00,>2F,>7B,>FD,>F8,>00                                  ; 
       byte >00,>4C,>3B,>FD,>A0,>00                                  ; 
       byte >00,>4F,>3D,>FB,>A0,>00                                  ; 
       byte >00,>25,>5E,>FB,>B0,>00                                  ; 
       byte >00,>2F,>6E,>F7,>78,>00                                  ; 
       byte >00,>14,>EF,>0F,>78,>00                                  ; 
       byte >00,>0F,>F7,>FF,>74,>00                                  ; 
       byte >00,>00,>FB,>FE,>F4,>00                                  ; 
       byte >00,>03,>7B,>FE,>EE,>00                                  ; 
       byte >00,>03,>7D,>FD,>EE,>00                                  ; 
       byte >00,>07,>7E,>FB,>EF,>00                                  ; 
       byte >00,>07,>BE,>FB,>DF,>00                                  ; 
       byte >00,>0F,>BF,>77,>DF,>00                                  ; 
       byte >00,>0F,>BF,>8F,>DF,>80                                  ; 
       byte >00,>0F,>DF,>FF,>DF,>80                                  ; 
       byte >00,>0F,>DF,>FF,>BF,>80                                  ; 
       byte >00,>13,>EF,>FF,>BF,>40                                  ; 
       byte >00,>13,>EF,>FF,>7F,>40                                  ; 
       byte >00,>11,>F7,>FE,>FE,>40                                  ; 
       byte >00,>11,>F7,>FE,>FE,>40                                  ; 
       byte >00,>11,>FB,>FD,>FE,>20                                  ; 
       byte >00,>12,>FD,>FB,>FE,>20                                  ; 
       byte >00,>22,>FD,>FB,>FD,>20                                  ; 
       byte >00,>22,>FE,>07,>FD,>20                                  ; 
       byte >00,>24,>7F,>FF,>FD,>10                                  ; 
       byte >00,>24,>7F,>FF,>FC,>90                                  ; 
       byte >00,>24,>7F,>FF,>F4,>50                                  ; 
       byte >00,>24,>5F,>FF,>E4,>50                                  ; 
       byte >00,>44,>5F,>FF,>E2,>50                                  ; 
       byte >00,>44,>8F,>FF,>C2,>50                                  ; 
       byte >00,>48,>8F,>FF,>C2,>20                                  ; 
       byte >00,>48,>8F,>FF,>C2,>20                                  ; 
       byte >00,>48,>87,>FF,>C2,>20                                  ; 
       byte >00,>48,>87,>FF,>41,>20                                  ; 
       byte >00,>90,>87,>FF,>41,>20                                  ; 
       byte >00,>90,>C5,>E0,>41,>70                                  ; 
       byte >01,>77,>F4,>1F,>C7,>D0                                  ; 
       byte >02,>BA,>ED,>EF,>FE,>A0                                  ; 
       byte >01,>55,>57,>55,>55,>50                                  ; 
       byte >00,>AA,>AA,>AA,>AA,>A0                                  ; 
       byte >00,>15,>55,>55,>55,>40                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Normal 2 (hands up | $0B)
       byte >00,>06,>0C,>38,>1C,>00                                  ; {#CHARACTERS(character-0B*)
       byte >00,>09,>92,>44,>62,>00                                  ; 
       byte >00,>08,>69,>44,>81,>00                                  ; 
       byte >00,>06,>18,>C5,>11,>00                                  ; 
       byte >00,>01,>8C,>66,>2D,>00                                  ; 
       byte >00,>00,>64,>6A,>46,>00                                  ; 
       byte >00,>80,>1A,>2A,>80,>10                                  ; 
       byte >02,>A0,>05,>34,>80,>54                                  ; 
       byte >02,>A0,>0F,>FE,>00,>54                                  ; 
       byte >0A,>A0,>1F,>FF,>00,>55                                  ; 
       byte >0A,>A0,>1F,>FF,>80,>55                                  ; 
       byte >0B,>A4,>1F,>0F,>80,>75                                  ; 
       byte >0E,>08,>3D,>FF,>C2,>2D                                  ; 
       byte >06,>30,>3C,>01,>C1,>02                                  ; 
       byte >02,>40,>38,>89,>C0,>E6                                  ; 
       byte >03,>C0,>38,>01,>C0,>2C                                  ; 
       byte >04,>60,>38,>21,>80,>30                                  ; 
       byte >04,>20,>18,>01,>80,>7C                                  ; 
       byte >04,>40,>04,>F2,>00,>42                                  ; 
       byte >04,>40,>02,>92,>00,>44                                  ; 
       byte >04,>40,>02,>F4,>00,>44                                  ; 
       byte >04,>40,>01,>08,>00,>84                                  ; 
       byte >04,>40,>06,>E6,>00,>88                                  ; 
       byte >04,>60,>18,>01,>81,>08                                  ; 
       byte >02,>30,>60,>00,>E1,>10                                  ; 
       byte >02,>0F,>90,>00,>9E,>10                                  ; 
       byte >01,>00,>10,>01,>00,>20                                  ; 
       byte >00,>80,>08,>A2,>00,>20                                  ; 
       byte >00,>60,>04,>42,>00,>40                                  ; 
       byte >00,>1F,>04,>44,>2F,>80                                  ; 
       byte >00,>00,>82,>48,>40,>00                                  ; 
       byte >00,>00,>41,>F0,>40,>00                                  ; 
       byte >00,>00,>40,>40,>40,>00                                  ; 
       byte >00,>00,>20,>40,>80,>00                                  ; 
       byte >00,>00,>10,>40,>80,>00                                  ; 
       byte >00,>00,>0A,>A9,>00,>00                                  ; 
       byte >03,>00,>08,>02,>00,>00                                  ; 
       byte >01,>9C,>04,>02,>00,>00                                  ; 
       byte >01,>64,>04,>02,>00,>00                                  ; 
       byte >00,>C0,>04,>62,>00,>00                                  ; 
       byte >01,>A0,>05,>FA,>00,>00                                  ; 
       byte >02,>10,>07,>FE,>00,>00                                  ; 
       byte >05,>C8,>07,>FD,>00,>00                                  ; 
       byte >05,>88,>0E,>FB,>00,>00                                  ; 
       byte >09,>E4,>17,>0E,>80,>00                                  ; 
       byte >08,>A4,>3B,>FD,>C0,>00                                  ; 
       byte >05,>E8,>3B,>FD,>A0,>00                                  ; 
       byte >04,>88,>3D,>FB,>A0,>00                                  ; 
       byte >02,>10,>5E,>FB,>B0,>00                                  ; 
       byte >01,>E0,>6E,>F7,>78,>00                                  ; 
       byte >00,>00,>EF,>0F,>78,>00                                  ; 
       byte >00,>01,>F7,>FF,>74,>00                                  ; 
       byte >00,>00,>FB,>FE,>F4,>00                                  ; 
       byte >00,>03,>7B,>FE,>EE,>00                                  ; 
       byte >00,>03,>7D,>FD,>EE,>00                                  ; 
       byte >00,>07,>7E,>FB,>EF,>00                                  ; 
_8000:
       byte >00,>07,>BE,>FB,>DF,>00                                  ; 
       byte >00,>0F,>BF,>77,>DF,>00                                  ; 
       byte >00,>0F,>BF,>8F,>DF,>80                                  ; 
       byte >00,>0F,>DF,>FF,>DF,>80                                  ; 
       byte >00,>0F,>DF,>FF,>BF,>80                                  ; 
       byte >00,>13,>EF,>FF,>BF,>40                                  ; 
       byte >00,>13,>EF,>FF,>7F,>40                                  ; 
       byte >00,>11,>F7,>FE,>FE,>40                                  ; 
       byte >00,>11,>F7,>FE,>FE,>40                                  ; 
       byte >00,>11,>FB,>FD,>FE,>20                                  ; 
       byte >00,>12,>FD,>FB,>FE,>20                                  ; 
       byte >00,>22,>FD,>FB,>FD,>20                                  ; 
       byte >00,>22,>FE,>07,>FD,>20                                  ; 
       byte >00,>24,>7F,>FF,>FD,>10                                  ; 
       byte >00,>24,>7F,>FF,>FC,>90                                  ; 
       byte >00,>24,>7F,>FF,>F4,>50                                  ; 
       byte >00,>24,>5F,>FF,>E4,>50                                  ; 
       byte >00,>44,>5F,>FF,>E2,>50                                  ; 
       byte >00,>44,>8F,>FF,>C2,>50                                  ; 
       byte >00,>48,>8F,>FF,>C2,>20                                  ; 
       byte >00,>48,>8F,>FF,>C2,>20                                  ; 
       byte >00,>48,>87,>FF,>C2,>20                                  ; 
       byte >00,>48,>87,>FF,>41,>20                                  ; 
       byte >00,>90,>87,>FF,>41,>20                                  ; 
       byte >00,>90,>C5,>E0,>41,>70                                  ; 
       byte >01,>77,>F4,>1F,>C7,>D0                                  ; 
       byte >02,>BA,>AD,>EF,>FA,>A0                                  ; 
       byte >01,>55,>57,>55,>55,>50                                  ; 
       byte >00,>AA,>AA,>AA,>AA,>A0                                  ; 
       byte >00,>15,>55,>55,>55,>40                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Normal 2 (uncover | $0C)
       byte >00,>00,>00,>00,>01,>80                                  ; {#CHARACTERS(character-0C*)
       byte >00,>00,>02,>00,>0E,>70                                  ; 
       byte >00,>00,>0D,>80,>31,>88                                  ; 
       byte >00,>00,>10,>40,>C0,>88                                  ; 
       byte >00,>01,>9F,>C6,>70,>44                                  ; 
       byte >00,>03,>7F,>F9,>CC,>64                                  ; 
       byte >00,>02,>8F,>C1,>B2,>12                                  ; 
       byte >00,>05,>00,>01,>8D,>93                                  ; 
_80f0:
       byte >00,>06,>AA,>A2,>82,>5F                                  ; 
       byte >00,>0D,>40,>18,>71,>3F                                  ; 
       byte >00,>0A,>90,>44,>4E,>FF                                  ; 
       byte >00,>0D,>98,>C4,>41,>FF                                  ; 
       byte >00,>06,>85,>44,>81,>FC                                  ; 
       byte >00,>03,>0F,>84,>01,>F4                                  ; 
       byte >00,>00,>DF,>E8,>01,>F4                                  ; 
       byte >00,>00,>FF,>F0,>01,>E4                                  ; 
       byte >00,>00,>7F,>E0,>00,>E0                                  ; 
       byte >00,>00,>7F,>F0,>00,>E6                                  ; 
       byte >00,>01,>BF,>EC,>00,>C6                                  ; 
       byte >00,>07,>DF,>DF,>80,>45                                  ; 
       byte >00,>1B,>EF,>DF,>E0,>44                                  ; 
       byte >00,>23,>FF,>9F,>98,>84                                  ; 
       byte >00,>63,>E7,>9F,>C4,>82                                  ; 
       byte >00,>73,>E7,>8F,>C4,>82                                  ; 
       byte >00,>73,>E3,>0F,>CD,>01                                  ; 
       byte >00,>57,>E2,>0F,>CD,>00                                  ; 
       byte >00,>47,>E1,>1F,>D5,>00                                  ; 
       byte >00,>27,>E0,>9F,>C5,>08                                  ; 
       byte >00,>47,>E1,>1F,>C9,>04                                  ; 
       byte >00,>47,>E1,>1F,>C9,>02                                  ; 
       byte >00,>47,>E0,>9F,>C5,>02                                  ; 
       byte >00,>47,>E1,>1F,>C4,>81                                  ; 
       byte >00,>43,>E1,>0F,>C8,>81                                  ; 
       byte >01,>E1,>C0,>8F,>C8,>40                                  ; 
       byte >02,>D1,>81,>03,>D0,>40                                  ; 
       byte >05,>29,>01,>01,>15,>40                                  ; 
       byte >05,>E9,>01,>02,>AB,>80                                  ; 
       byte >04,>C9,>00,>82,>9A,>00                                  ; 
       byte >04,>CB,>10,>82,>8D,>00                                  ; 
       byte >02,>12,>8B,>42,>8F,>81                                  ; 
       byte >05,>ED,>FF,>26,>11,>41                                  ; 
       byte >0E,>DD,>44,>3A,>22,>66                                  ; 
       byte >0E,>CD,>FF,>FE,>24,>6F                                  ; 
       byte >0F,>F8,>0F,>FE,>44,>57                                  ; 
       byte >0F,>08,>7E,>FE,>48,>57                                  ; 
       byte >0F,>F9,>F8,>FC,>90,>9B                                  ; 
       byte >07,>1F,>F3,>FC,>91,>3B                                  ; 
       byte >03,>EF,>FF,>FC,>91,>2D                                  ; 
       byte >00,>47,>8F,>FD,>22,>2D                                  ; 
       byte >00,>76,>7E,>7E,>24,>6D                                  ; 
       byte >00,>75,>FC,>7E,>44,>6E                                  ; 
       byte >00,>77,>F0,>3C,>88,>EE                                  ; 
       byte >00,>37,>F0,>3C,>88,>77                                  ; 
       byte >00,>37,>F0,>1C,>91,>77                                  ; 
       byte >00,>27,>E0,>18,>91,>77                                  ; 
       byte >00,>37,>E0,>19,>23,>7B                                  ; 
       byte >00,>37,>C0,>09,>22,>7B                                  ; 
       byte >00,>17,>C0,>0A,>22,>7B                                  ; 
       byte >00,>1F,>C0,>0A,>42,>7D                                  ; 
       byte >00,>1F,>C0,>14,>44,>7E                                  ; 
       byte >00,>1F,>C0,>14,>88,>7E                                  ; 
       byte >00,>0F,>C0,>18,>88,>7E                                  ; 
       byte >00,>0F,>C0,>10,>90,>9F                                  ; 
       byte >00,>0E,>C0,>20,>90,>DF                                  ; 
       byte >00,>0D,>00,>21,>10,>DF                                  ; 
       byte >00,>1B,>C0,>21,>21,>EF                                  ; 
       byte >00,>1F,>C0,>42,>21,>EF                                  ; 
       byte >00,>0F,>C0,>42,>21,>EF                                  ; 
       byte >00,>07,>C0,>42,>23,>EF                                  ; 
       byte >00,>07,>C0,>84,>43,>EF                                  ; 
       byte >00,>07,>C0,>84,>43,>E7                                  ; 
       byte >00,>07,>C0,>84,>43,>F7                                  ; 
       byte >00,>07,>C0,>04,>47,>F7                                  ; 
       byte >00,>07,>C5,>04,>87,>F7                                  ; 
       byte >00,>07,>CA,>08,>87,>F3                                  ; 
       byte >00,>07,>F5,>08,>87,>FB                                  ; 
       byte >00,>07,>EA,>08,>87,>FB                                  ; 
       byte >00,>3F,>F5,>11,>0F,>FB                                  ; 
       byte >01,>FF,>FA,>11,>1F,>FD                                  ; 
       byte >07,>FF,>F5,>11,>6B,>FD                                  ; 
       byte >07,>FE,>6A,>A1,>D5,>7D                                  ; 
       byte >05,>55,>55,>63,>AA,>AF                                  ; 
       byte >0A,>AA,>AA,>1D,>55,>55                                  ; 
       byte >15,>55,>55,>54,>AA,>AA                                  ; 
       byte >00,>2A,>AA,>AA,>50,>50                                  ; 
       byte >00,>05,>55,>50,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Normal 2 (shot | $0D)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-0D*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>1C,>00,>00                                  ; 
       byte >00,>00,>00,>22,>00,>00                                  ; 
       byte >00,>00,>07,>21,>00,>00                                  ; 
       byte >00,>00,>08,>A1,>00,>00                                  ; 
       byte >00,>00,>08,>A1,>38,>00                                  ; 
       byte >00,>00,>04,>52,>24,>00                                  ; 
       byte >00,>00,>F2,>52,>44,>00                                  ; 
       byte >00,>01,>0E,>52,>84,>00                                  ; 
       byte >00,>01,>02,>32,>88,>00                                  ; 
       byte >00,>00,>E1,>35,>10,>00                                  ; 
       byte >00,>00,>18,>A5,>70,>00                                  ; 
       byte >00,>00,>04,>A6,>8C,>00                                  ; 
       byte >00,>00,>03,>FD,>02,>00                                  ; 
       byte >00,>00,>0F,>FF,>F2,>00                                  ; 
       byte >00,>00,>1F,>FF,>0C,>00                                  ; 
       byte >00,>00,>1F,>FF,>80,>00                                  ; 
       byte >00,>00,>1F,>FF,>80,>00                                  ; 
       byte >00,>00,>1F,>FF,>80,>00                                  ; 
       byte >00,>00,>1F,>FF,>80,>00                                  ; 
       byte >00,>00,>1F,>FF,>00,>00                                  ; 
       byte >00,>00,>6A,>06,>E0,>00                                  ; 
       byte >00,>03,>97,>F8,>9C,>00                                  ; 
       byte >00,>1C,>10,>01,>03,>80                                  ; 
       byte >00,>60,>08,>A2,>00,>40                                  ; 
       byte >00,>80,>C4,>42,>F8,>20                                  ; 
       byte >00,>87,>24,>04,>46,>10                                  ; 
       byte >01,>08,>22,>09,>41,>10                                  ; 
       byte >00,>48,>21,>F0,>41,>10                                  ; 
       byte >01,>50,>20,>40,>41,>10                                  ; 
       byte >09,>50,>10,>40,>81,>10                                  ; 
       byte >05,>50,>10,>40,>81,>50                                  ; 
       byte >03,>F0,>0A,>A9,>05,>50                                  ; 
       byte >01,>F2,>08,>02,>03,>5E                                  ; 
       byte >0E,>CC,>04,>02,>01,>60                                  ; 
       byte >0C,>10,>04,>02,>0E,>CE                                  ; 
       byte >13,>30,>04,>62,>01,>F0                                  ; 
       byte >1F,>B8,>05,>FA,>00,>00                                  ; 
       byte >01,>C4,>07,>FE,>00,>00                                  ; 
       byte >02,>22,>07,>FC,>00,>00                                  ; 
       byte >05,>10,>0E,>FB,>00,>00                                  ; 
       byte >0B,>C8,>17,>0E,>80,>00                                  ; 
       byte >13,>04,>1B,>FD,>C0,>00                                  ; 
       byte >13,>C4,>3B,>FD,>A0,>00                                  ; 
       byte >09,>48,>3D,>FB,>A0,>00                                  ; 
       byte >0B,>C8,>7C,>F3,>E0,>00                                  ; 
       byte >04,>11,>AF,>0F,>F8,>00                                  ; 
       byte >03,>E7,>2F,>FF,>E6,>00                                  ; 
       byte >00,>0E,>37,>FC,>E9,>00                                  ; 
       byte >00,>3C,>17,>FB,>54,>80                                  ; 
       byte >00,>7F,>FF,>FF,>B2,>80                                  ; 
       byte >01,>BF,>F2,>AB,>DA,>40                                  ; 
       byte >02,>44,>09,>9B,>CE,>40                                  ; 
       byte >04,>BE,>A5,>73,>C6,>60                                  ; 
       byte >05,>1F,>D6,>57,>CB,>20                                  ; 
       byte >04,>6F,>EA,>CB,>D1,>A0                                  ; 
       byte >04,>4F,>FD,>84,>09,>90                                  ; 
       byte >04,>44,>EE,>FB,>C5,>90                                  ; 
       byte >02,>33,>EE,>8B,>CB,>90                                  ; 
       byte >02,>2A,>DE,>8B,>D2,>20                                  ; 
       byte >02,>14,>78,>DD,>A6,>20                                  ; 
       byte >01,>8E,>27,>77,>3C,>C0                                  ; 
       byte >00,>61,>C2,>23,>C3,>00                                  ; 
       byte >00,>18,>3F,>FF,>0C,>00                                  ; 
       byte >00,>07,>00,>00,>70,>00                                  ; 
       byte >00,>00,>FF,>FF,>80,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>2A,>AA,>00,>00                                  ; 
       byte >00,>00,>55,>55,>00,>00                                  ; 
       byte >00,>00,>AA,>AA,>80,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>02,>AA,>AA,>80,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>00,>AA,>AA,>80,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Normal 2 (floor | $0E)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-0E*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>30,>38,>00,>00                                  ; 
       byte >00,>00,>4C,>44,>00,>00                                  ; 
       byte >00,>00,>42,>84,>00,>00                                  ; 
       byte >00,>00,>21,>08,>00,>00                                  ; 
       byte >00,>00,>39,>08,>E0,>00                                  ; 
       byte >00,>00,>C6,>93,>10,>00                                  ; 
       byte >00,>01,>01,>94,>08,>00                                  ; 
       byte >00,>01,>41,>10,>C8,>00                                  ; 
       byte >00,>00,>9F,>F9,>30,>00                                  ; 
       byte >00,>00,>E0,>07,>00,>00                                  ; 
       byte >00,>03,>00,>00,>C0,>00                                  ; 
       byte >00,>05,>8F,>F8,>00,>00                                  ; 
       byte >00,>19,>B1,>0F,>7C,>00                                  ; 
       byte >00,>23,>A3,>18,>FE,>00                                  ; 
       byte >00,>DB,>94,>A5,>F1,>00                                  ; 
       byte >01,>23,>8D,>47,>E9,>00                                  ; 
       byte >02,>43,>9A,>DF,>EC,>80                                  ; 
       byte >02,>63,>98,>D3,>94,>80                                  ; 
       byte >02,>57,>A5,>39,>8A,>40                                  ; 
       byte >02,>48,>0A,>BC,>5A,>40                                  ; 
       byte >02,>4B,>91,>78,>26,>40                                  ; 
       byte >02,>33,>AA,>42,>1E,>40                                  ; 
       byte >02,>13,>87,>FF,>E0,>80                                  ; 
       byte >05,>1F,>FC,>00,>0D,>40                                  ; 
       byte >02,>FF,>FF,>FF,>FE,>80                                  ; 
       byte >05,>55,>55,>55,>55,>00                                  ; 
       byte >02,>AA,>AA,>AA,>AA,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* #UDGARRAY*character-0A,50;character-0B;character-0C;character-00(daisy-uncover-frames)
* #UDGARRAY*character-0A,50;character-0B;character-0D;character-0E(daisy-shot-frames)

* Bandit 3
* 
* JOE DALTON - Alfred Dalton's brother. It runs in the family.
* Shoot as soon as he takes out his gun.
* 
* .
* 
* Bandit 3 (draw | $0F)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-0F*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>02,>00,>00,>00                                  ; 
       byte >00,>00,>0F,>80,>00,>00                                  ; 
       byte >00,>00,>1F,>C0,>00,>00                                  ; 
       byte >00,>01,>90,>46,>00,>00                                  ; 
       byte >00,>03,>FF,>FE,>00,>00                                  ; 
       byte >00,>0F,>FF,>FF,>00,>00                                  ; 
       byte >00,>0F,>FF,>FF,>00,>00                                  ; 
       byte >00,>0F,>FF,>FF,>80,>00                                  ; 
       byte >00,>1F,>C7,>3F,>80,>00                                  ; 
       byte >00,>1F,>D0,>BF,>80,>00                                  ; 
       byte >00,>1F,>C9,>3F,>80,>00                                  ; 
       byte >00,>0F,>D6,>BF,>00,>00                                  ; 
       byte >00,>03,>C6,>3E,>00,>00                                  ; 
       byte >00,>00,>40,>38,>00,>00                                  ; 
       byte >00,>00,>7F,>F0,>00,>00                                  ; 
       byte >00,>00,>F9,>F8,>00,>00                                  ; 
       byte >00,>00,>40,>20,>00,>00                                  ; 
       byte >00,>7F,>CF,>3F,>00,>00                                  ; 
       byte >01,>FC,>C0,>31,>80,>00                                  ; 
       byte >07,>FB,>E0,>5E,>C0,>00                                  ; 
       byte >0F,>F7,>B0,>9E,>E0,>00                                  ; 
       byte >1F,>F7,>DD,>9D,>E0,>00                                  ; 
       byte >3F,>F1,>AA,>1B,>F0,>00                                  ; 
       byte >3F,>FB,>D6,>1B,>F0,>00                                  ; 
       byte >3F,>87,>AA,>1F,>F8,>00                                  ; 
       byte >7F,>0F,>D6,>1F,>F8,>00                                  ; 
       byte >7E,>0F,>AA,>1F,>F8,>00                                  ; 
       byte >7C,>0F,>D6,>1F,>F8,>00                                  ; 
       byte >7C,>0F,>A8,>27,>78,>00                                  ; 
       byte >FC,>0F,>D6,>5B,>78,>00                                  ; 
       byte >FC,>0F,>A9,>42,>F8,>00                                  ; 
       byte >F8,>0F,>D6,>42,>F8,>00                                  ; 
       byte >F8,>0F,>AA,>3D,>F8,>00                                  ; 
       byte >F8,>0F,>D6,>41,>F8,>00                                  ; 
       byte >F8,>0F,>AA,>7D,>F8,>00                                  ; 
       byte >30,>0F,>D6,>43,>F8,>00                                  ; 
       byte >38,>0F,>AA,>3E,>F0,>00                                  ; 
       byte >FE,>13,>7F,>BF,>30,>00                                  ; 
       byte >79,>1F,>FF,>FF,>80,>00                                  ; 
       byte >64,>9F,>FF,>FF,>C0,>00                                  ; 
       byte >52,>1F,>FF,>FF,>C0,>00                                  ; 
       byte >48,>07,>FD,>FF,>C0,>00                                  ; 
       byte >40,>0F,>FD,>FE,>C0,>00                                  ; 
       byte >00,>0F,>FD,>FE,>80,>00                                  ; 
       byte >00,>07,>FB,>3E,>00,>00                                  ; 
       byte >00,>07,>EE,>FE,>80,>00                                  ; 
       byte >00,>07,>F0,>7E,>80,>00                                  ; 
       byte >00,>07,>F0,>7E,>80,>00                                  ; 
       byte >00,>07,>E0,>3E,>00,>00                                  ; 
       byte >00,>07,>E0,>3E,>80,>00                                  ; 
       byte >00,>07,>E0,>3E,>00,>00                                  ; 
       byte >00,>07,>E0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>80,>0F,>80,>00                                  ; 
       byte >00,>07,>80,>0F,>C0,>00                                  ; 
       byte >00,>1F,>C0,>1F,>C0,>00                                  ; 
       byte >00,>1E,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>75,>5D,>80,>00                                  ; 
       byte >00,>0F,>6A,>BD,>80,>00                                  ; 
       byte >00,>7F,>75,>7D,>C0,>00                                  ; 
       byte >01,>FF,>6A,>BC,>30,>00                                  ; 
       byte >03,>FF,>D5,>5E,>08,>00                                  ; 
       byte >07,>FA,>AA,>A9,>04,>00                                  ; 
       byte >07,>D5,>55,>55,>FC,>00                                  ; 
       byte >0A,>AA,>AA,>AA,>A8,>00                                  ; 
       byte >05,>55,>55,>55,>50,>00                                  ; 
       byte >00,>2A,>AA,>AA,>00,>00                                  ; 
       byte >00,>05,>55,>50,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 3 (stand off | $10)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-10*)
       byte >00,>00,>02,>00,>00,>00                                  ; 
       byte >00,>00,>0F,>80,>00,>00                                  ; 
       byte >00,>00,>1F,>C0,>00,>00                                  ; 
       byte >00,>01,>90,>46,>00,>00                                  ; 
       byte >00,>03,>FF,>FF,>00,>00                                  ; 
       byte >00,>0F,>FF,>FF,>00,>00                                  ; 
       byte >00,>0F,>FF,>FF,>80,>00                                  ; 
       byte >00,>0F,>FF,>FF,>80,>00                                  ; 
       byte >00,>1F,>C7,>3F,>C0,>00                                  ; 
       byte >00,>1F,>D0,>BF,>C0,>00                                  ; 
       byte >00,>1F,>C9,>3F,>C0,>00                                  ; 
       byte >00,>0F,>D6,>BF,>80,>00                                  ; 
       byte >00,>03,>C6,>3E,>00,>00                                  ; 
       byte >00,>00,>40,>38,>00,>00                                  ; 
       byte >00,>00,>7F,>F0,>00,>00                                  ; 
       byte >00,>00,>F9,>F8,>00,>00                                  ; 
       byte >00,>00,>40,>20,>00,>00                                  ; 
       byte >00,>07,>CF,>38,>00,>00                                  ; 
       byte >00,>1C,>40,>3F,>00,>00                                  ; 
       byte >00,>3B,>E0,>51,>C0,>00                                  ; 
       byte >00,>F7,>F0,>9E,>F0,>00                                  ; 
       byte >01,>F7,>D5,>9E,>F8,>00                                  ; 
       byte >07,>F3,>EB,>1D,>FE,>00                                  ; 
       byte >0F,>FB,>D6,>1B,>FF,>00                                  ; 
       byte >1F,>F7,>EB,>1B,>FF,>80                                  ; 
       byte >1F,>CF,>D6,>1F,>BF,>80                                  ; 
       byte >3F,>8F,>EA,>1F,>9F,>C0                                  ; 
       byte >3F,>0F,>D6,>1F,>8F,>C0                                  ; 
       byte >3F,>0F,>EB,>1F,>8F,>C0                                  ; 
       byte >3F,>0F,>D4,>1F,>8F,>C0                                  ; 
       byte >3F,>0F,>EB,>1F,>87,>E0                                  ; 
       byte >3E,>0F,>D4,>1F,>87,>E0                                  ; 
       byte >3E,>0F,>EA,>1F,>87,>E0                                  ; 
       byte >3E,>0F,>D5,>1F,>87,>E0                                  ; 
       byte >3E,>0F,>EA,>1F,>07,>E0                                  ; 
       byte >3E,>0F,>D6,>1F,>03,>E0                                  ; 
       byte >3E,>0F,>EA,>1F,>01,>80                                  ; 
       byte >18,>0F,>D6,>1B,>0F,>C0                                  ; 
       byte >3E,>0F,>EA,>1B,>01,>F0                                  ; 
       byte >39,>8F,>D4,>1F,>39,>48                                  ; 
       byte >74,>11,>7F,>B9,>7C,>A4                                  ; 
       byte >2A,>1F,>FF,>FE,>7C,>A0                                  ; 
       byte >29,>1F,>FF,>FF,>BC,>90                                  ; 
       byte >24,>1F,>FF,>FF,>C4,>00                                  ; 
       byte >20,>07,>FD,>FF,>C0,>00                                  ; 
       byte >00,>0F,>FD,>FE,>C0,>00                                  ; 
       byte >00,>0F,>FD,>FE,>C0,>00                                  ; 
       byte >00,>07,>FB,>FE,>00,>00                                  ; 
       byte >00,>07,>EE,>FE,>80,>00                                  ; 
       byte >00,>07,>F0,>7E,>80,>00                                  ; 
       byte >00,>07,>F0,>7E,>80,>00                                  ; 
       byte >00,>07,>E0,>3E,>00,>00                                  ; 
       byte >00,>07,>E0,>3E,>80,>00                                  ; 
       byte >00,>07,>E0,>3E,>00,>00                                  ; 
       byte >00,>07,>E0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>80,>0F,>80,>00                                  ; 
       byte >00,>07,>80,>0F,>C0,>00                                  ; 
       byte >00,>1F,>C0,>1F,>C0,>00                                  ; 
       byte >00,>1E,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>40,>1D,>80,>00                                  ; 
       byte >00,>0F,>4A,>9D,>80,>00                                  ; 
       byte >00,>0F,>75,>5D,>80,>00                                  ; 
       byte >00,>0F,>6A,>BD,>80,>00                                  ; 
       byte >00,>7F,>75,>7D,>C0,>00                                  ; 
       byte >01,>FF,>6A,>BC,>30,>00                                  ; 
       byte >03,>FF,>D5,>5E,>08,>00                                  ; 
       byte >07,>FA,>AA,>A9,>04,>00                                  ; 
       byte >07,>D5,>55,>55,>FC,>00                                  ; 
       byte >0A,>AA,>AA,>AA,>A8,>00                                  ; 
       byte >15,>55,>55,>55,>50,>00                                  ; 
       byte >00,>2A,>AA,>AA,>00,>00                                  ; 
       byte >00,>05,>55,>50,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 3 (shot | $11)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-11*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>10,>00,>00,>00                                  ; 
       byte >00,>00,>0C,>00,>38,>00                                  ; 
       byte >00,>00,>02,>00,>48,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>E0,>7F,>00,>00                                  ; 
       byte >00,>01,>31,>FF,>C0,>00                                  ; 
       byte >00,>01,>C1,>FF,>E0,>00                                  ; 
       byte >00,>00,>03,>FF,>E0,>00                                  ; 
       byte >00,>00,>03,>FF,>E0,>00                                  ; 
       byte >00,>00,>7F,>BF,>FC,>00                                  ; 
       byte >00,>01,>FB,>DF,>FF,>00                                  ; 
       byte >00,>03,>FF,>E1,>FF,>C0                                  ; 
       byte >00,>07,>FB,>FF,>FF,>E0                                  ; 
       byte >00,>0F,>ED,>FF,>FF,>F8                                  ; 
       byte >00,>1F,>CD,>FF,>DF,>FC                                  ; 
       byte >00,>3F,>8B,>EE,>BF,>FE                                  ; 
       byte >00,>7F,>0F,>A0,>BC,>FE                                  ; 
       byte >00,>7E,>0F,>DF,>3C,>7C                                  ; 
       byte >00,>FC,>0F,>AB,>3C,>19                                  ; 
       byte >00,>FC,>0F,>D6,>3C,>01                                  ; 
       byte >00,>FC,>0F,>AA,>3C,>09                                  ; 
       byte >01,>F8,>0F,>D6,>3C,>C5                                  ; 
       byte >01,>F8,>0F,>AA,>3C,>35                                  ; 
       byte >1C,>58,>0F,>D6,>3C,>0B                                  ; 
       byte >03,>48,>0F,>AA,>3C,>77                                  ; 
       byte >7D,>56,>07,>D6,>3C,>0D                                  ; 
       byte >02,>B8,>07,>AC,>3C,>00                                  ; 
       byte >01,>F8,>07,>D4,>3C,>00                                  ; 
       byte >00,>B0,>6F,>EC,>7C,>00                                  ; 
       byte >00,>00,>FF,>FF,>FC,>00                                  ; 
       byte >00,>01,>FF,>B1,>FE,>00                                  ; 
       byte >00,>1B,>F7,>FF,>FF,>80                                  ; 
       byte >00,>3B,>B0,>7F,>FF,>CE                                  ; 
       byte >07,>FF,>FF,>FF,>FF,>F1                                  ; 
       byte >08,>19,>FF,>FF,>FF,>E1                                  ; 
       byte >08,>09,>FF,>80,>7F,>C1                                  ; 
       byte >08,>07,>FF,>F1,>FF,>83                                  ; 
       byte >06,>03,>FF,>E0,>FF,>C4                                  ; 
       byte >01,>86,>FB,>80,>3F,>68                                  ; 
       byte >00,>6D,>38,>00,>0C,>B0                                  ; 
       byte >00,>02,>10,>00,>08,>40                                  ; 
       byte >00,>01,>20,>00,>08,>80                                  ; 
       byte >00,>00,>C0,>00,>05,>00                                  ; 
       byte >00,>00,>00,>00,>02,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>15,>50,>00,>00                                  ; 
       byte >00,>00,>AA,>AA,>00,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>02,>AA,>AA,>A0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>02,>AA,>AA,>A0,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>00,>AA,>AA,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* #UDGARRAY*character-10,100;character-0F;character-11;character-07;(bandit-3-frames)

* Bandit 4
* 
* MACKEYHAM - The bloodthirsty villain. Everyone trembles when
* they come up against him. Don't hesitate or it
* might be too late. Shoot as quickly as you can.
* 
* .
* 
* Bandit 4 (stand off | $12)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-12*)
       byte >00,>00,>02,>00,>00,>00                                  ; 
       byte >00,>00,>0F,>80,>00,>00                                  ; 
       byte >00,>00,>1F,>C0,>00,>00                                  ; 
       byte >00,>01,>90,>46,>00,>00                                  ; 
       byte >00,>03,>FF,>FF,>00,>00                                  ; 
       byte >00,>0F,>FF,>FF,>00,>00                                  ; 
       byte >00,>0F,>FF,>FF,>80,>00                                  ; 
       byte >00,>0F,>FF,>FF,>80,>00                                  ; 
       byte >00,>1F,>80,>1F,>C0,>00                                  ; 
       byte >00,>1F,>10,>8F,>C0,>00                                  ; 
       byte >00,>1F,>09,>0F,>C0,>00                                  ; 
       byte >00,>0F,>16,>8F,>80,>00                                  ; 
       byte >00,>03,>86,>1E,>00,>00                                  ; 
       byte >00,>00,>C0,>28,>00,>00                                  ; 
       byte >00,>00,>A0,>70,>00,>00                                  ; 
       byte >00,>00,>DF,>D0,>00,>00                                  ; 
       byte >00,>00,>AA,>B0,>00,>00                                  ; 
       byte >00,>07,>D5,>58,>00,>00                                  ; 
       byte >00,>1F,>EA,>BF,>00,>00                                  ; 
       byte >00,>3F,>F5,>7F,>C0,>00                                  ; 
       byte >00,>FF,>EA,>FF,>F0,>00                                  ; 
       byte >01,>FB,>FD,>FF,>F8,>00                                  ; 
       byte >07,>FB,>FF,>FF,>FE,>00                                  ; 
       byte >0F,>F7,>FD,>FF,>FF,>00                                  ; 
       byte >1F,>ED,>FF,>FF,>FF,>80                                  ; 
       byte >1F,>C3,>FD,>FF,>BF,>80                                  ; 
       byte >3F,>9F,>FD,>C3,>9F,>C0                                  ; 
       byte >3F,>1F,>FD,>FF,>8F,>C0                                  ; 
       byte >3F,>1F,>FD,>FF,>8F,>C0                                  ; 
       byte >3F,>1F,>FF,>FF,>8F,>C0                                  ; 
       byte >3F,>1F,>FF,>FF,>87,>E0                                  ; 
       byte >3E,>1F,>FD,>FF,>87,>E0                                  ; 
       byte >3E,>0F,>FD,>FF,>87,>E0                                  ; 
       byte >3E,>07,>FD,>FF,>87,>E0                                  ; 
       byte >3E,>0F,>FE,>FF,>07,>E0                                  ; 
       byte >3E,>0F,>FD,>FE,>03,>E0                                  ; 
       byte >3E,>0F,>FF,>FE,>01,>80                                  ; 
       byte >18,>0F,>FF,>FE,>0F,>C0                                  ; 
       byte >3E,>07,>FD,>FE,>01,>F0                                  ; 
       byte >39,>8F,>FF,>FE,>39,>48                                  ; 
       byte >74,>11,>44,>39,>7C,>A4                                  ; 
       byte >2A,>1F,>FF,>FE,>7C,>A0                                  ; 
       byte >29,>1F,>92,>7E,>BC,>90                                  ; 
       byte >24,>19,>7F,>9E,>C4,>00                                  ; 
       byte >20,>07,>FF,>E0,>C0,>00                                  ; 
       byte >00,>0F,>FD,>FE,>C0,>00                                  ; 
       byte >00,>0F,>FD,>FE,>C0,>00                                  ; 
       byte >00,>07,>F1,>7E,>00,>00                                  ; 
       byte >00,>07,>CC,>9E,>80,>00                                  ; 
       byte >00,>07,>F0,>66,>80,>00                                  ; 
       byte >00,>07,>F0,>7E,>80,>00                                  ; 
       byte >00,>07,>E0,>3E,>00,>00                                  ; 
       byte >00,>07,>E0,>3E,>80,>00                                  ; 
       byte >00,>07,>E0,>3E,>00,>00                                  ; 
       byte >00,>07,>E0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>80,>1D,>80,>00                                  ; 
       byte >00,>06,>80,>0A,>40,>00                                  ; 
       byte >00,>1F,>C0,>1F,>C0,>00                                  ; 
       byte >00,>1F,>C0,>1B,>80,>00                                  ; 
       byte >00,>0E,>40,>0B,>80,>00                                  ; 
       byte >00,>06,>40,>1B,>80,>00                                  ; 
       byte >00,>06,>40,>0B,>80,>00                                  ; 
       byte >00,>06,>40,>0B,>80,>00                                  ; 
       byte >00,>06,>C0,>0B,>80,>00                                  ; 
       byte >00,>06,>C0,>0B,>80,>00                                  ; 
       byte >00,>06,>C0,>0B,>80,>00                                  ; 
       byte >00,>06,>C0,>0B,>80,>00                                  ; 
       byte >00,>06,>CA,>AB,>80,>00                                  ; 
       byte >00,>06,>F5,>5B,>80,>00                                  ; 
       byte >00,>0E,>EA,>BB,>80,>00                                  ; 
       byte >00,>3E,>F5,>5B,>C0,>00                                  ; 
       byte >01,>FE,>FA,>BB,>E0,>00                                  ; 
       byte >07,>FF,>F5,>5F,>F8,>00                                  ; 
       byte >07,>FE,>6A,>A9,>FE,>00                                  ; 
       byte >07,>D5,>55,>55,>7E,>00                                  ; 
       byte >0A,>AA,>AA,>AA,>AA,>00                                  ; 
       byte >15,>55,>55,>55,>50,>00                                  ; 
       byte >00,>2A,>AA,>AA,>00,>00                                  ; 
       byte >00,>05,>55,>50,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 4 (draw | $13)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-13*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>02,>00,>00,>00                                  ; 
       byte >00,>00,>0F,>80,>00,>00                                  ; 
       byte >00,>00,>1F,>C0,>00,>00                                  ; 
       byte >00,>01,>90,>46,>00,>00                                  ; 
       byte >00,>03,>FF,>FF,>00,>00                                  ; 
       byte >00,>0F,>FF,>FF,>80,>00                                  ; 
       byte >00,>0F,>FF,>FF,>C0,>00                                  ; 
       byte >00,>0F,>FF,>FF,>C0,>00                                  ; 
       byte >00,>1F,>80,>1F,>C0,>00                                  ; 
       byte >00,>1F,>10,>8F,>C0,>00                                  ; 
       byte >00,>1F,>09,>0F,>80,>00                                  ; 
       byte >00,>0F,>16,>8F,>00,>00                                  ; 
       byte >00,>03,>86,>1E,>00,>00                                  ; 
       byte >00,>00,>C0,>28,>00,>00                                  ; 
       byte >00,>00,>BF,>F0,>00,>00                                  ; 
       byte >00,>3F,>D5,>5C,>00,>00                                  ; 
       byte >01,>FF,>AA,>BF,>80,>00                                  ; 
       byte >07,>FF,>D5,>5F,>E0,>00                                  ; 
       byte >0F,>FF,>EA,>BF,>F8,>00                                  ; 
       byte >1F,>FF,>F5,>7F,>F8,>00                                  ; 
       byte >1F,>F7,>FF,>FF,>FE,>00                                  ; 
       byte >1F,>AD,>FF,>FF,>FE,>00                                  ; 
       byte >1F,>03,>FD,>FF,>7E,>00                                  ; 
       byte >3F,>1F,>FD,>C3,>7E,>00                                  ; 
       byte >3F,>1F,>FD,>FF,>7E,>00                                  ; 
       byte >3E,>1F,>FD,>FF,>7E,>00                                  ; 
       byte >3E,>1F,>FF,>FF,>7E,>00                                  ; 
       byte >3E,>1F,>FF,>FF,>7E,>00                                  ; 
       byte >3E,>1F,>FD,>FF,>BE,>00                                  ; 
       byte >3E,>0F,>FD,>FF,>BC,>00                                  ; 
       byte >1E,>07,>FD,>FF,>1C,>00                                  ; 
       byte >0C,>0F,>FE,>FE,>AC,>00                                  ; 
       byte >0C,>0F,>FD,>FE,>44,>00                                  ; 
       byte >1E,>0F,>FF,>FE,>04,>00                                  ; 
       byte >3F,>0F,>FF,>FF,>0C,>00                                  ; 
       byte >5A,>87,>FD,>FE,>9C,>00                                  ; 
       byte >1A,>4F,>FF,>FE,>FC,>00                                  ; 
       byte >2A,>11,>44,>39,>8C,>00                                  ; 
       byte >29,>1F,>FF,>FE,>F8,>00                                  ; 
       byte >28,>1F,>92,>7E,>78,>00                                  ; 
       byte >08,>19,>7F,>9E,>E0,>00                                  ; 
       byte >00,>07,>FF,>E0,>C0,>00                                  ; 
       byte >00,>0F,>FD,>FE,>C0,>00                                  ; 
       byte >00,>0F,>FD,>FE,>00,>00                                  ; 
       byte >00,>07,>F1,>7E,>C0,>00                                  ; 
       byte >00,>07,>CC,>9E,>C0,>00                                  ; 
       byte >00,>07,>F0,>66,>C0,>00                                  ; 
       byte >00,>07,>F0,>7E,>C0,>00                                  ; 
       byte >00,>07,>E0,>3E,>00,>00                                  ; 
       byte >00,>07,>E0,>3E,>00,>00                                  ; 
       byte >00,>07,>E0,>3E,>00,>00                                  ; 
       byte >00,>07,>E0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>1F,>00,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>C0,>0F,>80,>00                                  ; 
       byte >00,>0F,>80,>1D,>80,>00                                  ; 
       byte >00,>06,>80,>0A,>40,>00                                  ; 
       byte >00,>1F,>C0,>1F,>C0,>00                                  ; 
       byte >00,>1F,>C0,>1B,>80,>00                                  ; 
       byte >00,>0E,>40,>0B,>80,>00                                  ; 
       byte >00,>06,>40,>1B,>80,>00                                  ; 
       byte >00,>06,>40,>0B,>80,>00                                  ; 
       byte >00,>06,>40,>0B,>80,>00                                  ; 
       byte >00,>06,>C0,>0B,>80,>00                                  ; 
       byte >00,>06,>C0,>0B,>80,>00                                  ; 
       byte >00,>06,>C0,>0B,>80,>00                                  ; 
       byte >00,>06,>C0,>0B,>80,>00                                  ; 
       byte >00,>06,>CA,>AB,>80,>00                                  ; 
       byte >00,>06,>F5,>5B,>80,>00                                  ; 
       byte >00,>0E,>EA,>BB,>80,>00                                  ; 
       byte >00,>3E,>F5,>5B,>C0,>00                                  ; 
       byte >01,>FE,>FA,>BB,>E0,>00                                  ; 
       byte >07,>FF,>F5,>5F,>F8,>00                                  ; 
       byte >07,>FE,>6A,>A9,>FE,>00                                  ; 
       byte >07,>D5,>55,>55,>7E,>00                                  ; 
       byte >0A,>AA,>AA,>AA,>AA,>00                                  ; 
       byte >15,>55,>55,>55,>50,>00                                  ; 
       byte >00,>2A,>AA,>AA,>00,>00                                  ; 
       byte >00,>05,>55,>50,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 4 (shot | $14)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-14*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>82,>00,>00                                  ; 
       byte >00,>00,>00,>42,>0C,>00                                  ; 
       byte >00,>00,>00,>40,>13,>00                                  ; 
       byte >00,>03,>C0,>20,>24,>00                                  ; 
       byte >00,>04,>A0,>00,>00,>00                                  ; 
       byte >00,>07,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>7F,>C0,>00                                  ; 
       byte >00,>00,>01,>FF,>F0,>00                                  ; 
       byte >00,>00,>03,>FF,>F8,>00                                  ; 
       byte >00,>00,>07,>FF,>FC,>00                                  ; 
       byte >00,>00,>07,>FE,>FC,>00                                  ; 
       byte >00,>00,>07,>EC,>FC,>00                                  ; 
       byte >00,>00,>07,>E1,>FC,>00                                  ; 
       byte >00,>00,>7F,>FF,>FC,>00                                  ; 
       byte >00,>01,>FF,>FF,>FF,>80                                  ; 
       byte >00,>07,>FD,>FF,>FF,>E0                                  ; 
       byte >00,>0F,>FD,>FF,>FF,>F8                                  ; 
       byte >00,>1F,>FE,>FF,>FF,>FC                                  ; 
       byte >00,>3F,>C7,>7F,>BB,>FE                                  ; 
       byte >00,>7F,>0F,>9E,>7C,>FE                                  ; 
       byte >00,>7E,>0F,>F7,>FC,>7E                                  ; 
       byte >00,>FC,>0F,>FF,>FC,>1D                                  ; 
       byte >00,>FC,>0F,>FF,>FC,>09                                  ; 
       byte >00,>FC,>0F,>F7,>FC,>09                                  ; 
       byte >01,>F8,>0F,>F7,>FC,>C5                                  ; 
       byte >01,>F8,>0F,>FF,>FC,>35                                  ; 
       byte >1C,>78,>0F,>F7,>FC,>0B                                  ; 
       byte >03,>78,>03,>FF,>F8,>77                                  ; 
       byte >7D,>76,>03,>FF,>F8,>0D                                  ; 
       byte >02,>B8,>03,>F7,>F8,>00                                  ; 
       byte >01,>F8,>03,>F7,>F8,>00                                  ; 
       byte >00,>B0,>01,>FF,>F8,>00                                  ; 
       byte >00,>00,>03,>FF,>F9,>C0                                  ; 
       byte >00,>00,>0F,>F1,>FF,>E0                                  ; 
       byte >00,>00,>3F,>FF,>FF,>E0                                  ; 
       byte >00,>00,>FF,>FB,>FF,>EE                                  ; 
       byte >07,>FF,>FF,>FB,>FF,>F1                                  ; 
       byte >08,>19,>FF,>FB,>FF,>E1                                  ; 
       byte >08,>09,>FF,>80,>07,>C1                                  ; 
       byte >08,>07,>F8,>00,>07,>83                                  ; 
       byte >06,>03,>F8,>00,>0F,>C4                                  ; 
       byte >01,>86,>F8,>00,>0F,>68                                  ; 
       byte >00,>6D,>38,>00,>0C,>B0                                  ; 
       byte >00,>02,>10,>00,>08,>40                                  ; 
       byte >00,>01,>20,>00,>08,>80                                  ; 
       byte >00,>00,>C0,>00,>05,>00                                  ; 
       byte >00,>00,>00,>00,>02,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>15,>50,>00,>00                                  ; 
       byte >00,>00,>AA,>AA,>00,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>02,>AA,>AA,>A0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>02,>AA,>AA,>A0,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>00,>AA,>AA,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* #UDGARRAY*character-12,100;character-13;character-14;character-07;(bandit-4-frames)

* Bandit 5
* 
* 
* .
* 
* Bandit 5 (stand off | $15)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-15*)
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>07,>D8,>17,>C0,>00                                  ; 
       byte >00,>0F,>FF,>FF,>E0,>00                                  ; 
       byte >00,>0F,>FF,>FF,>F0,>00                                  ; 
       byte >00,>06,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>0B,>E8,>00,>00                                  ; 
       byte >00,>00,>1F,>7C,>00,>00                                  ; 
       byte >00,>00,>1C,>9C,>00,>00                                  ; 
       byte >00,>00,>08,>08,>00,>00                                  ; 
       byte >00,>00,>08,>08,>00,>00                                  ; 
       byte >00,>00,>38,>0E,>00,>00                                  ; 
       byte >00,>00,>F8,>0F,>60,>00                                  ; 
       byte >00,>03,>F9,>CF,>B8,>00                                  ; 
       byte >00,>05,>F8,>0F,>84,>00                                  ; 
       byte >00,>09,>FC,>1F,>82,>00                                  ; 
       byte >00,>11,>FB,>EF,>C1,>00                                  ; 
       byte >00,>21,>FC,>0F,>E0,>80                                  ; 
       byte >00,>23,>FC,>9F,>E0,>80                                  ; 
       byte >00,>43,>FE,>1F,>D0,>80                                  ; 
       byte >00,>85,>FC,>0F,>C8,>40                                  ; 
       byte >00,>85,>FC,>1F,>C8,>40                                  ; 
       byte >00,>89,>FC,>9F,>C8,>40                                  ; 
       byte >01,>09,>FC,>1F,>C8,>40                                  ; 
       byte >01,>09,>FC,>1F,>C4,>40                                  ; 
       byte >01,>11,>FC,>9F,>C4,>40                                  ; 
       byte >01,>11,>FD,>1F,>C4,>20                                  ; 
       byte >02,>11,>FC,>9F,>C4,>20                                  ; 
       byte >02,>11,>FC,>9F,>C4,>20                                  ; 
       byte >02,>11,>FC,>9F,>C4,>60                                  ; 
       byte >02,>11,>F1,>07,>C4,>80                                  ; 
       byte >01,>F1,>F0,>83,>89,>F0                                  ; 
       byte >18,>70,>E0,>41,>07,>F8                                  ; 
       byte >07,>E0,>40,>41,>09,>E8                                  ; 
       byte >07,>F0,>40,>81,>14,>54                                  ; 
       byte >19,>48,>40,>81,>26,>4A                                  ; 
       byte >02,>40,>40,>81,>4E,>28                                  ; 
       byte >04,>80,>F8,>0F,>9C,>24                                  ; 
       byte >08,>80,>A3,>E5,>F0,>14                                  ; 
       byte >00,>00,>FC,>1F,>E0,>00                                  ; 
       byte >00,>00,>FF,>FC,>E0,>00                                  ; 
       byte >00,>00,>FF,>FE,>C0,>00                                  ; 
       byte >00,>00,>FF,>7E,>C0,>00                                  ; 
       byte >00,>00,>FF,>7E,>00,>00                                  ; 
       byte >00,>00,>FF,>7E,>C0,>00                                  ; 
       byte >00,>00,>FF,>7E,>C0,>00                                  ; 
       byte >00,>00,>FF,>7E,>C0,>00                                  ; 
       byte >00,>00,>FF,>7E,>C0,>00                                  ; 
       byte >00,>00,>FF,>7E,>00,>00                                  ; 
       byte >00,>00,>FF,>7F,>00,>00                                  ; 
       byte >00,>00,>7F,>7F,>00,>00                                  ; 
       byte >00,>00,>7F,>7F,>00,>00                                  ; 
       byte >00,>00,>7F,>3F,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>7E,>3E,>00,>00                                  ; 
       byte >00,>00,>7E,>3E,>00,>00                                  ; 
       byte >00,>00,>FE,>3E,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>7F,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>AE,>00,>00                                  ; 
       byte >00,>00,>FB,>6E,>40,>00                                  ; 
       byte >00,>0B,>7A,>AC,>A0,>00                                  ; 
       byte >00,>1C,>FF,>74,>D4,>00                                  ; 
       byte >00,>B1,>FE,>B8,>6A,>00                                  ; 
       byte >01,>43,>DD,>78,>35,>00                                  ; 
       byte >02,>BF,>AA,>AC,>2A,>00                                  ; 
       byte >01,>55,>55,>57,>F5,>00                                  ; 
       byte >02,>AA,>AA,>AA,>AA,>00                                  ; 
       byte >01,>55,>55,>55,>50,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 5 (draw | $16)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-16*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>07,>D8,>17,>C0,>00                                  ; 
       byte >00,>0F,>FF,>FF,>E0,>00                                  ; 
       byte >00,>0F,>FF,>FF,>F0,>00                                  ; 
       byte >00,>06,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>0B,>E8,>00,>00                                  ; 
       byte >00,>00,>1F,>7C,>00,>00                                  ; 
       byte >00,>00,>1C,>9C,>00,>00                                  ; 
       byte >00,>00,>08,>08,>00,>00                                  ; 
       byte >00,>00,>08,>08,>00,>00                                  ; 
       byte >00,>03,>F8,>0E,>00,>00                                  ; 
       byte >00,>0C,>F8,>0F,>60,>00                                  ; 
       byte >00,>30,>F9,>CF,>B0,>00                                  ; 
       byte >00,>41,>F8,>0F,>88,>00                                  ; 
       byte >00,>81,>FC,>1F,>84,>00                                  ; 
       byte >01,>0F,>FB,>EF,>C4,>00                                  ; 
       byte >01,>09,>FC,>1F,>E2,>00                                  ; 
       byte >02,>11,>FC,>9F,>E2,>00                                  ; 
       byte >02,>11,>FC,>9F,>E2,>00                                  ; 
       byte >02,>21,>FC,>9F,>E1,>00                                  ; 
       byte >02,>21,>FD,>1F,>E1,>00                                  ; 
       byte >04,>21,>FC,>9F,>E1,>00                                  ; 
       byte >04,>41,>FC,>9F,>E1,>00                                  ; 
       byte >04,>41,>FC,>1F,>A2,>00                                  ; 
       byte >04,>41,>FC,>9F,>A2,>00                                  ; 
       byte >04,>41,>F8,>0F,>52,>00                                  ; 
       byte >04,>41,>F0,>8E,>12,>00                                  ; 
       byte >03,>C0,>F0,>8E,>1A,>00                                  ; 
       byte >01,>80,>60,>82,>1A,>00                                  ; 
       byte >7F,>80,>40,>41,>FC,>00                                  ; 
       byte >0F,>C0,>40,>41,>1C,>00                                  ; 
       byte >15,>20,>40,>81,>FC,>00                                  ; 
       byte >69,>00,>40,>81,>18,>00                                  ; 
       byte >12,>00,>FE,>3F,>F0,>00                                  ; 
       byte >22,>00,>A3,>E5,>E0,>00                                  ; 
       byte >00,>00,>FE,>1F,>E0,>00                                  ; 
       byte >00,>00,>FF,>FC,>E0,>00                                  ; 
       byte >00,>00,>FF,>FE,>C0,>00                                  ; 
       byte >00,>00,>FF,>7E,>C0,>00                                  ; 
       byte >00,>00,>FF,>7E,>00,>00                                  ; 
       byte >00,>00,>FF,>7E,>C0,>00                                  ; 
       byte >00,>00,>FF,>7E,>C0,>00                                  ; 
       byte >00,>00,>FF,>7E,>C0,>00                                  ; 
       byte >00,>00,>FF,>7E,>C0,>00                                  ; 
       byte >00,>00,>FF,>7E,>00,>00                                  ; 
       byte >00,>00,>FF,>7F,>00,>00                                  ; 
       byte >00,>00,>7F,>7F,>00,>00                                  ; 
       byte >00,>00,>7F,>7F,>00,>00                                  ; 
       byte >00,>00,>7F,>3F,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>7E,>3E,>00,>00                                  ; 
       byte >00,>00,>7E,>3E,>00,>00                                  ; 
       byte >00,>00,>FE,>3E,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>7F,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>AE,>00,>00                                  ; 
       byte >00,>00,>FB,>6E,>40,>00                                  ; 
       byte >00,>0B,>7A,>AC,>A0,>00                                  ; 
       byte >00,>1C,>FF,>74,>D4,>00                                  ; 
       byte >00,>B1,>FE,>B8,>6A,>00                                  ; 
       byte >01,>43,>DD,>78,>35,>00                                  ; 
       byte >02,>BF,>AA,>AC,>2A,>80                                  ; 
       byte >05,>55,>55,>57,>F5,>00                                  ; 
       byte >02,>AA,>AA,>AA,>AA,>00                                  ; 
       byte >01,>55,>55,>55,>50,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 5 (shot | $17)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-17*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>7C,>00,>00                                  ; 
       byte >00,>00,>00,>FE,>00,>00                                  ; 
       byte >00,>00,>00,>FE,>00,>00                                  ; 
       byte >00,>00,>1C,>FE,>E0,>00                                  ; 
       byte >00,>00,>7F,>87,>FC,>00                                  ; 
       byte >00,>00,>FF,>FF,>FE,>00                                  ; 
       byte >00,>00,>00,>FF,>80,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>80                                  ; 
       byte >00,>03,>80,>00,>01,>00                                  ; 
       byte >00,>04,>40,>3F,>03,>00                                  ; 
       byte >00,>07,>00,>7F,>80,>00                                  ; 
       byte >00,>00,>00,>FF,>C0,>60                                  ; 
       byte >00,>00,>00,>FF,>C0,>00                                  ; 
       byte >00,>00,>7E,>FF,>DC,>00                                  ; 
       byte >00,>01,>86,>FF,>C3,>00                                  ; 
       byte >00,>02,>06,>FF,>C0,>C0                                  ; 
       byte >00,>04,>1F,>FF,>C0,>20                                  ; 
       byte >00,>08,>2F,>7B,>A0,>18                                  ; 
       byte >00,>10,>4F,>B5,>B8,>04                                  ; 
       byte >00,>20,>8F,>AE,>FE,>02                                  ; 
       byte >00,>41,>0F,>E0,>FC,>82                                  ; 
       byte >00,>42,>0F,>DF,>7C,>64                                  ; 
       byte >00,>84,>0F,>D3,>7C,>19                                  ; 
       byte >00,>84,>0F,>CA,>7C,>01                                  ; 
       byte >00,>84,>0F,>C6,>7C,>09                                  ; 
       byte >01,>08,>0F,>C2,>7C,>C5                                  ; 
       byte >01,>E8,>0F,>C2,>7C,>35                                  ; 
       byte >1C,>58,>0F,>82,>3C,>0B                                  ; 
       byte >03,>48,>0C,>02,>0C,>77                                  ; 
       byte >7D,>56,>04,>06,>04,>0D                                  ; 
       byte >02,>B8,>04,>04,>04,>00                                  ; 
       byte >01,>F8,>04,>04,>04,>00                                  ; 
       byte >00,>B0,>0F,>EC,>7C,>00                                  ; 
       byte >00,>00,>07,>FF,>FC,>00                                  ; 
       byte >00,>00,>0F,>F1,>FF,>80                                  ; 
       byte >00,>00,>7F,>FF,>FF,>C0                                  ; 
       byte >00,>00,>FF,>FF,>FF,>CE                                  ; 
       byte >07,>F9,>FF,>FF,>FF,>F1                                  ; 
       byte >08,>1D,>FF,>FF,>FF,>E1                                  ; 
       byte >08,>0F,>FF,>80,>7F,>C1                                  ; 
       byte >08,>07,>FF,>F1,>FF,>83                                  ; 
       byte >06,>03,>FF,>E0,>FF,>C4                                  ; 
       byte >01,>86,>FB,>80,>3F,>68                                  ; 
       byte >00,>6D,>38,>00,>0C,>B0                                  ; 
       byte >00,>02,>10,>00,>08,>40                                  ; 
       byte >00,>01,>20,>00,>08,>80                                  ; 
       byte >00,>00,>C0,>00,>05,>00                                  ; 
       byte >00,>00,>00,>00,>02,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>15,>50,>00,>00                                  ; 
       byte >00,>00,>AA,>AA,>00,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>02,>AA,>AA,>A0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>02,>AA,>AA,>A0,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>00,>AA,>AA,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* #UDGARRAY*character-15,100;character-16;character-17;character-07;(bandit-5-frames)

* Bandit 6
* 
* 
* .
* 
* Bandit 6 (stand off | $18)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-18*)
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>01,>EF,>F3,>C0,>00                                  ; 
       byte >00,>0F,>F8,>1F,>E0,>00                                  ; 
       byte >00,>1F,>FF,>FF,>F8,>00                                  ; 
       byte >00,>0F,>FF,>FF,>F0,>00                                  ; 
       byte >00,>03,>F8,>1F,>C0,>00                                  ; 
       byte >00,>00,>F0,>1E,>00,>00                                  ; 
       byte >00,>00,>1E,>6E,>00,>00                                  ; 
       byte >00,>00,>11,>0D,>00,>00                                  ; 
       byte >00,>00,>15,>25,>00,>00                                  ; 
       byte >00,>00,>11,>06,>00,>00                                  ; 
       byte >00,>00,>12,>04,>00,>00                                  ; 
       byte >00,>00,>7F,>FC,>00,>00                                  ; 
       byte >00,>01,>FF,>FC,>00,>00                                  ; 
       byte >00,>0F,>F0,>0B,>00,>00                                  ; 
       byte >00,>1F,>F0,>0B,>80,>00                                  ; 
       byte >00,>1F,>F8,>17,>E0,>00                                  ; 
       byte >00,>3F,>FC,>17,>F8,>00                                  ; 
       byte >00,>3F,>FA,>2F,>F8,>00                                  ; 
       byte >00,>7D,>F9,>CF,>FE,>00                                  ; 
       byte >00,>7D,>F8,>8F,>FE,>00                                  ; 
       byte >00,>7D,>F8,>8F,>FE,>00                                  ; 
       byte >00,>7D,>F8,>8F,>CF,>00                                  ; 
       byte >00,>FD,>F8,>8F,>CF,>00                                  ; 
       byte >00,>F9,>F8,>8F,>CF,>80                                  ; 
       byte >00,>F9,>F8,>8F,>CF,>C0                                  ; 
       byte >00,>F9,>F8,>8F,>C7,>C0                                  ; 
       byte >01,>F9,>F8,>8F,>C7,>C0                                  ; 
       byte >01,>F9,>F8,>8F,>C7,>C0                                  ; 
       byte >01,>F1,>F8,>8F,>C7,>C0                                  ; 
       byte >03,>F1,>F8,>8F,>C7,>C0                                  ; 
       byte >03,>F1,>F8,>4F,>C7,>E0                                  ; 
       byte >03,>F1,>F8,>4F,>C7,>80                                  ; 
       byte >03,>F0,>80,>40,>C9,>F0                                  ; 
       byte >03,>E0,>80,>40,>C7,>F8                                  ; 
       byte >00,>C0,>40,>40,>49,>E8                                  ; 
       byte >03,>E0,>40,>C0,>94,>54                                  ; 
       byte >07,>D0,>40,>81,>A6,>4A                                  ; 
       byte >1F,>C8,>20,>81,>4E,>28                                  ; 
       byte >22,>80,>FF,>FF,>9C,>24                                  ; 
       byte >04,>80,>A2,>25,>F0,>14                                  ; 
       byte >09,>00,>FF,>FF,>E0,>00                                  ; 
       byte >09,>00,>FF,>FC,>E0,>00                                  ; 
       byte >00,>00,>FE,>FE,>C0,>00                                  ; 
       byte >00,>00,>FE,>FA,>C0,>00                                  ; 
       byte >00,>00,>7E,>FA,>00,>00                                  ; 
       byte >00,>00,>7F,>FA,>C0,>00                                  ; 
       byte >00,>00,>7F,>FA,>C0,>00                                  ; 
       byte >00,>00,>3C,>7A,>C0,>00                                  ; 
       byte >00,>00,>3E,>3C,>C0,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>38,>2E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>1E,>00,>00                                  ; 
       byte >00,>00,>38,>3E,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>7A,>3F,>00,>00                                  ; 
       byte >00,>00,>7A,>3F,>00,>00                                  ; 
       byte >00,>00,>7A,>3F,>00,>00                                  ; 
       byte >00,>00,>7A,>1F,>00,>00                                  ; 
       byte >00,>00,>3A,>2F,>00,>00                                  ; 
       byte >00,>00,>3A,>3E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>AE,>00,>00                                  ; 
       byte >00,>00,>FB,>6E,>40,>00                                  ; 
       byte >00,>0B,>7A,>AF,>A0,>00                                  ; 
       byte >00,>1D,>FF,>77,>D4,>00                                  ; 
       byte >00,>B3,>FE,>BF,>EA,>00                                  ; 
       byte >01,>4F,>DD,>7F,>F5,>00                                  ; 
       byte >02,>BF,>AA,>AF,>EA,>80                                  ; 
       byte >05,>55,>55,>57,>F5,>00                                  ; 
       byte >02,>AA,>AA,>AA,>AA,>00                                  ; 
       byte >01,>55,>55,>55,>50,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 6 (draw | $19)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-19*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>07,>8F,>F1,>C0,>00                                  ; 
       byte >00,>0F,>F8,>1F,>E0,>00                                  ; 
       byte >00,>1F,>FF,>FF,>F0,>00                                  ; 
       byte >00,>0F,>FF,>FF,>E0,>00                                  ; 
       byte >00,>01,>F8,>1F,>80,>00                                  ; 
       byte >00,>00,>10,>1E,>00,>00                                  ; 
       byte >00,>00,>18,>2E,>00,>00                                  ; 
       byte >00,>00,>15,>4D,>00,>00                                  ; 
       byte >00,>00,>15,>25,>00,>00                                  ; 
       byte >00,>00,>11,>06,>00,>00                                  ; 
       byte >00,>00,>12,>04,>00,>00                                  ; 
       byte >00,>00,>1F,>FC,>00,>00                                  ; 
       byte >00,>1F,>FF,>FC,>00,>00                                  ; 
       byte >00,>7F,>F0,>0B,>00,>00                                  ; 
       byte >01,>FF,>F0,>0B,>80,>00                                  ; 
       byte >03,>FF,>F8,>17,>E0,>00                                  ; 
       byte >07,>FF,>FC,>17,>F8,>00                                  ; 
       byte >0F,>FF,>FA,>2F,>F8,>00                                  ; 
       byte >0F,>E1,>F9,>CF,>FE,>00                                  ; 
       byte >0F,>C1,>F8,>8F,>FE,>00                                  ; 
       byte >0F,>81,>F8,>8F,>7E,>00                                  ; 
       byte >0F,>81,>F8,>8F,>7E,>00                                  ; 
       byte >0F,>81,>F8,>8F,>7E,>00                                  ; 
       byte >0F,>81,>F8,>8F,>7E,>00                                  ; 
       byte >0F,>81,>F8,>8F,>7E,>00                                  ; 
       byte >1F,>91,>F8,>8F,>7E,>00                                  ; 
       byte >8F,>A1,>F8,>8F,>BE,>00                                  ; 
       byte >47,>C1,>F8,>4F,>BC,>00                                  ; 
       byte >32,>41,>F8,>47,>1C,>00                                  ; 
       byte >0F,>C0,>80,>42,>AC,>00                                  ; 
       byte >7F,>C0,>80,>42,>44,>00                                  ; 
       byte >03,>80,>40,>42,>04,>00                                  ; 
       byte >00,>00,>40,>C1,>0C,>00                                  ; 
       byte >00,>00,>40,>81,>9C,>00                                  ; 
       byte >00,>00,>20,>81,>FC,>00                                  ; 
       byte >00,>00,>FF,>F9,>8C,>00                                  ; 
       byte >00,>00,>A2,>24,>F8,>00                                  ; 
       byte >00,>00,>FF,>FD,>78,>00                                  ; 
       byte >00,>00,>FF,>FD,>E0,>00                                  ; 
       byte >00,>00,>FF,>FE,>C0,>00                                  ; 
       byte >00,>00,>FF,>7A,>C0,>00                                  ; 
       byte >00,>00,>7F,>7A,>00,>00                                  ; 
       byte >00,>00,>7F,>FA,>C0,>00                                  ; 
       byte >00,>00,>7F,>FA,>C0,>00                                  ; 
       byte >00,>00,>3C,>7A,>C0,>00                                  ; 
       byte >00,>00,>3E,>3E,>C0,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>38,>2E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>1E,>00,>00                                  ; 
       byte >00,>00,>38,>3E,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>7A,>3F,>00,>00                                  ; 
       byte >00,>00,>7A,>3F,>00,>00                                  ; 
       byte >00,>00,>7A,>3F,>00,>00                                  ; 
       byte >00,>00,>7A,>1F,>00,>00                                  ; 
       byte >00,>00,>3A,>2F,>00,>00                                  ; 
       byte >00,>00,>3A,>3E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>AE,>00,>00                                  ; 
       byte >00,>00,>FB,>6E,>40,>00                                  ; 
       byte >00,>0B,>7A,>AF,>A0,>00                                  ; 
       byte >00,>1D,>FF,>77,>D4,>00                                  ; 
       byte >00,>B3,>FE,>BF,>EA,>00                                  ; 
       byte >01,>4F,>DD,>7F,>F5,>00                                  ; 
       byte >02,>BF,>AA,>AF,>EA,>80                                  ; 
       byte >05,>55,>55,>57,>F5,>00                                  ; 
       byte >02,>AA,>AA,>AA,>AA,>00                                  ; 
       byte >01,>55,>55,>55,>50,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 6 (shot | $1A)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-1A*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>7C,>00,>00                                  ; 
       byte >00,>00,>00,>FE,>00,>00                                  ; 
       byte >00,>00,>00,>FE,>00,>00                                  ; 
       byte >00,>00,>1C,>FE,>E0,>00                                  ; 
       byte >00,>00,>7F,>87,>FC,>00                                  ; 
       byte >00,>00,>FF,>FF,>FE,>00                                  ; 
       byte >00,>02,>00,>FF,>80,>00                                  ; 
       byte >00,>01,>80,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>80                                  ; 
       byte >00,>00,>00,>00,>01,>00                                  ; 
       byte >00,>00,>00,>3F,>03,>00                                  ; 
       byte >00,>0D,>80,>7F,>80,>00                                  ; 
       byte >00,>06,>00,>FF,>C0,>60                                  ; 
       byte >00,>00,>00,>FF,>C0,>00                                  ; 
       byte >00,>00,>7E,>FF,>FE,>00                                  ; 
       byte >00,>01,>FE,>FF,>FF,>00                                  ; 
       byte >00,>03,>FE,>FF,>FF,>C0                                  ; 
       byte >00,>07,>FF,>FF,>FF,>E0                                  ; 
       byte >00,>0F,>EF,>7B,>BF,>F8                                  ; 
       byte >00,>1F,>CF,>B5,>BF,>FC                                  ; 
       byte >00,>3F,>8F,>AE,>FF,>FE                                  ; 
       byte >00,>7F,>0F,>E0,>FD,>FE                                  ; 
       byte >00,>7E,>0F,>DF,>7C,>7C                                  ; 
       byte >00,>FC,>0F,>D3,>7C,>19                                  ; 
       byte >00,>FC,>0F,>CA,>7C,>01                                  ; 
       byte >00,>FC,>0F,>C6,>7C,>09                                  ; 
       byte >01,>F8,>0F,>C2,>7C,>C5                                  ; 
       byte >01,>F8,>0F,>C2,>7C,>35                                  ; 
       byte >1C,>58,>0F,>82,>3C,>0B                                  ; 
       byte >03,>48,>0C,>02,>0C,>77                                  ; 
       byte >7D,>56,>04,>06,>04,>0D                                  ; 
       byte >02,>B8,>04,>04,>04,>00                                  ; 
       byte >01,>F8,>04,>04,>04,>00                                  ; 
       byte >00,>B0,>0F,>EC,>7C,>00                                  ; 
       byte >00,>00,>07,>FF,>FC,>00                                  ; 
       byte >00,>00,>0F,>F1,>FF,>80                                  ; 
       byte >00,>00,>7F,>FF,>FF,>C0                                  ; 
       byte >00,>00,>FF,>FF,>FF,>CE                                  ; 
       byte >07,>F9,>FF,>FF,>FF,>F1                                  ; 
       byte >08,>1D,>FF,>FF,>FF,>E1                                  ; 
       byte >08,>0F,>FF,>80,>7F,>C1                                  ; 
       byte >08,>07,>FF,>F1,>FF,>83                                  ; 
       byte >06,>03,>FF,>E0,>FF,>C4                                  ; 
       byte >01,>86,>FB,>80,>3F,>68                                  ; 
       byte >00,>6D,>38,>00,>0C,>B0                                  ; 
       byte >00,>02,>10,>00,>08,>40                                  ; 
       byte >00,>01,>20,>00,>08,>80                                  ; 
       byte >00,>00,>C0,>00,>05,>00                                  ; 
       byte >00,>00,>00,>00,>02,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>15,>50,>00,>00                                  ; 
       byte >00,>00,>AA,>AA,>00,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>02,>AA,>AA,>A0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>02,>AA,>AA,>A0,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>00,>AA,>AA,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* #UDGARRAY*character-18,100;character-19;character-1A;character-07;(bandit-6-frames)

* Bowie (special)
* 
* BOWIE - The dwarf. He is a constant practical joker. Make
* holes in his hats but take care that the bottom
* hat doesn't conceal a bomb or you will lose a
* life.
* 
* .
* 
* Bowie (7 hats | $1B)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-1B*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>30,>0C,>00,>00                                  ; 
       byte >00,>00,>32,>2C,>00,>00                                  ; 
       byte >00,>00,>30,>8C,>00,>00                                  ; 
       byte >00,>00,>10,>08,>00,>00                                  ; 
       byte >00,>00,>32,>4C,>00,>00                                  ; 
       byte >00,>00,>F9,>9F,>00,>00                                  ; 
       byte >00,>01,>FC,>3F,>80,>00                                  ; 
       byte >00,>02,>FE,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>A0,>00                                  ; 
       byte >00,>06,>FF,>7F,>60,>00                                  ; 
       byte >00,>05,>7F,>7E,>A0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>80,>00                                  ; 
       byte >00,>01,>7F,>FE,>80,>00                                  ; 
       byte >00,>00,>BF,>7D,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F0,>00,>00                                  ; 
       byte >00,>00,>1B,>D8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>FC,>00,>00                                  ; 
       byte >00,>00,>3E,>7C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>38,>1C,>00,>00                                  ; 
       byte >00,>00,>68,>1A,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>01,>FA,>BF,>80,>00                                  ; 
       byte >00,>07,>FD,>5F,>F0,>00                                  ; 
       byte >00,>07,>FA,>BF,>F0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>00,>AA,>AA,>80,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bowie (6 hats | $1C)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-1C*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>30,>0C,>00,>00                                  ; 
       byte >00,>00,>32,>2C,>00,>00                                  ; 
       byte >00,>00,>30,>8C,>00,>00                                  ; 
       byte >00,>00,>10,>08,>00,>00                                  ; 
       byte >00,>00,>32,>4C,>00,>00                                  ; 
       byte >00,>00,>F9,>9F,>00,>00                                  ; 
       byte >00,>01,>FC,>3F,>80,>00                                  ; 
       byte >00,>02,>FE,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>A0,>00                                  ; 
       byte >00,>06,>FF,>7F,>60,>00                                  ; 
       byte >00,>05,>7F,>7E,>A0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>80,>00                                  ; 
       byte >00,>01,>7F,>FE,>80,>00                                  ; 
       byte >00,>00,>BF,>7D,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F0,>00,>00                                  ; 
       byte >00,>00,>1B,>D8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>FC,>00,>00                                  ; 
       byte >00,>00,>3E,>7C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>38,>1C,>00,>00                                  ; 
       byte >00,>00,>68,>1A,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>01,>FA,>BF,>80,>00                                  ; 
       byte >00,>07,>FD,>5F,>F0,>00                                  ; 
       byte >00,>07,>FA,>BF,>F0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>00,>AA,>AA,>80,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bowie (5 hats | $1D)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-1D*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>30,>0C,>00,>00                                  ; 
       byte >00,>00,>32,>2C,>00,>00                                  ; 
       byte >00,>00,>30,>8C,>00,>00                                  ; 
       byte >00,>00,>10,>08,>00,>00                                  ; 
       byte >00,>00,>32,>4C,>00,>00                                  ; 
       byte >00,>00,>F9,>9F,>00,>00                                  ; 
       byte >00,>01,>FC,>3F,>80,>00                                  ; 
       byte >00,>02,>FE,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>A0,>00                                  ; 
       byte >00,>06,>FF,>7F,>60,>00                                  ; 
       byte >00,>05,>7F,>7E,>A0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>80,>00                                  ; 
       byte >00,>01,>7F,>FE,>80,>00                                  ; 
       byte >00,>00,>BF,>7D,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F0,>00,>00                                  ; 
       byte >00,>00,>1B,>D8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>FC,>00,>00                                  ; 
       byte >00,>00,>3E,>7C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>38,>1C,>00,>00                                  ; 
       byte >00,>00,>68,>1A,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>01,>FA,>BF,>80,>00                                  ; 
       byte >00,>07,>FD,>5F,>F0,>00                                  ; 
       byte >00,>07,>FA,>BF,>F0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>00,>AA,>AA,>80,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bowie (4 hats | $1E)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-1E*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>30,>0C,>00,>00                                  ; 
       byte >00,>00,>32,>2C,>00,>00                                  ; 
       byte >00,>00,>30,>8C,>00,>00                                  ; 
       byte >00,>00,>10,>08,>00,>00                                  ; 
       byte >00,>00,>32,>4C,>00,>00                                  ; 
       byte >00,>00,>F9,>9F,>00,>00                                  ; 
       byte >00,>01,>FC,>3F,>80,>00                                  ; 
       byte >00,>02,>FE,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>A0,>00                                  ; 
       byte >00,>06,>FF,>7F,>60,>00                                  ; 
       byte >00,>05,>7F,>7E,>A0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>80,>00                                  ; 
       byte >00,>01,>7F,>FE,>80,>00                                  ; 
       byte >00,>00,>BF,>7D,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F0,>00,>00                                  ; 
       byte >00,>00,>1B,>D8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>FC,>00,>00                                  ; 
       byte >00,>00,>3E,>7C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>38,>1C,>00,>00                                  ; 
       byte >00,>00,>68,>1A,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>01,>FA,>BF,>80,>00                                  ; 
       byte >00,>07,>FD,>5F,>F0,>00                                  ; 
       byte >00,>07,>FA,>BF,>F0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>00,>AA,>AA,>80,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bowie (3 hats | $1F)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-1F*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>30,>0C,>00,>00                                  ; 
       byte >00,>00,>32,>2C,>00,>00                                  ; 
       byte >00,>00,>30,>8C,>00,>00                                  ; 
       byte >00,>00,>10,>08,>00,>00                                  ; 
       byte >00,>00,>32,>4C,>00,>00                                  ; 
       byte >00,>00,>F9,>9F,>00,>00                                  ; 
       byte >00,>01,>FC,>3F,>80,>00                                  ; 
       byte >00,>02,>FE,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>A0,>00                                  ; 
       byte >00,>06,>FF,>7F,>60,>00                                  ; 
       byte >00,>05,>7F,>7E,>A0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>80,>00                                  ; 
       byte >00,>01,>7F,>FE,>80,>00                                  ; 
       byte >00,>00,>BF,>7D,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F0,>00,>00                                  ; 
       byte >00,>00,>1B,>D8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>FC,>00,>00                                  ; 
       byte >00,>00,>3E,>7C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>38,>1C,>00,>00                                  ; 
       byte >00,>00,>68,>1A,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>01,>FA,>BF,>80,>00                                  ; 
       byte >00,>07,>FD,>5F,>F0,>00                                  ; 
       byte >00,>07,>FA,>BF,>F0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>00,>AA,>AA,>80,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bowie (2 hats | $20)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-20*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>30,>0C,>00,>00                                  ; 
       byte >00,>00,>32,>2C,>00,>00                                  ; 
       byte >00,>00,>30,>8C,>00,>00                                  ; 
       byte >00,>00,>10,>08,>00,>00                                  ; 
       byte >00,>00,>32,>4C,>00,>00                                  ; 
       byte >00,>00,>F9,>9F,>00,>00                                  ; 
       byte >00,>01,>FC,>3F,>80,>00                                  ; 
       byte >00,>02,>FE,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>A0,>00                                  ; 
       byte >00,>06,>FF,>7F,>60,>00                                  ; 
       byte >00,>05,>7F,>7E,>A0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>80,>00                                  ; 
       byte >00,>01,>7F,>FE,>80,>00                                  ; 
       byte >00,>00,>BF,>7D,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F0,>00,>00                                  ; 
       byte >00,>00,>1B,>D8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>FC,>00,>00                                  ; 
       byte >00,>00,>3E,>7C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>38,>1C,>00,>00                                  ; 
       byte >00,>00,>68,>1A,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>01,>FA,>BF,>80,>00                                  ; 
       byte >00,>07,>FD,>5F,>F0,>00                                  ; 
       byte >00,>07,>FA,>BF,>F0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>00,>AA,>AA,>80,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bowie (1 hat | $21)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-21*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>30,>0C,>00,>00                                  ; 
       byte >00,>00,>32,>2C,>00,>00                                  ; 
       byte >00,>00,>30,>8C,>00,>00                                  ; 
       byte >00,>00,>10,>08,>00,>00                                  ; 
       byte >00,>00,>32,>4C,>00,>00                                  ; 
       byte >00,>00,>F9,>9F,>00,>00                                  ; 
       byte >00,>01,>FC,>3F,>80,>00                                  ; 
       byte >00,>02,>FE,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>A0,>00                                  ; 
       byte >00,>06,>FF,>7F,>60,>00                                  ; 
       byte >00,>05,>7F,>7E,>A0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>80,>00                                  ; 
       byte >00,>01,>7F,>FE,>80,>00                                  ; 
       byte >00,>00,>BF,>7D,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F0,>00,>00                                  ; 
       byte >00,>00,>1B,>D8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>FC,>00,>00                                  ; 
       byte >00,>00,>3E,>7C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>38,>1C,>00,>00                                  ; 
       byte >00,>00,>68,>1A,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>01,>FA,>BF,>80,>00                                  ; 
       byte >00,>07,>FD,>5F,>F0,>00                                  ; 
       byte >00,>07,>FA,>BF,>F0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>00,>AA,>AA,>80,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bowie (bomb | $22)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-22*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>40,>00,>00                                  ; 
       byte >00,>00,>00,>80,>00,>00                                  ; 
       byte >00,>00,>00,>80,>00,>00                                  ; 
       byte >00,>00,>00,>80,>00,>00                                  ; 
       byte >00,>00,>01,>80,>00,>00                                  ; 
       byte >00,>00,>03,>C0,>00,>00                                  ; 
       byte >00,>00,>07,>60,>00,>00                                  ; 
       byte >00,>00,>0F,>B0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>0F,>F0,>00,>00                                  ; 
       byte >00,>00,>1D,>F8,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>30,>0C,>00,>00                                  ; 
       byte >00,>00,>32,>2C,>00,>00                                  ; 
       byte >00,>00,>30,>8C,>00,>00                                  ; 
       byte >00,>00,>10,>08,>00,>00                                  ; 
       byte >00,>00,>32,>4C,>00,>00                                  ; 
       byte >00,>00,>F9,>9F,>00,>00                                  ; 
       byte >00,>01,>FC,>3F,>80,>00                                  ; 
       byte >00,>02,>FE,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>A0,>00                                  ; 
       byte >00,>06,>FF,>7F,>60,>00                                  ; 
       byte >00,>05,>7F,>7E,>A0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>80,>00                                  ; 
       byte >00,>01,>7F,>FE,>80,>00                                  ; 
       byte >00,>00,>BF,>7D,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F0,>00,>00                                  ; 
       byte >00,>00,>1B,>D8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>FC,>00,>00                                  ; 
       byte >00,>00,>3E,>7C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>38,>1C,>00,>00                                  ; 
       byte >00,>00,>68,>1A,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>01,>FA,>BF,>80,>00                                  ; 
       byte >00,>07,>FD,>5F,>F0,>00                                  ; 
       byte >00,>07,>FA,>BF,>F0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>00,>AA,>AA,>80,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bowie (cash | $23)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-23*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>60,>00,>00                                  ; 
       byte >00,>00,>08,>A0,>00,>00                                  ; 
       byte >00,>00,>14,>A0,>00,>00                                  ; 
       byte >00,>00,>3F,>C0,>00,>00                                  ; 
       byte >00,>00,>02,>40,>00,>00                                  ; 
       byte >00,>00,>07,>E0,>00,>00                                  ; 
       byte >00,>00,>0A,>10,>00,>00                                  ; 
       byte >00,>00,>0B,>D0,>00,>00                                  ; 
       byte >00,>00,>08,>50,>00,>00                                  ; 
       byte >00,>00,>0B,>D0,>00,>00                                  ; 
       byte >00,>00,>04,>20,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>3F,>FC,>00,>00                                  ; 
       byte >00,>00,>30,>0C,>00,>00                                  ; 
       byte >00,>00,>32,>2C,>00,>00                                  ; 
       byte >00,>00,>30,>8C,>00,>00                                  ; 
       byte >00,>00,>10,>08,>00,>00                                  ; 
       byte >00,>00,>32,>4C,>00,>00                                  ; 
       byte >00,>00,>F9,>9F,>00,>00                                  ; 
       byte >00,>01,>FC,>3F,>80,>00                                  ; 
       byte >00,>02,>FE,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>A0,>00                                  ; 
       byte >00,>06,>FF,>7F,>60,>00                                  ; 
       byte >00,>05,>7F,>7E,>A0,>00                                  ; 
       byte >00,>02,>FF,>7F,>40,>00                                  ; 
       byte >00,>03,>7F,>FE,>C0,>00                                  ; 
       byte >00,>02,>FF,>7F,>80,>00                                  ; 
       byte >00,>01,>7F,>FE,>80,>00                                  ; 
       byte >00,>00,>BF,>7D,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F0,>00,>00                                  ; 
       byte >00,>00,>1B,>D8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>F8,>00,>00                                  ; 
       byte >00,>00,>1F,>FC,>00,>00                                  ; 
       byte >00,>00,>3E,>7C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>3C,>3C,>00,>00                                  ; 
       byte >00,>00,>38,>1C,>00,>00                                  ; 
       byte >00,>00,>68,>1A,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>00,>78,>1E,>00,>00                                  ; 
       byte >00,>01,>FA,>BF,>80,>00                                  ; 
       byte >00,>07,>FD,>5F,>F0,>00                                  ; 
       byte >00,>07,>FA,>BF,>F0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>00,>AA,>AA,>80,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* #UDGARRAY*character-1B,50;character-1C;character-1D;character-1E;character-1F;character-20;character-21;character-22(bowie-bomb-frames)
* #UDGARRAY*character-1B,50;character-1C;character-1D;character-1E;character-1F;character-20;character-21;character-23(bowie-cash-frames)

* Julius (special)
* 
* JULIUS - The dandy. He is a box of surprises. He may give
* you a bag of gold or he might shoot you. Take
* things very carefully with this one.
* 
* .
* 
* Bandit 7 (stand off | $24)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-24*)
       byte >00,>00,>03,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>EC,>00,>00                                  ; 
       byte >00,>00,>0F,>EC,>00,>00                                  ; 
       byte >00,>00,>1F,>EC,>00,>00                                  ; 
       byte >00,>00,>18,>0C,>00,>00                                  ; 
       byte >00,>00,>1A,>14,>00,>00                                  ; 
       byte >00,>00,>19,>24,>00,>00                                  ; 
       byte >00,>00,>18,>04,>00,>00                                  ; 
       byte >00,>00,>08,>04,>00,>00                                  ; 
       byte >00,>00,>04,>C8,>00,>00                                  ; 
       byte >00,>00,>07,>F8,>00,>00                                  ; 
       byte >00,>00,>04,>08,>00,>00                                  ; 
       byte >00,>00,>04,>08,>00,>00                                  ; 
       byte >00,>00,>12,>0A,>00,>00                                  ; 
       byte >00,>00,>25,>D1,>80,>00                                  ; 
       byte >00,>00,>64,>C9,>E0,>00                                  ; 
       byte >00,>00,>E4,>C9,>F0,>00                                  ; 
       byte >00,>01,>E4,>C9,>FC,>00                                  ; 
       byte >00,>03,>F8,>A7,>FE,>00                                  ; 
       byte >00,>07,>FC,>AF,>FF,>00                                  ; 
       byte >00,>0F,>ED,>0B,>FF,>80                                  ; 
       byte >00,>0F,>CA,>19,>FF,>80                                  ; 
       byte >00,>1F,>CA,>19,>DF,>80                                  ; 
       byte >00,>1F,>CB,>29,>CF,>C0                                  ; 
       byte >00,>1F,>CD,>C9,>CF,>C0                                  ; 
       byte >00,>1F,>CA,>89,>CF,>C0                                  ; 
       byte >00,>1F,>CD,>89,>CF,>C0                                  ; 
       byte >00,>1F,>EA,>8B,>C7,>C0                                  ; 
       byte >00,>1F,>ED,>8B,>C7,>C0                                  ; 
       byte >00,>FF,>EA,>8B,>C7,>E0                                  ; 
       byte >00,>5F,>ED,>8B,>C7,>E0                                  ; 
       byte >00,>33,>7A,>8F,>C7,>E0                                  ; 
       byte >00,>1C,>FD,>4F,>C7,>E0                                  ; 
       byte >00,>09,>FA,>CF,>C7,>80                                  ; 
       byte >00,>1F,>FD,>4F,>C9,>F0                                  ; 
       byte >00,>20,>FA,>CF,>C7,>F8                                  ; 
       byte >00,>3F,>FD,>4F,>C9,>E8                                  ; 
       byte >00,>20,>FA,>CF,>94,>54                                  ; 
       byte >00,>3E,>FD,>8F,>A6,>4A                                  ; 
       byte >00,>31,>FA,>89,>4E,>28                                  ; 
       byte >00,>43,>FF,>F1,>9C,>24                                  ; 
       byte >00,>88,>FA,>35,>F0,>14                                  ; 
       byte >00,>9E,>FB,>FD,>E0,>00                                  ; 
       byte >01,>18,>7B,>FC,>E0,>00                                  ; 
       byte >01,>1E,>7B,>FE,>C0,>00                                  ; 
       byte >00,>8A,>77,>7E,>C0,>00                                  ; 
       byte >00,>9E,>F7,>7E,>00,>00                                  ; 
       byte >00,>41,>F7,>7E,>C0,>00                                  ; 
       byte >00,>3F,>F7,>7E,>C0,>00                                  ; 
       byte >00,>01,>EF,>7E,>C0,>00                                  ; 
       byte >00,>01,>EF,>7E,>C0,>00                                  ; 
       byte >00,>01,>EF,>7E,>00,>00                                  ; 
       byte >00,>00,>DF,>7F,>00,>00                                  ; 
       byte >00,>00,>7F,>7F,>00,>00                                  ; 
       byte >00,>00,>7F,>7F,>00,>00                                  ; 
       byte >00,>00,>7F,>3F,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3C,>1E,>00,>00                                  ; 
       byte >00,>00,>36,>2A,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>AE,>00,>00                                  ; 
       byte >00,>00,>FB,>6E,>40,>00                                  ; 
       byte >00,>0B,>7A,>AC,>A0,>00                                  ; 
       byte >00,>1C,>FF,>74,>D4,>00                                  ; 
       byte >00,>B1,>FE,>B8,>6A,>00                                  ; 
       byte >01,>43,>DD,>78,>35,>00                                  ; 
       byte >02,>BF,>AA,>AC,>2A,>80                                  ; 
       byte >05,>55,>55,>57,>F5,>00                                  ; 
       byte >02,>AA,>AA,>AA,>AA,>00                                  ; 
       byte >01,>55,>55,>55,>50,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 7 (draw | $25)
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-25*)
       byte >00,>00,>03,>E0,>00,>00                                  ; 
       byte >00,>00,>0F,>EC,>00,>00                                  ; 
       byte >00,>00,>0F,>EC,>00,>00                                  ; 
       byte >00,>00,>1F,>EC,>00,>00                                  ; 
       byte >00,>00,>18,>0C,>00,>00                                  ; 
       byte >00,>00,>1A,>14,>00,>00                                  ; 
       byte >00,>00,>19,>24,>00,>00                                  ; 
       byte >00,>00,>18,>04,>00,>00                                  ; 
       byte >00,>00,>08,>04,>00,>00                                  ; 
       byte >00,>00,>04,>C8,>00,>00                                  ; 
       byte >00,>00,>07,>F8,>00,>00                                  ; 
       byte >00,>00,>04,>08,>00,>00                                  ; 
       byte >00,>00,>04,>08,>00,>00                                  ; 
       byte >00,>00,>12,>0A,>00,>00                                  ; 
       byte >00,>00,>25,>D1,>00,>00                                  ; 
       byte >00,>00,>64,>C9,>80,>00                                  ; 
       byte >00,>01,>E4,>C9,>C0,>00                                  ; 
       byte >00,>03,>E4,>C9,>E0,>00                                  ; 
       byte >00,>07,>F8,>A7,>F0,>00                                  ; 
       byte >00,>0F,>FC,>AF,>F8,>00                                  ; 
       byte >00,>1F,>ED,>0B,>F8,>00                                  ; 
       byte >00,>1F,>CA,>19,>FC,>00                                  ; 
       byte >00,>1F,>CA,>19,>FC,>00                                  ; 
       byte >00,>1F,>CB,>29,>FE,>00                                  ; 
       byte >00,>1F,>CD,>C9,>FE,>00                                  ; 
       byte >00,>1F,>CA,>89,>7E,>00                                  ; 
       byte >00,>1F,>CD,>89,>7E,>00                                  ; 
       byte >00,>1D,>EA,>8B,>7E,>00                                  ; 
       byte >00,>1D,>ED,>8B,>7E,>00                                  ; 
       byte >00,>1D,>EA,>8B,>7E,>00                                  ; 
       byte >00,>1D,>ED,>8B,>7E,>00                                  ; 
       byte >00,>1D,>FA,>8F,>BE,>00                                  ; 
       byte >00,>1D,>FD,>4F,>BC,>00                                  ; 
       byte >00,>1D,>FA,>CF,>1C,>00                                  ; 
       byte >00,>1F,>FD,>4E,>AC,>00                                  ; 
       byte >00,>0F,>FA,>CE,>44,>00                                  ; 
       byte >00,>0F,>FD,>4E,>04,>00                                  ; 
       byte >00,>0F,>FA,>CD,>0C,>00                                  ; 
       byte >00,>0F,>FD,>8D,>9C,>00                                  ; 
       byte >00,>07,>FA,>89,>FC,>00                                  ; 
       byte >00,>07,>FF,>F1,>8C,>00                                  ; 
       byte >00,>07,>FA,>34,>F8,>00                                  ; 
       byte >00,>01,>FB,>FD,>78,>00                                  ; 
       byte >00,>01,>FB,>FD,>E0,>00                                  ; 
       byte >00,>01,>FB,>FE,>C0,>00                                  ; 
       byte >00,>01,>F7,>7E,>C0,>00                                  ; 
       byte >00,>01,>F7,>7E,>00,>00                                  ; 
       byte >00,>01,>F7,>7E,>C0,>00                                  ; 
       byte >00,>01,>F7,>7E,>C0,>00                                  ; 
       byte >00,>01,>EF,>7E,>C0,>00                                  ; 
       byte >00,>01,>EF,>7E,>C0,>00                                  ; 
       byte >00,>01,>EF,>7E,>00,>00                                  ; 
       byte >00,>00,>DF,>7F,>00,>00                                  ; 
       byte >00,>00,>7F,>7F,>00,>00                                  ; 
       byte >00,>00,>7F,>7F,>00,>00                                  ; 
       byte >00,>00,>7F,>3F,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>7E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3F,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3C,>1E,>00,>00                                  ; 
       byte >00,>00,>36,>2A,>00,>00                                  ; 
       byte >00,>00,>3E,>3E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>2E,>00,>00                                  ; 
       byte >00,>00,>3A,>AE,>00,>00                                  ; 
       byte >00,>00,>FB,>6E,>40,>00                                  ; 
       byte >00,>0B,>7A,>AC,>A0,>00                                  ; 
       byte >00,>1C,>FF,>74,>D4,>00                                  ; 
       byte >00,>B1,>FE,>B8,>6A,>00                                  ; 
       byte >01,>43,>DD,>78,>35,>00                                  ; 
       byte >02,>BF,>AA,>AC,>2A,>80                                  ; 
       byte >05,>55,>55,>57,>F5,>00                                  ; 
       byte >02,>AA,>AA,>AA,>AA,>00                                  ; 
       byte >01,>55,>55,>55,>50,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 7 (shot | $26)
character_26:                          ; b660
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-26*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>02,>00,>00                                  ; 
       byte >00,>00,>02,>00,>00,>00                                  ; 
       byte >00,>00,>00,>44,>00,>00                                  ; 
       byte >00,>00,>20,>20,>30,>00                                  ; 
       byte >00,>00,>58,>00,>40,>00                                  ; 
       byte >00,>00,>20,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>3F,>00,>00                                  ; 
       byte >00,>00,>00,>7F,>40,>00                                  ; 
       byte >00,>00,>00,>FF,>40,>00                                  ; 
       byte >00,>00,>7E,>FF,>5C,>00                                  ; 
       byte >00,>01,>FE,>FF,>5F,>00                                  ; 
       byte >00,>03,>FE,>FF,>5F,>C0                                  ; 
       byte >00,>07,>FE,>FF,>DF,>E0                                  ; 
       byte >00,>0F,>EF,>7F,>BF,>F8                                  ; 
       byte >00,>1F,>CF,>A4,>BF,>FC                                  ; 
       byte >00,>3F,>8F,>AE,>FF,>FE                                  ; 
       byte >00,>7F,>0F,>E0,>FC,>FE                                  ; 
       byte >00,>7E,>0F,>DF,>7C,>7C                                  ; 
       byte >00,>FC,>0F,>E4,>7C,>19                                  ; 
       byte >00,>FC,>0F,>D4,>7C,>01                                  ; 
       byte >00,>FC,>0F,>EA,>7C,>09                                  ; 
       byte >01,>F8,>0F,>D6,>7C,>C5                                  ; 
       byte >01,>F8,>0F,>EA,>7C,>35                                  ; 
       byte >1C,>58,>0F,>D6,>7C,>0B                                  ; 
       byte >03,>48,>0F,>EA,>7C,>77                                  ; 
       byte >7D,>56,>0F,>D6,>7C,>0D                                  ; 
       byte >02,>B8,>0F,>EC,>7C,>00                                  ; 
       byte >01,>F8,>0F,>D4,>7C,>00                                  ; 
       byte >00,>B0,>6F,>EC,>7C,>00                                  ; 
       byte >00,>00,>FF,>BF,>FC,>00                                  ; 
       byte >00,>01,>FF,>B1,>FE,>00                                  ; 
       byte >00,>1B,>F7,>FF,>FF,>80                                  ; 
       byte >00,>3B,>B0,>7F,>FF,>CE                                  ; 
       byte >07,>FF,>FF,>FF,>FF,>F1                                  ; 
       byte >08,>19,>FF,>FF,>FF,>E1                                  ; 
       byte >08,>09,>FF,>80,>7F,>C1                                  ; 
       byte >08,>07,>FF,>F1,>FF,>83                                  ; 
       byte >06,>03,>FF,>E0,>FF,>C4                                  ; 
       byte >01,>86,>FB,>80,>3F,>68                                  ; 
       byte >00,>6D,>38,>00,>0C,>B0                                  ; 
       byte >00,>02,>10,>00,>08,>40                                  ; 
       byte >00,>01,>20,>00,>08,>80                                  ; 
       byte >00,>00,>C0,>00,>05,>00                                  ; 
       byte >00,>00,>00,>00,>02,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>15,>50,>00,>00                                  ; 
       byte >00,>00,>AA,>AA,>00,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>02,>AA,>AA,>A0,>00                                  ; 
       byte >00,>05,>55,>55,>50,>00                                  ; 
       byte >00,>02,>AA,>AA,>A0,>00                                  ; 
       byte >00,>01,>55,>55,>40,>00                                  ; 
       byte >00,>00,>AA,>AA,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* Bandit 7 (floor | $27)
character_27:                          ; b870
       byte >00,>00,>00,>00,>00,>00                                  ; {#CHARACTERS(character-27*)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>FE,>00,>00                                  ; 
       byte >00,>00,>01,>FB,>00,>00                                  ; 
       byte >00,>00,>07,>FB,>E0,>00                                  ; 
       byte >00,>00,>0F,>13,>F0,>00                                  ; 
       byte >00,>00,>3F,>D7,>F8,>06                                  ; 
       byte >00,>00,>7F,>FF,>FC,>19                                  ; 
       byte >07,>E0,>FC,>CC,>3E,>31                                  ; 
       byte >08,>19,>FF,>FF,>FF,>61                                  ; 
       byte >08,>0F,>FF,>EF,>FF,>C1                                  ; 
       byte >08,>07,>FF,>EF,>FF,>81                                  ; 
       byte >06,>03,>FF,>FF,>FE,>C2                                  ; 
       byte >01,>86,>FE,>00,>FD,>6C                                  ; 
       byte >02,>ED,>3F,>FF,>F8,>B8                                  ; 
       byte >01,>52,>15,>FF,>78,>50                                  ; 
       byte >00,>AC,>2A,>FE,>B8,>A8                                  ; 
       byte >00,>56,>75,>55,>5D,>50                                  ; 
       byte >00,>2B,>EA,>02,>AE,>A0                                  ; 
       byte >00,>15,>50,>00,>55,>40                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }
* #UDGARRAY*character-24,100;character-25;character-26;character-27(julius-frames)

* Door Frame 1
* 
* The door is shut.
door_frame_1:                          ; ba80
       byte >00,>00,>00,>00,>00,>00,>00                              ; {#UDGARRAY7,attr=48,scale=4,step=7;(#PC)-(#PC+$236)-$01-$38(door-1)
       byte >00,>00,>00,>00,>00,>00,>00                              ; 
       byte >00,>00,>00,>00,>00,>00,>00                              ; 
       byte >00,>00,>00,>00,>00,>00,>00                              ; 
       byte >00,>00,>00,>00,>00,>00,>00                              ; 
       byte >00,>00,>00,>00,>00,>00,>00                              ; 
       byte >00,>3F,>FF,>FF,>FF,>FC,>00                              ; 
       byte >00,>20,>00,>00,>00,>0C,>00                              ; 
       byte >00,>10,>00,>00,>00,>14,>00                              ; 
       byte >00,>28,>00,>00,>00,>24,>00                              ; 
       byte >00,>14,>00,>00,>00,>44,>00                              ; 
       byte >00,>2A,>07,>FF,>FF,>84,>00                              ; 
       byte >00,>15,>00,>00,>00,>84,>00                              ; 
       byte >00,>2A,>00,>00,>00,>84,>00                              ; 
       byte >00,>15,>00,>00,>00,>84,>00                              ; 
       byte >00,>2A,>00,>00,>00,>84,>0F                              ; 
       byte >00,>15,>00,>00,>00,>84,>08                              ; 
       byte >00,>2A,>00,>00,>00,>84,>0A                              ; 
       byte >00,>15,>00,>00,>00,>84,>0A                              ; 
       byte >00,>2A,>00,>00,>00,>84,>08                              ; 
       byte >00,>15,>00,>00,>00,>04,>08                              ; 
       byte >00,>2A,>00,>00,>00,>04,>08                              ; 
       byte >00,>15,>FF,>FF,>FF,>C4,>08                              ; 
       byte >00,>2B,>FF,>FF,>FF,>E4,>0A                              ; 
       byte >00,>17,>FF,>FF,>FF,>F4,>0A                              ; 
       byte >00,>2F,>FF,>FF,>FF,>FC,>08                              ; 
       byte >00,>3F,>FF,>FF,>FF,>FC,>0F                              ; 
       byte >00,>00,>00,>00,>00,>00,>00                              ; 
       byte >00,>00,>00,>00,>00,>00,>00                              ; 
       byte >00,>3F,>FF,>FF,>FF,>F8,>00                              ; 
       byte >00,>10,>00,>00,>00,>18,>00                              ; 
       byte >00,>28,>00,>00,>00,>28,>00                              ; 
       byte >00,>14,>00,>00,>00,>48,>00                              ; 
       byte >00,>2A,>00,>00,>00,>88,>00                              ; 
       byte >00,>15,>1F,>FF,>FF,>08,>00                              ; 
       byte >00,>2A,>00,>00,>01,>08,>00                              ; 
       byte >00,>15,>00,>00,>01,>08,>00                              ; 
       byte >00,>2A,>00,>00,>01,>08,>00                              ; 
       byte >00,>15,>00,>00,>01,>08,>00                              ; 
       byte >00,>2A,>00,>00,>01,>08,>00                              ; 
       byte >7F,>95,>00,>00,>01,>08,>00                              ; 
       byte >40,>AA,>00,>00,>01,>08,>00                              ; 
       byte >40,>95,>00,>00,>01,>08,>00                              ; 
       byte >4C,>AA,>00,>00,>01,>08,>00                              ; 
       byte >52,>95,>00,>00,>00,>08,>00                              ; 
       byte >52,>AB,>FF,>FF,>FF,>08,>00                              ; 
       byte >52,>97,>FF,>FF,>FF,>88,>00                              ; 
       byte >4C,>AF,>FF,>FF,>FF,>C8,>00                              ; 
       byte >40,>9F,>FF,>FF,>FF,>E8,>00                              ; 
       byte >4C,>BF,>FF,>FF,>FF,>F8,>00                              ; 
       byte >4C,>80,>00,>00,>00,>00,>00                              ; 
       byte >44,>80,>00,>00,>00,>00,>00                              ; 
       byte >44,>80,>00,>00,>00,>00,>00                              ; 
       byte >40,>80,>00,>00,>00,>00,>00                              ; 
       byte >40,>80,>00,>00,>00,>00,>00                              ; 
       byte >7F,>80,>00,>00,>00,>00,>00                              ; 
       byte >00,>00,>00,>00,>00,>00,>00                              ; 
       byte >05,>FF,>FF,>FF,>FF,>FF,>80                              ; 
       byte >02,>00,>00,>00,>00,>01,>80                              ; 
       byte >05,>00,>00,>00,>00,>02,>80                              ; 
       byte >02,>80,>00,>00,>00,>04,>80                              ; 
       byte >05,>43,>FF,>FF,>FF,>F8,>80                              ; 
       byte >02,>80,>00,>00,>00,>10,>80                              ; 
       byte >05,>40,>00,>00,>00,>10,>80                              ; 
       byte >02,>80,>00,>00,>00,>10,>8F                              ; 
       byte >05,>40,>00,>00,>00,>10,>88                              ; 
       byte >02,>80,>00,>00,>00,>10,>8A                              ; 
       byte >05,>40,>00,>00,>00,>10,>8A                              ; 
       byte >02,>80,>00,>00,>00,>10,>88                              ; 
       byte >05,>40,>00,>00,>00,>10,>88                              ; 
       byte >02,>80,>00,>00,>00,>10,>88                              ; 
       byte >05,>40,>00,>00,>00,>10,>88                              ; 
       byte >02,>80,>00,>00,>00,>10,>8A                              ; 
       byte >05,>40,>00,>00,>00,>10,>8A                              ; 
       byte >02,>80,>00,>00,>00,>10,>88                              ; 
       byte >05,>40,>00,>00,>00,>10,>8F                              ; 
       byte >02,>80,>00,>00,>00,>00,>80                              ; 
       byte >05,>40,>00,>00,>00,>00,>80                              ; 
       byte >02,>80,>00,>00,>00,>00,>80                              ; 
       byte >05,>7F,>FF,>FF,>FF,>F0,>80                              ; 
       byte >02,>FF,>FF,>FF,>FF,>F8,>80                              ; 
       byte >05,>FF,>FF,>FF,>FF,>FC,>80                              ; 
       byte >03,>FF,>FF,>FF,>FF,>FE,>80                              ; 
       byte >05,>FF,>FF,>FF,>FF,>FF,>80                              ; 
       byte >00,>00,>00,>00,>00,>00,>00                              ; 
       byte >00,>00,>00,>00,>00,>00,>00                              ; 
       byte >00,>00,>00,>00,>00,>00,>00                              ; 
       byte >00,>00,>00,>00,>00,>00,>00                              ; }

* Door Frame 2
* 
* The door is only slightly open.
door_frame_2:                          ; bce8
       byte >FF,>FF,>FF,>FF,>FF                                      ; {#UDGARRAY5,attr=48,scale=4,step=5;(#PC)-(#PC+$194)-$01-$28(door-2)
       byte >88,>0F,>FF,>FF,>FF                                      ; 
       byte >88,>00,>0F,>FF,>FF                                      ; 
       byte >88,>00,>00,>07,>FF                                      ; 
       byte >88,>00,>00,>00,>07                                      ; 
       byte >88,>00,>00,>00,>00                                      ; 
       byte >88,>00,>00,>00,>00                                      ; 
       byte >88,>01,>F8,>00,>00                                      ; 
       byte >88,>02,>87,>F8,>00                                      ; 
       byte >88,>01,>40,>06,>00                                      ; 
       byte >88,>02,>A0,>0A,>00                                      ; 
       byte >88,>01,>51,>FA,>00                                      ; 
       byte >88,>02,>A0,>0A,>00                                      ; 
       byte >88,>01,>50,>0A,>00                                      ; 
       byte >88,>02,>A0,>0A,>00                                      ; 
       byte >88,>01,>50,>0A,>00                                      ; 
       byte >88,>02,>A0,>0A,>07                                      ; 
       byte >88,>01,>50,>0A,>04                                      ; 
       byte >88,>02,>A0,>0A,>05                                      ; 
       byte >88,>01,>50,>0A,>05                                      ; 
       byte >88,>02,>A0,>0A,>04                                      ; 
       byte >88,>01,>50,>0A,>04                                      ; 
       byte >88,>02,>AF,>E2,>04                                      ; 
       byte >88,>01,>7F,>F2,>05                                      ; 
       byte >88,>02,>FF,>FA,>05                                      ; 
       byte >88,>01,>FF,>FE,>05                                      ; 
       byte >88,>00,>00,>00,>06                                      ; 
       byte >88,>00,>00,>00,>00                                      ; 
       byte >88,>00,>00,>00,>00                                      ; 
       byte >88,>03,>FF,>FE,>00                                      ; 
       byte >88,>01,>00,>06,>00                                      ; 
       byte >88,>02,>80,>0A,>00                                      ; 
       byte >88,>01,>53,>E2,>00                                      ; 
       byte >88,>02,>A0,>0A,>00                                      ; 
       byte >88,>01,>50,>0A,>00                                      ; 
       byte >88,>02,>A0,>0A,>00                                      ; 
       byte >88,>01,>50,>0A,>00                                      ; 
       byte >88,>02,>A0,>0A,>00                                      ; 
       byte >88,>01,>50,>0A,>00                                      ; 
       byte >88,>02,>A0,>0A,>00                                      ; 
       byte >8B,>F1,>50,>0A,>00                                      ; 
       byte >8A,>12,>A0,>0A,>00                                      ; 
       byte >8A,>71,>50,>0A,>00                                      ; 
       byte >8A,>92,>A0,>0A,>00                                      ; 
       byte >8A,>91,>50,>0A,>00                                      ; 
       byte >8A,>92,>A1,>E2,>00                                      ; 
       byte >8A,>91,>7F,>F2,>00                                      ; 
       byte >8A,>72,>BF,>FA,>00                                      ; 
       byte >8A,>11,>7F,>FE,>00                                      ; 
       byte >8A,>D2,>FE,>00,>00                                      ; 
       byte >8A,>D0,>00,>00,>00                                      ; 
       byte >8A,>50,>00,>00,>00                                      ; 
       byte >8A,>50,>00,>00,>00                                      ; 
       byte >8A,>10,>00,>00,>00                                      ; 
       byte >8A,>70,>00,>00,>00                                      ; 
       byte >8B,>80,>00,>00,>00                                      ; 
       byte >88,>00,>00,>00,>00                                      ; 
       byte >88,>00,>00,>00,>00                                      ; 
       byte >88,>00,>03,>FF,>C0                                      ; 
       byte >88,>01,>FE,>00,>40                                      ; 
       byte >88,>3F,>00,>01,>40                                      ; 
       byte >88,>40,>00,>02,>40                                      ; 
       byte >88,>20,>00,>FD,>40                                      ; 
       byte >88,>50,>1F,>01,>41                                      ; 
       byte >88,>2A,>E0,>01,>44                                      ; 
       byte >88,>55,>00,>01,>45                                      ; 
       byte >88,>2A,>00,>01,>45                                      ; 
       byte >88,>55,>00,>01,>44                                      ; 
       byte >88,>2A,>00,>01,>44                                      ; 
       byte >88,>55,>00,>01,>44                                      ; 
       byte >88,>2A,>00,>01,>44                                      ; 
       byte >88,>55,>00,>01,>45                                      ; 
       byte >88,>2A,>00,>01,>45                                      ; 
       byte >88,>55,>00,>01,>46                                      ; 
       byte >88,>2A,>00,>01,>44                                      ; 
       byte >88,>55,>00,>00,>40                                      ; 
       byte >88,>2A,>00,>00,>40                                      ; 
       byte >88,>55,>00,>0F,>40                                      ; 
       byte >88,>2A,>01,>FF,>C0                                      ; 
       byte >88,>55,>3F,>FF,>C0                                      ; 
       byte >88,>2F,>FF,>E0,>00                                      ; 
       byte >88,>5F,>FC,>00,>00                                      ; 
       byte >88,>3F,>00,>00,>00                                      ; 
       byte >88,>5C,>00,>00,>07                                      ; 
       byte >88,>00,>00,>00,>FF                                      ; 
       byte >88,>00,>00,>3F,>FF                                      ; 
       byte >88,>00,>3F,>FF,>FF                                      ; 
       byte >FF,>FF,>FF,>FF,>FF                                      ; }

* Door Frame 3
* 
* The door is nearly fully open.
door_frame_3:                          ; bea0
       byte >FF,>FF,>FF                                              ; {#UDGARRAY3,attr=48,scale=4,step=3;(#PC)-(#PC+$F2)-$01-$18(door-3)
       byte >84,>7F,>FF                                              ; 
       byte >84,>03,>FF                                              ; 
       byte >84,>00,>7F                                              ; 
       byte >84,>00,>0F                                              ; 
       byte >84,>08,>01                                              ; 
       byte >84,>0E,>00                                              ; 
       byte >84,>15,>80                                              ; 
       byte >84,>0A,>60                                              ; 
       byte >84,>15,>10                                              ; 
       byte >84,>0A,>50                                              ; 
       byte >84,>15,>30                                              ; 
       byte >84,>0A,>10                                              ; 
       byte >84,>15,>10                                              ; 
       byte >84,>0A,>10                                              ; 
       byte >84,>15,>10                                              ; 
       byte >84,>0A,>11                                              ; 
       byte >84,>15,>11                                              ; 
       byte >84,>0A,>11                                              ; 
       byte >84,>15,>11                                              ; 
       byte >84,>0A,>11                                              ; 
       byte >84,>15,>11                                              ; 
       byte >84,>0A,>11                                              ; 
       byte >84,>15,>F1                                              ; 
       byte >84,>0B,>F1                                              ; 
       byte >84,>17,>F1                                              ; 
       byte >84,>00,>00                                              ; 
       byte >84,>00,>00                                              ; 
       byte >84,>00,>00                                              ; 
       byte >84,>0B,>F0                                              ; 
       byte >84,>14,>10                                              ; 
       byte >84,>0A,>10                                              ; 
       byte >84,>15,>70                                              ; 
       byte >84,>0A,>10                                              ; 
       byte >84,>15,>10                                              ; 
       byte >84,>0A,>10                                              ; 
       byte >84,>15,>10                                              ; 
       byte >84,>0A,>10                                              ; 
       byte >84,>15,>10                                              ; 
       byte >84,>0A,>10                                              ; 
       byte >85,>D5,>10                                              ; 
       byte >85,>4A,>10                                              ; 
       byte >85,>D5,>10                                              ; 
       byte >85,>2A,>10                                              ; 
       byte >85,>35,>10                                              ; 
       byte >85,>2A,>F0                                              ; 
       byte >85,>35,>F0                                              ; 
       byte >85,>2B,>F0                                              ; 
       byte >85,>57,>F0                                              ; 
       byte >85,>CF,>80                                              ; 
       byte >85,>40,>00                                              ; 
       byte >85,>40,>00                                              ; 
       byte >85,>40,>00                                              ; 
       byte >85,>40,>00                                              ; 
       byte >85,>40,>00                                              ; 
       byte >85,>40,>00                                              ; 
       byte >85,>80,>00                                              ; 
       byte >84,>00,>00                                              ; 
       byte >84,>00,>00                                              ; 
       byte >84,>01,>E0                                              ; 
       byte >84,>5E,>10                                              ; 
       byte >84,>20,>10                                              ; 
       byte >84,>50,>08                                              ; 
       byte >84,>28,>1C                                              ; 
       byte >84,>54,>65                                              ; 
       byte >84,>2A,>85                                              ; 
       byte >84,>55,>05                                              ; 
       byte >84,>2A,>05                                              ; 
       byte >84,>55,>05                                              ; 
       byte >84,>2A,>05                                              ; 
       byte >84,>55,>05                                              ; 
       byte >84,>2A,>05                                              ; 
       byte >84,>55,>05                                              ; 
       byte >84,>2A,>05                                              ; 
       byte >84,>55,>04                                              ; 
       byte >84,>2A,>04                                              ; 
       byte >84,>55,>04                                              ; 
       byte >84,>2A,>04                                              ; 
       byte >84,>55,>1C                                              ; 
       byte >84,>2A,>FC                                              ; 
       byte >84,>57,>E0                                              ; 
       byte >84,>2F,>00                                              ; 
       byte >84,>78,>00                                              ; 
       byte >84,>00,>0F                                              ; 
       byte >84,>00,>7F                                              ; 
       byte >84,>03,>FF                                              ; 
       byte >84,>3F,>FF                                              ; 
       byte >FF,>FF,>FF                                              ; }

* Door Frame 4
* 
* The door is fully open.
door_frame_4:                          ; bfa8
       byte >7E                                                      ; {#UDGARRAY1,attr=48,scale=4,step=1;(#PC)-(#PC+$50)-$01-$08(door-4)
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >40                                                      ; 
       byte >7F                                                      ; }

* BANG!
* 
* Used by the routines at #R$C687 and #R$CD47.
bang:                                  ; c000
       .call @prep_bang                ; CALL $C046        ; Clear the screen.
       movb @bytes+3,b                 ; LD B,$03          ; {Pass #R$F000 to #R$C061.
       li   hl,bang_frame_1            ; LD HL,$F000       ; 
       .call @bang_copy                ; CALL $C061        ; }
       movb @bytes+3,b                 ; LD B,$03          ; {Pass #R$F100 to #R$C061.
       li   hl,bang_frame_2            ; LD HL,$F100       ; 
       .call @bang_copy                ; CALL $C061        ; }
       movb @bytes+3,b                 ; LD B,$03          ; {Pass #R$F200 to #R$C061.
       li   hl,bang_frame_3            ; LD HL,$F200       ; 
       .call @bang_copy                ; CALL $C061        ; }
       .call @shot_sound_2_alias       ; CALL $6502        ; {Calls $6502 twice.
       .call @shot_sound_2_alias       ; CALL $6502        ; }
       movb @bytes+6,b                 ; LD B,$06          ; {Pass #R$F300 to #R$C061.
       li   hl,bang_frame_4            ; LD HL,$F300       ; 
       .call @bang_copy                ; CALL $C061        ; }
       movb @bytes+5,b                 ; LD B,$05          ; {Pass #R$F400 to #R$C061.
       li   hl,bang_frame_5            ; LD HL,$F400       ; 
       .call @bang_copy                ; CALL $C061        ; }
       movb @bytes+5,b                 ; LD B,$05          ; {Pass #R$F500 to #R$C061.
       li   hl,bang_frame_6            ; LD HL,$F500       ; 
       .call @bang_copy                ; CALL $C061        ; }
       movb @bytes+8,b                 ; LD B,$08          ; {Blanks the display by passing a
       li   hl,_5000                   ; LD HL,$5000       ; "clear" part of the screen buffer
       .call @bang_copy                ; CALL $C061        ; to #R$C061.}
       movb @bytes+64,b                ; LD B,$40          ; {Jump to #R$C06D.
       b    @bang_halt_loop            ; JP $C06D          ; }
prep_bang:                             ; c046
       li   hl,loading                 ; LD HL,$4000       ; {Writes $00 to all 6144 bytes of
       li   de,loading+1               ; LD DE,$4001       ; the screen buffer (i.e. "blanks
       li   bc,>17ff                   ; LD BC,$17FF       ; it").
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .ldir                           ; LDIR              ; }
       li   hl,_5800                   ; LD HL,$5800       ; {Continues into the attributes buffer, and writes $02 (red ink) to every location.
       li   de,_5800+1                 ; LD DE,$5801       ; #TABLE(default,centre)
       li   bc,>02ff                   ; LD BC,$02FF       ; { =h Value | =h Ink | =h Paper | =h Bright }
       movb @bytes+2,*hl               ; LD (HL),$02       ; { $02 | $00 | $00 | $00 }
       .ldir                           ; LDIR              ; TABLE#}
       .ret                            ; RET               ; Returns.
bang_copy:                             ; c061
       .push bc                        ; PUSH BC           ; {Sets the screen location and the
       li   bc,>2008                   ; LD BC,$2008       ; bang image frame sizing, then
       li   de,_4080+1932              ; LD DE,$480C       ; calls #R$C071, issues a short
       .ex_de_hl                       ; EX DE,HL          ; pause and ...
       .call @bang_print               ; CALL $C071        ; 
       .pop bc                         ; POP BC            ; 
bang_halt_loop:                        ; c06d
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $C06D        ; }
       jne  bang_halt_loop             ;                   
       .ret                            ; RET               ; ...returns.
bang_print:                            ; c071
       .push bc                        ; PUSH BC           ; {Copy the bang image frame to the
       .push hl                        ; PUSH HL           ; screen buffer.
       sb   b,b                        ; LD B,$00          ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .ldir                           ; LDIR              ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .pop hl                         ; POP HL            ; 
       ab   one,h                      ; INC H             ; 
       movb h,a                        ; LD A,H            ; 
       andi a,7*256                    ; AND $07           ; 
       jne  !                          ; CALL Z,$C085      ; 
       .call @bang_next_line           ;                   
!
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $C071        ; }
       jne  bang_print                 ;                   
       .ret                            ; RET               ; Return.
bang_next_line:                        ; c085
       movb h,a                        ; LD A,H            ; {Handles working out the next
       sb   @bytes+8,a                 ; SUB $08           ; line progressively in the screen
       movb a,h                        ; LD H,A            ; buffer.
       movb @l,a                       ; LD A,L            ; 
       ab   @bytes+32,a                ; ADD A,$20         ; 
       movb a,@l                       ; LD L,A            ; 
       joc  !                          ; RET NC            ; TODO: check code. 
       .ret                            ;                   
!
       movb h,a                        ; LD A,H            ; 
       ab   @bytes+8,a                 ; ADD A,$08         ; 
       movb a,h                        ; LD H,A            ; }
       .ret                            ; RET               ; Return.
       byte >C3,>90,>EA,>04,>33,>49,>44,>46                          ; 
       byte >47,>B1,>D2,>04,>32                                      ; 

* Character Set
* 
* All characters are 8x16.
* 
* .
* 
* Lettering.
       byte >00,>00,>28,>6C,>AA,>C6,>82,>44                          ; {#CHARACTERSET,7(char-A) Letter
       byte >FE,>FE,>C6,>EE,>AA,>EE,>00,>00                          ; "A".}
       byte >00,>00,>E8,>AC,>EA,>E6,>62,>6C                          ; {#CHARACTERSET,7(char-B) Letter
       byte >6C,>62,>E6,>EA,>AC,>E8,>00,>00                          ; "B".}
       byte >00,>00,>28,>6C,>AA,>E6,>E2,>E0                          ; {#CHARACTERSET,7(char-C) Letter
       byte >E0,>E2,>E6,>AA,>6C,>28,>00,>00                          ; "C".}
       byte >00,>00,>E8,>AC,>EA,>E6,>66,>66                          ; {#CHARACTERSET,7(char-D) Letter
       byte >66,>66,>E6,>EA,>AC,>E8,>00,>00                          ; "D".}
       byte >00,>00,>EC,>AA,>E6,>E2,>60,>6C                          ; {#CHARACTERSET,7(char-E) Letter
       byte >6C,>60,>E2,>E6,>AA,>EC,>00,>00                          ; "E".}
       byte >00,>00,>EC,>AA,>E6,>E2,>60,>60                          ; {#CHARACTERSET,7(char-F) Letter
       byte >6C,>6C,>E0,>E0,>A0,>E0,>00,>00                          ; "F".}
       byte >00,>00,>28,>6C,>AA,>E6,>E2,>E0                          ; {#CHARACTERSET,7(char-G) Letter
       byte >EE,>E6,>E6,>AA,>6C,>28,>00,>00                          ; "G".}
       byte >00,>00,>EE,>AA,>EE,>EE,>6C,>7C                          ; {#CHARACTERSET,7(char-H) Letter
       byte >7C,>6C,>EE,>EE,>AA,>EE,>00,>00                          ; "H".}
       byte >00,>00,>38,>28,>38,>38,>10,>10                          ; {#CHARACTERSET,7(char-I) Letter
       byte >10,>10,>38,>38,>28,>38,>00,>00                          ; "I".}
       byte >00,>00,>0E,>0A,>0E,>0E,>04,>04                          ; {#CHARACTERSET,7(char-J) Letter
       byte >04,>8E,>CE,>AA,>6C,>28,>00,>00                          ; "J".}
       byte >00,>00,>E2,>A6,>EA,>EC,>68,>60                          ; {#CHARACTERSET,7(char-K) Letter
       byte >60,>68,>EC,>EA,>A6,>E2,>00,>00                          ; "K".}
       byte >00,>00,>E0,>A0,>E0,>E0,>40,>40                          ; {#CHARACTERSET,7(char-L) Letter
       byte >40,>40,>E6,>E6,>BE,>FE,>00,>00                          ; "L".}
       byte >00,>00,>C6,>EE,>BA,>FE,>54,>54                          ; {#CHARACTERSET,7(char-M) Letter
       byte >44,>44,>EE,>EE,>AA,>EE,>00,>00                          ; "M".}
       byte >00,>00,>EE,>AA,>EE,>EE,>64,>74                          ; {#CHARACTERSET,7(char-N) Letter
       byte >5C,>4C,>EE,>EE,>AA,>EE,>00,>00                          ; "N".}
       byte >00,>00,>28,>6C,>AA,>C6,>C6,>C6                          ; {#CHARACTERSET,7(char-O) Letter
       byte >C6,>C6,>C6,>AA,>6C,>28,>00,>00                          ; "O".}
       byte >00,>00,>E8,>AC,>EA,>E6,>46,>4E                          ; {#CHARACTERSET,7(char-P) Letter
       byte >54,>58,>E0,>E0,>A0,>E0,>00,>00                          ; "P".}
       byte >00,>00,>28,>6C,>AA,>C6,>C6,>C6                          ; {#CHARACTERSET,7(char-Q) Letter
       byte >D6,>DA,>CA,>AC,>66,>2A,>00,>00                          ; "Q".}
       byte >00,>00,>E8,>AC,>EA,>E6,>46,>4E                          ; {#CHARACTERSET,7(char-R) Letter
       byte >54,>58,>E4,>EA,>A6,>E2,>00,>00                          ; "R".}
       byte >00,>00,>2E,>6E,>AA,>CE,>C0,>FC                          ; {#CHARACTERSET,7(char-S) Letter
       byte >7A,>06,>E6,>A6,>EC,>E8,>00,>00                          ; "S".}
       byte >00,>00,>FE,>BA,>FE,>D6,>10,>10                          ; {#CHARACTERSET,7(char-T) Letter
       byte >10,>10,>38,>38,>28,>38,>00,>00                          ; "T".}
       byte >00,>00,>EE,>AA,>EE,>C6,>C6,>C6                          ; {#CHARACTERSET,7(char-U) Letter
       byte >44,>82,>C6,>AA,>6C,>28,>00,>00                          ; "U".}
       byte >00,>00,>EE,>AA,>EE,>C6,>C6,>44                          ; {#CHARACTERSET,7(char-V) Letter
       byte >82,>C6,>6C,>6C,>38,>10,>00,>00                          ; "V".}
       byte >00,>00,>EE,>AA,>EE,>EE,>44,>44                          ; {#CHARACTERSET,7(char-W) Letter
       byte >44,>54,>D6,>FE,>EE,>C6,>00,>00                          ; "W".}
       byte >00,>00,>82,>C6,>AA,>6C,>38,>10                          ; {#CHARACTERSET,7(char-X) Letter
       byte >10,>38,>6C,>AA,>C6,>82,>00,>00                          ; "X".}
       byte >00,>00,>0E,>8A,>CE,>AE,>74,>34                          ; {#CHARACTERSET,7(char-Y) Letter
       byte >04,>0C,>94,>F8,>50,>20,>00,>00                          ; "Y".}
       byte >00,>00,>EE,>BA,>FE,>00,>0E,>1C                          ; {#CHARACTERSET,7(char-Z) Letter
       byte >28,>70,>00,>EE,>BA,>EE,>00,>00                          ; "Z".}
* Numbering.
       byte >00,>00,>0E,>0A,>1E,>2E,>34,>24                          ; {#CHARACTERSET,7(char-1) Number
       byte >04,>04,>0E,>0E,>0A,>0E,>00,>00                          ; "1".}
       byte >00,>00,>3C,>5A,>E6,>0E,>1C,>38                          ; {#CHARACTERSET,7(char-2) Number
       byte >70,>A0,>CE,>CA,>FE,>FE,>00,>00                          ; "2".}
       byte >00,>00,>FE,>BE,>E6,>0A,>1C,>38                          ; {#CHARACTERSET,7(char-3) Number
       byte >3C,>0A,>E6,>A6,>FC,>78,>00,>00                          ; "3".}
       byte >00,>00,>0E,>1A,>3E,>5E,>EE,>CE                          ; {#CHARACTERSET,7(char-4) Number
       byte >BE,>FE,>04,>0E,>0A,>0E,>00,>00                          ; "4".}
       byte >00,>00,>FE,>FA,>CE,>C0,>C0,>B8                          ; {#CHARACTERSET,7(char-5) Number
       byte >7C,>06,>C6,>EE,>74,>38,>00,>00                          ; "5".}
       byte >00,>00,>7C,>FE,>EA,>C6,>C0,>F8                          ; {#CHARACTERSET,7(char-6) Number
       byte >F4,>CE,>C6,>AA,>7C,>38,>00,>00                          ; "6".}
       byte >00,>00,>FE,>FE,>A6,>E6,>0E,>14                          ; {#CHARACTERSET,7(char-7) Number
       byte >18,>30,>30,>30,>30,>30,>00,>00                          ; "7".}
       byte >00,>00,>38,>7C,>AA,>C6,>6C,>38                          ; {#CHARACTERSET,7(char-8) Number
       byte >38,>6C,>C6,>AA,>7C,>38,>00,>00                          ; "8".}
       byte >00,>00,>38,>74,>AE,>C6,>E6,>5E                          ; {#CHARACTERSET,7(char-9) Number
       byte >3E,>06,>C6,>EE,>BE,>7C,>00,>00                          ; "9".}
       byte >00,>00,>38,>7C,>AA,>C6,>C6,>C6                          ; {#CHARACTERSET,7(char-0) Number
       byte >C6,>C6,>C6,>AA,>7C,>38,>00,>00                          ; "0".}

* Routine at C2E0
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       movb @_c8fd,a                   ; LD A,($C8FD)      ; 
       movb a,@l                       ; LD L,A            ; 
       sb   h,h                        ; LD H,$00          ; 
       li   de,bang_next_line+602      ; LD DE,$C2DF       ; 
       a    de,hl                      ; ADD HL,DE         ; 
       li   ix,duel_print_lives+1      ; LD IX,$C6A8       ; 
       movb @8(ix),a                   ; LD A,(IX+$08)     ; 
       socb *hl,a                      ; OR (HL)           ; 

* Draw Playfield
* 
* Used by the routine at #R$CC3A.
draw_playfield:                        ; c300
       movb *ix,@l                     ; LD L,(IX+$00)     ; {Set #R$D5E6 as the destination address at #R$C3B7.
       movb @1(ix),h                   ; LD H,(IX+$01)     ; 
       mov  hl,@alias_copy_routine+1   ; LD ($C3B8),HL     ; }
       li   hl,loading                 ; LD HL,$4000       ; {Clears the screen buffer by writing $00 to all 6912
       li   de,loading+1               ; LD DE,$4001       ; memory locations.
       li   bc,>1aff                   ; LD BC,$1AFF       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .ldir                           ; LDIR              ; }
* Draws the numbering of the deposit boxes on the left and right of the screen.
       li   hl,loading+1               ; LD HL,$4001       ; {Points #REGhl to $4001 (screen buffer) and #REGde to
       li   de,slot_numbers_left       ; LD DE,$DFA0       ; #R$DFA0, then calls the routine at #R$C3B7.
       li   bc,>080c                   ; LD BC,$080C       ; 
       .call @alias_copy_routine       ; CALL $C3B7        ; }
       li   hl,loading+19              ; LD HL,$4013       ; {Points #REGhl to $4013 (screen buffer) and #REGde to
       li   de,slot_numbers_right      ; LD DE,$E000       ; #R$E000, then calls the routine at #R$C3B7.
       li   bc,>080c                   ; LD BC,$080C       ; 
       .call @alias_copy_routine       ; CALL $C3B7        ; }
* Draws the centrepiece "till" image.
       li   hl,loading+14              ; LD HL,$400E       ; {Points #REGhl to $400E (screen buffer) and #REGde to
       li   de,centrepiece             ; LD DE,$E060       ; #R$E060, then calls the routine at #R$C3B7.
       movb @bytes+24,b                ; LD B,$18          ; 
       movb @bytes+4,@c                ; LD C,$04          ; 
       .call @alias_copy_routine       ; CALL $C3B7        ; }
* Draws the game play area (doors and wall sections).
       li   hl,_4060                   ; LD HL,$4060       ; {Points #REGhl to $4060 (screen buffer) and #REGde to
       li   de,doors_top               ; LD DE,$E0C0       ; #R$E0C0, then calls the routine at #R$C3B7.
       li   bc,>0820                   ; LD BC,$0820       ; 
       .call @alias_copy_routine       ; CALL $C3B7        ; }
       li   hl,_4080                   ; LD HL,$4080       ; {Points #REGhl to $4080 (screen buffer) and #REGde to
       li   de,wall_left               ; LD DE,$E1C0       ; #R$E1C0, then calls the routine at #R$C3B7.
       movb @bytes+88,b                ; LD B,$58          ; 
       movb @bytes+2,@c                ; LD C,$02          ; 
       .call @alias_copy_routine       ; CALL $C3B7        ; }
       li   hl,_4080+9                 ; LD HL,$4089       ; {Points #REGhl to $4089 (screen buffer) and #REGde to
       li   de,wall_middle             ; LD DE,$E270       ; #R$E270, then calls the routine at #R$C3B7.
       movb @bytes+88,b                ; LD B,$58          ; 
       movb @bytes+4,@c                ; LD C,$04          ; 
       .call @alias_copy_routine       ; CALL $C3B7        ; }
       li   hl,_4080+20                ; LD HL,$4094       ; {Points #REGhl to $4094 (screen buffer) and #REGde to
       li   de,wall_middle             ; LD DE,$E270       ; #R$E270, then calls the routine at #R$C3B7.
       movb @bytes+88,b                ; LD B,$58          ; 
       movb @bytes+4,@c                ; LD C,$04          ; 
       .call @alias_copy_routine       ; CALL $C3B7        ; }
       li   hl,_4080+31                ; LD HL,$409F       ; {Points #REGhl to $409F (screen buffer) and #REGde to
       li   de,door_frame_side         ; LD DE,$E3D0       ; #R$E3D0, then calls the routine at #R$C3B7.
       movb @bytes+88,b                ; LD B,$58          ; 
       movb one,@c                     ; LD C,$01          ; 
       .call @alias_copy_routine       ; CALL $C3B7        ; }
       li   hl,_48e0                   ; LD HL,$48E0       ; {Points #REGhl to $48E0 (screen buffer) and #REGde to
       li   de,door_bottom             ; LD DE,$E428       ; #R$E428, then calls the routine at #R$C3B7.
       li   bc,>0820                   ; LD BC,$0820       ; 
       .call @alias_copy_routine       ; CALL $C3B7        ; }
* Draws the Bank Teller desks.
       li   hl,_5020                   ; LD HL,$5020       ; {Points #REGhl to $5020 (screen buffer) and #REGde to
       li   de,tellers                 ; LD DE,$E528       ; #R$E528, then calls the routine at #R$C3B7.
       li   bc,>2020                   ; LD BC,$2020       ; 
       .call @alias_copy_routine       ; CALL $C3B7        ; }
* Writes the "SCORE" and "LIVES" labels (these aren't text, they're images).
       li   hl,_50c0+1                 ; LD HL,$50C1       ; {Points #REGhl to $50C1 (screen buffer) and #REGde to
       li   de,score_text_image        ; LD DE,$E928       ; #R$E928, then calls the routine at #R$C3B7.
       li   bc,>1006                   ; LD BC,$1006       ; 
       .call @alias_copy_routine       ; CALL $C3B7        ; }
       li   hl,_5020+144               ; LD HL,$50B0       ; {Points #REGhl to $50B0 (screen buffer) and #REGde to
       li   de,lives_text_image        ; LD DE,$E988       ; #R$E988, then calls the routine at #R$C3B7.
       li   bc,>1606                   ; LD BC,$1606       ; 
       .call @alias_copy_routine       ; CALL $C3B7        ; }
* Copies attribute data to the screen.
       li   hl,_ed00                   ; LD HL,$ED00       ; {Copies $300 bytes of attribute data from #R$ED00 to
       li   de,_5800                   ; LD DE,$5800       ; $5800.
       li   bc,>0300                   ; LD BC,$0300       ; 
       .ldir                           ; LDIR              ; }
       .ret                            ; RET               ; Return.
alias_copy_routine:                    ; c3b7
       .call @copy_routine             ; CALL $D5E6        ; Draws the image pointed to in #REGde to the screen
                                                           ; location in #REGhl using the dimensions in #REGbc.
       .ret                            ; RET               ; Return.
       b    @door_buffer               ; JP $EA90          ; {Unused.
       nop                             ; NOP               ; 
       nop                             ; NOP               ; }

* Routine at C3C0
* 
* Used by the routine at #R$C7C0.
_c3c0:
       .call @init_duel                ; CALL $C3DD        ; Call #R$C3DD.
       movb @_c421,a                   ; LD A,($C421)      ; Grab #R$C421.
       jnc  rebuild                    ; JR NC,$C3C9       ; TODO: check code. 
       ab   one,a                      ; INC A             ; 
rebuild:                               ; c3c9
       movb @bytes+32,b                ; LD B,$20          ; {Interrupt driven HALT loop ($20 cycles).
rebuild_halt_loop:                     ; c3cb
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $C3CB        ; }
       jne  rebuild_halt_loop          ;                   
       movb a,@e                       ; LD E,A            ; 
       mov  @lives_addr,hl             ; LD HL,($5B86)     ; {Is #R$CC59 more than $06?
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@bytes+6                 ; CP $06            ; }
       jl   _c3d8                      ; JR C,$C3D8        ; If so, jump to #R$C3D8.
       nop                             ; NOP               ; 
_c3d8:
       ; AND A                         ; AND A             ; {If #R$CC59 is zero then return.
       movb @e,a                       ; LD A,E            ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ; SCF                           ; SCF               ; {Set the carry flag and return.
       .ret                            ; RET               ; }
* Kicks off the duelling bonus round.
init_duel:                             ; c3dd
       .push bc                        ; PUSH BC           ; {Stashes #REGbc and #REGde.
       .push de                        ; PUSH DE           ; }
       li   de,print_two_tone_text_alias ; LD DE,$5B80       ; {Copies $1B of data from #REGhl to #R$5B80.
       li   bc,>001b                   ; LD BC,$001B       ; 
       .ldir                           ; LDIR              ; }
       b    @duel_prep                 ; JP $C422          ; Jump to #R$C422.

* Duel Bonus Round Data.
* 
* .
* 
* .
* 
* Dueller 1 data.
duel_data:                             ; c3ea
       byte >00                                                      ; Dueller state ("0" is complete).
       byte >80                                                      ; Dueller timer.
       byte >12                                                      ; 
       byte >01                                                      ; Dueller position (1).
       byte >C5,>40                                                  ; Screen position above dueller to display "EXTRA"
                                                                     ; or points.
       byte >00                                                      ; 
       byte >00                                                      ; Bonus points (x100, e.g. "9" == "900").
       byte >01                                                      ; 
       byte >01                                                      ; Current frame?
       byte >12,>13,>14                                              ; Dueller 1 frames.
       byte >00,>08,>08,>0A                                          ; 
* Dueller 2 data.
       byte >00                                                      ; Dueller state ("0" is complete).
       byte >80                                                      ; Dueller timer.
       byte >12                                                      ; 
       byte >02                                                      ; Dueller position (2).
       byte >CD,>40                                                  ; Screen position above dueller to display "EXTRA"
                                                                     ; or points.
       byte >00                                                      ; 
       byte >00                                                      ; Bonus points (x100, e.g. "9" == "900").
       byte >01                                                      ; 
       byte >01                                                      ; Current frame?
       byte >15,>16,>17                                              ; Dueller 2 frames.
       byte >00,>08,>08,>0A                                          ; 
* Dueller 3 data.
       byte >00                                                      ; Dueller state ("0" is complete).
       byte >80                                                      ; Dueller timer.
       byte >12                                                      ; 
       byte >03                                                      ; Dueller position (3).
       byte >D5,>40                                                  ; Screen position above dueller to display "EXTRA"
                                                                     ; or points.
       byte >00                                                      ; 
       byte >00                                                      ; Bonus points (x100, e.g. "9" == "900").
       byte >01                                                      ; 
       byte >01                                                      ; Current frame?
       byte >18,>19,>1A                                              ; Dueller 3 frames.
       byte >00,>08,>08,>0A                                          ; 
* Buffer holding bonus text.
duel_bonus_text:                       ; c41d
       text '900',>ff                                                ; Bonus text.
* Not sure ... it is used though @todo.
_c421:
       byte >00                                                      ; 

* Duel Bonus Round.
* 
* Used by the routine at #R$C3C0.
duel_prep:                             ; c422
       li   hl,duel_data               ; LD HL,$C3EA       ; {Copies $33 bytes of data from #R$C3EA to #R$5BC0 (and
       li   de,dueller_1               ; LD DE,$5BC0       ; across all three duellists).
       li   bc,>0033                   ; LD BC,$0033       ; 
       .ldir                           ; LDIR              ; }
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       movb b,a                        ; LD A,B            ; 
       li   ix,dueller_1               ; LD IX,$5BC0       ; {Calls #R$C67F with #R$5BC0.
       .call @duel_update_timer        ; CALL $C67F        ; }
       movb @c,a                       ; LD A,C            ; 
       li   ix,dueller_2               ; LD IX,$5BD1       ; {Calls #R$C67F with #R$5BD1.
       .call @duel_update_timer        ; CALL $C67F        ; }
       movb d,a                        ; LD A,D            ; 
       li   ix,dueller_3               ; LD IX,$5BE2       ; {Calls #R$C67F with #R$5BE2.
       .call @duel_update_timer        ; CALL $C67F        ; }
       sb   a,a                        ; XOR A             ; {Reset the flags (writes $00 to #R$C6E2, #R$C6E3 and
       li   hl,duel_bang_flag          ; LD HL,$C6E2       ; #R$C6E4).
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       movb a,*hl                      ; LD (HL),A         ; }
       movb @_c421,a                   ; LD A,($C421)      ; #R$C421.
       socb one,a                      ; OR $01            ; 
       cb   a,@bytes+32                ; CP $20            ; 
       li   de,>0001                   ; LD DE,$0001       ; 
       jnc  duel_clear_screen          ; JR NC,$C463       ; TODO: check code. 
       movb a,b                        ; LD B,A            ; 
       li   de,>0020                   ; LD DE,$0020       ; 
duel_prep_loop:                        ; c460
       dec  de                         ; DEC DE            ; 
       sb   one,b                      ; DJNZ $C460        ; 
       jne  duel_prep_loop             ;                   
duel_clear_screen:                     ; c463
       mov  de,@_c52e                  ; LD ($C52E),DE     ; ....
* Clears down the screen buffer.
       li   hl,loading                 ; LD HL,$4000       ; {Writes $00 to all 6144 bytes of the screen buffer
       li   de,loading+1               ; LD DE,$4001       ; (i.e. "blanks it").
       li   bc,>1aff                   ; LD BC,$1AFF       ; 
       sb   a,a                        ; XOR A             ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .ldir                           ; LDIR              ; }
* Writes the attributes for the playfield (sky, grass, footer).
       li   hl,_5880                   ; LD HL,$5880       ; {Writes $28 to $5880 in the attribute buffer $180 times...
       li   de,_5880+1                 ; LD DE,$5881       ; #TABLE(default,centre,centre,centre,centre)
       li   bc,>0180                   ; LD BC,$0180       ; { =h Value | =h Ink | =h Paper | =h Bright }
       movb @bytes+40,*hl              ; LD (HL),$28       ; { $00 | $05 | $00 | $00 }
       .ldir                           ; LDIR              ; TABLE#}
       movb @bytes+32,*hl              ; LD (HL),$20       ; {...continuing, writes $20 $80 times...
       li   bc,>0080                   ; LD BC,$0080       ; #TABLE(default,centre,centre,centre,centre)
       .ldir                           ; LDIR              ; { =h Value | =h Ink | =h Paper | =h Bright }
                                                           ; { $00 | $04 | $00 | $00 }
                                                           ; TABLE#}
       movb @bytes+7,*hl               ; LD (HL),$07       ; {...and finally, writes $07 $7F times.
       li   bc,>007f                   ; LD BC,$007F       ; #TABLE(default,centre,centre,centre,centre)
       .ldir                           ; LDIR              ; { =h Value | =h Ink | =h Paper | =h Bright }
                                                           ; { $07 | $00 | $00 | $00 }
                                                           ; TABLE#}
* Creates the footer.
       li   hl,playfield_lives         ; LD HL,$C655       ; {Point to #R$C655 and print using #R$C6A7.
       .call @duel_print_lives         ; CALL $C6A7        ; }
       .call @draw_life_images_alias   ; CALL $5B83        ; 
       li   hl,playfield_score         ; LD HL,$C64D       ; {Point to #R$C64D and prints using #R$5B80.
       li   de,_50c0                   ; LD DE,$50C0       ; #TABLE(default,centre,centre,centre,centre)
       li   bc,>0703                   ; LD BC,$0703       ; { =h Value | =h Ink | =h Paper | =h Bright }
       .call @print_two_tone_text_alias ; CALL $5B80        ; { $07 | $07 | $00 | $00 }
                                                           ; { $03 | $03 | $00 | $00 }
                                                           ; TABLE#}
       .call @draw_score_alias         ; CALL $5B98        ; Writes the players score.
* Initialise duellers.
       li   ix,dueller_1               ; LD IX,$5BC0       ; {Initialise #R$5BC0 (draws frame 1).
       movb @10(ix),a                  ; LD A,(IX+$0A)     ; 
       .call @duel_draw_bandit_prep    ; CALL $C661        ; }
       li   ix,dueller_2               ; LD IX,$5BD1       ; {Initialise #R$5BD1 (draws frame 1).
       movb @10(ix),a                  ; LD A,(IX+$0A)     ; 
       .call @duel_draw_bandit_prep    ; CALL $C661        ; }
       li   ix,dueller_3               ; LD IX,$5BE2       ; {Initialise #R$5BE2 (draws frame 1).
       movb @10(ix),a                  ; LD A,(IX+$0A)     ; 
       .call @duel_draw_bandit_prep    ; CALL $C661        ; }
* Count down 5-4-3-2-1...0!
       movb @bytes+53,a                ; LD A,$35          ; {Initialise countdown to "5" seconds ($35 in ASCII),
countdown_loop:                        ; c4c7
       .push af                        ; PUSH AF           ; hold this at #R$C6E0.
       movb a,@duel_timer              ; LD ($C6E0),A      ; }
       .call @duel_print_countdown     ; CALL $C6D3        ; 
       movb @bytes+49,b                ; LD B,$31          ; {Short halt loop (1 second pause).
countdown_halt_loop:                   ; c4d0
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $C4D0        ; }
       jne  countdown_halt_loop        ;                   
       .pop af                         ; POP AF            ; {Keep looping back to #R$C4C7 until the countdown is
       sb   one,a                      ; DEC A             ; "0" ($30 in ASCII).
       cb   a,@bytes+48                ; CP $30            ; 
       jne  countdown_loop             ; JR NZ,$C4C7       ; }
       movb @bytes+32,a                ; LD A,$20          ; {Blank the countdown timer by printing a "SPACE" ($20
       movb a,@duel_timer              ; LD ($C6E0),A      ; in ASCII) over the top of it.
       .call @duel_print_countdown     ; CALL $C6D3        ; }
       jmp  duel_start                 ; JR $C4F9          ; Jump to #R$C4F9 and start the duel!
duel_loop:                             ; c4e3
       li   ix,dueller_1               ; LD IX,$5BC0       ; {Calls #R$C530 with #R$5BC0.
       .call @duel_actions             ; CALL $C530        ; }
       li   ix,dueller_2               ; LD IX,$5BD1       ; {Calls #R$C530 with #R$5BD1.
       .call @duel_actions             ; CALL $C530        ; }
       li   ix,dueller_3               ; LD IX,$5BE2       ; {Calls #R$C530 with #R$5BE2.
       .call @duel_actions             ; CALL $C530        ; }
       .ret                            ; RET               ; Return.
* DRAW!
duel_start:                            ; c4f9
       mov  @_c52e,de                  ; LD DE,($C52E)     ; {#REGde=#R$C52E and push it on the stack.
duel_start_loop:                       ; c4fd
       .push de                        ; PUSH DE           ; }
       .call @duel_loop                ; CALL $C4E3        ; 
       .pop de                         ; POP DE            ; 
       dec  de                         ; DEC DE            ; 
       movb d,a                        ; LD A,D            ; 
       socb @e,a                       ; OR E              ; 
       jne  duel_start_loop            ; JR NZ,$C4FD       ; 
       li   ix,dueller_1               ; LD IX,$5BC0       ; 
       .call @_c58b                    ; CALL $C58B        ; 
       li   ix,dueller_2               ; LD IX,$5BD1       ; 
       .call @_c58b                    ; CALL $C58B        ; 
       li   ix,dueller_3               ; LD IX,$5BE2       ; 
       .call @_c58b                    ; CALL $C58B        ; 
       li   ix,dueller_1               ; LD IX,$5BC0       ; 
       movb @8(ix),a                   ; LD A,(IX+$08)     ; 
       socb @25(ix),a                  ; OR (IX+$19)       ; 
       socb @42(ix),a                  ; OR (IX+$2A)       ; 
       jne  !                          ; JP Z,$C690        ; 
       b    @duel_complete             ;                   
!
       jmp  duel_start                 ; JR $C4F9          ; 
_c52e:
       data 31                                                       ; 
duel_actions:                          ; c530
       .call @duel_action_1            ; CALL $C543        ; 
       .call @duel_action_4            ; CALL $C56B        ; 
       .call @duel_action_2            ; CALL $C550        ; 
       .call @duel_action_4            ; CALL $C56B        ; 
       .call @duel_action_3            ; CALL $C55D        ; 
       .call @duel_action_4            ; CALL $C56B        ; 
       .ret                            ; RET               ; Return.
duel_action_1:                         ; c543
       .call @jump_control_method      ; CALL $5B88        ; Calls #R$5B88.
       movb a,tmp0                     ; BIT 4,A           ; {Return if bit 4 of #REGa is zero.
       andi tmp0,16*256                ;                   
       jne  !                          ; RET Z             ; }
       .ret                            ;                   
!
       movb a,tmp0                     ; BIT 0,A           ; {If bit 0 is not zero then return setting #REGa to
       andi tmp0,1*256                 ;                   
       movb @bytes+3,a                 ; LD A,$03          ; $03.
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       sb   a,a                        ; XOR A             ; {Set #REGa to zero and return.
       .ret                            ; RET               ; }
duel_action_2:                         ; c550
       .call @jump_control_method      ; CALL $5B88        ; Calls #R$5B88.
       movb a,tmp0                     ; BIT 4,A           ; {Return if bit 4 of #REGa is zero.
       andi tmp0,16*256                ;                   
       jne  !                          ; RET Z             ; }
       .ret                            ;                   
!
       movb a,tmp0                     ; BIT 1,A           ; {If bit 1 is not zero then return setting #REGa to
       andi tmp0,2*256                 ;                   
       movb one,a                      ; LD A,$01          ; $01.
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       sb   a,a                        ; XOR A             ; {Set #REGa to zero and return.
       .ret                            ; RET               ; }
duel_action_3:                         ; c55d
       .call @jump_control_method      ; CALL $5B88        ; 
       movb a,tmp0                     ; BIT 4,A           ; 
       andi tmp0,16*256                ;                   
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       andi a,3*256                    ; AND $03           ; 
       sb   a,a                        ; LD A,$00          ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @bytes+2,a                 ; LD A,$02          ; 
       .ret                            ; RET               ; Return.
duel_action_4:                         ; c56b
       cb   a,@3(ix)                   ; CP (IX+$03)       ; {If the dueller position has been changed to zero then
       jeq  duel_dunno                 ; JR Z,$C575        ; jump to #R$C575.}
       sb   @13(ix),@13(ix)            ; LD (IX+$0D),$00   ; 
       .ret                            ; RET               ; Return.
duel_dunno:                            ; c575
       movb @13(ix),a                  ; LD A,(IX+$0D)     ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb one,a                      ; LD A,$01          ; 
       movb a,@13(ix)                  ; LD (IX+$0D),A     ; 
       movb a,*ix                      ; LD (IX+$00),A     ; Set dueller state to $01.
       .ret                            ; RET               ; Return.
* This entry point is used by the routines at #R$C607 and #R$C6E5.
_c583:
       .push ix                        ; PUSH IX           ; 
       .call @shot_sound_1_alias       ; CALL $6500        ; 
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 
_c58b:
       movb @8(ix),a                   ; LD A,(IX+$08)     ; {If IX+$08 is zero then return.
       ; AND A                         ; AND A             ; 
       jne  !                          ; RET Z             ; }
       .ret                            ;                   
!
       movb @9(ix),a                   ; LD A,(IX+$09)     ; {If dueller frame index is $01 then jump to #R$C5A1.
       sb   one,a                      ; DEC A             ; 
       jeq  _c5a1                      ; JR Z,$C5A1        ; }
       sb   one,a                      ; DEC A             ; {If dueller frame index is $02 then jump to #R$C5B5.
       jeq  _c5b5                      ; JR Z,$C5B5        ; }
       sb   one,a                      ; DEC A             ; {If dueller frame index is $03 then jump to #R$C5BD.
       jeq  _c5bd                      ; JR Z,$C5BD        ; }
       sb   one,a                      ; DEC A             ; {If dueller frame index is $04 then jump to #R$C5CF.
       jeq  _c5cf                      ; JR Z,$C5CF        ; }
       jmp  _c5dd                      ; JR $C5DD          ; Jump to #R$C5DD.
_c5a1:
       li   hl,dueller_shot            ; LD HL,$C6E5       ; #R$C6E5.
       .call @dueller_down             ; CALL $C5EB        ; 
       sb   one,@1(ix)                 ; DEC (IX+$01)      ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       ab   one,@9(ix)                 ; INC (IX+$09)      ; 
       movb @11(ix),a                  ; LD A,(IX+$0B)     ; 
       .call @duel_draw_bandit_prep    ; CALL $C661        ; 
       .ret                            ; RET               ; 
_c5b5:
       sb   one,@16(ix)                ; DEC (IX+$10)      ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       ab   one,@9(ix)                 ; INC (IX+$09)      ; 
       .ret                            ; RET               ; 
_c5bd:
       li   hl,_c5f6                   ; LD HL,$C5F6       ; 
       .call @dueller_down             ; CALL $C5EB        ; 
       sb   one,@2(ix)                 ; DEC (IX+$02)      ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb a,@8(ix)                   ; LD (IX+$08),A     ; 
       ab   one,a                      ; INC A             ; 
       movb a,@duel_bang_flag          ; LD ($C6E2),A      ; 
       .ret                            ; RET               ; 
_c5cf:
       sb   one,@14(ix)                ; DEC (IX+$0E)      ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       ab   one,@9(ix)                 ; INC (IX+$09)      ; 
       movb @12(ix),a                  ; LD A,(IX+$0C)     ; 
       .call @duel_draw_bandit_prep    ; CALL $C661        ; 
       .ret                            ; RET               ; 
_c5dd:
       sb   one,@15(ix)                ; DEC (IX+$0F)      ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @bytes+2,a                 ; LD A,$02          ; 
       .call @duel_draw_bandit_prep    ; CALL $C661        ; 
       sb   @8(ix),@8(ix)              ; LD (IX+$08),$00   ; 
       .ret                            ; RET               ; 

* Routine at C5EB
* 
* Used by the routine at #R$C422.
dueller_down:                          ; c5eb
       movb *ix,a                      ; LD A,(IX+$00)     ; {Check if the current duellers state is zero (complete),
       ; AND A                         ; AND A             ; return if so.
       jne  !                          ; RET Z             ; }
       .ret                            ;                   
!
       sb   a,a                        ; XOR A             ; {Mark the current dueller as complete.
       movb a,*ix                      ; LD (IX+$00),A     ; }
       .pop af                         ; POP AF            ; {Restore #REGa and jump to whatever address is held by
       b    *hl                        ; JP (HL)           ; TODO. 
* Not related?
_c5f6:
       movb @2(ix),a                   ; LD A,(IX+$02)     ; 
       srl  a,1                        ; SRL A             ; 
       cb   a,@bytes+9                 ; CP $09            ; 
       movb @4(ix),@e                  ; LD E,(IX+$04)     ; 
       movb @5(ix),d                   ; LD D,(IX+$05)     ; 
       jnc  duel_points                ; JR NC,$C628       ; TODO: check code. 
       socb one,a                      ; OR $01            ; 

* Displays The Bonus Score Text.
* 
* Used by the routine at #R$C628.
print_bonus_score:                     ; c607
       movb a,@7(ix)                   ; LD (IX+$07),A     ; {Stores the ASCII representation of the number at #R$C41D (it adds ASCII "0") so for example 1 ends up being
       li   hl,duel_bonus_text         ; LD HL,$C41D       ; 1 + $30 = $31 (e.g. "1" in ASCII).
       ab   @bytes+48,a                ; ADD A,$30         ; 
       movb a,*hl                      ; LD (HL),A         ; }
       li   bc,>2928                   ; LD BC,$2928       ; {Print using #R$5B80.
       .call @print_two_tone_text_alias ; CALL $5B80        ; #TABLE(default,centre,centre,centre,centre)
                                                           ; { =h Value | =h Ink | =h Paper | =h Bright }
                                                           ; { $29 | $01 | $05 | $00 }
                                                           ; { $28 | $00 | $05 | $00 }
                                                           ; TABLE#}
       .call @scoring_prep_alias       ; CALL $5B8C        ; 
       .call @draw_score_alias         ; CALL $5B98        ; 
       ab   one,@9(ix)                 ; INC (IX+$09)      ; 
       b    @_c583                     ; JP $C583          ; Jump to #R$C583.

* "Extra" text.
extra_text_copy:                       ; c622
       text 'EXTRA',>ff

* Displays "Extra" and Bonus Score text.
* 
* Handles whether to display points or "EXTRA" above each downed Bandit.
duel_points:                           ; c628
       movb @duel_extra_life,a         ; LD A,($C6E4)      ; {If #R$C6E4 is NOT zero then award 9(00) bonus points.
       ; AND A                         ; AND A             ; 
       movb @bytes+9,a                 ; LD A,$09          ; 
       jne  print_bonus_score          ; JR NZ,$C607       ; }
       mov  @lives_addr,hl             ; LD HL,($5B86)     ; {Fetch a 16 bit address from #R$5B86 (#R$CC59), if it is
       movb *hl,a                      ; LD A,(HL)         ; higher than $05 then award 9(00) bonus points.
       cb   a,@bytes+5                 ; CP $05            ; 
       movb @bytes+9,a                 ; LD A,$09          ; 
       jnc  print_bonus_score          ; JR NC,$C607       ; TODO: check code. }
       li   hl,extra_text_copy         ; LD HL,$C622       ; {Points to #R$C622 and sends it to #R$5B80.
       dec  de                         ; DEC DE            ; #TABLE(default,centre)
       li   bc,>2a29                   ; LD BC,$2A29       ; { =h Value | =h Ink | =h Paper | =h Bright }
       .call @print_two_tone_text_alias ; CALL $5B80        ; { $2A | $02 | $05 | $00 }
                                                           ; { $29 | $01 | $05 | $00 }
                                                           ; TABLE#}
       movb one,a                      ; LD A,$01          ; {Writes $01 to #R$C6E4.
       movb a,@duel_extra_life         ; LD ($C6E4),A      ; }
       ab   one,@9(ix)                 ; INC (IX+$09)      ; Move onto the next frame.
       .ret                            ; RET               ; Return.

* Playfield Text
playfield_score:                       ; c64d
       text ' SCORE ',>ff
playfield_lives:                       ; c655
       text 'LIVES',>ff
playfield_whitespace:                  ; c65b
       text '     ',>ff

* Draw Duel Bandit
* 
* Used by the routine at #R$C422.
duel_draw_bandit_prep:                 ; c661
       .call @character_addr_alias     ; CALL $5B8F        ; Fetch the address of the character from the given index
                                                           ; in #REGa.
       .ex_de_hl                       ; EX DE,HL          ; 
       movb @3(ix),a                   ; LD A,(IX+$03)     ; Retrieve the character position.
       li   hl,_4080+1924              ; LD HL,$4804       ; {If this character is in position "1" then point to the
       sb   one,a                      ; DEC A             ; screen buffer at $4804 and jump to #R$C677.
       jeq  duel_draw_bandit           ; JR Z,$C677        ; }
       li   hl,_4080+1932              ; LD HL,$480C       ; {If this character is in position "2" then point to the
       sb   one,a                      ; DEC A             ; screen buffer at $480C and jump to #R$C677.
       jeq  duel_draw_bandit           ; JR Z,$C677        ; }
       li   hl,_4080+1940              ; LD HL,$4814       ; Else this character is in position "3" so point to the
                                                           ; screen buffer at $4814.
duel_draw_bandit:                      ; c677
       movb @bytes+88,b                ; LD B,$58          ; {Call the draw routine with the image dimensions.
       movb @bytes+6,@c                ; LD C,$06          ; 
       .call @draw_character           ; CALL $5B92        ; }
       .ret                            ; RET               ; Return.

* Routine at C67F
* 
* Used by the routine at #R$C422.
duel_update_timer:                     ; c67f
       andi a,63*256                   ; AND $3F           ; {Updates dueller timer.
       socb @bytes+64,a                ; OR $40            ; 
       movb a,@1(ix)                   ; LD (IX+$01),A     ; }
       .ret                            ; RET               ; Return.

* Lose A Life
* 
* Used by the routine at #R$C690.
lose_life:                             ; c687
       .call @bang                     ; CALL $C000        ; Calls the subroutine to display the "BANG" animation.
       mov  @lives_addr,hl             ; LD HL,($5B86)     ; {Decrease the lives counter by one (#R$CC59), set the
       sb   one,*hl                    ; DEC (HL)          ; zero flag if all lives are lost.
       ; AND A                         ; AND A             ; }
       .ret                            ; RET               ; Return.

* Is The Duel Finished?
* 
* Used by the routine at #R$C422.
duel_complete:                         ; c690
       movb @duel_lose_life,a          ; LD A,($C6E3)      ; {Jump to #R$C6F0 if #R$C6E3 is not zero.
       ; AND A                         ; AND A             ; 
       jeq  !                          ; JP NZ,$C6F0       ; }
       b    @flash_life_image          ;                   
!
       movb @duel_bang_flag,a          ; LD A,($C6E2)      ; {Jump to #R$C687 if #R$C6E2 is not zero.
       ; AND A                         ; AND A             ; 
       jeq  !                          ; JP NZ,$C687       ; }
       b    @lose_life                 ;                   
!
       movb @duel_extra_life,a         ; LD A,($C6E4)      ; {Jump to #R$C6B1 if #R$C6E4 is not zero.
       ; AND A                         ; AND A             ; 
       jeq  !                          ; JP NZ,$C6B1       ; }
       b    @duel_flash_text           ;                   
!
       ; SCF                           ; SCF               ; {Set the carry flag and return.
       .ret                            ; RET               ; }

* Write "Lives" text.
* 
* Used by the routines at #R$C422 and #R$C6B1.
duel_print_lives:                      ; c6a7
       li   de,_50c0+16                ; LD DE,$50D0       ; {Helper routine called from #R$C463 used for writing #R$C655 to the screen using the colours held in #REGbc;
       li   bc,>0702                   ; LD BC,$0702       ; #TABLE(default,centre)
       .call @print_two_tone_text_alias ; CALL $5B80        ; { =h Value | =h Ink | =h Paper | =h Bright }
                                                           ; { $07 | $07 | $00 | $00 }
                                                           ; { $02 | $02 | $00 | $00 }
                                                           ; TABLE#}
       .ret                            ; RET               ; Return.

* Duel: Gain Extra Life.
* 
* Used by the routine at #R$C690.
duel_flash_text:                       ; c6b1
       movb @bytes+8,b                 ; LD B,$08          ; {Alternates displaying #R$C65B and #R$C655 to "flash"
duel_flash_text_loop:                  ; c6b3
       .push bc                        ; PUSH BC           ; the lives indicator.
       li   hl,playfield_whitespace    ; LD HL,$C65B       ; 
       .call @duel_print_lives         ; CALL $C6A7        ; 
       movb @bytes+16,b                ; LD B,$10          ; 
duel_flash_halt_loop_1:                ; c6bc
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $C6BC        ; 
       jne  duel_flash_halt_loop_1     ;                   
       li   hl,playfield_lives         ; LD HL,$C655       ; 
       .call @duel_print_lives         ; CALL $C6A7        ; 
       movb @bytes+16,b                ; LD B,$10          ; 
duel_flash_halt_loop_2:                ; c6c7
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $C6C7        ; 
       jne  duel_flash_halt_loop_2     ;                   
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $C6B3        ; }
       jne  duel_flash_text_loop       ;                   
       mov  @lives_addr,hl             ; LD HL,($5B86)     ; {Increase the lives counter by one (#R$CC59).
       ab   one,*hl                    ; INC (HL)          ; }
       ; SCF                           ; SCF               ; {Sets the carry flag and returns.
       .ret                            ; RET               ; }

* Write "Countdown" text.
* 
* Used by the routine at #R$C422.
duel_print_countdown:                  ; c6d3
       li   hl,duel_timer              ; LD HL,$C6E0       ; {Helper routine used for writing #R$C6E0 to the screen using the colours held in #REGbc;
       li   de,_4040+15                ; LD DE,$404F       ; #TABLE(default,centre)
       li   bc,>0703                   ; LD BC,$0703       ; { =h Value | =h Ink | =h Paper | =h Bright }
       .call @print_two_tone_text_alias ; CALL $5B80        ; { $07 | $07 | $00 | $00 }
                                                           ; { $03 | $03 | $00 | $00 }
                                                           ; TABLE#}
       .ret                            ; RET               ; Return.

* Duel Countdown Timer
duel_timer:                            ; c6e0
       byte >20
       byte >FF

* Duel Shot Flag.
* 
* See #R$C690 for the clearest example of usage.
duel_bang_flag:                        ; c6e2
       byte >00                                                      ; Holds $00/ $01 to indicate player has been shot.

* Duel Lost Life Flag.
* 
* See #R$C690 for the clearest example of usage.
duel_lose_life:                        ; c6e3
       byte >00                                                      ; Holds $00/ $01 to indicate player should lose a life (as
                                                                     ; they shot too quickly).

* Duel Extra Life Flag.
* 
* See #R$C690 for the clearest example of usage.
duel_extra_life:                       ; c6e4
       byte >00                                                      ; Holds $00/ $01 to indicate player has gained an extra
                                                                     ; life.

* Process Dueller Shot.
dueller_shot:                          ; c6e5
       movb @bytes+4,a                 ; LD A,$04          ; {Writes $04 to #R$C6E3.
       movb a,@duel_lose_life          ; LD ($C6E3),A      ; }
       movb a,@9(ix)                   ; LD (IX+$09),A     ; Sets the dueller frame index to $04.
       b    @_c583                     ; JP $C583          ; Jump to #R$C583.

* Flash Life Image.
* 
* This routine flashes the last life image eight times, and returns with lives being one less and the carry flag
* being set.
flash_life_image:                      ; c6f0
       mov  @lives_addr,hl             ; LD HL,($5B86)     ; {Decrease #R$CC59 by one.
       sb   one,*hl                    ; DEC (HL)          ; }
       movb @bytes+8,b                 ; LD B,$08          ; Sets #REGb (the counter) to loop $08 times.
flash_life_image_loop:                 ; c6f6
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       ab   one,*hl                    ; INC (HL)          ; {Increase #R$CC59 by one and call #R$5B83.
       .call @draw_life_images_alias   ; CALL $5B83        ; }
       movb @bytes+16,b                ; LD B,$10          ; {Interrupt driven halt loop.
flash_life_image_halt_loop_1:          ; c6fe
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $C6FE        ; }
       jne  flash_life_image_halt_loop_1 ;                   
       .pop hl                         ; POP HL            ; 
       .push hl                        ; PUSH HL           ; 
       sb   one,*hl                    ; DEC (HL)          ; {Decrease #R$CC59 by one and call #R$5B83.
       .call @draw_life_images_alias   ; CALL $5B83        ; }
       .pop hl                         ; POP HL            ; 
       movb @bytes+16,b                ; LD B,$10          ; {Interrupt driven halt loop.
flash_life_image_halt_loop_2:          ; c70a
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $C70A        ; }
       jne  flash_life_image_halt_loop_2 ;                   
       .pop bc                         ; POP BC            ; {Retrieves #REGb (the counter) from the stack and loop
       sb   one,b                      ; DJNZ $C6F6        ; back until finished.}
       jne  flash_life_image_loop      ;                   
       ; SCF                           ; SCF               ; {Set the carry flag and return.
       .ret                            ; RET               ; }

       ;                               ;                   

* Data block at C71E
       byte >22,>FB

* Sheriff's Star Page
* 
* Used by the routine at #R$C7C0.
sheriff_star:                          ; c720
       li   hl,loading                 ; LD HL,$4000       ; {Writes $00 to all 6144 bytes of the screen buffer (i.e.
       li   de,loading+1               ; LD DE,$4001       ; "blanks it").
       li   bc,>1800                   ; LD BC,$1800       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .ldir                           ; LDIR              ; }
       li   bc,>02ff                   ; LD BC,$02FF       ; {Continues into the attributes buffer, and writes $06 to every location.
       movb @bytes+6,*hl               ; LD (HL),$06       ; #TABLE(default,centre,centre,centre,centre)
       .ldir                           ; LDIR              ; { =h Value | =h Ink | =h Paper | =h Bright }
                                                           ; { $06 | $06 | $00 | $00 }
                                                           ; TABLE#}
       li   hl,_4080+11                ; LD HL,$408B       ; {Points to #R$F600 and prints it to the screen using
       li   de,badge_image             ; LD DE,$F600       ; #R$5B92.
       li   bc,_5000+8                 ; LD BC,$5008       ; 
       .call @draw_character           ; CALL $5B92        ; }
       li   hl,header_1                ; LD HL,$C765       ; {Points to #R$C765 and prints it to the screen using #R$5B80.
       li   de,_5000+1                 ; LD DE,$5001       ; #TABLE(default,centre,centre,centre,centre)
       li   bc,>0702                   ; LD BC,$0702       ; { =h Value | =h Ink | =h Paper | =h Bright }
       .call @print_two_tone_text_alias ; CALL $5B80        ; { $07 | $07 | $00 | $00 }
                                                           ; { $02 | $02 | $00 | $00 }
                                                           ; TABLE#}
       li   hl,header_2                ; LD HL,$C784       ; {Points to #R$C784 and prints it to the screen using #R$5B80.
       li   de,_5020+33                ; LD DE,$5041       ; #TABLE(default,centre,centre,centre,centre)
       li   bc,>0702                   ; LD BC,$0702       ; { =h Value | =h Ink | =h Paper | =h Bright }
       .call @print_two_tone_text_alias ; CALL $5B80        ; { $07 | $07 | $00 | $00 }
                                                           ; { $02 | $02 | $00 | $00 }
                                                           ; TABLE#}
       li   hl,header_3                ; LD HL,$C7A3       ; {Points to #R$C7A3 and prints it to the screen using #R$5B80.
       li   de,_5020+99                ; LD DE,$5083       ; #TABLE(default,centre,centre,centre,centre)
       li   bc,>0702                   ; LD BC,$0702       ; { =h Value | =h Ink | =h Paper | =h Bright }
       .call @print_two_tone_text_alias ; CALL $5B80        ; { $07 | $07 | $00 | $00 }
                                                           ; { $02 | $02 | $00 | $00 }
                                                           ; TABLE#}
       .ret                            ; RET               ; Return.

* Sheriff's Star Page Text
header_1:                              ; c765
       text '      THIS IS YOUR STAR       ',>ff
header_2:                              ; c784
       text 'YOU ARE THE SOFT CITY SHERIFF ',>ff
header_3:                              ; c7a3
       text '    NOW DO YOUR WORK     ',>ff

* Unused
       byte >C3,>90,>00

* New Game
new_game:                              ; c7c0
       mov  @dueller_3+150,hl          ; LD HL,($5C78)     ; #HTML(Fetch <a
                                                           ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                                                           ; as a random number seed.)
       mov  hl,@_d8ac                  ; LD ($D8AC),HL     ; Write it to #R$D8AC.
       .call @init_title_screen        ; CALL $C7E5        ; Call #R$C7E5.
       li   hl,loading                 ; LD HL,$4000       ; {Clears the screen buffer by
       li   de,loading+1               ; LD DE,$4001       ; writing $00 to all 6912 memory
       li   bc,>1aff                   ; LD BC,$1AFF       ; locations.
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .ldir                           ; LDIR              ; }
       movb @bytes+128,b               ; LD B,$80          ; {Calls #R$CD64 with the counter
       .call @halt_loop                ; CALL $CD64        ; $80.}
       li   hl,copied_5b80             ; LD HL,$CBB4       ; {Jump to #R$FA00 with
       li   ix,score_digit_6           ; LD IX,$CD86       ; #REGhl=#R$CBB4 and
       b    @new_high_score            ; JP $FA00          ; #REGix=#R$CD86.}
* Displays the title screen and on return, sets the control method and
* initiates variables for a new game.
init_title_screen:                     ; c7e5
       li   hl,copied_5b80             ; LD HL,$CBB4       ; {Calls #R$FE00 with
       .call @title_screen             ; CALL $FE00        ; #REGhl=#R$CBB4.}
       sb   b,b                        ; LD B,$00          ; Unused.
       movb @controller,a              ; LD A,($5CB0)      ; {Grab the value stored at #R$5CB0
       li   hl,controls_keyboard       ; LD HL,$D39B       ; and if it is $01 then jump ahead
       sb   one,a                      ; DEC A             ; to #R$C7F9 which writes #R$D39B
       jeq  set_control_alias          ; JR Z,$C7F9        ; to #R$CE12.}
       li   hl,controls_joystick       ; LD HL,$D392       ; {Write #R$D392 to #R$CE12.
set_control_alias:                     ; c7f9
       mov  hl,@control_routine_alias  ; LD ($CE12),HL     ; }
* Resets all game variables/ states ready for a new game.
       li   hl,score_digit_6           ; LD HL,$CD86       ; {Clears the score (writes $00
       li   de,score_digit_5           ; LD DE,$CD87       ; over seven bytes from #R$CD86).
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       li   bc,>0006                   ; LD BC,$0006       ; 
       .ldir                           ; LDIR              ; }
       movb @bytes+3,a                 ; LD A,$03          ; {Initialise #R$CC59 to $03.
       movb a,@lives                   ; LD ($CC59),A      ; }
       li   hl,>0101                   ; LD HL,$0101       ; {Initialise #R$D45C to $0101.
       mov  hl,@cashbox_ref            ; LD ($D45C),HL     ; }
       li   hl,>0000                   ; LD HL,$0000       ; {Clears #R$CE14, #R$CE16 and
       mov  hl,@door_1_routine         ; LD ($CE14),HL     ; #R$CE18 (sets them to $0000).
       mov  hl,@door_2_routine         ; LD ($CE16),HL     ; 
       mov  hl,@door_3_routine         ; LD ($CE18),HL     ; }
       li   hl,>2020                   ; LD HL,$2020       ; {Clear #R$CA58 and #R$CA5A to
       mov  hl,@day_ascii              ; LD ($CA58),HL     ; $2020 (ASCII space-space).
       mov  hl,@phase_ascii            ; LD ($CA5A),HL     ; }
       li   hl,door_deposited_01       ; LD HL,$CC8D       ; {Clear down the deposit flags
       li   de,door_deposited_02       ; LD DE,$CC8E       ; (copies $00 to each from
       li   bc,>000d                   ; LD BC,$000D       ; #R$CC8D).
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .ldir                           ; LDIR              ; }
       sb   a,a                        ; XOR A             ; {Set the border to black.
       ; OUT ($FE),A                   ; OUT ($FE),A       ; }
       ab   one,a                      ; INC A             ; {Write $01 to #R$CBCF.
       movb a,@_cbcf                   ; LD ($CBCF),A      ; }
       .call @init_progress            ; CALL $CA6C        ; 
       .call @set_day_attr             ; CALL $C959        ; 
       .call @prep_display_day         ; CALL $CA64        ; 
       movb @bytes+3,a                 ; LD A,$03          ; {Writes $03 to #R$CE1B.
       movb a,@_ce1b                   ; LD ($CE1B),A      ; }
       li   hl,>0500                   ; LD HL,$0500       ; {Writes $0500 to #R$CE1C.
       mov  hl,@_ce1c                  ; LD ($CE1C),HL     ; }
       movb one,a                      ; LD A,$01          ; {Writes $01 to #R$D191.
       movb a,@_d191                   ; LD ($D191),A      ; }
       movb @level,a                   ; LD A,($5CB1)      ; {Grabs the #R$5CB1, if it's level
       li   hl,phase                   ; LD HL,$CA4A       ; 1 then jump to #R$C878 with
       sb   one,a                      ; DEC A             ; #REGhl=#R$CA4A.
       jeq  level_1                    ; JR Z,$C878        ; }
       .call @_c941                    ; CALL $C941        ; 
       ab   one,*hl                    ; INC (HL)          ; 
       .call @_c941                    ; CALL $C941        ; 
       ab   one,*hl                    ; INC (HL)          ; 
       sb   one,a                      ; DEC A             ; 
       jeq  _c88f                      ; JR Z,$C88F        ; 
       .call @_c941                    ; CALL $C941        ; 
       ab   one,*hl                    ; INC (HL)          ; 
       .call @_c941                    ; CALL $C941        ; 
       ab   one,*hl                    ; INC (HL)          ; 
       .call @_c941                    ; CALL $C941        ; 
       ab   one,*hl                    ; INC (HL)          ; 
       jmp  _c8b6                      ; JR $C8B6          ; 
level_1:                               ; c878
       li   hl,choose_default_set      ; LD HL,$CE42       ; {Writes #R$CE42 to #R$CE1F.
       mov  hl,@chooser_routine_buffer ; LD ($CE1F),HL     ; }
       .call @cashboxes_completed      ; CALL $CA81        ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
       li   hl,choose_bandit_3         ; LD HL,$CE6F       ; {Writes #R$CE6F to #R$CE1F.
       mov  hl,@chooser_routine_buffer ; LD ($CE1F),HL     ; }
       .call @_c941                    ; CALL $C941        ; 
       .call @cashboxes_completed      ; CALL $CA81        ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
_c88f:
       equ  $
       li   hl,choose_bandit_2         ; LD HL,$CE5F       ; {Writes #R$CE5F to #R$CE1F.
       mov  hl,@chooser_routine_buffer ; LD ($CE1F),HL     ; }
       .call @_c941                    ; CALL $C941        ; 
       .call @cashboxes_completed      ; CALL $CA81        ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
       li   hl,choose_julius           ; LD HL,$CE55       ; {Writes #R$CE55 to #R$CE1F.
       mov  hl,@chooser_routine_buffer ; LD ($CE1F),HL     ; }
       .call @_c941                    ; CALL $C941        ; 
       .call @cashboxes_completed      ; CALL $CA81        ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
       li   hl,choose_bandit_4         ; LD HL,$CE7E       ; {Writes #R$CE7E to #R$CE1F.
       mov  hl,@chooser_routine_buffer ; LD ($CE1F),HL     ; }
       .call @_c941                    ; CALL $C941        ; 
       .call @cashboxes_completed      ; CALL $CA81        ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
_c8b6:
       equ  $
       li   hl,choose_bandit_5         ; LD HL,$CE8D       ; {Writes #R$CE8D to #R$CE1F.
       mov  hl,@chooser_routine_buffer ; LD ($CE1F),HL     ; }
       .call @_c941                    ; CALL $C941        ; 
       .call @cashboxes_completed      ; CALL $CA81        ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
       li   hl,choose_bandit_6         ; LD HL,$CE9C       ; {Writes #R$CE9C to #R$CE1F.
       mov  hl,@chooser_routine_buffer ; LD ($CE1F),HL     ; }
       .call @_c941                    ; CALL $C941        ; 
       .call @cashboxes_completed      ; CALL $CA81        ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
       li   hl,choose_bandit_6         ; LD HL,$CE9C       ; {Writes #R$CE9C to #R$CE1F.
       mov  hl,@chooser_routine_buffer ; LD ($CE1F),HL     ; }
       .call @_c941                    ; CALL $C941        ; 
       .call @set_dusk_attr            ; CALL $C95E        ; 
       .call @cashboxes_completed      ; CALL $CA81        ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
       li   hl,choose_bandit_6         ; LD HL,$CE9C       ; {Writes #R$CE9C to #R$CE1F.
       mov  hl,@chooser_routine_buffer ; LD ($CE1F),HL     ; }
       .call @_c941                    ; CALL $C941        ; 
       .call @set_night_attr           ; CALL $C963        ; 
       .call @cashboxes_completed      ; CALL $CA81        ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
_c8f0:
       equ  $
       .call @set_day_attr             ; CALL $C959        ; 
       .call @prep_display_day         ; CALL $CA64        ; 
       movb @bytes+7,b                 ; LD B,$07          ; 
_c8f8:
       .push bc                        ; PUSH BC           ; 
       .call @cashboxes_completed      ; CALL $CA81        ; 
       .pop bc                         ; POP BC            ; 
_c8fd:
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
       .push bc                        ; PUSH BC           ; 
       .call @_c941                    ; CALL $C941        ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $C8F8        ; 
       jne  _c8f8                      ;                   
       .call @set_dusk_attr            ; CALL $C95E        ; 
       .call @cashboxes_completed      ; CALL $CA81        ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
       .call @set_night_attr           ; CALL $C963        ; 
       .call @cashboxes_completed      ; CALL $CA81        ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
       li   hl,_d191                   ; LD HL,$D191       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       ; AND A                         ; AND A             ; 
       jeq  _c8f0                      ; JR Z,$C8F0        ; 
       li   hl,copied_5b80             ; LD HL,$CBB4       ; 
       li   de,print_two_tone_text_alias ; LD DE,$5B80       ; 
       li   bc,>0040                   ; LD BC,$0040       ; 
       .ldir                           ; LDIR              ; 
       .call @sheriff_star             ; CALL $C720        ; Call #R$C720.
       .call @halt_loop                ; CALL $CD64        ; 
       .call @halt_loop                ; CALL $CD64        ; 
       .call @halt_loop                ; CALL $CD64        ; 
       .call @halt_loop                ; CALL $CD64        ; 
_c936:
       sb   a,a                        ; XOR A             ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       socb @bytes+224,a               ; OR $E0            ; 
       ab   one,a                      ; INC A             ; 
       jeq  _c936                      ; JR Z,$C936        ; 
       nop                             ; NOP               ; 
       jmp  _c8f0                      ; JR $C8F0          ; 
_c941:
       .push af                        ; PUSH AF           ; 
       .push hl                        ; PUSH HL           ; 
       mov  @_ce1c,hl                  ; LD HL,($CE1C)     ; 
       li   bc,>0040                   ; LD BC,$0040       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       movb h,a                        ; LD A,H            ; 
       socb @l,a                       ; OR L              ; 
       jne  _c953                      ; JR NZ,$C953       ; 
       li   hl,>0040                   ; LD HL,$0040       ; 
_c953:
       mov  hl,@_ce1c                  ; LD ($CE1C),HL     ; 
       .pop hl                         ; POP HL            ; 
       .pop af                         ; POP AF            ; 
       .ret                            ; RET               ; 
* Sets the door attributes for the "time of day".
set_day_attr:                          ; c959
       li   hl,door_attr_day           ; LD HL,$C96F       ; {Call #R$C966 using #R$C96F.
       jmp  set_door_attr              ; JR $C966          ; }
set_dusk_attr:                         ; c95e
       li   hl,door_attr_dusk          ; LD HL,$C987       ; {Call #R$C966 using #R$C987.
       jmp  set_door_attr              ; JR $C966          ; }
set_night_attr:                        ; c963
       li   hl,door_attr_night         ; LD HL,$C99F       ; Call #R$C966 using #R$C99F.
* Note this is for the opened door background hence it starts from frame 2 (as
* frame 1 is a closed door).
set_door_attr:                         ; c966
       li   de,door_2_attributes       ; LD DE,$D6B9       ; {Copies $18 bytes of data to
       li   bc,>0018                   ; LD BC,$0018       ; #R$D6B9, then return.
       .ldir                           ; LDIR              ; 
       .ret                            ; RET               ; }
* Door frame attribute data for each day phase.
door_attr_day:                         ; c96f
       byte >28,>28,>30,>30,>30,>30,>30,>30                          ; 
       byte >28,>28,>28,>28,>30,>30,>30,>30                          ; 
       byte >28,>28,>28,>28,>28,>28,>30,>28                          ; 
door_attr_dusk:                        ; c987
       byte >0D,>0D,>30,>30,>30,>30,>30,>30                          ; 
       byte >0D,>0D,>0D,>0D,>30,>30,>30,>30                          ; 
       byte >0D,>0D,>0D,>0D,>0D,>0D,>30,>0D                          ; 
door_attr_night:                       ; c99f
       byte >05,>05,>30,>30,>30,>30,>30,>30                          ; 
       byte >05,>05,>05,>05,>30,>30,>30,>30                          ; 
       byte >05,>05,>05,>05,>05,>05,>30,>05                          ; 
* Clears the cashbox flags, clears the screen and displays the phase number.
prep_display_phase:                    ; c9b7
       li   hl,>0101                   ; LD HL,$0101       ; {Writes $0101 to #R$D45C.
       mov  hl,@cashbox_ref            ; LD ($D45C),HL     ; }
       li   hl,door_deposited_01       ; LD HL,$CC8D       ; {Clear down the deposit flags
       li   de,door_deposited_02       ; LD DE,$CC8E       ; (copies $00 to each from
       li   bc,>000d                   ; LD BC,$000D       ; #R$CC8D).
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .ldir                           ; LDIR              ; }
       sb   a,a                        ; XOR A             ; {Call #R$C9D0 (using $00).
       .call @clear_screen             ; CALL $C9D0        ; }
       jmp  display_phase              ; JR $C9DD          ; Jump to #R$C9DD.
* This routine has the ability to write any value across the screen buffer, however it's only ever called with
* #REGa=$00 (clear screen).
clear_screen:                          ; c9d0
       li   hl,loading                 ; LD HL,$4000       ; {Clears the screen buffer by
       li   de,loading+1               ; LD DE,$4001       ; writing $00 to all 6912 memory
       li   bc,>1aff                   ; LD BC,$1AFF       ; locations.
       movb a,*hl                      ; LD (HL),A         ; 
       .ldir                           ; LDIR              ; 
       .ret                            ; RET               ; }
* Displays the current "phase".
display_phase:                         ; c9dd
       li   hl,phase_copy              ; LD HL,$CA4E       ; {Copies #R$CA4E into #R$CA5C ($05
       li   de,progress_buffer         ; LD DE,$CA5C       ; bytes of text data).
       li   bc,>0005                   ; LD BC,$0005       ; 
       .ldir                           ; LDIR              ; }
       mov  @phase_ascii,hl            ; LD HL,($CA5A)     ; {Writes #R$CA5A to #R$CA5C (at
       mov  hl,@progress_buffer+5      ; LD ($CA61),HL     ; $CA61 - just overwriting the
                                                           ; numeric part).}
       li   hl,phase                   ; LD HL,$CA4A       ; {Call #R$CA19 with #R$CA4A.
       .call @progress_base_10         ; CALL $CA19        ; }
       mov  @progress_buffer+5,hl      ; LD HL,($CA61)     ; {Writes $CA61 back to #R$CA5A.
       mov  hl,@phase_ascii            ; LD ($CA5A),HL     ; }
       .ret                            ; RET               ; Return.
* Displays the current "day".
display_day:                           ; c9fb
       li   hl,day_copy                ; LD HL,$CA53       ; {Copies #R$CA53 into #R$CA5C ($05
       li   de,progress_buffer         ; LD DE,$CA5C       ; bytes of text data).
       li   bc,>0005                   ; LD BC,$0005       ; 
       .ldir                           ; LDIR              ; }
       mov  @day_ascii,hl              ; LD HL,($CA58)     ; {Writes #R$CA58 to #R$CA5C (at
       mov  hl,@progress_buffer+5      ; LD ($CA61),HL     ; $CA61 - just overwriting the
                                                           ; numeric part).}
       li   hl,day                     ; LD HL,$CA4C       ; {Call #R$CA19 with #R$CA4C.
       .call @progress_base_10         ; CALL $CA19        ; }
       mov  @progress_buffer+5,hl      ; LD HL,($CA61)     ; {Writes $CA61 back to #R$CA58.
       mov  hl,@day_ascii              ; LD ($CA58),HL     ; }
       .ret                            ; RET               ; Return.
* This routine is for converting progress numbers into ASCII. On entry #REGhl
* will be either #R$CA4A or #R$CA4C.
progress_base_10:                      ; ca19
       movb *hl,a                      ; LD A,(HL)         ; {If the passed number is not more
       ab   one,a                      ; INC A             ; than 10 jump to #R$CA27.
       cb   a,@bytes+10                ; CP $0A            ; 
       jhe  progress_divisible_10      ; JR NC,$CA27       ; }
       movb a,*hl                      ; LD (HL),A         ; {Stores the ASCII representation of the number at $CA62 (for #R$CA5C). It adds ASCII "0" so for example 1
       ab   @bytes+48,a                ; ADD A,$30         ; ends up being 1 + $30 = $31 (e.g. "1" in ASCII).
       movb a,@progress_buffer+6       ; LD ($CA62),A      ; }
       jmp  print_progress             ; JR $CA38          ; Jump to #R$CA38.
* Ensures the progress digit remains 0-9. On entry #REGhl will be either
* #R$CA4A or #R$CA4C.
progress_divisible_10:                 ; ca27
       sb   *hl,*hl                    ; LD (HL),$00       ; Reset the current progress digit
                                                           ; to $00.
       inc  hl                         ; INC HL            ; Use the secondary digit of the
                                                           ; currently focused progress.
* Note this doesn't account for a third digit and so leads to eventual corruption. Once past day/ phase "99", this
* will display "00" and past "09" the first ASCII digit doesn't point to any usable image data. Note however, this
* occurs after ~4 hours of game play so isn't especially an issue.
       ab   one,*hl                    ; INC (HL)          ; Increase this second digit by
                                                           ; one.
       movb *hl,a                      ; LD A,(HL)         ; {Add ASCII "0" so for example 1 ends up being 1 + $30 = $31 (e.g. "1" in ASCII). Write this number to $CA61
       ab   @bytes+48,a                ; ADD A,$30         ; (for #R$CA5C).
       movb a,@progress_buffer+5       ; LD ($CA61),A      ; }
       dec  hl                         ; DEC HL            ; Move back to point to the
                                                           ; original location of #REGhl.
       movb *hl,a                      ; LD A,(HL)         ; {Again, add ASCII "0" for this
       ab   @bytes+48,a                ; ADD A,$30         ; digit too. Write this number to
       movb a,@progress_buffer+6       ; LD ($CA62),A      ; $CA62 (for #R$CA5C).}
* Prints the current progress buffer message to the screen.
print_progress:                        ; ca38
       li   hl,progress_buffer         ; LD HL,$CA5C       ; {Prints #R$CA5C to the screen buffer at $486C using #R$CBD2.
       li   de,_4080+2028              ; LD DE,$486C       ; #TABLE(default,centre,centre,centre,centre)
       li   bc,>0703                   ; LD BC,$0703       ; { =h Value | =h Ink | =h Paper | =h Bright }
       .call @print_two_tone_text      ; CALL $CBD2        ; { $07 | $07 | $00 | $00 }
                                                           ; { $03 | $03 | $00 | $00 }
                                                           ; TABLE#}
       movb @bytes+80,b                ; LD B,$50          ; {Interrupt driven HALT loop ($50
progress_halt_loop:                    ; ca46
       ; HALT                          ; HALT              ; cycles).
       sb   one,b                      ; DJNZ $CA46        ; }
       jne  progress_halt_loop         ;                   
       .ret                            ; RET               ; Return.
phase:                                 ; ca4a
       data 6                                                        ; 
day:                                   ; ca4c
       data 1                                                        ; 
phase_copy:                            ; ca4e
       text 'PHASE'                                                  ; 
day_copy:                              ; ca53
       text ' DAY '                                                  ; 
day_ascii:                             ; ca58
       text ' 1'                                                     ; 
phase_ascii:                           ; ca5a
       text ' 6'                                                     ; 
progress_buffer:                       ; ca5c
       text 'PHASE 6',>ff                                            ; 
* Clears the screen and displays the day number.
prep_display_day:                      ; ca64
       sb   a,a                        ; XOR A             ; {Clears the screen by passing $00
       .call @clear_screen             ; CALL $C9D0        ; to #R$C9D0.}
       .call @display_day              ; CALL $C9FB        ; Call #R$C9FB.
       .ret                            ; RET               ; Return.
* Clear down the day/ progress states.
init_progress:                         ; ca6c
       li   hl,>0000                   ; LD HL,$0000       ; {Clears #R$CA4A and #R$CA4C
       mov  hl,@phase                  ; LD ($CA4A),HL     ; (writes $0000 to them).
       mov  hl,@day                    ; LD ($CA4C),HL     ; }
       movb @bytes+32,a                ; LD A,$20          ; {Writes ASCII space ($20) to $CA61 and ASCII "0" ($30) to $CA62 (i.e. writes " 0" to the numeric portion of
       li   hl,progress_buffer+5       ; LD HL,$CA61       ; #R$CA5C).
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       movb @bytes+48,a                ; LD A,$30          ; 
       movb a,*hl                      ; LD (HL),A         ; }
       .ret                            ; RET               ; Return.
cashboxes_completed_flag:              ; ca80
       byte >00                                                      ; 
cashboxes_completed:                   ; ca81
       .call @_cac8                    ; CALL $CAC8        ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
       movb @bytes+16,b                ; LD B,$10          ; 
cashboxes_flash_loop:                  ; ca87
       .push bc                        ; PUSH BC           ; 
       movb b,a                        ; LD A,B            ; 
       andi a,1*256                    ; AND $01           ; 
       .call @deposit_flash_prep       ; CALL $CAB9        ; 
       movb @bytes+16,b                ; LD B,$10          ; 
       .call @halt_loop                ; CALL $CD64        ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $CA87        ; 
       jne  cashboxes_flash_loop       ;                   
       movb @bytes+48,b                ; LD B,$30          ; 
       .call @halt_loop                ; CALL $CD64        ; 
       movb b,a                        ; LD A,B            ; 
       .call @deposit_flash_prep       ; CALL $CAB9        ; 
       .call @random_number            ; CALL $D8B0        ; 
       movb a,b                        ; LD B,A            ; 
       movb r,a                        ; LD A,R            ; 
       movb a,@c                       ; LD C,A            ; 
       ab   b,a                        ; ADD A,B           ; 
       movb a,d                        ; LD D,A            ; 
       movb @_cbcf,a                   ; LD A,($CBCF)      ; 
       li   hl,copied_5b80             ; LD HL,$CBB4       ; 
       .call @_c3c0                    ; CALL $C3C0        ; 
       movb a,@_cbcf                   ; LD ($CBCF),A      ; 
       sb   b,b                        ; LD B,$00          ; 
       b    @halt_loop                 ; JP $CD64          ; 
deposit_flash_prep:                    ; cab9
       li   hl,door_deposited_01       ; LD HL,$CC8D       ; {Writes #REGa across all the
       li   de,door_deposited_02       ; LD DE,$CC8E       ; deposit flags (copies to each
       li   bc,>000d                   ; LD BC,$000D       ; from #R$CC8D).
       movb a,*hl                      ; LD (HL),A         ; 
       .ldir                           ; LDIR              ; }
       b    @_cc9b                     ; JP $CC9B          ; Jump to #R$CC9B.
_cac8:
       .call @prep_display_phase       ; CALL $C9B7        ; 
* This entry point is used by the routines at #R$CD1B and #R$CD47.
_cacb:
       sb   a,a                        ; XOR A             ; {Writes $00 to #R$D2FE.
       movb a,@_d2fe                   ; LD ($D2FE),A      ; }
       .call @_cad4                    ; CALL $CAD4        ; 
       jmp  _cae7                      ; JR $CAE7          ; 
_cad4:
       .call @populate_door_buffer     ; CALL $CD68        ; 
       .call @draw_play_with_doors     ; CALL $CC3A        ; 
       .call @life_images              ; CALL $CC5A        ; 
       .call @_cc9b                    ; CALL $CC9B        ; 
       .call @draw_score               ; CALL $CD90        ; 
       .call @_d45e                    ; CALL $D45E        ; 
       .ret                            ; RET               ; 
_cae7:
       movb @bytes+127,a               ; LD A,$7F          ; {Read keys SPACE, FULL-STOP, M,
       ; IN A,($FE)                    ; IN A,($FE)        ; N, & B.}
       ; RRA                           ; RRA               ; 
       joc  _cafb                      ; JR C,$CAFB        ; TODO: check code. 
       movb @b254,a                    ; LD A,$FE          ; {Read keys SHIFT, Z, X, C, & V.
       ; IN A,($FE)                    ; IN A,($FE)        ; }
       ; RRA                           ; RRA               ; 
       joc  _cafb                      ; JR C,$CAFB        ; TODO: check code. 
       li   hl,copied_5b80             ; LD HL,$CBB4       ; 
       .call @_fc65+283                ; CALL $FD80        ; 
_cafb:
       movb @b254,a                    ; LD A,$FE          ; {Read keys SHIFT, Z, X, C, & V.
       ; IN A,($FE)                    ; IN A,($FE)        ; }
       movb a,tmp0                     ; BIT 1,A           ; 
       andi tmp0,2*256                 ;                   
       jne  _cb0b                      ; JR NZ,$CB0B       ; 
_cb03:
       movb @b254,a                    ; LD A,$FE          ; {Read keys SHIFT, Z, X, C, & V.
       ; IN A,($FE)                    ; IN A,($FE)        ; }
       movb a,tmp0                     ; BIT 2,A           ; 
       andi tmp0,4*256                 ;                   
       jne  _cb03                      ; JR NZ,$CB03       ; 
_cb0b:
       .call @_d2cf                    ; CALL $D2CF        ; 
       mov  @_ce1c,bc                  ; LD BC,($CE1C)     ; 
_cb12:
       dec  bc                         ; DEC BC            ; 
       movb b,a                        ; LD A,B            ; 
       socb @c,a                       ; OR C              ; 
       jne  _cb12                      ; JR NZ,$CB12       ; 
       .call @_d411                    ; CALL $D411        ; 
       .call @_cba6                    ; CALL $CBA6        ; 
       li   ix,door_1_flags            ; LD IX,$D165       ; 
       sb   @8(ix),@8(ix)              ; LD (IX+$08),$00   ; 
       li   hl,door_1_routine          ; LD HL,$CE14       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       socb *hl,a                      ; OR (HL)           ; 
       .push af                        ; PUSH AF           ; 
       jne  !                          ; CALL Z,$CE21      ; 
       .call @character_chooser        ;                   
!
       .pop af                         ; POP AF            ; 
       jeq  _cb3f                      ; JR Z,$CB3F        ; 
       mov  @door_1_routine,hl         ; LD HL,($CE14)     ; 
       li   de,_cb3f                   ; LD DE,$CB3F       ; 
       .push de                        ; PUSH DE           ; 
       movb one,a                      ; LD A,$01          ; 
       movb a,@door_frame_ref          ; LD ($CE1A),A      ; 
       b    *hl                        ; JP (HL)           ; TODO. 
_cb3f:
       li   ix,door_2_flags            ; LD IX,$D173       ; 
       sb   @8(ix),@8(ix)              ; LD (IX+$08),$00   ; 
       li   hl,door_2_routine          ; LD HL,$CE16       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       socb *hl,a                      ; OR (HL)           ; 
       .push af                        ; PUSH AF           ; 
       jne  !                          ; CALL Z,$CE21      ; 
       .call @character_chooser        ;                   
!
       .pop af                         ; POP AF            ; 
       jeq  _cb61                      ; JR Z,$CB61        ; 
       mov  @door_2_routine,hl         ; LD HL,($CE16)     ; 
       li   de,_cb61                   ; LD DE,$CB61       ; 
       .push de                        ; PUSH DE           ; 
       movb @bytes+2,a                 ; LD A,$02          ; 
       movb a,@door_frame_ref          ; LD ($CE1A),A      ; 
       b    *hl                        ; JP (HL)           ; TODO. 
_cb61:
       li   ix,door_3_flags            ; LD IX,$D181       ; 
       sb   @8(ix),@8(ix)              ; LD (IX+$08),$00   ; 
       li   hl,door_3_routine          ; LD HL,$CE18       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       socb *hl,a                      ; OR (HL)           ; 
       .push af                        ; PUSH AF           ; 
       jne  !                          ; CALL Z,$CE21      ; 
       .call @character_chooser        ;                   
!
       .pop af                         ; POP AF            ; 
       jeq  _cb83                      ; JR Z,$CB83        ; 
       mov  @door_3_routine,hl         ; LD HL,($CE18)     ; 
       li   de,_cb83                   ; LD DE,$CB83       ; 
       .push de                        ; PUSH DE           ; 
       movb @bytes+3,a                 ; LD A,$03          ; 
       movb a,@door_frame_ref          ; LD ($CE1A),A      ; 
       b    *hl                        ; JP (HL)           ; TODO. 
_cb83:
       movb @_d2fe,a                   ; LD A,($D2FE)      ; {If bit 0 of #R$D2FE is not zero
       movb a,tmp0                     ; BIT 0,A           ; then jump to #R$CD47.
       andi tmp0,1*256                 ;                   
       jeq  !                          ; JP NZ,$CD47       ; }
       b    @_cd47                     ;                   
!
       movb a,tmp0                     ; BIT 1,A           ; {Else if bit 1 is not zero, jump
       andi tmp0,2*256                 ;                   
       jeq  !                          ; JP NZ,$CD1B       ; to #R$CD1B.}
       b    @flash_lives               ;                   
!
       .call @scoring                  ; CALL $CDC3        ; Call #R$CDC3.
       li   hl,_d190                   ; LD HL,$D190       ; {If #R$D190 is not zero then call
       movb *hl,a                      ; LD A,(HL)         ; #R$CBA0 (also, writes $00 to
       ; AND A                         ; AND A             ; #R$D190 to clear it).
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       jeq  !                          ; CALL NZ,$CBA0     ; }
       .call @_cba0                    ;                   
!
       b    @_cae7                     ; JP $CAE7          ; 
_cba0:
       .call @_f960                    ; CALL $F960        ; 
       b    @_cc9b                     ; JP $CC9B          ; 
_cba6:
       li   hl,_5b00                   ; LD HL,$5B00       ; {Blanks $FF bytes from #R$5B00
       li   de,_5b01                   ; LD DE,$5B01       ; onwards, then returns.
       li   bc,>00ff                   ; LD BC,$00FF       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .ldir                           ; LDIR              ; 
       .ret                            ; RET               ; }
copied_5b80:                           ; cbb4
       byte >C3,>D2,>CB,>C3,>5A,>CC,>59,>CC                          ; {Copied to $5B80.
       byte >2A,>12,>CE,>E9,>C3,>DC,>CD,>C3                          ; 
       byte >B0,>D5,>C3,>E6,>D5,>C3,>FA,>D5                          ; 
       byte >C3,>90,>CD                                              ; }
_cbcf:
       byte >01                                                      ; 

* Draw Text.
two_tone_attributes_buffer:            ; cbd0
       data 1797                                                     ; Stores the attributes; top attribute/ bottom attribute.
* This entry point is used by the routines at #R$5B80 and #R$C7C0.
print_two_tone_text:                   ; cbd2
       mov  bc,@two_tone_attributes_buffer ; LD ($CBD0),BC     ; Stash the attributes at #R$CBD0.
print_two_tone_text_loop:              ; cbd6
       movb *hl,a                      ; LD A,(HL)         ; {Grab the next character in the string, if it's $FF then
       cb   a,@b255                    ; CP $FF            ; return.
       jne  !                          ; RET Z             ; }
       .ret                            ;                   
!
       cb   a,@bytes+48                ; CP $30            ; 
       jne  _cbe0                      ; JR NZ,$CBE0       ; 
       movb @bytes+58,a                ; LD A,$3A          ; 
_cbe0:
       .push hl                        ; PUSH HL           ; 
       .push de                        ; PUSH DE           ; 
       .call @print_tt_text_space_check ; CALL $CBFC        ; 
       .pop de                         ; POP DE            ; 
       .pop hl                         ; POP HL            ; 
       inc  hl                         ; INC HL            ; 
       ab   one,@e                     ; INC E             ; 
       movb @e,a                       ; LD A,E            ; 
       andi a,31*256                   ; AND $1F           ; 
       jne  print_two_tone_text_loop   ; JR NZ,$CBD6       ; 
       movb @e,a                       ; LD A,E            ; 
       ab   @bytes+32,a                ; ADD A,$20         ; 
       movb a,@e                       ; LD E,A            ; 
       andi a,224*256                  ; AND $E0           ; 
       jne  print_two_tone_text_loop   ; JR NZ,$CBD6       ; 
       movb d,a                        ; LD A,D            ; 
       ab   @bytes+8,a                 ; ADD A,$08         ; 
       movb a,d                        ; LD D,A            ; 
       jmp  print_two_tone_text_loop   ; JR $CBD6          ; 
* This entry point is used by the routine at #R$5B9B.
print_tt_text_space_check:             ; cbfc
       cb   a,@bytes+32                ; CP $20            ; {If the character is a space then jump forward to
       jne  _cc0e                      ; JR NZ,$CC0E       ; #R$CC0E.}
       li   hl,_5b00                   ; LD HL,$5B00       ; 
       li   bc,>1001                   ; LD BC,$1001       ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .push hl                        ; PUSH HL           ; 
       .call @copy_routine             ; CALL $D5E6        ; 
       .pop hl                         ; POP HL            ; 
       jmp  _cc1d                      ; JR $CC1D          ; 
_cc0e:
       cb   a,@bytes+65                ; CP $41            ; 
       jhe  _cc14                      ; JR NC,$CC14       ; 
       ab   @bytes+42,a                ; ADD A,$2A         ; 
_cc14:
       sb   @bytes+65,a                ; SUB $41           ; 
       ab   @bytes+10,a                ; ADD A,$0A         ; 
       .push de                        ; PUSH DE           ; 
       .call @draw_number              ; CALL $CDAE        ; 
       .pop hl                         ; POP HL            ; 
_cc1d:
       .call @_cc2b                    ; CALL $CC2B        ; 
       mov  @two_tone_attributes_buffer,bc ; LD BC,($CBD0)     ; {Load the stored top/ bottom attribute bytes back into
       movb b,*hl                      ; LD (HL),B         ; #REGbc and write them to the screen.
       li   de,>0020                   ; LD DE,$0020       ; 
       a    de,hl                      ; ADD HL,DE         ; 
       movb @c,*hl                     ; LD (HL),C         ; }
       .ret                            ; RET               ; Return.

* Routine at CC2B
* 
* Used by the routine at #R$CBD0.
_cc2b:
       movb h,a                        ; LD A,H            ; 
       andi a,24*256                   ; AND $18           ; 
       ; SRA A                         ; SRA A             ; 
       ; SRA A                         ; SRA A             ; 
       ; SRA A                         ; SRA A             ; 
       ab   @bytes+88,a                ; ADD A,$58         ; 
       movb a,h                        ; LD H,A            ; 
       .ret                            ; RET               ; Return.

* Buffer for holding #R$D5E6 address.
buffer_copy_routine:                   ; cc38
       data copy_routine

* Main Playfield Initialisation.
* 
* Used by the routine at #R$C7C0.
* 
* .
* 
* Draws Main Playfield with all three doors closed.
draw_play_with_doors:                  ; cc3a
       li   ix,buffer_copy_routine     ; LD IX,$CC38       ; {Draw the main game playfield.
       .call @draw_playfield           ; CALL $C300        ; }
       movb one,a                      ; LD A,$01          ; {Calls #R$D664 with #R$CE1A set to $01.
       movb a,@door_frame_ref          ; LD ($CE1A),A      ; 
       .call @draw_door_frame_1        ; CALL $D664        ; }
       movb @bytes+2,a                 ; LD A,$02          ; {Calls #R$D664 with #R$CE1A set to $02.
       movb a,@door_frame_ref          ; LD ($CE1A),A      ; 
       .call @draw_door_frame_1        ; CALL $D664        ; }
       movb @bytes+3,a                 ; LD A,$03          ; {Jump to #R$D664 with #R$CE1A set to $03.
       movb a,@door_frame_ref          ; LD ($CE1A),A      ; 
       b    @draw_door_frame_1         ; JP $D664          ; }

* Number of lives remaining
lives:                                 ; cc59
       byte >00

* Display The "Life" Images.
* 
* Used by the routines at #R$5B83, #R$C7C0 and #R$CD1B.
life_images:                           ; cc5a
       movb @bytes+5,b                 ; LD B,$05          ; {Set up counter=$05 screen buffer=$50B6.
       li   hl,_5020+150               ; LD HL,$50B6       ; }
life_images_loop:                      ; cc5f
       .push bc                        ; PUSH BC           ; {jjjss
       li   de,_5b00                   ; LD DE,$5B00       ; 
       .call @copy_routine_loop        ; CALL $CC84        ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $CC5F        ; }
       jne  life_images_loop           ;                   
       movb @lives,a                   ; LD A,($CC59)      ; {If #R$CC59 are zero then return.
       ; AND A                         ; AND A             ; 
       jne  !                          ; RET Z             ; }
       .ret                            ;                   
!
       cb   a,@bytes+6                 ; CP $06            ; {If #R$CC59 is more than or equal to "6" then return.
       jl   !                          ; RET NC            ; }
       .ret                            ;                   
!
       movb a,b                        ; LD B,A            ; 
       li   hl,_5020+150               ; LD HL,$50B6       ; 
draw_life_images_loop:                 ; cc77
       .push bc                        ; PUSH BC           ; 
       .call @draw_life_images         ; CALL $CC81        ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $CC77        ; 
       jne  draw_life_images_loop      ;                   
       .ret                            ; RET               ; Return.
draw_life_images:                      ; cc81
       li   de,lives_image             ; LD DE,$FFB8       ; {Point at the #R$FFB8 and call #R$D5E6.
copy_routine_loop:                     ; cc84
       .push hl                        ; PUSH HL           ; 
       li   bc,>1802                   ; LD BC,$1802       ; 
       .call @copy_routine             ; CALL $D5E6        ; }
       .pop hl                         ; POP HL            ; 
_cc8c:
       .ret                            ; RET               ; Return.

* Deposit Flags.
* 
* Stores whether a deposit has been made for each door.
door_deposited_01:                     ; cc8d
       byte >00
door_deposited_02:                     ; cc8e
       byte >00
       byte >00
       byte >00
       byte >00
       byte >00
       byte >00
       byte >00
       byte >00
       byte >00
       byte >00
       byte >00

* Probably represents each block of six deposit flags.
door_deposited_01_06:                  ; cc99
       byte >00
       byte >00

* Draws Deposit Cashboxes.
* 
* Used by the routine at #R$C7C0.
_cc9b:
       movb @cashbox_ref,a             ; LD A,($D45C)      ; {Converts #R$D45C into cash deposit box flag address
       movb a,@l                       ; LD L,A            ; (e.g. "1" becomes #R$CC8D and so on).
       sb   h,h                        ; LD H,$00          ; 
       li   de,_cc8c                   ; LD DE,$CC8C       ; 
       a    de,hl                      ; ADD HL,DE         ; }
       li   ix,door_1_flags            ; LD IX,$D165       ; {#REGa=#R$D16D.
       movb @8(ix),a                   ; LD A,(IX+$08)     ; }
       socb *hl,a                      ; OR (HL)           ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       li   ix,door_2_flags            ; LD IX,$D173       ; {#REGa=#R$D17B.
       movb @8(ix),a                   ; LD A,(IX+$08)     ; }
       socb *hl,a                      ; OR (HL)           ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       li   ix,door_3_flags            ; LD IX,$D181       ; {#REGa=#R$D189.
       movb @8(ix),a                   ; LD A,(IX+$08)     ; }
       socb *hl,a                      ; OR (HL)           ; 
       movb a,*hl                      ; LD (HL),A         ; 
       li   de,door_deposited_01_06    ; LD DE,$CC99       ; #REGde=#R$CC99.
       li   hl,door_deposited_01       ; LD HL,$CC8D       ; #REGhl=#R$CC8D.
       movb *de,a                      ; LD A,(DE)         ; Fetch the flag for #R$CC99.
       socb *hl,a                      ; OR (HL)           ; Run a logical OR against the contents of #REGhl.
       movb a,*hl                      ; LD (HL),A         ; Writes this back into #REGhl (setting the flag).
       inc  hl                         ; INC HL            ; 
       inc  de                         ; INC DE            ; Move onto #R$CC9A.
       movb *de,a                      ; LD A,(DE)         ; Fetch the flag for #R$CC9A.
       socb *hl,a                      ; OR (HL)           ; Run a logical OR against the contents of #REGhl.
       movb a,*hl                      ; LD (HL),A         ; Writes this back into #REGhl (setting the flag).
       .call @game_cashboxes           ; CALL $CCFB        ; 
       li   de,door_deposited_01       ; LD DE,$CC8D       ; Points to the cashbox flags (beginning at #R$CC8D).
       li   hl,cashboxes_completed_flag ; LD HL,$CA80       ; {Write $00 to #R$CA80.
       sb   *hl,*hl                    ; LD (HL),$00       ; }
       movb @bytes+12,b                ; LD B,$0C          ; Testing against all 12 cashboxes.
cashboxes_complete_loop:               ; ccdd
       movb *de,a                      ; LD A,(DE)         ; {Fetch the cashbox flag, return if its zero.
       ; AND A                         ; AND A             ; 
       jne  !                          ; RET Z             ; }
       .ret                            ;                   
!
       inc  de                         ; INC DE            ; {Move onto the next cashbox (loop back to #R$CCDD) or
       sb   one,b                      ; DJNZ $CCDD        ; continue once all 12 are checked.}
       jne  cashboxes_complete_loop    ;                   
       movb a,*hl                      ; LD (HL),A         ; {Write #REGa ($01) to #R$CA80.
       .ret                            ; RET               ; }
draw_game_cashbox:                     ; cce5
       ab   a,a                        ; ADD A,A           ; {Determines whether to send #R$FF78 or #R$FF98 to
       ab   @l,a                       ; ADD A,L           ; #R$D5E6.
       movb a,@l                       ; LD L,A            ; 
       li   de,empty_box_image         ; LD DE,$FF78       ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; AND A                         ; AND A             ; 
       jeq  _ccf4                      ; JR Z,$CCF4        ; 
       li   de,dollar_box_image        ; LD DE,$FF98       ; 
_ccf4:
       li   bc,>1002                   ; LD BC,$1002       ; 
       .call @copy_routine             ; CALL $D5E6        ; }
       .ret                            ; RET               ; Return.
* Draws all the cashboxes in two blocks of 6.
game_cashboxes:                        ; ccfb
       li   ix,door_deposited_01       ; LD IX,$CC8D       ; {The statuses for the cashboxes begin at #R$CC8D. This routine processes them in two blocks of 6 (as they
       li   hl,loading+31              ; LD HL,$401F       ; appear. The first block is displayed at $401F, after processing the subroutine returns and continues for the
       movb one,a                      ; LD A,$01          ; next six blocks, just altering the screen location to $4025.
       .call @game_cashboxes_skip      ; CALL $CD0A        ; 
       li   hl,loading+37              ; LD HL,$4025       ; 
game_cashboxes_skip:                   ; cd0a
       movb @bytes+6,b                 ; LD B,$06          ; 
game_cashboxes_loop:                   ; cd0c
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       .push af                        ; PUSH AF           ; 
       .call @draw_game_cashbox        ; CALL $CCE5        ; 
       .pop af                         ; POP AF            ; 
       .pop hl                         ; POP HL            ; 
       .pop bc                         ; POP BC            ; 
       inc  ix                         ; INC IX            ; 
       ab   one,a                      ; INC A             ; 
       sb   one,b                      ; DJNZ $CD0C        ; }
       jne  game_cashboxes_loop        ;                   
       .ret                            ; RET               ; Return.

* Flash Lives/ Lose Life.
* 
* Used by the routine at #R$C7C0.
flash_lives:                           ; cd1b
       movb @bytes+10,b                ; LD B,$0A          ; {Short pause.
       .call @halt_loop                ; CALL $CD64        ; }
       li   hl,lives                   ; LD HL,$CC59       ; {Point to #R$CC59. Set a counter for $05 times and stash
       movb @bytes+5,b                 ; LD B,$05          ; it.
flash_lives_loop:                      ; cd25
       .push bc                        ; PUSH BC           ; }
       sb   one,*hl                    ; DEC (HL)          ; {Decrease the number of lives by one, stash the lives
       .push hl                        ; PUSH HL           ; memory location and draw the decreased life images.
       .call @life_images              ; CALL $CC5A        ; }
       movb @bytes+16,b                ; LD B,$10          ; {Short pause.
       .call @halt_loop                ; CALL $CD64        ; }
       .pop hl                         ; POP HL            ; {Grab the lives memory location, increase it by one, stash the location again and draw the now increased life
       ab   one,*hl                    ; INC (HL)          ; images (i.e. what they were on entry to the routine).
       .push hl                        ; PUSH HL           ; 
       .call @life_images              ; CALL $CC5A        ; }
       movb @bytes+16,b                ; LD B,$10          ; {Short pause.
       .call @halt_loop                ; CALL $CD64        ; }
       .pop hl                         ; POP HL            ; 
       .pop bc                         ; POP BC            ; {Loop back until the counter is zero.
       sb   one,b                      ; DJNZ $CD25        ; }
       jne  flash_lives_loop           ;                   
       movb *hl,a                      ; LD A,(HL)         ; {Finally decrease lives by one and if they are not zero
       sb   one,a                      ; DEC A             ; jump to #R$CACB.
       movb a,*hl                      ; LD (HL),A         ; 
       jeq  !                          ; JP NZ,$CACB       ; }
       b    @_cacb                     ;                   
!
       ; SCF                           ; SCF               ; {Set the carry flag and return.
       .ret                            ; RET               ; }

* Routine at CD47
* 
* Used by the routine at #R$C7C0.
_cd47:
       movb @_d2fe,a                   ; LD A,($D2FE)      ; {If bit 2 of #R$D2FE is zero then jump to #R$CD53.
       movb a,tmp0                     ; BIT 2,A           ; 
       andi tmp0,4*256                 ;                   
       jeq  _cd53                      ; JR Z,$CD53        ; }
       .call @_f880                    ; CALL $F880        ; 
       jmp  _cd56                      ; JR $CD56          ; 
_cd53:
       .call @bang                     ; CALL $C000        ; 
_cd56:
       .call @populate_door_buffer     ; CALL $CD68        ; 
       li   hl,lives                   ; LD HL,$CC59       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       sb   one,a                      ; DEC A             ; 
       movb a,*hl                      ; LD (HL),A         ; 
       jeq  !                          ; JP NZ,$CACB       ; 
       b    @_cacb                     ;                   
!
       ; SCF                           ; SCF               ; 
       .ret                            ; RET               ; 

* Configurable "pause".
* 
* Used by the routines at #R$C7C0 and #R$CD1B.
* 
* .
* 
* Loops back on itself using #REGb as a counter.
halt_loop:                             ; cd64
       ; HALT                          ; HALT              ; {Short interrupt driven pause, and return.
       sb   one,b                      ; DJNZ $CD64        ; 
       jne  halt_loop                  ;                   
       .ret                            ; RET               ; }

* Initialise Door Flags.
* 
* Used by the routines at #R$C7C0 and #R$CD47.
* 
* .
* 
* Populates the state flags for each door.
populate_door_buffer:                  ; cd68
       li   ix,door_1_flags            ; LD IX,$D165       ; {Call #R$D8A1 using #REGix=#R$D165.
       .call @reset___                 ; CALL $D8A1        ; }
       li   ix,door_2_flags            ; LD IX,$D173       ; {Call #R$D8A1 using #REGix=#R$D173.
       .call @reset___                 ; CALL $D8A1        ; }
       li   ix,door_3_flags            ; LD IX,$D181       ; {Call #R$D8A1 using #REGix=#R$D181.
       .call @reset___                 ; CALL $D8A1        ; }
       .ret                            ; RET               ; Return.

* Debugger
* 
* As the game uses its own character set, it's unlikely this routine was/ is used for the actual game (it doesn't
* seem to be called from anywhere).
* At a guess, it was probably used for "testing" text messages and outputs during development.
debugger:                              ; cd7e
       movb *hl,a                      ; LD A,(HL)         ; {Grab a byte from #REGhl return if it's $FF (our
       cb   a,@b255                    ; CP $FF            ; termination character).
       jne  !                          ; RET Z             ; }
       .ret                            ;                   
!
       ; RST $10                       ; RST $10           ; #HTML(Print to screen (see <a
                                                           ; href="https://skoolkid.github.io/rom/asm/0010.html">PRINT_A_1</a>).)
       inc  hl                         ; INC HL            ; {Increase #REGhl by one and loop back to #R$CD7E.
       jmp  debugger                   ; JR $CD7E          ; }

* Score (6 bytes)
score_digit_6:                         ; cd86
       byte >00
score_digit_5:                         ; cd87
       byte >00
score_digit_4:                         ; cd88
       byte >00
       byte >00
       byte >00
score_digit_1:                         ; cd8b
       byte >00

* Game status buffer entry at CD8C
       byte >00

* Game status buffer entry at CD8D
       byte >07,>4F,>52                                              ; ???

* Draw Score To The Screen
* 
* Used by the routines at #R$5B98, #R$C7C0 and #R$CDC3.
draw_score:                            ; cd90
       li   hl,score_digit_1           ; LD HL,$CD8B       ; {Starting values; #TABLE(default,centre,centre,centre,centre)
       li   de,_50c0+8                 ; LD DE,$50C8       ; { =h Source | =h Screen Buffer | =h Counter }
       movb @bytes+6,b                 ; LD B,$06          ; { #R$CD8B | $50C8 | $06 }
                                                           ; TABLE#}
score_digit_loop:                      ; cd98
       .push bc                        ; PUSH BC           ; {Stash the lot.
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; }
       movb *hl,a                      ; LD A,(HL)         ; {Grab the number at the source memory location;
       ; AND A                         ; AND A             ; #LIST
       jne  score_digit_non_zero       ; JR NZ,$CDA1       ; { If it's zero then add $0A (as the numbers are stored 1-2-3-4-5-6-7-8-9-0 whereas ASCII uses 0-1-2-3-4-5-6-7-8-9) }
       ab   @bytes+10,a                ; ADD A,$0A         ; { add $23 (so for example "2" will be "$25" - see #R$CDAE) }
score_digit_non_zero:                  ; cda1
       ab   @bytes+35,a                ; ADD A,$23         ; { Call #R$CDAE }
       .call @draw_number              ; CALL $CDAE        ; LIST#}
       .pop hl                         ; POP HL            ; {Retrieve our current source, destination and counter
       .pop de                         ; POP DE            ; from the stack.
       .pop bc                         ; POP BC            ; }
       inc  de                         ; INC DE            ; {Increase the screen buffer memory location by one, decrease the source memory location and loop round to
       dec  hl                         ; DEC HL            ; #R$CD98 until it is zero.
       sb   one,b                      ; DJNZ $CD98        ; }
       jne  score_digit_loop           ;                   
       .ret                            ; RET               ; Return.

* Draw Numbering from Character Set Index.
* 
* Used by the routines at #R$CBD0 and #R$CD90.
draw_number:                           ; cdae
       .push de                        ; PUSH DE           ; {Using $C000 as a base address, this works out the character set memory address from a given index passed
       sb   h,h                        ; LD H,$00          ; in #REGa. To give an example using "2" ($25 - see #R$CD90);
       movb a,@l                       ; LD L,A            ; #LIST
       a    hl,hl                      ; ADD HL,HL         ; { #HTML(Loads <strong>$25</strong> as the low-order byte; #REGhl=$0025) }
       a    hl,hl                      ; ADD HL,HL         ; { #HTML(Times by <strong>$10</strong>; #REGhl=$250) }
       a    hl,hl                      ; ADD HL,HL         ; { #HTML(Add <strong>$C000</strong>=#R$C250) }
       a    hl,hl                      ; ADD HL,HL         ; LIST#
       li   de,bang                    ; LD DE,$C000       ; This is then passed to #R$D5E6.
       a    de,hl                      ; ADD HL,DE         ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .pop hl                         ; POP HL            ; 
       li   bc,>1001                   ; LD BC,$1001       ; 
       .call @copy_routine             ; CALL $D5E6        ; }
       .ret                            ; RET               ; Return.

* Apply Scoring
* 
* Used by the routine at #R$C7C0.
scoring:                               ; cdc3
       li   ix,door_1_flags            ; LD IX,$D165       ; {Calls #R$CDDC three times with #REGix containing;
       .call @scoring_prep             ; CALL $CDDC        ; #LIST
       li   ix,door_2_flags            ; LD IX,$D173       ; { #R$D165 }
       .call @scoring_prep             ; CALL $CDDC        ; { #R$D173 }
       li   ix,door_3_flags            ; LD IX,$D181       ; { #R$D181 }
       .call @scoring_prep             ; CALL $CDDC        ; LIST#}
       .call @draw_score               ; CALL $CD90        ; Call #R$CD90.
       .ret                            ; RET               ; Return.
* Passes the higher and lower score values to #R$CDF7 for the current door.
scoring_prep:                          ; cddc
       li   hl,score_digit_5           ; LD HL,$CD87       ; References #R$CD87.
       movb @6(ix),b                   ; LD B,(IX+$06)     ; Retrieves #REGix+$06, stores it in #REGb then reset it
                                                           ; to zero.
       sb   @6(ix),@6(ix)              ; LD (IX+$06),$00   ; 
       .call @scoring_apply            ; CALL $CDF7        ; Call #R$CDF7.
       li   hl,score_digit_4           ; LD HL,$CD88       ; References #R$CD88.
       movb @7(ix),b                   ; LD B,(IX+$07)     ; Retrieves #REGix+$07, stores it in #REGb then reset it
                                                           ; to zero.
       sb   @7(ix),@7(ix)              ; LD (IX+$07),$00   ; 
       .call @scoring_apply            ; CALL $CDF7        ; Call #R$CDF7.
       .ret                            ; RET               ; Return.
* Applies the door scores into the player score.
scoring_apply:                         ; cdf7
       movb *hl,a                      ; LD A,(HL)         ; {Pass the current score digit to #R$CE08 and overwrite
       .call @scoring_base_10          ; CALL $CE08        ; the digit with the result.
       movb a,*hl                      ; LD (HL),A         ; }
       movb @bytes+5,@e                ; LD E,$05          ; Sets a counter to $05 (5 more digits in the score).
scoring_apply_loop:                    ; cdfe
       inc  hl                         ; INC HL            ; Move onto the next scoring digit.
       movb *hl,a                      ; LD A,(HL)         ; {Pass the current score digit to #R$CE08 and overwrite
       .call @scoring_base_10          ; CALL $CE08        ; the digit with the result.
       movb a,*hl                      ; LD (HL),A         ; }
       sb   one,@e                     ; DEC E             ; {Loop back to #R$CDFE until the counter is zero (and
       jne  scoring_apply_loop         ; JR NZ,$CDFE       ; all scoring digits are accounted for).}
       .ret                            ; RET               ; Return.
* Ensures the current scoring digit remains 0-9 (if $0A then it's reset and the
* carry digit is forwarded on).
scoring_base_10:                       ; ce08
       ab   b,a                        ; ADD A,B           ; Adds current score digit with passed score.
       sb   b,b                        ; LD B,$00          ; Reset passed score to zero.
       cb   a,@bytes+10                ; CP $0A            ; {Return if result is less than $0A (base 10).
       jhe  !                          ; RET C             ; }
       .ret                            ;                   
!
       sb   @bytes+10,a                ; SUB $0A           ; Subtract $0A to keep this digit in base 10 (e.g. "11"
                                                           ; becomes "1", "12" becomes "2", and so on).
       ab   one,b                      ; INC B             ; {Add one onto the passed score (which carries onto the
       .ret                            ; RET               ; next digit as it goes lowest to highest) and return.}

* Control Method Routine Alias.
* 
* Points to either #R$D392 or #R$D39B depending on the chosen control method.
control_routine_alias:                 ; ce12
       byte >9B,>D3                                                  ; 16 bit memory location of either the keyboard or
                                                                     ; joystick control routines.

* Door Routine Buffer.
* 
* These buffers point to the routines for character/ door actions for each door that are currently "in-play".
* Some example routines would be;
* #TABLE(default,centre,centre)
* { =h Routine | =h Door }
* { #R$D192 | "Normal" Bandit }
* { #R$D1DC | Bowie }
* { #R$D201 | Customer }
* { #R$D241 | Julius }
* { #R$D289 | "Drawing" Bandit }
* TABLE#
* And will also hold the door closing routines as well.
door_1_routine:                        ; ce14
       data 0                                                        ; Door 1 character/ door routine in-play.
door_2_routine:                        ; ce16
       data 0                                                        ; Door 2 character/ door routine in-play.
door_3_routine:                        ; ce18
       data 0                                                        ; Door 3 character/ door routine in-play.

* Door Frame Reference
* 
* Only one door is "active" at a time, this status buffer points to the
* "currently in-focus door".
door_frame_ref:                        ; ce1a
       byte >03                                                      ; #TABLE(default,centre,centre)
                                                                     ; { =h Value | =h Which One }
                                                                     ; { $01 | Door 1 }
                                                                     ; { $02 | Door 2 }
                                                                     ; { $03 | Door 3 }
                                                                     ; TABLE#

* Game status buffer entry at CE1B
_ce1b:
       byte >03
_ce1c:
       data >0380
_ce1e:
       byte >03
* Defines the entry point for the choosing routines. Note, this isn't for one choice - they chain into each other
* this simply points to where the chain starts.
chooser_routine_buffer:                ; ce1f
       data choose_bandit_5

* Choose Door Character.
* 
* Used by the routine at #R$C7C0.
* 
* .
* 
* The characters available on a particular level are determined by #R$CE1F.
* #TABLE(default,centre,centre)
* { =h Initialisation Routine | =h Door }
* { #R$CE42 | Door 1 }
* { #R$CE8D | Door 2 }
* { #R$D18A | Door 3 }
* TABLE#
character_chooser:                     ; ce21
       li   hl,_ce1e                   ; LD HL,$CE1E       ; {Decrease #R$CE1E by one.
       movb *hl,a                      ; LD A,(HL)         ; 
       sb   one,a                      ; DEC A             ; 
       movb a,*hl                      ; LD (HL),A         ; }
       jeq  !                          ; RET NZ            ; Return if not zero.
       .ret                            ;                   
!
       movb @_ce1b,a                   ; LD A,($CE1B)      ; {Copies #R$CE1B into #R$CE1E.
       movb a,*hl                      ; LD (HL),A         ; }
       movb @9(ix),a                   ; LD A,(IX+$09)     ; {Decrease ????? by one.
       sb   one,a                      ; DEC A             ; #TABLE(default,centre,centre)
       movb a,@9(ix)                   ; LD (IX+$09),A     ; { =h Address | =h Door }
                                                           ; { #R$D16E | Door 1 }
                                                           ; { #R$D17C | Door 2 }
                                                           ; { #R$D18A | Door 3 }
                                                           ; TABLE#}
       jeq  !                          ; RET NZ            ; Return if not zero.
       .ret                            ;                   
!
* f
       .call @random_number            ; CALL $D8B0        ; Call #R$D8B0.
       andi a,31*256                   ; AND $1F           ; Keep bits 0-4 (so 0-31).
       socb @bytes+8,a                 ; OR $08            ; {Set bit 3 and write the resulting value to;
       movb a,@9(ix)                   ; LD (IX+$09),A     ; #TABLE(default,centre,centre)
                                                           ; { =h Address | =h Door }
                                                           ; { #R$D16E | Door 1 }
                                                           ; { #R$D17C | Door 2 }
                                                           ; { #R$D18A | Door 3 }
                                                           ; TABLE#}
       mov  @chooser_routine_buffer,hl ; LD HL,($CE1F)     ; {Jump to the memory address contained at #R$CE1F.
       b    *hl                        ; JP (HL)           ; TODO. 
* Handles choosing one of the initial "default" characters. A
* character is always chosen here, so this is the end of the
* choosing routine.
choose_default_set:                    ; ce42
       .call @_daef                    ; CALL $DAEF        ; Call #R$DAEF.
       andi a,3*256                    ; AND $03           ; Keep only bits 0 and 1 (which determine the type of
                                                           ; character).
       jeq  init_bandit_open           ; JR Z,$CEB8        ; {Determines which character initialisation to run;
       sb   one,a                      ; DEC A             ; #TABLE(default,centre,centre)
       jne  !                          ; JP Z,$CEFC        ; { =h #REGa | =h Initialisation Routine }
       b    @init_bowie                ;                   
!
       sb   one,a                      ; DEC A             ; { $00 | #R$CEB8 }
       jne  !                          ; JP Z,$CF5E        ; { $01 | #R$CEFC }
       b    @init_customer_close       ;                   
!
       sb   one,a                      ; DEC A             ; { $02 | #R$CF5E }
       b    @init_customer_open        ; JP $CF2B          ; { $03 | #R$CF2B }
                                                           ; TABLE#}
* Handles whether or not to choose Julius.
choose_julius:                         ; ce55
       .call @random_number            ; CALL $D8B0        ; Call #R$D8B0.
       andi a,12*256                   ; AND $0C           ; {Keep only bits 2 and 3. Jump to the next character "test" if
       jne  choose_bandit_2            ; JR NZ,$CE5F       ; this is a non-zero number at #R$CE5F.}
       b    @init_julius_open          ; JP $CFB7          ; Jump to #R$CFB7.
* Handles whether or not to choose Bandit 2.
choose_bandit_2:                       ; ce5f
       .call @random_number            ; CALL $D8B0        ; Call #R$D8B0.
       andi a,152*256                  ; AND $98           ; {Keep only bits 3, 4 and 7. Jump to the next character "test" if
       jne  choose_bandit_3            ; JR NZ,$CE6F       ; this is a non-zero number at #R$CE6F.}
       li   hl,_d119                   ; LD HL,$D119       ; Set source character data to #R$D119.
       li   de,_d124                   ; LD DE,$D124       ; Set target character buffer to #R$D124.
       b    @choose_action             ; JP $CEA9          ; Jump to #R$CEA9.
* Handles whether or not to choose Bandit 3.
choose_bandit_3:                       ; ce6f
       .call @random_number            ; CALL $D8B0        ; Call #R$D8B0.
       andi a,49*256                   ; AND $31           ; {Keep only bits 0, 4 and 5. Jump to the next character "test" if
       jne  choose_default_set         ; JR NZ,$CE42       ; this is a non-zero number then jump back to the #R$CE42.
                                                           ; }
       li   hl,_d0c1                   ; LD HL,$D0C1       ; Set source character data to #R$D0C1.
       li   de,_d0cc                   ; LD DE,$D0CC       ; Set target character buffer to #R$D0CC.
       jmp  choose_action              ; JR $CEA9          ; Jump to #R$CEA9.
* Handles whether or not to choose Bandit 4.
choose_bandit_4:                       ; ce7e
       .call @random_number            ; CALL $D8B0        ; Call #R$D8B0.
       andi a,131*256                  ; AND $83           ; {Keep only bits 0, 1 and 7. Jump to the next character "test" if
       jne  choose_julius              ; JR NZ,$CE55       ; this is a non-zero number #R$CE55.}
       li   hl,_d0d7                   ; LD HL,$D0D7       ; Set source character data to #R$D0D7.
       li   de,_d0e2                   ; LD DE,$D0E2       ; Set target character buffer to #R$D0E2.
       jmp  choose_action              ; JR $CEA9          ; Jump to #R$CEA9.
* Handles whether or not to choose Bandit 5.
choose_bandit_5:                       ; ce8d
       .call @random_number            ; CALL $D8B0        ; Call #R$D8B0.
       andi a,88*256                   ; AND $58           ; {Keep only bits 3, 4 and 6. Jump to the next character "test" if
       jne  choose_bandit_4            ; JR NZ,$CE7E       ; this is a non-zero number #R$CE7E.}
       li   hl,_d0ed                   ; LD HL,$D0ED       ; Set source character data to #R$D0ED.
       li   de,_d0f8                   ; LD DE,$D0F8       ; Set target character buffer to #R$D0F8.
       jmp  choose_action              ; JR $CEA9          ; Jump to #R$CEA9.
* Handles whether or not to choose Bandit 6.
choose_bandit_6:                       ; ce9c
       .call @random_number            ; CALL $D8B0        ; Call #R$D8B0.
       andi a,113*256                  ; AND $71           ; {Keep only bits 0, 4, 5 and 6. Jump to the next character "test" if
       jne  choose_bandit_5            ; JR NZ,$CE8D       ; this is a non-zero number #R$CE8D.}
       li   hl,_d103                   ; LD HL,$D103       ; Set source character data to #R$D103.
       li   de,_d10e                   ; LD DE,$D10E       ; Set target character buffer to #R$D10E.
* Stashes the chosen character source/ buffer to the door state buffer.
choose_action:                         ; cea9
       movb @l,@12(ix)                 ; LD (IX+$0C),L     ; {Writes the character source memory address to one of the following (depending on which door is currently
       movb h,@13(ix)                  ; LD (IX+$0D),H     ; being actioned);
                                                           ; #TABLE(default,centre,centre)
                                                           ; { =h Address | =h Door }
                                                           ; { #R$D171 | Door 1 }
                                                           ; { #R$D17F | Door 2 }
                                                           ; { #R$D18D | Door 3 }
                                                           ; TABLE#}
       movb @e,@10(ix)                 ; LD (IX+$0A),E     ; {Writes the character target/ buffer memory address to one of the following (depending on which door is
       movb d,@11(ix)                  ; LD (IX+$0B),D     ; currently being actioned);
                                                           ; #TABLE(default,centre,centre)
                                                           ; { =h Address | =h Door }
                                                           ; { #R$D16F | Door 1 }
                                                           ; { #R$D17D | Door 2 }
                                                           ; { #R$D18B | Door 3 }
                                                           ; TABLE#}
       b    @_d019                     ; JP $D019          ; Jump to #R$D019.

* Character Initialisations.
* 
* Used by the routines at #R$CE21 and #R$D48F.
* 
* .
* 
* Writes a "bandit opening the door" to the door flags/ cache.
init_bandit_open:                      ; ceb8
       li   de,prep_bandit_open        ; LD DE,$D192       ; {Writes #R$D192 to the address contained
       movb *ix,@l                     ; LD L,(IX+$00)     ; at (depending on which door is currently being actioned);
       movb @1(ix),h                   ; LD H,(IX+$01)     ; #TABLE(default,centre,centre,centre)
       movb @e,*hl                     ; LD (HL),E         ; { =h Address | =h Door | =h Target }
       inc  hl                         ; INC HL            ; { #R$D165 | Door 1 | #R$CE14 }
       movb d,*hl                      ; LD (HL),D         ; { #R$D173 | Door 2 | #R$CE16 }
                                                           ; { #R$D181 | Door 3 | #R$CE18 }
                                                           ; TABLE#}
       li   hl,_d076                   ; LD HL,$D076       ; {Handles copying $0007 bytes of data from the address contained
       movb @2(ix),@e                  ; LD E,(IX+$02)     ; at (depending on which door is currently being actioned);
       movb @3(ix),d                   ; LD D,(IX+$03)     ; #TABLE(default,centre,centre)
       li   bc,>0007                   ; LD BC,$0007       ; { =h Address | =h Door }
       .ldir                           ; LDIR              ; { #R$D167 | Door 1 }
                                                           ; { #R$D175 | Door 2 }
                                                           ; { #R$D183 | Door 3 }
                                                           ; TABLE#
                                                           ; to #R$D076.}
       movb one,a                      ; LD A,$01          ; {Writes $01 to #R$D18F and return.
       movb a,@_d18f                   ; LD ($D18F),A      ; 
       .ret                            ; RET               ; }
* Writes a "bandit closing the door" to the door flags/ cache.
init_bandit_close:                     ; ced8
       li   de,prep_bandit_close       ; LD DE,$D1B7       ; {Writes #R$D1B7 to the address contained
       movb *ix,@l                     ; LD L,(IX+$00)     ; at (depending on which door is currently being actioned);
       movb @1(ix),h                   ; LD H,(IX+$01)     ; #TABLE(default,centre,centre,centre)
       movb @e,*hl                     ; LD (HL),E         ; { =h Address | =h Door | =h Target }
       inc  hl                         ; INC HL            ; { #R$D165 | Door 1 | #R$CE14 }
       movb d,*hl                      ; LD (HL),D         ; { #R$D173 | Door 2 | #R$CE16 }
                                                           ; { #R$D181 | Door 3 | #R$CE18 }
                                                           ; TABLE#}
       li   hl,_d07d                   ; LD HL,$D07D       ; {Handles copying $0007 bytes of data from the address contained
       movb @2(ix),@e                  ; LD E,(IX+$02)     ; at (depending on which door is currently being actioned);
       movb @3(ix),d                   ; LD D,(IX+$03)     ; #TABLE(default,centre,centre)
       li   bc,>0007                   ; LD BC,$0007       ; { =h Address | =h Door }
       .ldir                           ; LDIR              ; { #R$D167 | Door 1 }
                                                           ; { #R$D175 | Door 2 }
                                                           ; { #R$D183 | Door 3 }
                                                           ; TABLE#
                                                           ; to #R$D07D.}
       movb one,a                      ; LD A,$01          ; {Writes $01 to #R$D18F.
       movb a,@_d18f                   ; LD ($D18F),A      ; }
       movb one,@7(ix)                 ; LD (IX+$07),$01   ; 
       .ret                            ; RET               ; 
* Writes "Bowie" to the door flags/ cache.
init_bowie:                            ; cefc
       li   de,prep_bowie              ; LD DE,$D1DC       ; {Writes #R$D1DC to the address contained
       movb *ix,@l                     ; LD L,(IX+$00)     ; at (depending on which door is currently being actioned);
       movb @1(ix),h                   ; LD H,(IX+$01)     ; #TABLE(default,centre,centre,centre)
       movb @e,*hl                     ; LD (HL),E         ; { =h Address | =h Door | =h Target }
       inc  hl                         ; INC HL            ; { #R$D165 | Door 1 | #R$CE14 }
       movb d,*hl                      ; LD (HL),D         ; { #R$D173 | Door 2 | #R$CE16 }
                                                           ; { #R$D181 | Door 3 | #R$CE18 }
                                                           ; TABLE#}
       .call @random_number            ; CALL $D8B0        ; 
       andi a,8*256                    ; AND $08           ; 
       li   hl,_d07d+7                 ; LD HL,$D084       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       jeq  init_bowie_set_flag        ; JR Z,$CF16        ; 
       movb one,*hl                    ; LD (HL),$01       ; 
init_bowie_set_flag:                   ; cf16
       movb @2(ix),@e                  ; LD E,(IX+$02)     ; 
       movb @3(ix),d                   ; LD D,(IX+$03)     ; 
       li   bc,>0009                   ; LD BC,$0009       ; 
       .ldir                           ; LDIR              ; 
       li   de,bowie_shot_action       ; LD DE,$D863       ; 
       movb @e,@4(ix)                  ; LD (IX+$04),E     ; 
       movb d,@5(ix)                   ; LD (IX+$05),D     ; 
       .ret                            ; RET               ; 
* Writes a "customer opening the door" to the door flags/ cache.
init_customer_open:                    ; cf2b
       movb *ix,@l                     ; LD L,(IX+$00)     ; {Writes #R$D201 to the address contained
       movb @1(ix),h                   ; LD H,(IX+$01)     ; at (depending on which door is currently being actioned);
       li   de,prep_customer           ; LD DE,$D201       ; #TABLE(default,centre,centre,centre)
       movb @e,*hl                     ; LD (HL),E         ; { =h Address | =h Door | =h Target }
       inc  hl                         ; INC HL            ; { #R$D165 | Door 1 | #R$CE14 }
       movb d,*hl                      ; LD (HL),D         ; { #R$D173 | Door 2 | #R$CE16 }
                                                           ; { #R$D181 | Door 3 | #R$CE18 }
                                                           ; TABLE#}
       .call @random_number            ; CALL $D8B0        ; 
       andi a,130*256                  ; AND $82           ; 
       li   hl,_d08d+20                ; LD HL,$D0A1       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       jne  init_cust_open_set_flag    ; JR NZ,$CF45       ; 
       movb one,*hl                    ; LD (HL),$01       ; 
init_cust_open_set_flag:               ; cf45
       li   hl,_d08d+15                ; LD HL,$D09C       ; 
       movb @2(ix),@e                  ; LD E,(IX+$02)     ; 
       movb @3(ix),d                   ; LD D,(IX+$03)     ; 
       li   bc,>000f                   ; LD BC,$000F       ; 
       movb @_d18f,a                   ; LD A,($D18F)      ; 
       ; AND A                         ; AND A             ; 
       sb   a,a                        ; LD A,$00          ; 
       movb a,@_d18f                   ; LD ($D18F),A      ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       .ldir                           ; LDIR              ; 
       .ret                            ; RET               ; 
* Writes a "customer closing the door" to the door flags/ cache.
init_customer_close:                   ; cf5e
       movb *ix,@l                     ; LD L,(IX+$00)     ; {Writes #R$D201 to the address contained
       movb @1(ix),h                   ; LD H,(IX+$01)     ; at (depending on which door is currently being actioned);
       li   de,prep_customer           ; LD DE,$D201       ; #TABLE(default,centre,centre,centre)
       movb @e,*hl                     ; LD (HL),E         ; { =h Address | =h Door | =h Target }
       inc  hl                         ; INC HL            ; { #R$D165 | Door 1 | #R$CE14 }
       movb d,*hl                      ; LD (HL),D         ; { #R$D173 | Door 2 | #R$CE16 }
                                                           ; { #R$D181 | Door 3 | #R$CE18 }
                                                           ; TABLE#}
       .call @random_number            ; CALL $D8B0        ; 
       andi a,65*256                   ; AND $41           ; 
       li   hl,_d08d+5                 ; LD HL,$D092       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       jne  init_cust_close_set_flag   ; JR NZ,$CF78       ; 
       movb one,*hl                    ; LD (HL),$01       ; 
init_cust_close_set_flag:              ; cf78
       li   hl,_d08d                   ; LD HL,$D08D       ; 
       movb @2(ix),@e                  ; LD E,(IX+$02)     ; 
       movb @3(ix),d                   ; LD D,(IX+$03)     ; 
       li   bc,>000f                   ; LD BC,$000F       ; 
       movb @_d18f,a                   ; LD A,($D18F)      ; 
       ; AND A                         ; AND A             ; 
       sb   a,a                        ; LD A,$00          ; 
       movb a,@_d18f                   ; LD ($D18F),A      ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       .ldir                           ; LDIR              ; 
       .ret                            ; RET               ; 
* Writes a "customer being shot" to the door flags/ cache.
init_customer_shot:                    ; cf91
       li   de,prep_customer_shot      ; LD DE,$D226       ; {Writes #R$D226 to the address contained
       movb *ix,@l                     ; LD L,(IX+$00)     ; at (depending on which door is currently being actioned);
       movb @1(ix),h                   ; LD H,(IX+$01)     ; #TABLE(default,centre,centre,centre)
       movb @e,*hl                     ; LD (HL),E         ; { =h Address | =h Door | =h Target }
       inc  hl                         ; INC HL            ; { #R$D165 | Door 1 | #R$CE14 }
       movb d,*hl                      ; LD (HL),D         ; { #R$D173 | Door 2 | #R$CE16 }
                                                           ; { #R$D181 | Door 3 | #R$CE18 }
                                                           ; TABLE#}
       movb @2(ix),@e                  ; LD E,(IX+$02)     ; {Loads e.g. #R$D167 (depending on which door is currently
       movb @3(ix),d                   ; LD D,(IX+$03)     ; being actioned) into #REGde.}
       li   hl,_d0ab                   ; LD HL,$D0AB       ; #REGhl=#R$D0AB.
       inc  de                         ; INC DE            ; {Increase #REGde by $06.
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; }
       li   bc,>0003                   ; LD BC,$0003       ; {Copies three sequential bytes of data from #REGhl to
       .ldir                           ; LDIR              ; #REGde.}
       li   hl,_d18f                   ; LD HL,$D18F       ; {Writes $01 to #R$D18F and return.
       movb one,*hl                    ; LD (HL),$01       ; 
       .ret                            ; RET               ; }
* Writes "Julius opening the door" to the door flags/ cache.
init_julius_open:                      ; cfb7
       li   de,prep_julius_open        ; LD DE,$D241       ; {Writes #R$D241 to the address contained
       movb *ix,@l                     ; LD L,(IX+$00)     ; at (depending on which door is currently being actioned);
       movb @1(ix),h                   ; LD H,(IX+$01)     ; #TABLE(default,centre,centre,centre)
       movb @e,*hl                     ; LD (HL),E         ; { =h Address | =h Door | =h Target }
       inc  hl                         ; INC HL            ; { #R$D165 | Door 1 | #R$CE14 }
       movb d,*hl                      ; LD (HL),D         ; { #R$D173 | Door 2 | #R$CE16 }
                                                           ; { #R$D181 | Door 3 | #R$CE18 }
                                                           ; TABLE#}
       li   hl,_d0ae                   ; LD HL,$D0AE       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .call @random_number            ; CALL $D8B0        ; 
       andi a,32*256                   ; AND $20           ; 
       jne  init_julius_open_set_flag  ; JR NZ,$CFD1       ; 
       movb one,*hl                    ; LD (HL),$01       ; 
init_julius_open_set_flag:             ; cfd1
       movb @2(ix),@e                  ; LD E,(IX+$02)     ; 
       movb @3(ix),d                   ; LD D,(IX+$03)     ; 
       li   bc,>000a                   ; LD BC,$000A       ; 
       .ldir                           ; LDIR              ; 
       .ret                            ; RET               ; 
* Writes "Julius closing the door" to the door flags/ cache.
init_julius_close:                     ; cfdd
       movb one,a                      ; LD A,$01          ; {Writes $01 to #R$D0B8.
       movb a,@_d0b8                   ; LD ($D0B8),A      ; }
_cfe2:
       li   de,prep_julius_close       ; LD DE,$D265       ; {Writes #R$D265 to the address contained
       movb *ix,@l                     ; LD L,(IX+$00)     ; at (depending on which door is currently being actioned);
       movb @1(ix),h                   ; LD H,(IX+$01)     ; #TABLE(default,centre,centre,centre)
       movb @e,*hl                     ; LD (HL),E         ; { =h Address | =h Door | =h Target }
       inc  hl                         ; INC HL            ; { #R$D165 | Door 1 | #R$CE14 }
       movb d,*hl                      ; LD (HL),D         ; { #R$D173 | Door 2 | #R$CE16 }
                                                           ; { #R$D181 | Door 3 | #R$CE18 }
                                                           ; TABLE#}
       li   hl,_d0b8                   ; LD HL,$D0B8       ; {Handles copying $0009 bytes of data from the address (plus 1) contained
       movb @2(ix),@e                  ; LD E,(IX+$02)     ; at (depending on which door is currently being actioned);
       movb @3(ix),d                   ; LD D,(IX+$03)     ; #TABLE(default,centre,centre)
       inc  de                         ; INC DE            ; { =h Address | =h Door }
       li   bc,>0009                   ; LD BC,$0009       ; { #R$D167 | Door 1 }
       .ldir                           ; LDIR              ; { #R$D175 | Door 2 }
                                                           ; { #R$D183 | Door 3 }
                                                           ; TABLE#
                                                           ; to #R$D0B8.}
       movb one,a                      ; LD A,$01          ; 
       movb a,@_d18f                   ; LD ($D18F),A      ; 
       li   hl,_d0b8                   ; LD HL,$D0B8       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       movb @bytes+2,@7(ix)            ; LD (IX+$07),$02   ; 
       movb @bytes+5,@6(ix)            ; LD (IX+$06),$05   ; 
       ; AND A                         ; AND A             ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       sb   a,a                        ; XOR A             ; 
       movb a,@7(ix)                   ; LD (IX+$07),A     ; 
       movb a,@6(ix)                   ; LD (IX+$06),A     ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .ret                            ; RET               ; 

* Routine at D019
* 
* Used by the routine at #R$CE21.
_d019:
       li   de,prep_bandit_draw_open   ; LD DE,$D289       ; {Writes #R$D289 to the address contained
       movb *ix,@l                     ; LD L,(IX+$00)     ; at (depending on which door is currently being actioned);
       movb @1(ix),h                   ; LD H,(IX+$01)     ; #TABLE(default,centre,centre,centre)
       movb @e,*hl                     ; LD (HL),E         ; { =h Address | =h Door | =h Target }
       inc  hl                         ; INC HL            ; { #R$D165 | Door 1 | #R$CE14 }
       movb d,*hl                      ; LD (HL),D         ; { #R$D173 | Door 2 | #R$CE16 }
                                                           ; { #R$D181 | Door 3 | #R$CE18 }
                                                           ; TABLE#}
       movb @12(ix),@l                 ; LD L,(IX+$0C)     ; {Copies $000B bytes of data from (depending on which door is currently being actioned);
       movb @13(ix),h                  ; LD H,(IX+$0D)     ; #TABLE(default,centre,centre)
       movb @2(ix),@e                  ; LD E,(IX+$02)     ; { =h Source | =h Destination | =h Door }
       movb @3(ix),d                   ; LD D,(IX+$03)     ; { #R$D171 | #R$D167 | Door 1 }
       li   bc,>000b                   ; LD BC,$000B       ; { #R$D17F | #R$D175 | Door 2 }
       .ldir                           ; LDIR              ; { #R$D18D | #R$D183 | Door 3 }
                                                           ; TABLE#}
       .ret                            ; RET               ; Return.

* Routine at D037
todo_door_reset:                       ; d037
       movb one,a                      ; LD A,$01          ; {Writes $01 to the address contained
       movb @10(ix),@l                 ; LD L,(IX+$0A)     ; at (depending on which door is currently being actioned);
       movb @11(ix),h                  ; LD H,(IX+$0B)     ; #TABLE(default,centre,centre)
       movb a,*hl                      ; LD (HL),A         ; { =h Address | =h Door }
                                                           ; { #R$D16F | Door 1 }
                                                           ; { #R$D17D | Door 2 }
                                                           ; { #R$D18B | Door 3 }
                                                           ; TABLE#
                                                           ; This is the first byte of character state data.}
_d040:
       li   de,prep_bandit_draw_close  ; LD DE,$D2AD       ; {Writes #R$D2AD to the address contained
       movb *ix,@l                     ; LD L,(IX+$00)     ; at (depending on which door is currently being actioned);
       movb @1(ix),h                   ; LD H,(IX+$01)     ; #TABLE(default,centre,centre,centre)
       movb @e,*hl                     ; LD (HL),E         ; { =h Address | =h Door | =h Target }
       inc  hl                         ; INC HL            ; { #R$D165 | Door 1 | #R$CE14 }
       movb d,*hl                      ; LD (HL),D         ; { #R$D173 | Door 2 | #R$CE16 }
                                                           ; { #R$D181 | Door 3 | #R$CE18 }
                                                           ; TABLE#
                                                           ; This is copying the actual source data into the cache where it can be manipulated by the game events.
                                                           ; }
       movb @10(ix),@l                 ; LD L,(IX+$0A)     ; {Copies $000B bytes of data from (depending on which door is currently being actioned);
       movb @11(ix),h                  ; LD H,(IX+$0B)     ; #TABLE(default,centre,centre)
       movb @2(ix),@e                  ; LD E,(IX+$02)     ; { =h Source | =h Destination | =h Door }
       movb @3(ix),d                   ; LD D,(IX+$03)     ; { #R$D16F | #R$D167 | Door 1 }
       li   bc,>000b                   ; LD BC,$000B       ; { #R$D17D | #R$D175 | Door 2 }
       .ldir                           ; LDIR              ; { #R$D18B | #R$D183 | Door 3 }
                                                           ; TABLE#}
       movb one,a                      ; LD A,$01          ; {Initialise #R$D18F (writes $01 to it).
       movb a,@_d18f                   ; LD ($D18F),A      ; }
       movb @10(ix),@l                 ; LD L,(IX+$0A)     ; {Loads #REGa with the flag from the address contained
       movb @11(ix),h                  ; LD H,(IX+$0B)     ; at (depending on which door is currently being actioned);
       movb *hl,a                      ; LD A,(HL)         ; #TABLE(default,centre,centre)
                                                           ; { =h Address | =h Door }
                                                           ; { #R$D16F | Door 1 }
                                                           ; { #R$D17D | Door 2 }
                                                           ; { #R$D18B | Door 3 }
                                                           ; TABLE#
                                                           ; As per #R$D037, this should be $01.}
       movb @bytes+2,@7(ix)            ; LD (IX+$07),$02   ; 
       ; AND A                         ; AND A             ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       sb   @7(ix),@7(ix)              ; LD (IX+$07),$00   ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .ret                            ; RET               ; Return.

* Data block at D076
_d076:
       byte >01,>08,>08,>08,>60,>08,>08

* Data block at D07D
_d07d:
       byte >01,>0B,>0B,>0B,>0B,>0B,>0B,>01
       byte >1B,>01,>08,>08,>08,>80,>08,>08
_d08d:
       byte >0A,>0B,>0C,>0D,>0E,>00,>01,>08
       byte >08,>08,>40,>10,>08,>08,>08,>03
       byte >04,>05,>06,>07,>01,>01,>08,>08
       byte >08,>38,>0C,>06,>08,>08
_d0ab:
       byte >01,>0B,>0B                                              ; Source
_d0ae:
       byte >00,>00,>01,>08,>08,>08,>50,>08
       byte >08,>80
_d0b8:
       byte >00,>01,>0B,>0B,>0B,>0B,>0B,>0B                          ; {??
       byte >0B                                                      ; }
* Bandit 3.
_d0c1:
       byte >00,>10,>0F,>11,>02,>01,>08,>08                          ; {Bandit 3 source data.
       byte >08,>40,>40                                              ; }
_d0cc:
       byte >00,>10,>0F,>11,>02,>01,>0B,>0B                          ; {Bandit 3 buffer.
       byte >0B,>0B,>0B                                              ; }
* Bandit 4.
_d0d7:
       byte >00,>12,>13,>14,>02,>01,>08,>08                          ; {Bandit 4 source data.
       byte >08,>30,>40                                              ; }
_d0e2:
       byte >00,>12,>13,>14,>02,>01,>0B,>0B                          ; {Bandit 4 buffer.
       byte >0B,>0B,>0B                                              ; }
* Bandit 5.
_d0ed:
       byte >00,>15,>16,>17,>02,>01,>08,>08                          ; {Bandit 5 source data.
       byte >08,>20,>38                                              ; }
_d0f8:
       byte >00,>15,>16,>17,>02,>01,>0B,>0B                          ; {Bandit 5 buffer.
       byte >0B,>0B,>0B                                              ; }
* Bandit 6.
_d103:
       byte >00,>18,>19,>1A,>02,>01,>08,>08                          ; {Bandit 6 source data.
       byte >08,>10,>38                                              ; }
_d10e:
       byte >00,>18,>19,>1A,>02,>01,>0B,>0B                          ; {Bandit 6 buffer.
       byte >0B,>0B,>0B                                              ; }
* Bandit 2.
_d119:
       byte >00,>08,>08,>09,>07,>01,>08,>08                          ; {Bandit 2 source data.
       byte >08,>01,>30                                              ; }
_d124:
       byte >00,>08,>08,>09,>07,>01,>0B,>0B                          ; {Bandit 2 buffer.
       byte >0B,>0B,>0B                                              ; }
_d12f:
       byte >00,>10,>0F,>11,>02,>04,>00,>00
       byte >00,>0D,>40,>10,>08,>00,>00,>20
       byte >20,>20
_d141:
       byte >00,>08,>08,>09,>07,>05,>00,>00
       byte >00,>00,>00
       byte >10,>08,>00,>00,>20,>20,>20
_d153:
       byte >03,>04,>05,>06,>07,>01,>02,>0B                          ; {Target
       byte >00,>00,>1E                                              ; }
       byte >0C,>06,>08,>08,>20,>20,>20

* Door 1 Flags.
door_1_flags:                          ; d165
       data door_1_routine
       data _d12f
       data bowie_bomb_action
door_1_scoring:                        ; d16b
       data 0
       byte >00
_d16e:
       byte >08
door_1_char_buffer:                    ; d16f
       data _d0cc
door_1_char_source:                    ; d171
       data _d0c1

* Door 2 Flags.
door_2_flags:                          ; d173
       data door_2_routine
door_2_source:                         ; d175
       data _d141
       data bowie_bomb_action
       data 0
       byte >00
_d17c:
       byte >06
door_2_char_buffer:                    ; d17d
       data _d124
door_2_char_source:                    ; d17f
       data _d119

* Door 3 Flags.
door_3_flags:                          ; d181
       data door_3_routine
door_3_source:                         ; d183
       data _d153
       data bowie_bomb_action
       data 0
       byte >00
_d18a:
       byte >1D
door_3_char_buffer:                    ; d18b
       data _d0cc
door_3_char_source:                    ; d18d
       data _d0c1

* Game status buffer entry at D18F
_d18f:
       byte >00

* Game status buffer entry at D190
_d190:
       byte >00

* Game status buffer entry at D191
_d191:
       byte >01

* Copy Source Character Data To Character State Data.
* 
* .
* 
* .
* 
* Handles copying a "normal" bandit into the bandit state cache at #R$D71E.
prep_bandit_open:                      ; d192
       movb @2(ix),@l                  ; LD L,(IX+$02)     ; {Handles copying $0007 bytes of data from the address contained
       movb @3(ix),h                   ; LD H,(IX+$03)     ; at (depending on which door is currently being actioned);
       li   de,bandit_state_ref        ; LD DE,$D71E       ; #TABLE(default,centre,centre)
       li   bc,>0007                   ; LD BC,$0007       ; { =h Address | =h Door }
       .push hl                        ; PUSH HL           ; { #R$D167 | Door 1 }
       .push de                        ; PUSH DE           ; { #R$D175 | Door 2 }
       .push bc                        ; PUSH BC           ; { #R$D183 | Door 3 }
       .ldir                           ; LDIR              ; TABLE#
                                                           ; to #R$D71E.}
       .call @bandit_open_routing      ; CALL $D725        ; Call #R$D725 to begin this characters actions.
       .pop bc                         ; POP BC            ; {Restore the source, target and counter from above.
       .pop de                         ; POP DE            ; 
       .pop hl                         ; POP HL            ; }
       .ex_de_hl                       ; EX DE,HL          ; Swap the source and target.
       movb @_d18f,a                   ; LD A,($D18F)      ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
       ; AND A                         ; AND A             ; then return.
       sb   a,a                        ; LD A,$00          ; 
       movb a,@_d18f                   ; LD ($D18F),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .ldir                           ; LDIR              ; {Else copy the (swapped) source back to the new target
       .ret                            ; RET               ; and return.}
* And copying a successful bandit encounter to close the door.
prep_bandit_close:                     ; d1b7
       movb @2(ix),@l                  ; LD L,(IX+$02)     ; {Handles copying $0007 bytes of data from the address contained
       movb @3(ix),h                   ; LD H,(IX+$03)     ; at (depending on which door is currently being actioned);
       li   de,bandit_state_ref        ; LD DE,$D71E       ; #TABLE(default,centre,centre)
       li   bc,>0007                   ; LD BC,$0007       ; { =h Address | =h Door }
       .push hl                        ; PUSH HL           ; { #R$D167 | Door 1 }
       .push de                        ; PUSH DE           ; { #R$D175 | Door 2 }
       .push bc                        ; PUSH BC           ; { #R$D183 | Door 3 }
       .ldir                           ; LDIR              ; TABLE#
                                                           ; to #R$D71E.}
       .call @bandit_close_routing     ; CALL $D771        ; Call #R$D771 to begin this characters actions.
       .pop bc                         ; POP BC            ; {Restore the source, target and counter from above.
       .pop de                         ; POP DE            ; 
       .pop hl                         ; POP HL            ; }
       .ex_de_hl                       ; EX DE,HL          ; Swap the source and target.
       movb @_d18f,a                   ; LD A,($D18F)      ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
       ; AND A                         ; AND A             ; then return.
       sb   a,a                        ; LD A,$00          ; 
       movb a,@_d18f                   ; LD ($D18F),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .ldir                           ; LDIR              ; {Else copy the (swapped) source back to the new target
       .ret                            ; RET               ; and return.}
* Handles copying Bowie state data into the state cache at #R$D7C5.
prep_bowie:                            ; d1dc
       movb @2(ix),@l                  ; LD L,(IX+$02)     ; {Handles copying $0009 bytes of data from the address contained
       movb @3(ix),h                   ; LD H,(IX+$03)     ; at (depending on which door is currently being actioned);
       li   de,bowie_good_bad          ; LD DE,$D7C5       ; #TABLE(default,centre,centre)
       li   bc,>0009                   ; LD BC,$0009       ; { =h Address | =h Door }
       .push hl                        ; PUSH HL           ; { #R$D167 | Door 1 }
       .push de                        ; PUSH DE           ; { #R$D175 | Door 2 }
       .push bc                        ; PUSH BC           ; { #R$D183 | Door 3 }
       .ldir                           ; LDIR              ; TABLE#
                                                           ; to #R$D7C5.}
       .call @bowie_routing            ; CALL $D7CE        ; Call #R$D7CE to begin this characters actions.
       .pop bc                         ; POP BC            ; {Restore the source, target and counter from above.
       .pop de                         ; POP DE            ; 
       .pop hl                         ; POP HL            ; }
       .ex_de_hl                       ; EX DE,HL          ; Swap the source and target.
       movb @_d18f,a                   ; LD A,($D18F)      ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
       ; AND A                         ; AND A             ; then return.
       sb   a,a                        ; LD A,$00          ; 
       movb a,@_d18f                   ; LD ($D18F),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .ldir                           ; LDIR              ; {Else copy the (swapped) source back to the new target
       .ret                            ; RET               ; and return.}
* Handles copying customer state data into the state cache at #R$D48F.
prep_customer:                         ; d201
       movb @2(ix),@l                  ; LD L,(IX+$02)     ; {Handles copying $000F bytes of data from the address contained
       movb @3(ix),h                   ; LD H,(IX+$03)     ; at (depending on which door is currently being actioned);
       li   de,customer_frame_1        ; LD DE,$D48F       ; #TABLE(default,centre,centre)
       li   bc,>000f                   ; LD BC,$000F       ; { =h Address | =h Door }
       .push hl                        ; PUSH HL           ; { #R$D167 | Door 1 }
       .push de                        ; PUSH DE           ; { #R$D175 | Door 2 }
       .push bc                        ; PUSH BC           ; { #R$D183 | Door 3 }
       .ldir                           ; LDIR              ; TABLE#
                                                           ; to #R$D48F.}
       .call @customer_routing         ; CALL $D49E        ; Call #R$D49E to begin this characters actions.
       .pop bc                         ; POP BC            ; {Restore the source, target and counter from above.
       .pop de                         ; POP DE            ; 
       .pop hl                         ; POP HL            ; }
       .ex_de_hl                       ; EX DE,HL          ; Swap the source and target.
       movb @_d18f,a                   ; LD A,($D18F)      ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
       ; AND A                         ; AND A             ; then return.
       sb   a,a                        ; LD A,$00          ; 
       movb a,@_d18f                   ; LD ($D18F),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .ldir                           ; LDIR              ; {Else copy the (swapped) source back to the new target
       .ret                            ; RET               ; and return.}
* Handles copying customer "is shot" state data into the state cache at
* #R$D48F.
prep_customer_shot:                    ; d226
       movb @2(ix),@l                  ; LD L,(IX+$02)     ; {Handles copying $000F bytes of data from the address contained
       movb @3(ix),h                   ; LD H,(IX+$03)     ; at (depending on which door is currently being actioned);
       li   de,customer_frame_1        ; LD DE,$D48F       ; #TABLE(default,centre,centre)
       li   bc,>000f                   ; LD BC,$000F       ; { =h Address | =h Door }
       .push hl                        ; PUSH HL           ; { #R$D167 | Door 1 }
       .push de                        ; PUSH DE           ; { #R$D175 | Door 2 }
       .push bc                        ; PUSH BC           ; { #R$D183 | Door 3 }
       .ldir                           ; LDIR              ; TABLE#
                                                           ; to #R$D48F.}
       .call @customer_shot            ; CALL $D57B        ; Call #R$D57B.
       .pop bc                         ; POP BC            ; {Restore the source, target and counter from above.
       .pop de                         ; POP DE            ; 
       .pop hl                         ; POP HL            ; }
       .ex_de_hl                       ; EX DE,HL          ; Swap the source and target.
       .ldir                           ; LDIR              ; {Copy the (swapped) source back to the new target and
       .ret                            ; RET               ; return.}
* Handles copying Julius state data into the state cache at #R$D8E5.
prep_julius_open:                      ; d241
       movb @2(ix),@l                  ; LD L,(IX+$02)     ; {Handles copying $000A bytes of data from the address contained
       movb @3(ix),h                   ; LD H,(IX+$03)     ; at (depending on which door is currently being actioned);
       li   de,julius_good_bad         ; LD DE,$D8E5       ; #TABLE(default,centre,centre)
       li   bc,>000a                   ; LD BC,$000A       ; { =h Address | =h Door }
       .push hl                        ; PUSH HL           ; { #R$D167 | Door 1 }
       .push de                        ; PUSH DE           ; { #R$D175 | Door 2 }
       .push bc                        ; PUSH BC           ; { #R$D183 | Door 3 }
       .ldir                           ; LDIR              ; TABLE#
                                                           ; to #R$D8E5.}
       .call @julius_open_routing      ; CALL $D8EF        ; Call #R$D8EF.
       .pop bc                         ; POP BC            ; {Restore the source, target and counter from above.
       .pop hl                         ; POP HL            ; 
       .pop de                         ; POP DE            ; }
       movb @_d18f,a                   ; LD A,($D18F)      ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
       ; AND A                         ; AND A             ; then return.
       sb   a,a                        ; LD A,$00          ; 
       movb a,@_d18f                   ; LD ($D18F),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .ldir                           ; LDIR              ; {Copy the source to the target again and return.
       .ret                            ; RET               ; }
* And copying a successful Julius encounter to close the door.
prep_julius_close:                     ; d265
       movb @2(ix),@l                  ; LD L,(IX+$02)     ; {Handles copying $000A bytes of data from the address contained
       movb @3(ix),h                   ; LD H,(IX+$03)     ; at (depending on which door is currently being actioned);
       li   de,julius_good_bad         ; LD DE,$D8E5       ; #TABLE(default,centre,centre)
       li   bc,>000a                   ; LD BC,$000A       ; { =h Address | =h Door }
       .push hl                        ; PUSH HL           ; { #R$D167 | Door 1 }
       .push de                        ; PUSH DE           ; { #R$D175 | Door 2 }
       .push bc                        ; PUSH BC           ; { #R$D183 | Door 3 }
       .ldir                           ; LDIR              ; TABLE#
                                                           ; to #R$D8E5.}
       .call @julius_close_routing     ; CALL $D997        ; Call #R$D997.
       .pop bc                         ; POP BC            ; {Restore the source, target and counter from above.
       .pop hl                         ; POP HL            ; 
       .pop de                         ; POP DE            ; }
       movb @_d18f,a                   ; LD A,($D18F)      ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
       ; AND A                         ; AND A             ; then return.
       sb   a,a                        ; LD A,$00          ; 
       movb a,@_d18f                   ; LD ($D18F),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .ldir                           ; LDIR              ; {Copy the source to the target again and return.
       .ret                            ; RET               ; }
* Handles copying a "drawing bandit" into the bandit state cache at #R$DA0C.
prep_bandit_draw_open:                 ; d289
       movb @2(ix),@l                  ; LD L,(IX+$02)     ; {Handles copying $000B bytes of data from the address contained
       movb @3(ix),h                   ; LD H,(IX+$03)     ; at (depending on which door is currently being actioned);
       li   de,bandit_draw             ; LD DE,$DA0C       ; #TABLE(default,centre,centre)
       li   bc,>000b                   ; LD BC,$000B       ; { =h Address | =h Door }
       .push hl                        ; PUSH HL           ; { #R$D167 | Door 1 }
       .push de                        ; PUSH DE           ; { #R$D175 | Door 2 }
       .push bc                        ; PUSH BC           ; { #R$D183 | Door 3 }
       .ldir                           ; LDIR              ; TABLE#
                                                           ; to #R$DA0C.}
       .call @bandit_draw_open_routing ; CALL $DA17        ; Call #R$DA17.
       .pop bc                         ; POP BC            ; {Restore the source, target and counter from above.
       .pop hl                         ; POP HL            ; 
       .pop de                         ; POP DE            ; }
       movb @_d18f,a                   ; LD A,($D18F)      ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
       ; AND A                         ; AND A             ; then return.
       sb   a,a                        ; LD A,$00          ; 
       movb a,@_d18f                   ; LD ($D18F),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .ldir                           ; LDIR              ; {Copy the source to the target again and return.
       .ret                            ; RET               ; }
* And copying a successful "drawing bandit" encounter to close the door.
prep_bandit_draw_close:                ; d2ad
       movb @2(ix),@l                  ; LD L,(IX+$02)     ; {Handles copying $000B bytes of data from the address contained
       movb @3(ix),h                   ; LD H,(IX+$03)     ; at (depending on which door is currently being actioned);
       li   de,bandit_draw             ; LD DE,$DA0C       ; #TABLE(default,centre,centre)
       li   bc,>000b                   ; LD BC,$000B       ; { =h Address | =h Door }
       .push hl                        ; PUSH HL           ; { #R$D167 | Door 1 }
       .push de                        ; PUSH DE           ; { #R$D175 | Door 2 }
       .push bc                        ; PUSH BC           ; { #R$D183 | Door 3 }
       .ldir                           ; LDIR              ; TABLE#
                                                           ; to #R$DA0C.}
       .call @bandit_draw_close_routing ; CALL $DA85        ; Call #R$DA85.
       .pop bc                         ; POP BC            ; {Restore the source, target and counter from above.
       .pop hl                         ; POP HL            ; 
       .pop de                         ; POP DE            ; }
       movb @_d18f,a                   ; LD A,($D18F)      ; {Check if #R$D18F is zero. If it wasn't zero then
       ; AND A                         ; AND A             ; return.
       movb a,@_d18f                   ; LD ($D18F),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .ldir                           ; LDIR              ; {Copy the source to the target again and return.
       .ret                            ; RET               ; }

* Routine at D2CF
* 
* Used by the routines at #R$C7C0 and #R$D3EA.
_d2cf:
       mov  @control_routine_alias,hl  ; LD HL,($CE12)     ; #R$CE12
       li   de,_d2d7                   ; LD DE,$D2D7       ; 
       .push de                        ; PUSH DE           ; 
       b    *hl                        ; JP (HL)           ; TODO. 
_d2d7:
       movb a,@c                       ; LD C,A            ; 
       sb   a,a                        ; XOR A             ; 
       li   hl,_d2ff                   ; LD HL,$D2FF       ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       movb a,*hl                      ; LD (HL),A         ; 
       movb @c,a                       ; LD A,C            ; 
       movb a,tmp0                     ; BIT 4,A           ; 
       andi tmp0,16*256                ;                   
       jne  controls                   ; JR NZ,$D307       ; 
       li   hl,two                     ; LD HL,$D303       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       inc  hl                         ; INC HL            ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       inc  hl                         ; INC HL            ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       movb a,tmp0                     ; BIT 0,A           ; 
       andi tmp0,1*256                 ;                   
       jeq  !                          ; JP NZ,$D386       ; 
       b    @set_right                 ;                   
!
       movb a,tmp0                     ; BIT 1,A           ; 
       andi tmp0,2*256                 ;                   
       jeq  !                          ; JP NZ,$D38C       ; 
       b    @set_left                  ;                   
!
       .ret                            ; RET               ; 
_d2fe:
       byte >02                                                      ; 
_d2ff:
       byte >00                                                      ; 

* Player Shot.
hit:                                   ; d300
       byte >00                                                      ; #TABLE(default,centre,centre)
                                                                     ; { =h Value | =h What }
                                                                     ; { $00 | No shot/ inactive }
                                                                     ; { $01 | Door 1 }
                                                                     ; { $02 | Door 2 }
                                                                     ; { $03 | Door 3 }
                                                                     ; TABLE#

* Player Left/ Right.
* 
* .
* 
* .
* 
* These flags don't control left/ right movement they just indicate whether
* keys are being pressed/ joystick used.
right:                                 ; d301
       byte >00                                                      ; Defaults to $00, holds $01 when the player is pressing
                                                                     ; "right".
left:                                  ; d302
       byte >00                                                      ; Defaults to $00, holds $01 when the player is pressing
                                                                     ; "left".

* Player Shooting.
two:                                   ; d303
       byte >00                                                      ; Defaults to $00, holds $01 when the player is pressing
                                                                     ; "2".
three:                                 ; d304
       byte >00                                                      ; Defaults to $00, holds $01 when the player is pressing
                                                                     ; "3".
one:                                   ; d305
       byte >00                                                      ; Defaults to $00, holds $01 when the player is pressing
                                                                     ; "1".
controls_byte:                         ; d306
       byte >11                                                      ; Holds the controls in one byte.
                                                                     ; #TABLE(default,centre,centre,centre)
                                                                     ; { =h Value | =h Bits | Door }
                                                                     ; { $10 | #EVAL($10, 2, 8) | Door 2 }
                                                                     ; { $11 | #EVAL($11, 2, 8) | Door 3 }
                                                                     ; { $12 | #EVAL($12, 2, 8) | Door 1 }
                                                                     ; TABLE#

* Action Controls.
* 
* Used by the routine at #R$D2CF.
* 
* .
* 
* On entry #REGa will contain one of;
* #TABLE(default,centre,centre,centre)
* { =h Value | =h Bits | Door }
* { $10 | #EVAL($10, 2, 8) | Door 2 }
* { $11 | #EVAL($11, 2, 8) | Door 3 }
* { $12 | #EVAL($12, 2, 8) | Door 1 }
* TABLE#
* This is written to #R$D306, and then decoded into writing a $01, $02 or $03 to #R$D300 to represent which door has
* been shot at.  This routine also writes $01 to #R$D305, #R$D303 and #R$D304 to represent the same thing.
* Before returning, #REGhl is set to the screen location for displaying the shot mask/ shot image in the centre of the
* door.
controls:                              ; d307
       li   hl,controls_byte           ; LD HL,$D306       ; {Writes #REGa to #R$D306 and sets #REGhl=#R$D300.
       movb a,*hl                      ; LD (HL),A         ; 
       li   hl,hit                     ; LD HL,$D300       ; }
       movb @c,a                       ; LD A,C            ; 
       movb a,tmp0                     ; BIT 0,A           ; {If "3" was pressed then jump to #R$D33B (a check for if
       andi tmp0,1*256                 ;                   
       jne  shot_three                 ; JR NZ,$D33B       ; bit 0 is set).}
       movb a,tmp0                     ; BIT 1,A           ; {If "1" was pressed then jump to #R$D360 (a check for if
       andi tmp0,2*256                 ;                   
       jne  shot_one                   ; JR NZ,$D360       ; bit 1 is set).}
* Handles settings flags and shot drawing location for door 2.
       movb @two,a                     ; LD A,($D303)      ; {If #R$D303 is not zero then return.
       ; AND A                         ; AND A             ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       movb a,@three                   ; LD ($D304),A      ; {Sets the other two door flags to zero (#R$D304 and
       movb a,@one                     ; LD ($D305),A      ; #R$D305).}
       ab   one,a                      ; INC A             ; {Indicate the the middle door is being shot at (write
       movb a,@two                     ; LD ($D303),A      ; $01 to #R$D303 and $02 to #R$D300).
       movb @bytes+2,a                 ; LD A,$02          ; 
       movb a,*hl                      ; LD (HL),A         ; }
       li   hl,_d8ac                   ; LD HL,$D8AC       ; {Increase #R$D8AC by one.
       ab   one,*hl                    ; INC (HL)          ; }
       li   hl,_4080+1967              ; LD HL,$482F       ; {Sets the screen location for this shot to $482F and
       .push hl                        ; PUSH HL           ; stash it.}
       .call @draw_shot_mask           ; CALL $D3B4        ; Draw the shot mask.
       .pop hl                         ; POP HL            ; {Grab the screen location again, and now draw the shot.
       .call @draw_gun_shot            ; CALL $D3CB        ; }
       b    @shot_sound_1_alias        ; JP $6500          ; Jump to #R$6500.
* Handles settings flags and shot drawing location for door 3.
shot_three:                            ; d33b
       movb @three,a                   ; LD A,($D304)      ; {If #R$D304 is not zero then return.
       ; AND A                         ; AND A             ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       movb a,@two                     ; LD ($D303),A      ; {Sets the other two door flags to zero (#R$D303 and
       movb a,@one                     ; LD ($D305),A      ; #R$D305).}
       ab   one,a                      ; INC A             ; {Indicate the the right door is being shot at (write $01
       movb a,@three                   ; LD ($D304),A      ; to #R$D304 and $03 to #R$D300).
       movb @bytes+3,a                 ; LD A,$03          ; 
       movb a,*hl                      ; LD (HL),A         ; }
       li   hl,_d8ac                   ; LD HL,$D8AC       ; {Shifts the value at #R$D8AC to the left with bit 7
       ; SLA (HL)                      ; SLA (HL)          ; moved to the carry flag and bit 0 reset (zeroed).}
       li   hl,_4080+1978              ; LD HL,$483A       ; {Sets the screen location for this shot to $483A and
       .push hl                        ; PUSH HL           ; stash it.}
       .call @draw_shot_mask           ; CALL $D3B4        ; Draw the shot mask.
       .pop hl                         ; POP HL            ; {Grab the screen location again, and now draw the shot.
       .call @draw_gun_shot            ; CALL $D3CB        ; }
       b    @shot_sound_2_alias        ; JP $6502          ; Jump to #R$6502.
* Handles settings flags and shot drawing location for door 1.
shot_one:                              ; d360
       movb @one,a                     ; LD A,($D305)      ; {If #R$D305 is not zero then return.
       ; AND A                         ; AND A             ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       movb a,@two                     ; LD ($D303),A      ; {Sets the other two door flags to zero (#R$D303 and
       movb a,@three                   ; LD ($D304),A      ; #R$D304).}
       ab   one,a                      ; INC A             ; {Indicate the the left door is being shot at (write $01
       movb a,@one                     ; LD ($D305),A      ; to #R$D305 and $01 to #R$D300).
       movb one,a                      ; LD A,$01          ; 
       movb a,*hl                      ; LD (HL),A         ; }
       li   hl,_d8ac                   ; LD HL,$D8AC       ; {Shifts the value at #R$D8AC to the left with bit 7
       ; SLA (HL)                      ; SLA (HL)          ; moved to the carry flag and bit 0 reset (zeroed).}
       li   hl,_4080+1956              ; LD HL,$4824       ; {Sets the screen location for this shot to $4824 and
       .push hl                        ; PUSH HL           ; stash it.}
       .call @draw_shot_mask           ; CALL $D3B4        ; Draw the shot mask.
       .pop hl                         ; POP HL            ; {Grab the screen location again, and now draw the shot.
       .call @draw_gun_shot            ; CALL $D3CB        ; }
       .call @shot_sound_3_alias       ; CALL $6504        ; Jump to #R$6504.
       .ret                            ; RET               ; Return.
* Sets the flag for indicating "right" has been pressed by the player.
set_right:                             ; d386
       li   hl,right                   ; LD HL,$D301       ; {Write $01 to #R$D301 and return.
       movb one,*hl                    ; LD (HL),$01       ; 
       .ret                            ; RET               ; }
* Sets the flag for indicating "left" has been pressed by the player.
set_left:                              ; d38c
       li   hl,left                    ; LD HL,$D302       ; {Write $01 to #R$D302 and return.
       movb one,*hl                    ; LD (HL),$01       ; 
       .ret                            ; RET               ; }

* Reads In-Game Joystick Controls.
controls_joystick:                     ; d392
       li   bc,>00df                   ; LD BC,$00DF       ; 
       ; IN A,($0C)                    ; IN A,($0C)        ; #HTML(Reads input from the Kempston joystick (see <a
                                                           ; href="../reference/pokes.html">POKES</a>)).
       ; AND A                         ; AND A             ; {If there's nothing to read fall back to #R$D39B anyway.
       jeq  controls_keyboard          ; JR Z,$D39B        ; }
       .ret                            ; RET               ; Return.

* Reads In-Game Keyboard Controls (1-2-3).
* 
* Used by the routine at #R$D392.
controls_keyboard:                     ; d39b
       movb @bytes+247,a               ; LD A,$F7          ; {Read keys 1-2-3-4-5.
       ; IN A,($FE)                    ; IN A,($FE)        ; }
       movb a,tmp0                     ; BIT 0,A           ; {If "1" isn't being pressed then jump to #R$D3A6.
       andi tmp0,1*256                 ;                   
       jne  controls_input_2           ; JR NZ,$D3A6       ; }
       movb @bytes+18,a                ; LD A,$12          ; {Set #REGa=$12 and return.
       .ret                            ; RET               ; }
controls_input_2:                      ; d3a6
       movb a,tmp0                     ; BIT 1,A           ; {If "2" isn't being pressed then jump to #R$D3AD.
       andi tmp0,2*256                 ;                   
       jne  controls_input_3           ; JR NZ,$D3AD       ; }
       movb @bytes+16,a                ; LD A,$10          ; {Set #REGa=$10 and return.
       .ret                            ; RET               ; }
controls_input_3:                      ; d3ad
       movb a,tmp0                     ; BIT 2,A           ; {If "3" isn't being pressed then jump to #R$D3E2.
       andi tmp0,4*256                 ;                   
       jne  controls_input_o_p         ; JR NZ,$D3E2       ; }
       movb @bytes+17,a                ; LD A,$11          ; {Set #REGa=$11 and return.
       .ret                            ; RET               ; }

* Draw Gun Shot Mask.
* 
* Used by the routine at #R$D307.
draw_shot_mask:                        ; d3b4
       li   de,shot_mask_image         ; LD DE,$FF58       ; {Point to #R$FF58 and set the image dimensions.
       li   bc,>0802                   ; LD BC,$0802       ; }
       .push hl                        ; PUSH HL           ; Stash the screen location.
       .call @merge_shot               ; CALL $D5FA        ; Calls #R$D5FA.
       ; HALT                          ; HALT              ; {Very short pause.
       ; HALT                          ; HALT              ; }
       .pop hl                         ; POP HL            ; Grab the screen location.
       li   de,shot_mask_image         ; LD DE,$FF58       ; {Point to #R$FF58 and set the image dimensions.
       li   bc,>0802                   ; LD BC,$0802       ; }
       .call @merge_shot               ; CALL $D5FA        ; Calls #R$D5FA.
       .ret                            ; RET               ; Return.

* Draw Gun Shot.
* 
* Used by the routine at #R$D307.
draw_gun_shot:                         ; d3cb
       li   de,shot_image              ; LD DE,$FF68       ; {Point to #R$FF68 and set the image dimensions.
       li   bc,>0802                   ; LD BC,$0802       ; }
       .push hl                        ; PUSH HL           ; Stash the screen location.
       .call @merge_shot               ; CALL $D5FA        ; Calls #R$D5FA.
       ; HALT                          ; HALT              ; {Very short pause.
       ; HALT                          ; HALT              ; }
       .pop hl                         ; POP HL            ; Grab the screen location.
       li   de,shot_image              ; LD DE,$FF68       ; {Point to #R$FF68 and set the image dimensions.
       li   bc,>0802                   ; LD BC,$0802       ; }
       .call @merge_shot               ; CALL $D5FA        ; Calls #R$D5FA.
       .ret                            ; RET               ; Return.

* Reads In-Game Controls (Left + Right).
* 
* Used by the routine at #R$D39B.
controls_input_o_p:                    ; d3e2
       movb @bytes+223,a               ; LD A,$DF          ; {Read keys P-O-I-U-Y.
       ; IN A,($FE)                    ; IN A,($FE)        ; }
       ; CPL                           ; CPL               ; Invert all the bits of #REGa.
       andi a,3*256                    ; AND $03           ; Keep only bits 0 and 1 (i.e. we only care about "P" and
                                                           ; "O" for left and right).
       .ret                            ; RET               ; Return.

* Routine at D3EA
door_1_prep:                           ; d3ea
       li   hl,door_1_routine          ; LD HL,$CE14       ; #R$CE14
       sb   a,a                        ; XOR A             ; {Sets #REGa=0 and #REGb=$06 (counter).
       movb @bytes+6,b                 ; LD B,$06          ; }
_d3f0:
       socb *hl,a                      ; OR (HL)           ; 
       inc  hl                         ; INC HL            ; 
       sb   one,b                      ; DJNZ $D3F0        ; 
       jne  _d3f0                      ;                   
       ; AND A                         ; AND A             ; 
       .pop bc                         ; POP BC            ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       .push bc                        ; PUSH BC           ; 
       li   hl,_d8ac                   ; LD HL,$D8AC       ; 
       ab   one,*hl                    ; INC (HL)          ; 
       li   de,>0400                   ; LD DE,$0400       ; 
       .call @_d407                    ; CALL $D407        ; 
       joc  !                          ; RET NC            ; TODO: check code. 
       .ret                            ;                   
!
       .pop af                         ; POP AF            ; 
       .pop af                         ; POP AF            ; 
       ; AND A                         ; AND A             ; 
       .ret                            ; RET               ; 
_d407:
       li   hl,cashboxes_completed_flag ; LD HL,$CA80       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       ; SCF                           ; SCF               ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$C7C0.
_d411:
       .call @door_1_prep              ; CALL $D3EA        ; 
_d414:
       .push de                        ; PUSH DE           ; 
       .call @_d2cf                    ; CALL $D2CF        ; 
       movb @right,a                   ; LD A,($D301)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; CALL NZ,$D42D     ; 
       .call @_d42d                    ;                   
!
       movb @left,a                    ; LD A,($D302)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; CALL NZ,$D449     ; 
       .call @_d449                    ;                   
!
       .pop de                         ; POP DE            ; 
       dec  de                         ; DEC DE            ; 
       movb d,a                        ; LD A,D            ; 
       socb @e,a                       ; OR E              ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       jmp  _d414                      ; JR $D414          ; 
_d42d:
       .call @_6600                    ; CALL $6600        ; 
       li   de,>0400                   ; LD DE,$0400       ; 
       li   hl,_d45d                   ; LD HL,$D45D       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   one,a                      ; INC A             ; 
       movb a,*hl                      ; LD (HL),A         ; 
       cb   a,@bytes+13                ; CP $0D            ; 
       jl   _d43f                      ; JR C,$D43F        ; 
       movb one,*hl                    ; LD (HL),$01       ; 
_d43f:
       .call @_d45e                    ; CALL $D45E        ; 
       movb @_d45d,a                   ; LD A,($D45D)      ; 
       movb a,@cashbox_ref             ; LD ($D45C),A      ; 
       .ret                            ; RET               ; 
_d449:
       .call @_6700                    ; CALL $6700        ; 
       li   de,>0400                   ; LD DE,$0400       ; 
       li   hl,_d45d                   ; LD HL,$D45D       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       sb   one,a                      ; DEC A             ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ; AND A                         ; AND A             ; 
       jne  _d43f                      ; JR NZ,$D43F       ; 
       movb @bytes+12,*hl              ; LD (HL),$0C       ; 
       jmp  _d43f                      ; JR $D43F          ; 

* Cash Deposit Box Reference.
cashbox_ref:                           ; d45c
       byte >01                                                      ; Holds 01-12 which refer to the deposit cash boxes
                                                                     ; (#R$CC8D onwards).
_d45d:
       byte >01                                                      ; Holds 01-12 which refer to the deposit cash boxes
                                                                     ; (#R$CC8D onwards).

* Routine at D45E
* 
* Used by the routines at #R$C7C0 and #R$D3EA.
_d45e:
       movb @cashbox_ref,a             ; LD A,($D45C)      ; 
       movb @bytes+56,@c               ; LD C,$38          ; 
       .call @_d46b                    ; CALL $D46B        ; 
       movb @_d45d,a                   ; LD A,($D45D)      ; 
       movb @bytes+58,@c               ; LD C,$3A          ; 
_d46b:
       movb @bytes+3,b                 ; LD B,$03          ; 
_d46d:
       .push af                        ; PUSH AF           ; 
       .call @_d47e                    ; CALL $D47E        ; 
       .pop af                         ; POP AF            ; 
       ab   one,a                      ; INC A             ; 
       cb   a,@bytes+13                ; CP $0D            ; 
       jl   !                          ; CALL NC,$D47B     ; 
       .call @_d47b                    ;                   
!
       sb   one,b                      ; DJNZ $D46D        ; 
       jne  _d46d                      ;                   
       .ret                            ; RET               ; 
_d47b:
       movb one,a                      ; LD A,$01          ; 
       .ret                            ; RET               ; 
_d47e:
       cb   a,@bytes+7                 ; CP $07            ; 
       li   hl,_5800+5                 ; LD HL,$5805       ; 
       jnc  _d488                      ; JR NC,$D488       ; TODO: check code. 
       li   hl,_58a0+95                ; LD HL,$58FF       ; 
_d488:
       ab   a,a                        ; ADD A,A           ; 
       ab   @l,a                       ; ADD A,L           ; 
       movb a,@l                       ; LD L,A            ; 
       movb @c,*hl                     ; LD (HL),C         ; 
       inc  hl                         ; INC HL            ; 
       movb @c,*hl                     ; LD (HL),C         ; 
       .ret                            ; RET               ; 

* Customer Logic.
* 
* .
* 
* .
* 
* Character state variables/ flags.
customer_frame_1:                      ; d48f
       byte >03                                                      ; Character frame index 1.
customer_frame_2:                      ; d490
       byte >04                                                      ; Character frame index 2.
customer_frame_3:                      ; d491
       byte >05                                                      ; Character frame index 3.
customer_frame_4:                      ; d492
       byte >06                                                      ; Character frame index 4.
customer_frame_5:                      ; d493
       byte >07                                                      ; Character frame index 5.
customer_flag_uncover:                 ; d494
       byte >01                                                      ; Represents whether the customer will move to uncover a bandit
                                                                     ; ($00 "normal" / $01 "uncover" action).
customer_state_ref:                    ; d495
       byte >02                                                      ; The current character state.
customer_1_timer:                      ; d496
       byte >0B                                                      ; Character timer 1.
customer_2_timer:                      ; d497
       byte >00                                                      ; Character timer 2.
customer_3_timer:                      ; d498
       byte >00                                                      ; Character timer 3.
customer_4_timer:                      ; d499
       byte >1E                                                      ; Character timer 4.
customer_5_timer:                      ; d49a
       byte >0C                                                      ; Character timer 5.
customer_6_timer:                      ; d49b
       byte >06                                                      ; Character timer 6.
customer_7_timer:                      ; d49c
       byte >08                                                      ; Character timer 7.
customer_8_timer:                      ; d49d
       byte >08                                                      ; Character timer 8.
* This routine looks at the current character state and routes to the correct
* subroutine.
customer_routing:                      ; d49e
       li   hl,customer_state_ref      ; LD HL,$D495       ; {#REGa=#R$D495.
       movb *hl,a                      ; LD A,(HL)         ; }
       sb   one,a                      ; DEC A             ; {Work out which routine to use based on the current state.
       jeq  customer_open_1            ; JR Z,$D4BD        ; #TABLE(default,centre,centre)
       sb   one,a                      ; DEC A             ; { =h #REGa | =h Routine }
       jeq  customer_open_2            ; JR Z,$D4CD        ; { $01 | #R$D4BD }
       sb   one,a                      ; DEC A             ; { $02 | #R$D4CD }
       jeq  customer_open_3            ; JR Z,$D4DD        ; { $03 | #R$D4DD }
       sb   one,a                      ; DEC A             ; { $04 | #R$D4ED }
       jeq  customer_open_4            ; JR Z,$D4ED        ; { $05 | #R$D524 }
       sb   one,a                      ; DEC A             ; { $06 | #R$D540 }
       jne  !                          ; JP Z,$D524        ; { $07 | #R$D559 }
       b    @customer_uncover          ;                   
!
       sb   one,a                      ; DEC A             ; { $08 | #R$D56C }
       jne  !                          ; JP Z,$D540        ; TABLE#
       b    @customer_close_3          ;                   
!
       sb   one,a                      ; DEC A             ; 
       jne  !                          ; JP Z,$D559        ; 
       b    @customer_close_2          ;                   
!
       b    @customer_close_1          ; JP $D56C          ; }
* Handle door frame 1 countdown/ transition to door frame 2.
customer_open_1:                       ; d4bd
       movb @customer_1_timer,a        ; LD A,($D496)      ; {Decrease #R$D496 by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@customer_1_timer        ; LD ($D496),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @customer_frame_1,a        ; LD A,($D48F)      ; Grab the character frame index from #R$D48F.
       .call @draw_door_frame_2        ; CALL $D6D1        ; {Call #R$D6D1 and return.
       .ret                            ; RET               ; }
* Handle door frame 2 countdown/ transition to door frame 3.
customer_open_2:                       ; d4cd
       movb @customer_2_timer,a        ; LD A,($D497)      ; {Decrease #R$D497 by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@customer_2_timer        ; LD ($D497),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @customer_frame_1,a        ; LD A,($D48F)      ; Grab the character frame index from #R$D48F.
       .call @draw_door_frame_3        ; CALL $D6DF        ; {Call #R$D6DF and return.
       .ret                            ; RET               ; }
* Handle door frame 3 countdown/ transition to door frame 4.
customer_open_3:                       ; d4dd
       movb @customer_3_timer,a        ; LD A,($D498)      ; {Decrease #R$D498 by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@customer_3_timer        ; LD ($D498),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @customer_frame_1,a        ; LD A,($D48F)      ; Grab the character frame index from #R$D48F.
       .call @draw_door_frame_4        ; CALL $D6ED        ; {Call #R$D6ED and return.
       .ret                            ; RET               ; }
* Handle door frame 4 timer...
customer_open_4:                       ; d4ed
       li   de,init_customer_shot      ; LD DE,$CF91       ; {Calls #R$D5A3 with #REGde=#R$CF91.
       .call @hit_detection            ; CALL $D5A3        ; }
       movb @customer_4_timer,a        ; LD A,($D499)      ; {Decrease #R$D499 by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@customer_4_timer        ; LD ($D499),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       movb @customer_flag_uncover,a   ; LD A,($D494)      ; {Jump to #R$D516 if #R$D494 is not zero.
       ; AND A                         ; AND A             ; 
       jne  customer_hands_up          ; JR NZ,$D516       ; }
       movb @bytes+7,*hl               ; LD (HL),$07       ; Set #R$D495 to use state $07 (#R$D559 on the next call
                                                           ; to #R$D49E).
       movb @customer_frame_1,a        ; LD A,($D48F)      ; {Call #R$D6DF using the character frame index from
       .call @draw_door_frame_3        ; CALL $D6DF        ; #R$D48F.}
       movb @bytes+5,@6(ix)            ; LD (IX+$06),$05   ; Issue 500 points (by writing $05 to the high order
                                                           ; byte of, e.g. #R$D16B).
       movb one,a                      ; LD A,$01          ; {Register this as a deposit (by writing $01 to e.g.
       movb a,@8(ix)                   ; LD (IX+$08),A     ; #R$D16D).}
       movb a,@_d190                   ; LD ($D190),A      ; Writes $01 to #R$D190.
       .ret                            ; RET               ; Return.
* Handle customer putting their hands up.
customer_hands_up:                     ; d516
       movb @customer_state_ref,a      ; LD A,($D495)      ; {Increase #R$D495 by one.
       ab   one,a                      ; INC A             ; 
       movb a,@customer_state_ref      ; LD ($D495),A      ; }
       movb @customer_frame_2,a        ; LD A,($D490)      ; Grab the character frame index from #R$D490.
       .call @draw_door_frame_4        ; CALL $D6ED        ; {Call #R$D6ED and return.
       .ret                            ; RET               ; }
* Handles customer uncovering a "hidden" bandit action.
customer_uncover:                      ; d524
       li   de,init_customer_shot      ; LD DE,$CF91       ; {Calls #R$D5A3 with #REGde=#R$CF91.
       .call @hit_detection            ; CALL $D5A3        ; }
       movb @customer_5_timer,a        ; LD A,($D49A)      ; {Decrease #R$D49A by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@customer_5_timer        ; LD ($D49A),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       movb @customer_state_ref,a      ; LD A,($D495)      ; {Increase #R$D495 by one.
       ab   one,a                      ; INC A             ; 
       movb a,@customer_state_ref      ; LD ($D495),A      ; }
       movb @customer_frame_3,a        ; LD A,($D491)      ; Grab the character frame index from #R$D491.
       .call @draw_door_frame_4        ; CALL $D6ED        ; {Call #R$D6ED and return.
       .ret                            ; RET               ; }
* Handle door frame 4 countdown/ transition to door frame 3.
customer_close_3:                      ; d540
       movb @customer_6_timer,a        ; LD A,($D49B)      ; {Decrease #R$D49B by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@customer_6_timer        ; LD ($D49B),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .call @init_bandit_open         ; CALL $CEB8        ; Call #R$CEB8.
       movb @2(ix),@l                  ; LD L,(IX+$02)     ; {Load, e.g. #R$D167 (bandit source data) into #REGhl, and
       movb @3(ix),h                   ; LD H,(IX+$03)     ; write $03 to the address contained in it.
       movb @bytes+3,*hl               ; LD (HL),$03       ; }
       inc  hl                         ; INC HL            ; {Increase the pointer to the bandit source data by 3 and
       inc  hl                         ; INC HL            ; write $04 to this byte.
       inc  hl                         ; INC HL            ; 
       movb @bytes+4,*hl               ; LD (HL),$04       ; }
       .ret                            ; RET               ; Return.
* Handle door frame 3 countdown/ transition to door frame 2.
customer_close_2:                      ; d559
       movb @customer_7_timer,a        ; LD A,($D49C)      ; {Decrease #R$D49C by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@customer_7_timer        ; LD ($D49C),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       li   hl,customer_state_ref      ; LD HL,$D495       ; {Increase #R$D495 by one.
       ab   one,*hl                    ; INC (HL)          ; }
       movb @customer_frame_1,a        ; LD A,($D48F)      ; Grab the character frame index from #R$D48F.
       .call @draw_door_frame_2        ; CALL $D6D1        ; {Call #R$D6D1 and return.
       .ret                            ; RET               ; }
* Handle door frame 2 countdown/ transition to door frame 1.
customer_close_1:                      ; d56c
       movb @customer_8_timer,a        ; LD A,($D49D)      ; {Decrease #R$D49D by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@customer_8_timer        ; LD ($D49D),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .call @draw_door_frame_1        ; CALL $D664        ; Call #R$D664 (i.e. no character/ door is shut).
       .call @reset___                 ; CALL $D8A1        ; {Call #R$D8A1 and return.
       .ret                            ; RET               ; }
* Handles customer being shot.
customer_shot:                         ; d57b
       li   hl,customer_state_ref      ; LD HL,$D495       ; {If #R$D495 is zero then jump to #R$D584 else jump to
       movb *hl,a                      ; LD A,(HL)         ; #R$D58C.
       sb   one,a                      ; DEC A             ; 
       jeq  customer_shot_midair       ; JR Z,$D584        ; 
       jmp  customer_shot_floor        ; JR $D58C          ; }
customer_shot_midair:                  ; d584
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @customer_frame_4,a        ; LD A,($D492)      ; Grab the character frame index from #R$D492.
       .call @draw_door_frame_4        ; CALL $D6ED        ; {Call #R$D6ED and return.
       .ret                            ; RET               ; }
customer_shot_floor:                   ; d58c
       movb @customer_2_timer,a        ; LD A,($D497)      ; {Decrease #R$D497 by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@customer_2_timer        ; LD ($D497),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       movb @customer_frame_5,a        ; LD A,($D493)      ; Grab the character frame index from #R$D493.
       .call @draw_door_frame_4        ; CALL $D6ED        ; Call #R$D6ED.
       movb @bytes+2,a                 ; LD A,$02          ; {Writes $02 to #R$D2FE.
       movb a,@_d2fe                   ; LD ($D2FE),A      ; }
       .call @reset___                 ; CALL $D8A1        ; {Call #R$D8A1 and return.
       .ret                            ; RET               ; }

* Hit Detection.
* 
* Compares the #R$CE1A against the user input for a shot.
* If there isn't a shot to account for then we simply return,
* else we action a jump to the address held in #REGde on entry.
hit_detection:                         ; d5a3
       .push hl                        ; PUSH HL           ; Store #REGhl on the stack for later.
       movb @hit,a                     ; LD A,($D300)      ; {Does a comparison of #R$D300 against #R$CE1A.
       li   hl,door_frame_ref          ; LD HL,$CE1A       ; 
       cb   a,*hl                      ; CP (HL)           ; }
       .pop hl                         ; POP HL            ; {#HTML(Retrieve #REGhl off the stack and return if the
       jeq  !                          ; RET NZ            ; numbers compared were <em>NOT</em> the same.)}
       .ret                            ;                   
!
       .pop af                         ; POP AF            ; Restores the character state to #REGa.
       .ex_de_hl                       ; EX DE,HL          ; {Jumps to the address held in #REGde on entry (with
       b    *hl                        ; JP (HL)           ; TODO. 

* Character Index.
* 
* Returns the 16 bit memory location of a character from a given character
* index in #REGa.
character_addr:                        ; d5b0
       sb   h,h                        ; LD H,$00          ; {Using #R$6800 as a base address (which is the first character), this works out the character frame from a
       movb a,@l                       ; LD L,A            ; given index passed in #REGa. To give an example with $1A;
       a    hl,hl                      ; ADD HL,HL         ; #LIST
       a    hl,hl                      ; ADD HL,HL         ; { #HTML(Loads <strong>$1A</strong> as the low-order byte; #REGhl=$001A) }
       a    hl,hl                      ; ADD HL,HL         ; { #HTML(Times by <strong>$200</strong>; store this in #REGde=$3400) }
       a    hl,hl                      ; ADD HL,HL         ; { #HTML(Loads <strong>$1A</strong> as the low-order byte; #REGhl=$001A) }
       a    hl,hl                      ; ADD HL,HL         ; { #HTML(Times by <strong>$10</strong>; #REGhl=$1A0) }
       a    hl,hl                      ; ADD HL,HL         ; { #REGhl+#REGde=$35A0 }
       a    hl,hl                      ; ADD HL,HL         ; { #HTML(Add <strong>$6800</strong>=#R$9DA0) }
       a    hl,hl                      ; ADD HL,HL         ; LIST#
       a    hl,hl                      ; ADD HL,HL         ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       sb   h,h                        ; LD H,$00          ; 
       movb a,@l                       ; LD L,A            ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    de,hl                      ; ADD HL,DE         ; 
       li   de,character_00            ; LD DE,$6800       ; 
       a    de,hl                      ; ADD HL,DE         ; }
       .ret                            ; RET               ; Returns the address in #REGhl.

* Draw Character In Doorway.
* 
* Draws the character frame at the location of one of the three (open) doors. This is direct function, hence is
* only used when the door is open (it doesn't utilise the door buffer).
draw_character_in_doorway:             ; d5ca
       .call @character_addr           ; CALL $D5B0        ; Retrieve the memory location for the character frame
                                                           ; from the passed index in #REGa.
       .ex_de_hl                       ; EX DE,HL          ; 
       movb @bytes+88,b                ; LD B,$58          ; {Sets the height and width.
       movb @bytes+6,@c                ; LD C,$06          ; }
       movb @door_frame_ref,a          ; LD A,($CE1A)      ; Retrieves the currently in-focus door from #R$CE1A.
       li   hl,_4080+2                 ; LD HL,$4082       ; {Work out which screen position to use for the currently focused door;
       sb   one,a                      ; DEC A             ; #TABLE(default,centre)
       jeq  copy_routine               ; JR Z,$D5E6        ; { =h #REGa | =h Screen Address }
       sb   one,a                      ; DEC A             ; { $01 | $4082 }
       li   hl,_4080+13                ; LD HL,$408D       ; { $02 | $408D }
       jeq  copy_routine               ; JR Z,$D5E6        ; { $03 | $4098 }
       li   hl,_4080+24                ; LD HL,$4098       ; TABLE#
       jmp  copy_routine               ; JR $D5E6          ; Jump to #R$D5E6 to draw the character and handle the return.
                                                           ; }

* Copy Routine.
* 
* Used by the routines at #R$5B92, #R$C300, #R$CBD0, #R$CC5A, #R$CC9B, #R$CDAE,
* #R$D5CA and #R$D664.
* 
* .
* 
* This routine copies bytes from #REGde TO #REGhl and uses the #REGbc register to track the number of bytes
* and the number of lines.
copy_routine:                          ; d5e6
       .push bc                        ; PUSH BC           ; {Copies bytes from #REGde TO #REGhl x #REGc number of
       .push hl                        ; PUSH HL           ; times.
       sb   b,b                        ; LD B,$00          ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .ldir                           ; LDIR              ; }
       .ex_de_hl                       ; EX DE,HL          ; {Restores #REGhl with the original screen buffer
       .pop hl                         ; POP HL            ; location.}
       ab   one,h                      ; INC H             ; {ggg
       movb h,a                        ; LD A,H            ; 
       andi a,7*256                    ; AND $07           ; 
       jne  !                          ; CALL Z,$D610      ; }
       .call @calc_attr                ;                   
!
       .pop bc                         ; POP BC            ; {Grabs #REGb and decreases it by one. Loop back round to
       sb   one,b                      ; DJNZ $D5E6        ; #R$D5E6 if #REGb is not zero.}
       jne  copy_routine               ;                   
       .ret                            ; RET               ; Return.

* Merge Gun Shot Onto Background.
* 
* Used by the routines at #R$5B95, #R$D3B4 and #R$D3CB.
merge_shot:                            ; d5fa
       .push bc                        ; PUSH BC           ; {Store #REGbc and #REGhl for later.
       .push hl                        ; PUSH HL           ; }
merge_shot_loop:                       ; d5fc
       movb *de,a                      ; LD A,(DE)         ; Loads the contents of the source address held in #REGde.
       ; XOR (HL)                      ; XOR (HL)          ; Performs a bit-by-bit XOR comparison against the contents of the destination address held by #REGhl.
                                                           ; #TABLE(default,centre,centre,centre)
                                                           ; { =h #REGa register bit | =h Comparison bit | =h #REGa bit set to }
                                                           ; { 0 | 0 | 0 }
                                                           ; { 0 | 1 | 1 }
                                                           ; { 1 | 0 | 1 }
                                                           ; { 1 | 1 | 0 }
                                                           ; TABLE#
       movb a,*hl                      ; LD (HL),A         ; Stores the result at the destination address.
       inc  hl                         ; INC HL            ; {Increase the source and destination addresses by one, decrease the counter by one. Loop back to #R$D5FC
       inc  de                         ; INC DE            ; until the #REGc counter is zero.
       sb   one,@c                     ; DEC C             ; 
       jne  merge_shot_loop            ; JR NZ,$D5FC       ; }
       .pop hl                         ; POP HL            ; Restore #REGhl with the original destination address.
       ab   one,h                      ; INC H             ; {Increase the high-order byte of #REGhl by one, if this
       movb h,a                        ; LD A,H            ; is on a screen third boundary (@todo what's the term for
       andi a,7*256                    ; AND $07           ; this?) then call #R$D610.
       jne  !                          ; CALL Z,$D610      ; }
       .call @calc_attr                ;                   
!
       .pop bc                         ; POP BC            ; {Decrease the #REGb counter by one and loop back to
       sb   one,b                      ; DJNZ $D5FA        ; #R$D5FA until it is zero.}
       jne  merge_shot                 ;                   
       .ret                            ; RET               ; Return.

* Routine at D610
* 
* Used by the routines at #R$D5E6 and #R$D5FA.
* 
* .
* 
* On entry #REGhl points to an address in the screen attribute buffer.
calc_attr:                             ; d610
       movb h,a                        ; LD A,H            ; {Let's use $58C8 as an example;
       sb   @bytes+8,a                 ; SUB $08           ; #LIST
       movb a,h                        ; LD H,A            ; { #REGa=$58 }
       movb @l,a                       ; LD A,L            ; { Subtract $08 = #REGa=$50 }
       ab   @bytes+32,a                ; ADD A,$20         ; { Write it into #REGhl=$50C8 }
       movb a,@l                       ; LD L,A            ; { #REGa=$C8 }
       joc  !                          ; RET NC            ; TODO: check code. { Add $20 = #REGa=$E8 }
       .ret                            ;                   
!
       movb h,a                        ; LD A,H            ; { Write it into #REGhl=$50E8 }
       ab   @bytes+8,a                 ; ADD A,$08         ; LIST#
       movb a,h                        ; LD H,A            ; }
       .ret                            ; RET               ; Return.

* Write Character And Door To Buffer.
* 
* Door frames 2 and 3 both contain a "section" of a game character. This is copied into a buffer by first drawing
* the game character fully to #R$EA90. Then the door frame is drawn over the top (in the correct position).
* 
* .
* 
* Draws the game character together with door frame 2.
character_door_frame_2:                ; d61e
       .call @character_addr           ; CALL $D5B0        ; {On entry #REGa points to a character index. The call to #R$D5B0 translates this to the memory location of
       .call @door_buffer_copy         ; CALL $D654        ; the character frame data (held in #REGhl) and then calls #R$D654.
                                                           ; }
       li   hl,door_frame_2            ; LD HL,$BCE8       ; {Copies #R$BCE8 into the #R$EA90 (+2 bytes ~ $EA92).
       li   de,door_buffer+2           ; LD DE,$EA92       ; 
       movb @bytes+88,b                ; LD B,$58          ; 
door_frame_2_copy_loop:                ; d62c
       .push bc                        ; PUSH BC           ; 
       li   bc,>0005                   ; LD BC,$0005       ; 
       .ldir                           ; LDIR              ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $D62C        ; }
       jne  door_frame_2_copy_loop     ;                   
       .ret                            ; RET               ; Return.
* Draws the game character together with door frame 3.
character_door_frame_3:                ; d638
       .call @character_addr           ; CALL $D5B0        ; {On entry #REGa points to a character index. The call to #R$D5B0 translates this to the memory location of
       .call @door_buffer_copy         ; CALL $D654        ; the character frame data (held in #REGhl) and then calls #R$D654.
                                                           ; }
       li   hl,door_frame_3            ; LD HL,$BEA0       ; {Copies #R$BEA0 into the #R$EA90 (+4 bytes ~ $EA94).
       li   de,door_buffer+4           ; LD DE,$EA94       ; 
       movb @bytes+88,b                ; LD B,$58          ; 
door_frame_3_copy_loop:                ; d646
       .push bc                        ; PUSH BC           ; 
       li   bc,>0003                   ; LD BC,$0003       ; 
       .ldir                           ; LDIR              ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $D646        ; }
       jne  door_frame_3_copy_loop     ;                   
       .ret                            ; RET               ; Return.
* Draws the game character alone to the door frame buffer.
door_buffer_copy:                      ; d654
       li   de,door_buffer             ; LD DE,$EA90       ; {Draws a character into the #R$EA90.
       movb @bytes+88,b                ; LD B,$58          ; 
door_buffer_copy_loop:                 ; d659
       .push bc                        ; PUSH BC           ; 
       li   bc,>0006                   ; LD BC,$0006       ; 
       .ldir                           ; LDIR              ; 
       inc  de                         ; INC DE            ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $D659        ; 
       jne  door_buffer_copy_loop      ;                   
       .ret                            ; RET               ; }

* Draw Doors.
* 
* Used by the routines at #R$CC3A, #R$D48F, #R$D71E, #R$D7C5, #R$D8E5 and
* #R$DA0C.
* 
* .
* 
* Preps door frame 1.
draw_door_frame_1:                     ; d664
       li   hl,door_1_attributes       ; LD HL,$D6B1       ; {Calls #R$D684 using #R$D6B1.
       .call @door_attributes          ; CALL $D684        ; }
       li   de,door_frame_1            ; LD DE,$BA80       ; #REGde=#R$BA80.
* Referencing the door frame index, work out the screen position and send it to
* the #R$D717 routine.
prep_door_frame:                       ; d66d
       movb @door_frame_ref,a          ; LD A,($CE1A)      ; #REGa=#R$CE1A.
       li   hl,_4080+2                 ; LD HL,$4082       ; {Determines which screen address to use for the door reference index currently held in #REGa.
       sb   one,a                      ; DEC A             ; #TABLE(default,centre,centre)
       jne  !                          ; JP Z,$D717        ; { =h #REGa | =h Screen Address }
       b    @draw_door_frame           ;                   
!
       li   hl,_4080+13                ; LD HL,$408D       ; { $01 | $4082 }
       sb   one,a                      ; DEC A             ; { $02 | $408D }
       jne  !                          ; JP Z,$D717        ; { $03 | $4098 }
       b    @draw_door_frame           ;                   
!
       li   hl,_4080+24                ; LD HL,$4098       ; TABLE#
       b    @draw_door_frame           ; JP $D717          ; Jump to #R$D717.}
* Copies attributes for the current door frame index.
door_attributes:                       ; d684
       .push af                        ; PUSH AF           ; Stash the accumulator for later.
       movb @door_frame_ref,a          ; LD A,($CE1A)      ; #REGa=#R$CE1A.
       li   de,_5880+2                 ; LD DE,$5882       ; {#TABLE(default,centre,centre)
       sb   one,a                      ; DEC A             ; { =h #REGa | =h Screen Address }
       jeq  door_attributes_skip       ; JR Z,$D697        ; { $01 | $5882 }
       li   de,_5880+13                ; LD DE,$588D       ; { $02 | $588D }
       sb   one,a                      ; DEC A             ; { $03 | $5898 }
       jeq  door_attributes_skip       ; JR Z,$D697        ; TABLE#
       li   de,_5880+24                ; LD DE,$5898       ; ...continue from #R$D697.}
door_attributes_skip:                  ; d697
       movb @bytes+11,b                ; LD B,$0B          ; Sets the height of the door
                                                           ; image.
door_attributes_loop:                  ; d699
       .push bc                        ; PUSH BC           ; {Stash the references for later
       .push hl                        ; PUSH HL           ; and call #R$D6AB.
       .push de                        ; PUSH DE           ; 
       .call @door_attributes_copy     ; CALL $D6AB        ; }
       .pop de                         ; POP DE            ; {Moves the screen attribute
       li   hl,>0020                   ; LD HL,$0020       ; address down to the next
       a    de,hl                      ; ADD HL,DE         ; attribute row.
       .ex_de_hl                       ; EX DE,HL          ; }
       .pop hl                         ; POP HL            ; {Restore the counter and loop
       .pop bc                         ; POP BC            ; back to #R$D699 until complete.
       sb   one,b                      ; DJNZ $D699        ; }
       jne  door_attributes_loop       ;                   
       .pop af                         ; POP AF            ; {Restore the accumulator and
       .ret                            ; RET               ; return.}
* Simple helper copy routine for sending attribute data to the screen attribute
* buffer.
door_attributes_copy:                  ; d6ab
       li   bc,>0007                   ; LD BC,$0007       ; {Set the door width, copy the
       .ldir                           ; LDIR              ; attribute data to the screen and
       .ret                            ; RET               ; return.}
* Door frame attribute data.
door_1_attributes:                     ; d6b1
       byte >30,>30,>30,>30,>30,>30,>30,>30                          ; Attribute data for door frame 1.
door_2_attributes:                     ; d6b9
       byte >28,>28,>30,>30,>30,>30,>30,>30                          ; Attribute data for door frame 2.
door_3_attributes:                     ; d6c1
       byte >28,>28,>28,>28,>30,>30,>30,>30                          ; Attribute data for door frame 3.
door_4_attributes:                     ; d6c9
       byte >28,>28,>28,>28,>28,>28,>30,>28                          ; Attribute data for door frame 4.
* Preps door frame 2.
draw_door_frame_2:                     ; d6d1
       li   hl,door_2_attributes       ; LD HL,$D6B9       ; {Calls #R$D684 using #R$D6B9.
       .call @door_attributes          ; CALL $D684        ; }
       .call @character_door_frame_2   ; CALL $D61E        ; {Prepare the character/ door image by calling #R$D61E. Then pass #R$EA90 to #R$D66D which will draw it to the
       li   de,door_buffer             ; LD DE,$EA90       ; screen.
       jmp  prep_door_frame            ; JR $D66D          ; }
* Preps door frame 3.
draw_door_frame_3:                     ; d6df
       li   hl,door_3_attributes       ; LD HL,$D6C1       ; {Calls #R$D684 using #R$D6C1.
       .call @door_attributes          ; CALL $D684        ; }
       .call @character_door_frame_3   ; CALL $D638        ; {Prepare the character/ door image by calling #R$D638. Then pass #R$EA90 to #R$D66D which will draw it to the
       li   de,door_buffer             ; LD DE,$EA90       ; screen.
       jmp  prep_door_frame            ; JR $D66D          ; }
* Preps door frame 4.
draw_door_frame_4:                     ; d6ed
       li   hl,door_4_attributes       ; LD HL,$D6C9       ; {Calls #R$D684 using #R$D6C9.
       .call @door_attributes          ; CALL $D684        ; }
       .call @draw_character_in_doorway ; CALL $D5CA        ; The door is fully open so draw
                                                           ; the whole character in the
                                                           ; doorway directly.
       movb @bytes+88,b                ; LD B,$58          ; {Reference #R$BFA8 and the
       movb one,@c                     ; LD C,$01          ; dimensions for the copy routine.
       li   de,door_frame_4            ; LD DE,$BFA8       ; }
       movb @door_frame_ref,a          ; LD A,($CE1A)      ; #REGa=#R$CE1A.
       li   hl,_4080+8                 ; LD HL,$4088       ; {Determines which screen address to use for the door reference index currently held in #REGa.
       sb   one,a                      ; DEC A             ; #TABLE(default,centre,centre)
       jne  !                          ; JP Z,$D5E6        ; { =h #REGa | =h Screen Address }
       b    @copy_routine              ;                   
!
       li   hl,_4080+19                ; LD HL,$4093       ; { $01 | $4088 }
       sb   one,a                      ; DEC A             ; { $02 | $4093 }
       jne  !                          ; JP Z,$D5E6        ; { $03 | $409E }
       b    @copy_routine              ;                   
!
       li   hl,_4080+30                ; LD HL,$409E       ; TABLE#
       b    @copy_routine              ; JP $D5E6          ; Jump to #R$D5E6.}
       li   de,door_buffer             ; LD DE,$EA90       ; #REGde=#R$EA90.
draw_door_frame:                       ; d717
       movb @bytes+88,b                ; LD B,$58          ; {Draws the image pointed at by
       movb @bytes+7,@c                ; LD C,$07          ; #REGde to the screen address in
       b    @copy_routine              ; JP $D5E6          ; #REGhl using #R$D5E6.}

* Generic Bandit in Door Frame Logic.
* 
* .
* 
* .
* 
* Character state variables/ flags.
bandit_state_ref:                      ; d71e
       byte >04                                                      ; The current character state.
bandit_1_timer:                        ; d71f
       byte >08                                                      ; Character timer 1.
bandit_2_timer:                        ; d720
       byte >08                                                      ; Character timer 2.
bandit_3_timer:                        ; d721
       byte >00                                                      ; Character timer 3.
bandit_4_timer:                        ; d722
       byte >55                                                      ; Character timer 4.
       byte >08                                                      ; 
       byte >08                                                      ; 
* This routine looks at the current character state and routes to the correct
* subroutine.
bandit_open_routing:                   ; d725
       li   hl,bandit_state_ref        ; LD HL,$D71E       ; {#REGa=#R$D71E.
       movb *hl,a                      ; LD A,(HL)         ; }
       sb   one,a                      ; DEC A             ; {Work out which routine to use based on the current state.
       jeq  bandit_open_1              ; JR Z,$D734        ; #TABLE(default,centre,centre)
       sb   one,a                      ; DEC A             ; { =h #REGa | =h Routine }
       jeq  bandit_open_2              ; JR Z,$D741        ; { $01 | #R$D734 }
       sb   one,a                      ; DEC A             ; { $02 | #R$D741 }
       jeq  bandit_open_3              ; JR Z,$D74E        ; { $03 | #R$D74E }
       jmp  bandit_open_4              ; JR $D75B          ; { $04 | #R$D75B }
                                                           ; TABLE#}
* Handle door frame 1 countdown/ transition to door frame 2.
bandit_open_1:                         ; d734
       movb @bandit_1_timer,a          ; LD A,($D71F)      ; {Decrease #R$D71F by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_1_timer          ; LD ($D71F),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       .call @draw_door_frame_2        ; CALL $D6D1        ; {Pass character frame index (#R$6800(draw | $00)) to
       .ret                            ; RET               ; #R$D6D1 and return.}
* Handle door frame 2 countdown/ transition to door frame 3.
bandit_open_2:                         ; d741
       movb @bandit_2_timer,a          ; LD A,($D720)      ; {Decrease #R$D720 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_2_timer          ; LD ($D720),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       .call @draw_door_frame_3        ; CALL $D6DF        ; {Pass character frame index (#R$6800(draw | $00)) to
       .ret                            ; RET               ; #R$D6DF and return.}
* Handle door frame 3 countdown/ transition to door frame 4.
bandit_open_3:                         ; d74e
       movb @bandit_3_timer,a          ; LD A,($D721)      ; {Decrease #R$D721 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_3_timer          ; LD ($D721),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       .call @draw_door_frame_4        ; CALL $D6ED        ; {Pass character frame index (#R$6800(draw | $00)) to
       .ret                            ; RET               ; #R$D6ED and return.}
* Handle door frame 4 timer...
bandit_open_4:                         ; d75b
       li   de,init_bandit_close       ; LD DE,$CED8       ; {Calls #R$D5A3 with #REGde=$CED8.
       .call @hit_detection            ; CALL $D5A3        ; }
       movb @bandit_4_timer,a          ; LD A,($D722)      ; {Decrease #R$D722 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_4_timer          ; LD ($D722),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,a                      ; INC A             ; {Writes $01 to #R$D2FE.
       movb a,@_d2fe                   ; LD ($D2FE),A      ; }
       .call @reset___                 ; CALL $D8A1        ; Call #R$D8A1.
       .ret                            ; RET               ; Return.
* This routine looks at the current character state and routes to the correct
* subroutine.
bandit_close_routing:                  ; d771
       li   hl,bandit_state_ref        ; LD HL,$D71E       ; {#REGa=#R$D71E.
       movb *hl,a                      ; LD A,(HL)         ; }
       sb   one,a                      ; DEC A             ; {Work out which routine to use based on the current state.
       jeq  bandit_shot_action         ; JR Z,$D783        ; #TABLE(default,centre,centre)
       sb   one,a                      ; DEC A             ; { =h #REGa | =h Routine }
       jeq  bandit_close_4             ; JR Z,$D789        ; { $01 | #R$D783 }
       sb   one,a                      ; DEC A             ; { $02 | #R$D789 }
       jeq  bandit_close_3             ; JR Z,$D798        ; { $03 | #R$D798 }
       sb   one,a                      ; DEC A             ; { $04 | #R$D7A7 }
       jeq  bandit_close_2             ; JR Z,$D7A7        ; { $05 | #R$D7B6 }
       jmp  bandit_close_1             ; JR $D7B6          ; TABLE#}
* Handles the transition to the (#R$6A10(shot | $01)) frame in the open
* doorway.
bandit_shot_action:                    ; d783
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       ab   one,a                      ; INC A             ; Move onto next character frame (i.e. #R$6A10(shot |
                                                           ; $01)).
       .call @draw_door_frame_4        ; CALL $D6ED        ; {Call #R$D6ED and return.
       .ret                            ; RET               ; }
* Handle "floor frame in open doorway" countdown.
bandit_close_4:                        ; d789
       movb @bandit_1_timer,a          ; LD A,($D71F)      ; {Decrease #R$D71F by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_1_timer          ; LD ($D71F),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+2,a                 ; LD A,$02          ; {Pass character frame index (#R$6C20(floor | $02)) to
       .call @draw_door_frame_4        ; CALL $D6ED        ; #R$D6ED and return.
       .ret                            ; RET               ; }
* Handle door frame 4 countdown/ transition to door frame 3.
bandit_close_3:                        ; d798
       movb @bandit_2_timer,a          ; LD A,($D720)      ; {Decrease #R$D720 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_2_timer          ; LD ($D720),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+2,a                 ; LD A,$02          ; {Pass character frame index (#R$6C20(floor | $02)), pass
       .call @draw_door_frame_3        ; CALL $D6DF        ; it to #R$D6DF and return.
       .ret                            ; RET               ; }
* Handle door frame 3 countdown/ transition to door frame 2.
bandit_close_2:                        ; d7a7
       movb @bandit_3_timer,a          ; LD A,($D721)      ; {Decrease #R$D721 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_3_timer          ; LD ($D721),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+2,a                 ; LD A,$02          ; {Pass character frame index (#R$6C20(floor | $02)), pass
       .call @draw_door_frame_2        ; CALL $D6D1        ; it to #R$D6D1 and return.
       .ret                            ; RET               ; }
* Handle door frame 2 countdown/ transition to door frame 1.
bandit_close_1:                        ; d7b6
       movb @bandit_4_timer,a          ; LD A,($D722)      ; {Decrease #R$D722 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_4_timer          ; LD ($D722),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .call @draw_door_frame_1        ; CALL $D664        ; Call #R$D664 (i.e. no character/ door is shut).
       .call @reset___                 ; CALL $D8A1        ; Call #R$D8A1.
       .ret                            ; RET               ; Return.

* Bowie logic.
* 
* Handles all the logic around drawing Bowie and handling his "special" logic.
* 
* .
* 
* Bowie state variables/ flags.
bowie_good_bad:                        ; d7c5
       byte >01                                                      ; If this is $00 then Bowie is "good". If this is $01
                                                                     ; then he is "bad" (i.e. there's a bomb under his hat).
bowie_frame_ref:                       ; d7c6
       byte >22                                                      ; The current character frame index reference.
bowie_state_ref:                       ; d7c7
       byte >06                                                      ; The current character state.
bowie_1_timer:                         ; d7c8
       byte >00                                                      ; Character timer 1.
bowie_2_timer:                         ; d7c9
       byte >00                                                      ; Character timer 2.
bowie_3_timer:                         ; d7ca
       byte >00                                                      ; Character timer 3.
bowie_4_timer:                         ; d7cb
       byte >00                                                      ; Character timer 4.
bowie_5_timer:                         ; d7cc
       byte >00                                                      ; Character timer 5.
bowie_6_timer:                         ; d7cd
       byte >00                                                      ; Character timer 6.
* This routine looks at the current character state and routes to the correct
* subroutine.
bowie_routing:                         ; d7ce
       li   hl,bowie_state_ref         ; LD HL,$D7C7       ; {#REGa=#R$D7C7.
       movb *hl,a                      ; LD A,(HL)         ; }
       sb   one,a                      ; DEC A             ; {Work out which routine to jump to based on the current state.
       jeq  bowie_open_1               ; JR Z,$D7E3        ; #TABLE(default,centre,centre)
       sb   one,a                      ; DEC A             ; { =h #REGa | =h Routine }
       jeq  bowie_open_2               ; JR Z,$D7F2        ; { $01 | #R$D7E3 }
       sb   one,a                      ; DEC A             ; { $02 | #R$D7F2 }
       jeq  bowie_open_3               ; JR Z,$D801        ; { $03 | #R$D801 }
       sb   one,a                      ; DEC A             ; { $04 | #R$D810 }
       jeq  bowie_open_4               ; JR Z,$D810        ; { $05 | #R$D82C }
       sb   one,a                      ; DEC A             ; { $06 | #R$D83C }
       jeq  bowie_close_2              ; JR Z,$D82C        ; TABLE#
       jmp  bowie_close_1              ; JR $D83C          ; }
* Handle door frame 1 countdown/ transition to door frame 2.
bowie_open_1:                          ; d7e3
       movb @bowie_1_timer,a           ; LD A,($D7C8)      ; {Decrease #R$D7C8 by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@bowie_1_timer           ; LD ($D7C8),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+27,a                ; LD A,$1B          ; {Pass character index #R$9FB0($1B) to #R$D6D1 and
       .call @draw_door_frame_2        ; CALL $D6D1        ; return.
       .ret                            ; RET               ; }
* Handle door frame 2 countdown/ transition to door frame 3.
bowie_open_2:                          ; d7f2
       movb @bowie_2_timer,a           ; LD A,($D7C9)      ; {Decrease #R$D7C9 by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@bowie_2_timer           ; LD ($D7C9),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+27,a                ; LD A,$1B          ; {Pass character index #R$9FB0($1B) to #R$D6DF and
       .call @draw_door_frame_3        ; CALL $D6DF        ; return.
       .ret                            ; RET               ; }
* Handle door frame 3 countdown/ transition to door frame 4.
bowie_open_3:                          ; d801
       movb @bowie_3_timer,a           ; LD A,($D7CA)      ; {Decrease #R$D7CA by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@bowie_3_timer           ; LD ($D7CA),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+27,a                ; LD A,$1B          ; {Pass character frame index #R$9FB0($1B) to #R$D6ED
       .call @draw_door_frame_4        ; CALL $D6ED        ; and return.
       .ret                            ; RET               ; }
* Handle door frame 4 countdown/ transition to door frame 3.
bowie_open_4:                          ; d810
       movb @4(ix),@e                  ; LD E,(IX+$04)     ; {Call #R$D5A3 with a callback to either #R$D84B or
       movb @5(ix),d                   ; LD D,(IX+$05)     ; #R$D85D.
       .call @hit_detection            ; CALL $D5A3        ; }
       movb @bowie_4_timer,a           ; LD A,($D7CB)      ; {Decrease #R$D7CB by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@bowie_4_timer           ; LD ($D7CB),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
bowie_close_3:                         ; d821
       equ  $
       li   hl,bowie_state_ref         ; LD HL,$D7C7       ; {Move onto next character state (#R$D7C7).
       ab   one,*hl                    ; INC (HL)          ; }
       movb @bowie_frame_ref,a         ; LD A,($D7C6)      ; {Load the character frame index from #R$D7C6, pass it
       .call @draw_door_frame_3        ; CALL $D6DF        ; to #R$D6DF and return.
       .ret                            ; RET               ; }
* Handle door frame 3 countdown/ transition to door frame 2.
bowie_close_2:                         ; d82c
       movb @bowie_5_timer,a           ; LD A,($D7CC)      ; {Decrease #R$D7CC by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@bowie_5_timer           ; LD ($D7CC),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bowie_frame_ref,a         ; LD A,($D7C6)      ; {Load the character frame index from #R$D7C6, pass it
       .call @draw_door_frame_2        ; CALL $D6D1        ; to #R$D6D1 and return.
       .ret                            ; RET               ; }
* Handle door frame 2 countdown/ transition to door frame 1.
bowie_close_1:                         ; d83c
       movb @bowie_6_timer,a           ; LD A,($D7CD)      ; {Decrease #R$D7CD by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@bowie_6_timer           ; LD ($D7CD),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .call @draw_door_frame_1        ; CALL $D664        ; Call #R$D664 (i.e. no character/ door is shut).
       .call @reset___                 ; CALL $D8A1        ; Call #R$D8A1.
       .ret                            ; RET               ; Return.
* Handles marking this as something shootable.
bowie_cash_action:                     ; d84b
       movb @bytes+5,@6(ix)            ; LD (IX+$06),$05   ; {Writes $05 to #REGix+$06 and $01 to #REGix+$07.
       movb one,@7(ix)                 ; LD (IX+$07),$01   ; }
       movb one,a                      ; LD A,$01          ; {Writes $01 to #REGix+$08 and #R$D190.
       movb a,@8(ix)                   ; LD (IX+$08),A     ; 
       movb a,@_d190                   ; LD ($D190),A      ; }
       jmp  bowie_close_3              ; JR $D821          ; Jump to #R$D821.
* Handles marking this as something unshootable.
bowie_bomb_action:                     ; d85d
       movb @bytes+5,a                 ; LD A,$05          ; {Writes $05 to #R$D2FE and return.
       movb a,@_d2fe                   ; LD ($D2FE),A      ; 
       .ret                            ; RET               ; }
* Handles both shooting the hats off Bowie's head, and checking/ routing on the
* last frame for the "surprise".
bowie_shot_action:                     ; d863
       li   hl,bowie_frame_ref         ; LD HL,$D7C6       ; {#REGa=#R$D7C6.
       movb *hl,a                      ; LD A,(HL)         ; }
       cb   a,@bytes+33                ; CP $21            ; Is it character frame reference (#R$AC10(1 hat |
                                                           ; $21))?
       movb one,@6(ix)                 ; LD (IX+$06),$01   ; Writes $01 to #REGix+$06.
       jnc  bowie_check                ; JR NC,$D875       ; TODO: check code. If Bowie is on the last frame then jump forward to
                                                           ; #R$D875.
       ab   one,a                      ; INC A             ; {Else update #R$D7C6 to point at the next frame, call
       movb a,*hl                      ; LD (HL),A         ; #R$D6ED and return.
       .call @draw_door_frame_4        ; CALL $D6ED        ; 
       .ret                            ; RET               ; }
* Checks the "good/ bad" flag and routes the gameplay accordingly.
bowie_check:                           ; d875
       movb @bowie_good_bad,a          ; LD A,($D7C5)      ; {If #R$D7C5 is zero jump to #R$D87D.
       ; AND A                         ; AND A             ; 
       jeq  bowie_state_cash           ; JR Z,$D87D        ; }
       jmp  bowie_state_bomb           ; JR $D88F          ; Jump to #R$D88F.
* Handle displaying cash character frame.
bowie_state_cash:                      ; d87d
       movb @bytes+35,a                ; LD A,$23          ; {Writes character frame reference #R$B030(cash | $23)
       movb a,@bowie_frame_ref         ; LD ($D7C6),A      ; to #R$D7C6, and pass it to #R$D6ED.
       .call @draw_door_frame_4        ; CALL $D6ED        ; }
       li   hl,bowie_cash_action       ; LD HL,$D84B       ; {Writes #R$D84B to the current door flags (e.g.
       movb @l,@4(ix)                  ; LD (IX+$04),L     ; #R$D169, #R$D177 or #R$D185).
       movb h,@5(ix)                   ; LD (IX+$05),H     ; }
       .ret                            ; RET               ; Return.
* Handle displaying bomb character frame.
bowie_state_bomb:                      ; d88f
       movb @bytes+34,a                ; LD A,$22          ; {Writes character frame reference #R$AE20(bomb | $22)
       movb a,@bowie_frame_ref         ; LD ($D7C6),A      ; to #R$D7C6, and pass it to #R$D6ED.
       .call @draw_door_frame_4        ; CALL $D6ED        ; }
       li   hl,bowie_bomb_action       ; LD HL,$D85D       ; {Writes #R$D85D to the current door flags (e.g.
       movb @l,@4(ix)                  ; LD (IX+$04),L     ; #R$D169, #R$D177 or #R$D185).
       movb h,@5(ix)                   ; LD (IX+$05),H     ; }
       .ret                            ; RET               ; Return.

* Routine at D8A1
* 
* Used by the routines at #R$CD68, #R$D48F, #R$D71E, #R$D7C5, #R$D8E5 and
* #R$DA0C.
reset___:                              ; d8a1
       movb *ix,@l                     ; LD L,(IX+$00)     ; {Blanks the 16 bit address pointed to by one of the
       movb @1(ix),h                   ; LD H,(IX+$01)     ; passed door flags (i.e. writes $0000 to one of #R$CE14,
       sb   a,a                        ; XOR A             ; #R$CE16, #R$CE18).
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       movb a,*hl                      ; LD (HL),A         ; }
       .ret                            ; RET               ; Return.

* Game status buffer entry at D8AC
_d8ac:
       data _80f0+4606

* Game status buffer entry at D8AE
_d8ae:
       data door_bottom+243

* Routine at D8B0
* 
* Used by the routines at #R$C7C0, #R$CE21, #R$CEB8 and #R$DAEF.
* 
* .
* 
* f
random_number:                         ; d8b0
       .push bc                        ; PUSH BC           ; {Stashes #REGbc and #REGhl for later.
       .push hl                        ; PUSH HL           ; }
       movb @_d8ae,a                   ; LD A,($D8AE)      ; {Decrease #R$D8AE by one.
       sb   one,a                      ; DEC A             ; 
       movb a,@_d8ae                   ; LD ($D8AE),A      ; }
       jne  random_number_1            ; JR NZ,$D8C8       ; If the result is not zero jump to #R$D8C8.
       mov  @_d8ac,hl                  ; LD HL,($D8AC)     ; 
       inc  hl                         ; INC HL            ; 
       .push hl                        ; PUSH HL           ; 
       .pop bc                         ; POP BC            ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       jmp  random_number_2            ; JR $D8D7          ; 
random_number_1:                       ; d8c8
       mov  @_d8ac,hl                  ; LD HL,($D8AC)     ; 
       inc  hl                         ; INC HL            ; 
       .push hl                        ; PUSH HL           ; 
       .pop bc                         ; POP BC            ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       .push hl                        ; PUSH HL           ; 
       .pop bc                         ; POP BC            ; 
       a    hl,hl                      ; ADD HL,HL         ; 
random_number_2:                       ; d8d7
       a    bc,hl                      ; ADD HL,BC         ; 
       dec  hl                         ; DEC HL            ; 
       mov  hl,@_d8ac                  ; LD ($D8AC),HL     ; 
       movb @l,a                       ; LD A,L            ; 
       li   hl,_d8ae+1                 ; LD HL,$D8AF       ; 
       ab   one,*hl                    ; INC (HL)          ; 
       ab   *hl,a                      ; ADD A,(HL)        ; 
       .pop hl                         ; POP HL            ; 
       .pop bc                         ; POP BC            ; 
       .ret                            ; RET               ; 

* Julius logic.
* 
* .
* 
* .
* 
* Handles all the logic around drawing Julius and handling his "special" logic.
julius_good_bad:                       ; d8e5
       byte >00                                                      ; If this is $00 then Julius is "good". If this is $01
                                                                     ; then he is "bad" (i.e. will draw on you).
_d8e6:
       byte >00                                                      ; 
julius_state_ref:                      ; d8e7
       byte >04                                                      ; The current character state.
julius_1_timer:                        ; d8e8
       byte >00                                                      ; Character timer 1.
julius_2_timer:                        ; d8e9
       byte >00                                                      ; Character timer 2.
julius_3_timer:                        ; d8ea
       byte >00                                                      ; Character timer 3.
julius_4_timer:                        ; d8eb
       byte >1B                                                      ; Character timer 4.
julius_5_timer:                        ; d8ec
       byte >08                                                      ; Character timer 5.
julius_6_timer:                        ; d8ed
       byte >08                                                      ; Character timer 6.
julius_7_timer:                        ; d8ee
       byte >80                                                      ; Character timer 7.
* This routine looks at the current character state and routes to the correct
* subroutine.
julius_open_routing:                   ; d8ef
       li   hl,julius_state_ref        ; LD HL,$D8E7       ; {#REGa=#R$D8E7.
       movb *hl,a                      ; LD A,(HL)         ; }
       sb   one,a                      ; DEC A             ; {Work out which routine to use based on the current state.
       jeq  julius_open_1              ; JR Z,$D907        ; #TABLE(default,centre,centre)
       sb   one,a                      ; DEC A             ; { =h #REGa | =h Routine }
       jeq  julius_open_2              ; JR Z,$D916        ; { $01 | #R$D907 }
       sb   one,a                      ; DEC A             ; { $02 | #R$D916 }
       jeq  julius_open_3              ; JR Z,$D925        ; { $03 | #R$D925 }
       sb   one,a                      ; DEC A             ; { $04 | #R$D934 }
       jeq  julius_open_4              ; JR Z,$D934        ; { $05 | #R$D963 }
       sb   one,a                      ; DEC A             ; { $06 | #R$D972 }
       jeq  julius_open_5              ; JR Z,$D963        ; { $07 | #R$D981 }
       sb   one,a                      ; DEC A             ; TABLE#
       jeq  julius_open_6              ; JR Z,$D972        ; 
       jmp  julius_open_7              ; JR $D981          ; }
* Handle door frame 1 countdown/ transition to door frame 2.
julius_open_1:                         ; d907
       movb @julius_1_timer,a          ; LD A,($D8E8)      ; {Decrease #R$D8E8 by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@julius_1_timer          ; LD ($D8E8),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+36,a                ; LD A,$24          ; {Pass character index (#R$B240(stand off | $24)) to
       .call @draw_door_frame_2        ; CALL $D6D1        ; #R$D6D1 and return.
       .ret                            ; RET               ; }
* Handle door frame 2 countdown/ transition to door frame 3.
julius_open_2:                         ; d916
       movb @julius_2_timer,a          ; LD A,($D8E9)      ; {Decrease #R$D8E9 by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@julius_2_timer          ; LD ($D8E9),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+36,a                ; LD A,$24          ; {Pass character index (#R$B240(stand off | $24)) to
       .call @draw_door_frame_3        ; CALL $D6DF        ; #R$D6DF and return.
       .ret                            ; RET               ; }
* Handle door frame 3 countdown/ transition to door frame 4.
julius_open_3:                         ; d925
       movb @julius_3_timer,a          ; LD A,($D8EA)      ; {Decrease #R$D8EA by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@julius_3_timer          ; LD ($D8EA),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+36,a                ; LD A,$24          ; {Pass character index (#R$B240(stand off | $24)) to
       .call @draw_door_frame_4        ; CALL $D6ED        ; #R$D6ED and return.
       .ret                            ; RET               ; }
* Handle door frame 4 countdown.
julius_open_4:                         ; d934
       li   de,init_julius_close       ; LD DE,$CFDD       ; {Call #R$D5A3 with a callback to #R$CFDD.
       .call @hit_detection            ; CALL $D5A3        ; }
       movb @julius_4_timer,a          ; LD A,($D8EB)      ; {Decrease #R$D8EB by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@julius_4_timer          ; LD ($D8EB),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @julius_good_bad,a         ; LD A,($D8E5)      ; {Jump to #R$D951 if #R$D8E5 is zero (Julius is
       ; AND A                         ; AND A             ; "good").
       jeq  julius_state_4_close       ; JR Z,$D951        ; }
* Changes the frame to show Julius drawing his pistol.
       movb @bytes+7,*hl               ; LD (HL),$07       ; Writes "07" to #R$D8E7.
       movb @bytes+37,a                ; LD A,$25          ; {Pass character index (#R$B450(draw | $25)) to #R$D6ED
       .call @draw_door_frame_4        ; CALL $D6ED        ; and return.
       .ret                            ; RET               ; }
* Set up (and begin) closing the door.
julius_state_4_close:                  ; d951
       movb @bytes+36,a                ; LD A,$24          ; {Pass character index (#R$B240(stand off | $24)) to
       .call @draw_door_frame_3        ; CALL $D6DF        ; #R$D6DF.}
       movb one,a                      ; LD A,$01          ; {Writes $01 to #R$D190 and #REGix+8. Writes $05 to
       movb a,@_d190                   ; LD ($D190),A      ; #REGix+6 and return.
       movb a,@8(ix)                   ; LD (IX+$08),A     ; 
       movb @bytes+5,@6(ix)            ; LD (IX+$06),$05   ; 
       .ret                            ; RET               ; }
* Handle door frame 3 countdown/ transition to door frame 2.
julius_open_5:                         ; d963
       movb @julius_5_timer,a          ; LD A,($D8EC)      ; {Decrease #R$D8EC by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@julius_5_timer          ; LD ($D8EC),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+36,a                ; LD A,$24          ; {Pass character index (#R$B240(stand off | $24)) to
       .call @draw_door_frame_2        ; CALL $D6D1        ; #R$D6D1 and return.
       .ret                            ; RET               ; }
* Handle door frame 2 countdown/ transition to door frame 1.
julius_open_6:                         ; d972
       movb @julius_6_timer,a          ; LD A,($D8ED)      ; {Decrease #R$D8ED by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@julius_6_timer          ; LD ($D8ED),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .call @draw_door_frame_1        ; CALL $D664        ; Call #R$D664 (i.e. no character/ door is shut).
       .call @reset___                 ; CALL $D8A1        ; Call #R$D8A1.
       .ret                            ; RET               ; Return.
* ???
julius_open_7:                         ; d981
       li   de,_cfe2                   ; LD DE,$CFE2       ; {Call #R$D5A3 with a callback to #R$CFE2.
       .call @hit_detection            ; CALL $D5A3        ; }
       movb @julius_7_timer,a          ; LD A,($D8EE)      ; {Decrease #R$D8EE by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@julius_7_timer          ; LD ($D8EE),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,a                      ; INC A             ; Move onto next character state.
       movb a,@_d2fe                   ; LD ($D2FE),A      ; Write $01 to #R$D2FE.
       .call @reset___                 ; CALL $D8A1        ; Call #R$D8A1.
       .ret                            ; RET               ; Return.
* This routine looks at the current character state and routes to the correct
* subroutine.
julius_close_routing:                  ; d997
       li   hl,julius_state_ref        ; LD HL,$D8E7       ; {#REGa=#R$D8E7.
       movb *hl,a                      ; LD A,(HL)         ; }
       sb   one,a                      ; DEC A             ; {Work out which routine to use based on the current state.
       jeq  julius_close_1             ; JR Z,$D9A9        ; #TABLE(default,centre,centre)
       sb   one,a                      ; DEC A             ; { =h #REGa | =h Routine }
       jeq  julius_close_2             ; JR Z,$D9B8        ; { $01 | #R$D9A9 }
       sb   one,a                      ; DEC A             ; { $02 | #R$D9B8 }
       jeq  julius_close_3             ; JR Z,$D9D3        ; { $03 | #R$D9D3 }
       sb   one,a                      ; DEC A             ; { $04 | #R$D9E2 }
       jeq  julius_close_4             ; JR Z,$D9E2        ; { $05 | #R$D9F1 }
       jmp  julius_close_5             ; JR $D9F1          ; TABLE#}
* Handles state countdown/ transition to character frame #R$B660($26).
julius_close_1:                        ; d9a9
       movb @julius_1_timer,a          ; LD A,($D8E8)      ; {Decrease #R$D8E8 by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@julius_1_timer          ; LD ($D8E8),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+38,a                ; LD A,$26          ; {Pass character index #R$B660(shot | $26) to #R$D6ED
       .call @draw_door_frame_4        ; CALL $D6ED        ; and return.
       .ret                            ; RET               ; }
* Handles state countdown/ transition to character frame #R$B870($27).
julius_close_2:                        ; d9b8
       movb @julius_2_timer,a          ; LD A,($D8E9)      ; {Decrease #R$D8E9 by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@julius_2_timer          ; LD ($D8E9),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+39,a                ; LD A,$27          ; {Pass character index #R$B870(floor | $27) to #R$D6ED.
       .call @draw_door_frame_4        ; CALL $D6ED        ; }
       movb @_d8e6,a                   ; LD A,($D8E6)      ; {Return if #R$D8E6 is zero.
       ; AND A                         ; AND A             ; 
       jne  !                          ; RET Z             ; }
       .ret                            ;                   
!
       ab   one,a                      ; INC A             ; {Else write #R$D8E6+1 to #R$D2FE, call #R$D8A1 and
       movb a,@_d2fe                   ; LD ($D2FE),A      ; return.
       .call @reset___                 ; CALL $D8A1        ; 
       .ret                            ; RET               ; }
* Handle door frame 4 countdown/ transition to door frame 3.
julius_close_3:                        ; d9d3
       movb @julius_3_timer,a          ; LD A,($D8EA)      ; {Decrease #R$D8EA by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@julius_3_timer          ; LD ($D8EA),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+39,a                ; LD A,$27          ; {Pass character index #R$B870(floor | $27) to #R$D6DF
       .call @draw_door_frame_3        ; CALL $D6DF        ; and return.
       .ret                            ; RET               ; }
* Handle door frame 3 countdown/ transition to door frame 2.
julius_close_4:                        ; d9e2
       movb @julius_4_timer,a          ; LD A,($D8EB)      ; {Decrease #R$D8EB by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@julius_4_timer          ; LD ($D8EB),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bytes+39,a                ; LD A,$27          ; {Pass character index #R$B870(floor | $27) to #R$D6D1
       .call @draw_door_frame_2        ; CALL $D6D1        ; and return.
       .ret                            ; RET               ; }
* Handle door frame 2 countdown/ transition to door frame 1.
julius_close_5:                        ; d9f1
       movb @julius_5_timer,a          ; LD A,($D8EC)      ; {Decrease #R$D8EC by one, return if result is not
       sb   one,a                      ; DEC A             ; zero.
       movb a,@julius_5_timer          ; LD ($D8EC),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .call @draw_door_frame_1        ; CALL $D664        ; Call #R$D664 (i.e. no character/ door is shut).
       .call @reset___                 ; CALL $D8A1        ; Call #R$D8A1.
       movb one,a                      ; LD A,$01          ; {Writes $01 to #R$D190 and #REGix+8. Writes $05 to
       movb a,@_d190                   ; LD ($D190),A      ; #REGix+6 and return.
       movb a,@8(ix)                   ; LD (IX+$08),A     ; 
       movb @bytes+5,@6(ix)            ; LD (IX+$06),$05   ; 
       .ret                            ; RET               ; }

* Drawing Bandit Logic.
* 
* .
* 
* .
* 
* Character state variables/ flags.
bandit_draw:                           ; da0c
       byte >00                                                      ; 
bandit_draw_frame_1:                   ; da0d
       byte >08                                                      ; Character frame index 1.
bandit_draw_frame_2:                   ; da0e
       byte >08                                                      ; Character frame index 2.
bandit_draw_frame_3:                   ; da0f
       byte >09                                                      ; Character frame index 3.
bandit_draw_frame_4:                   ; da10
       byte >07                                                      ; Character frame index 4.
bandit_draw_state_ref:                 ; da11
       byte >05                                                      ; The current character state.
bandit_draw_1_timer:                   ; da12
       byte >00                                                      ; Character timer 1.
bandit_draw_2_timer:                   ; da13
       byte >00                                                      ; Character timer 2.
bandit_draw_3_timer:                   ; da14
       byte >00                                                      ; Character timer 3.
bandit_draw_4_timer:                   ; da15
       byte >00                                                      ; Character timer 4.
bandit_draw_5_timer:                   ; da16
       byte >00                                                      ; Character timer 5.
* This routine looks at the current character state and routes to the correct
* subroutine.
bandit_draw_open_routing:              ; da17
       li   hl,bandit_draw_state_ref   ; LD HL,$DA11       ; {#REGa=#R$DA11.
       movb *hl,a                      ; LD A,(HL)         ; }
       sb   one,a                      ; DEC A             ; {Work out which routine to use based on the current state.
       jeq  bandit_draw_open_1         ; JR Z,$DA29        ; #TABLE(default,centre,centre)
       sb   one,a                      ; DEC A             ; { =h #REGa | =h Routine }
       jeq  bandit_draw_open_2         ; JR Z,$DA39        ; { $01 | #R$DA29 }
       sb   one,a                      ; DEC A             ; { $02 | #R$DA39 }
       jeq  bandit_draw_open_3         ; JR Z,$DA49        ; { $03 | #R$DA49 }
       sb   one,a                      ; DEC A             ; { $04 | #R$DA59 }
       jeq  bandit_draw_open_4         ; JR Z,$DA59        ; { $05 | #R$DA6F }
       jmp  bandit_draw_open_5         ; JR $DA6F          ; TABLE#}
* Handle door frame 1 countdown/ transition to door frame 2.
bandit_draw_open_1:                    ; da29
       movb @bandit_draw_1_timer,a     ; LD A,($DA12)      ; {Decrease #R$DA12 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_draw_1_timer     ; LD ($DA12),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bandit_draw_frame_1,a     ; LD A,($DA0D)      ; Grab the character frame index from #R$DA0D.
       .call @draw_door_frame_2        ; CALL $D6D1        ; {Call #R$D6D1 and return.
       .ret                            ; RET               ; }
* Handle door frame 2 countdown/ transition to door frame 3.
bandit_draw_open_2:                    ; da39
       movb @bandit_draw_2_timer,a     ; LD A,($DA13)      ; {Decrease #R$DA13 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_draw_2_timer     ; LD ($DA13),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bandit_draw_frame_1,a     ; LD A,($DA0D)      ; Grab the character frame index from #R$DA0D.
       .call @draw_door_frame_3        ; CALL $D6DF        ; {Call #R$D6DF and return.
       .ret                            ; RET               ; }
* Handle door frame 3 countdown/ transition to door frame 4.
bandit_draw_open_3:                    ; da49
       movb @bandit_draw_3_timer,a     ; LD A,($DA14)      ; {Decrease #R$DA14 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_draw_3_timer     ; LD ($DA14),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bandit_draw_frame_1,a     ; LD A,($DA0D)      ; Grab the character frame index from #R$DA0D.
       .call @draw_door_frame_4        ; CALL $D6ED        ; {Call #R$D6ED and return.
       .ret                            ; RET               ; }
* Handles state countdown.
bandit_draw_open_4:                    ; da59
       li   de,todo_door_reset         ; LD DE,$D037       ; {Call #R$D5A3 with a callback to #R$D037.
       .call @hit_detection            ; CALL $D5A3        ; }
       movb @bandit_draw_4_timer,a     ; LD A,($DA15)      ; {Decrease #R$DA15 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_draw_4_timer     ; LD ($DA15),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bandit_draw_frame_2,a     ; LD A,($DA0E)      ; Grab the character frame index from #R$DA0E.
       .call @draw_door_frame_4        ; CALL $D6ED        ; {Call #R$D6ED and return.
       .ret                            ; RET               ; }
* Handles state countdown.
bandit_draw_open_5:                    ; da6f
       li   de,_d040                   ; LD DE,$D040       ; {Call #R$D5A3 with a callback to #R$D040.
       .call @hit_detection            ; CALL $D5A3        ; }
       movb @bandit_draw_5_timer,a     ; LD A,($DA16)      ; {Decrease #R$DA16 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_draw_5_timer     ; LD ($DA16),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,a                      ; INC A             ; {Else write $01 to #R$D2FE, call #R$D8A1 and return.
       movb a,@_d2fe                   ; LD ($D2FE),A      ; 
       .call @reset___                 ; CALL $D8A1        ; 
       .ret                            ; RET               ; }
* This routine looks at the current character state and routes to the correct
* subroutine.
bandit_draw_close_routing:             ; da85
       li   hl,bandit_draw_state_ref   ; LD HL,$DA11       ; {#REGa=#R$DA11.
       movb *hl,a                      ; LD A,(HL)         ; }
       sb   one,a                      ; DEC A             ; {Work out which routine to use based on the current state.
       jeq  bandit_draw_close_1        ; JR Z,$DA97        ; #TABLE(default,centre,centre)
       sb   one,a                      ; DEC A             ; { =h #REGa | =h Routine }
       jeq  bandit_draw_close_2        ; JR Z,$DAA7        ; { $01 | #R$DA97 }
       sb   one,a                      ; DEC A             ; { $02 | #R$DAA7 }
       jeq  bandit_draw_close_3        ; JR Z,$DAC0        ; { $03 | #R$DAC0 }
       sb   one,a                      ; DEC A             ; { $04 | #R$DAD0 }
       jeq  bandit_draw_close_4        ; JR Z,$DAD0        ; { $05 | #R$DAE0 }
       jmp  bandit_draw_close_5        ; JR $DAE0          ; TABLE#}
* Handles state countdown.
bandit_draw_close_1:                   ; da97
       movb @bandit_draw_1_timer,a     ; LD A,($DA12)      ; {Decrease #R$DA12 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_draw_1_timer     ; LD ($DA12),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bandit_draw_frame_3,a     ; LD A,($DA0F)      ; Grab the character frame index from #R$DA0F.
       .call @draw_door_frame_4        ; CALL $D6ED        ; {Call #R$D6ED and return.
       .ret                            ; RET               ; }
* Handles state countdown.
bandit_draw_close_2:                   ; daa7
       movb @bandit_draw_2_timer,a     ; LD A,($DA13)      ; {Decrease #R$DA13 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_draw_2_timer     ; LD ($DA13),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bandit_draw_frame_4,a     ; LD A,($DA10)      ; Grab the character frame index from #R$DA10.
       .call @draw_door_frame_4        ; CALL $D6ED        ; Call #R$D6ED.
       movb @bandit_draw,a             ; LD A,($DA0C)      ; {Return if #R$DA0C is zero.
       ; AND A                         ; AND A             ; 
       jne  !                          ; RET Z             ; }
       .ret                            ;                   
!
       ab   one,a                      ; INC A             ; {Else write $01 to #R$D2FE and return.
       movb a,@_d2fe                   ; LD ($D2FE),A      ; 
       .ret                            ; RET               ; }
* Handle door frame 4 countdown/ transition to door frame 3.
bandit_draw_close_3:                   ; dac0
       movb @bandit_draw_3_timer,a     ; LD A,($DA14)      ; {Decrease #R$DA14 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_draw_3_timer     ; LD ($DA14),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bandit_draw_frame_4,a     ; LD A,($DA10)      ; Grab the character frame index from #R$DA10.
       .call @draw_door_frame_3        ; CALL $D6DF        ; {Call #R$D6DF and return.
       .ret                            ; RET               ; }
* Handle door frame 3 countdown/ transition to door frame 2.
bandit_draw_close_4:                   ; dad0
       movb @bandit_draw_4_timer,a     ; LD A,($DA15)      ; {Decrease #R$DA15 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_draw_4_timer     ; LD ($DA15),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       ab   one,*hl                    ; INC (HL)          ; Move onto next character state.
       movb @bandit_draw_frame_4,a     ; LD A,($DA10)      ; Grab the character frame index from #R$DA10.
       .call @draw_door_frame_2        ; CALL $D6D1        ; {Call #R$D6D1 and return.
       .ret                            ; RET               ; }
* Handle door frame 2 countdown/ transition to door frame 1.
bandit_draw_close_5:                   ; dae0
       movb @bandit_draw_5_timer,a     ; LD A,($DA16)      ; {Decrease #R$DA16 by one, return if result is not zero.
       sb   one,a                      ; DEC A             ; 
       movb a,@bandit_draw_5_timer     ; LD ($DA16),A      ; 
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       .call @draw_door_frame_1        ; CALL $D664        ; Call #R$D664 (i.e. no character/ door is shut).
       .call @reset___                 ; CALL $D8A1        ; {Call #R$D8A1 and return.
       .ret                            ; RET               ; }

* Routine at DAEF
* 
* Used by the routine at #R$CE21.
_daef:
       .call @random_number            ; CALL $D8B0        ; 
       movb a,@c                       ; LD C,A            ; 
       movb @dueller_3+150,a           ; LD A,($5C78)      ; 
       ; RR C                          ; RR C              ; 
       ; RR C                          ; RR C              ; 
       ; RR C                          ; RR C              ; 
       ab   @c,a                       ; ADD A,C           ; 
       .ret                            ; RET               ; 

* Data block at DAFE
       byte >00,>3E,>C3,>00,>00,>00,>00,>00
       byte >31,>FF,>5F,>21,>82,>FD,>E5,>DD
       byte >21,>00,>40,>11,>00,>C0,>3E,>FF
       byte >37,>CD,>1D,>DB,>C3,>00,>00,>21
       byte >80,>1F,>CB,>7F,>28,>03,>21,>98
       byte >0C,>08,>13,>DD,>2B,>F3,>3E,>02
       byte >47,>10,>FE,>D3,>FE,>EE,>0F,>06
       byte >A4,>2D,>20,>F5,>05,>25,>F2,>2F
       byte >DB,>06,>2F,>10,>FE,>D3,>FE,>3E
       byte >0D,>06,>37,>10,>FE,>D3,>FE,>01
       byte >0E,>1D,>08,>6F,>C3,>5E,>DB,>7A
       byte >B3,>28,>0C,>DD,>6E,>00,>7C,>AD
       byte >67,>3E,>01,>37,>C3,>7C,>DB,>6C
       byte >18,>F4,>79,>CB,>78,>10,>FE,>30
       byte >04,>06,>24,>10,>FE,>D3,>FE,>06
       byte >20,>20,>EF,>05,>AF,>3C,>CB,>15
       byte >C2,>6B,>DB,>1B,>DD,>23,>06,>13
       byte >3E,>7F,>DB,>FE,>1F,>D0,>7A,>3C
       byte >C2,>55,>DB,>06,>3B,>10,>FE,>C9
       byte >F5,>3A,>48,>5C,>E6,>38,>0F,>0F
       byte >0F,>D3,>FE,>3E,>7F,>DB,>FE,>1F
       byte >FB,>38,>02,>CF,>0C,>F1,>C9,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>31,>FF,>5F,>21
       byte >00,>40,>11,>01,>40,>01,>FF,>1A
       byte >36,>00,>ED,>B0,>AF,>32,>3D,>5C
       byte >31,>FF,>5F,>DD,>21,>00,>40,>11
       byte >00,>C0,>3E,>FF,>37,>CD,>59,>DC
       byte >C3,>00,>00,>14,>08,>15,>F3,>3E
       byte >0F,>D3,>FE,>DB,>FE,>1F,>E6,>20
       byte >F6,>02,>4F,>BF,>C0,>CD,>E7,>05
       byte >30,>FA,>21,>15,>04,>10,>FE,>2B
       byte >7C,>B5,>20,>F9,>CD,>E3,>05,>30
       byte >EB,>06,>9C,>CD,>E3,>05,>30,>E4
       byte >3E,>C6,>B8,>30,>E0,>24,>20,>F1
       byte >06,>C9,>CD,>E7,>05,>30,>D5,>78
       byte >FE,>D4,>30,>F4,>CD,>E7,>05,>D0
       byte >79,>EE,>02,>4F,>26,>00,>06,>D8
       byte >18,>1F,>08,>20,>07,>30,>0F,>DD
       byte >75,>00,>18,>0F,>CB,>11,>AD,>C0
       byte >79,>1F,>4F,>13,>18,>07,>DD,>7E
       byte >00,>AD,>C0,>DD,>23,>1B,>08,>06
       byte >DA,>2E,>01,>CD,>E2,>DC,>D0,>3E
       byte >E5,>B8,>CB,>15,>06,>D8,>D2,>C9
       byte >DC,>7C,>AD,>67,>7A,>B3,>20,>CA
       byte >AF,>D3,>FE,>C9,>CD,>E6,>DC,>D0
       byte >00,>00,>00,>3A,>3D,>5C,>B7,>C2
       byte >00,>00,>3E,>0A,>3D,>20,>FD,>A7
       byte >04,>C8,>3E,>7F,>DB,>FE,>1F,>D0
       byte >A9,>E6,>20,>28,>F3,>79,>2F,>4F
       byte >E6,>07,>F6,>08,>D3,>FE,>37,>C9
       byte >50,>69,>73,>73,>20,>6F,>66,>66
       byte >20,>79,>6F,>75,>20,>44,>61,>79
       byte >67,>6F,>20,>54,>77,>61,>74,>73
       byte >21,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00

* Slot Numbering
slot_numbers_left:                     ; dfa0
       byte >FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF          ; {#UDGARRAY12,attr=56,scale=4,step=12;(#PC)-(#PC+$20)-$01-$60(numbering-01-06)
       byte >FF,>3F,>FC,>3F,>F8,>7F,>FE,>7F,>F8,>1F,>FC,>3F          ; 
       byte >FE,>3F,>FB,>9F,>FF,>BF,>FD,>7F,>FB,>FF,>FB,>FF          ; 
       byte >FF,>3F,>FF,>3F,>FE,>3F,>FB,>7F,>FC,>3F,>F8,>3F          ; 
       byte >FF,>3F,>FE,>7F,>FF,>BF,>F8,>1F,>FF,>9F,>F9,>DF          ; 
       byte >FF,>3F,>FC,>FF,>FB,>BF,>FE,>7F,>FB,>9F,>F9,>DF          ; 
       byte >FC,>1F,>F8,>1F,>FC,>7F,>FE,>7F,>FC,>3F,>FC,>3F          ; 
       byte >FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF          ; }
slot_numbers_right:                    ; e000
       byte >FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF          ; {#UDGARRAY12,attr=56,scale=4,step=12;(#PC)-(#PC+$20)-$01-$60(numbering-07-12)
       byte >F8,>3F,>FC,>3F,>FC,>3F,>FB,>8F,>FB,>EF,>FB,>C7          ; 
       byte >FF,>BF,>FB,>DF,>FB,>DF,>F3,>77,>F3,>CF,>F3,>BB          ; 
       byte >FF,>BF,>FC,>3F,>FC,>1F,>FB,>77,>FB,>EF,>FB,>F7          ; 
       byte >FE,>7F,>FB,>DF,>FF,>DF,>FB,>77,>FB,>EF,>FB,>CF          ; 
       byte >FF,>7F,>FB,>DF,>FF,>DF,>FB,>77,>FB,>EF,>FB,>BF          ; 
       byte >FF,>7F,>FC,>3F,>FC,>3F,>F1,>8F,>F1,>C7,>F1,>83          ; 
       byte >FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF          ; }

* Centrepiece
centrepiece:                           ; e060
       byte >E1,>00,>00,>07                                          ; {#UDGARRAY#(4,scale=4,step=4#FOR0,$40,$20||n|;(#PC+n)-(#PC+n)-$01-$08,#PEEK(#EVAL($ED0E+n*2));(#PC+n+$01)-(#PC+n+$02)-$01-$10,#PEEK(#EVAL($ED0F+n*2));(#PC+n+$03)-(#PC+n+$03)-$01-$08,#PEEK(#EVAL($ED11+n*2))||)(centrepiece)
       byte >E1,>03,>C0,>07                                          ; 
       byte >E0,>07,>E1,>07                                          ; 
       byte >E0,>8F,>F3,>07                                          ; 
       byte >E0,>FF,>FF,>07                                          ; 
       byte >E0,>FF,>FF,>07                                          ; 
       byte >E0,>FF,>FF,>07                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; 
       byte >E1,>00,>00,>87                                          ; }

* Top Door Frames
* 
* #UDGARRAY32,attr=4,scale=4,step=32;(#PC)-(#PC)-$01-$100;(#PC+$01)-(#PC+$09)-$01-$100,attr=24;(#PC+$0A)-(#PC+$0B)-$01-$100;(#PC+$0C)-(#PC+$14)-$01-$100,attr=24;(#PC+$15)-(#PC+$16)-$01-$100;(#PC+$17)-(#PC+$1F)-$01-$100,attr=24(doors-top)
doors_top:                             ; e0c0
       byte >00,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>00,>00,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>00,>00,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF
       byte >63,>F0,>00,>00,>00,>00,>00,>00,>00,>07,>63,>C3,>F0,>00,>00,>00,>00,>00,>00,>00,>07,>63,>C3,>F0,>00,>00,>00,>00,>00,>00,>00,>07
       byte >36,>F8,>00,>00,>00,>00,>00,>00,>00,>0F,>36,>66,>F8,>00,>00,>00,>00,>00,>00,>00,>0F,>36,>66,>F8,>00,>00,>00,>00,>00,>00,>00,>0F
       byte >1C,>DC,>00,>00,>00,>00,>00,>00,>00,>1F,>1C,>3C,>DC,>00,>00,>00,>00,>00,>00,>00,>1F,>1C,>3C,>DC,>00,>00,>00,>00,>00,>00,>00,>1F
       byte >1C,>CE,>00,>00,>00,>00,>00,>00,>00,>3B,>1C,>18,>CE,>00,>00,>00,>00,>00,>00,>00,>3B,>1C,>18,>CE,>00,>00,>00,>00,>00,>00,>00,>3B
       byte >36,>C7,>00,>00,>00,>00,>00,>00,>00,>73,>36,>3C,>C7,>00,>00,>00,>00,>00,>00,>00,>73,>36,>3C,>C7,>00,>00,>00,>00,>00,>00,>00,>73
       byte >63,>C3,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E3,>63,>66,>C3,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E3,>63,>66,>C3,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E3
       byte >C1,>C3,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>C3,>C1,>C3,>C3,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>C3,>C1,>C3,>C3,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>C3

* Left Side Wall
wall_left:                             ; e1c0
       byte >C1,>C3                                                  ; {#UDGARRAY#(2,scale=4,step=2#FOR0,$A0,$10||n|;(#PC+n)-(#PC+n)-$01-$08,#PEEK(#EVAL($ED80+n*2));(#PC+n+$01)-(#PC+n+$01)-$08-$10,#PEEK(#EVAL($ED81+n*2))||)(wall-left)
       byte >63,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >63,>C3                                                  ; 
       byte >C1,>C3                                                  ; 
       byte >C1,>C3                                                  ; 
       byte >63,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >63,>C3                                                  ; 
       byte >C1,>C3                                                  ; 
       byte >C1,>C3                                                  ; 
       byte >63,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >63,>C3                                                  ; 
       byte >C1,>C3                                                  ; 
       byte >C1,>C3                                                  ; 
       byte >63,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >63,>C3                                                  ; 
       byte >C1,>C3                                                  ; 
       byte >C1,>C3                                                  ; 
       byte >63,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >63,>C3                                                  ; 
       byte >C1,>C3                                                  ; 
       byte >C1,>C3                                                  ; 
       byte >63,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >63,>C3                                                  ; 
       byte >C1,>C3                                                  ; 
       byte >C1,>C3                                                  ; 
       byte >63,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >1C,>C3                                                  ; 
       byte >36,>C3                                                  ; 
       byte >63,>C3                                                  ; 
       byte >C1,>C3                                                  ; 
       byte >FF,>C3                                                  ; 
       byte >FF,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; 
       byte >18,>C3                                                  ; }

* Middle Wall Section
wall_middle:                           ; e270
       byte >C3,>C1,>C3,>C3                                          ; {#UDGARRAY#(4,attr=7,scale=4,step=4#FOR#(#PC),$E330,$20||n|;n-n-$01-$20,attr=24;(n+$01)-(n+$02)-$01-$20,attr=4;(n+$03)-(n+$03)-$01-$20,attr=24||#FOR$E350,$E3B0,$20||n|;n-n-$01-$20,attr=24;(n+$01)-(n+$02)-$01-$20,attr=16;(n+$03)-(n+$03)-$01-$20,attr=24||(wall-middle))
       byte >C3,>63,>66,>C3                                          ; 
       byte >C3,>36,>3C,>C3                                          ; 
       byte >C3,>1C,>18,>C3                                          ; 
       byte >C3,>1C,>3C,>C3                                          ; 
       byte >C3,>36,>66,>C3                                          ; 
       byte >C3,>63,>C3,>C3                                          ; 
       byte >C3,>C1,>81,>C3                                          ; 
       byte >C3,>C1,>C3,>C3                                          ; 
       byte >C3,>63,>66,>C3                                          ; 
       byte >C3,>36,>3C,>C3                                          ; 
       byte >C3,>1C,>18,>C3                                          ; 
       byte >C3,>1C,>3C,>C3                                          ; 
       byte >C3,>36,>66,>C3                                          ; 
       byte >C3,>63,>C3,>C3                                          ; 
       byte >C3,>C1,>81,>C3                                          ; 
       byte >C3,>C1,>C3,>C3                                          ; 
       byte >C3,>63,>66,>C3                                          ; 
       byte >C3,>36,>3C,>C3                                          ; 
       byte >C3,>1C,>18,>C3                                          ; 
       byte >C3,>1C,>3C,>C3                                          ; 
       byte >C3,>36,>66,>C3                                          ; 
       byte >C3,>63,>C3,>C3                                          ; 
       byte >C3,>C1,>81,>C3                                          ; 
       byte >C3,>C1,>C3,>C3                                          ; 
       byte >C3,>63,>66,>C3                                          ; 
       byte >C3,>36,>3C,>C3                                          ; 
       byte >C3,>1C,>18,>C3                                          ; 
       byte >C3,>1C,>3C,>C3                                          ; 
       byte >C3,>36,>66,>C3                                          ; 
       byte >C3,>63,>C3,>C3                                          ; 
       byte >C3,>C1,>81,>C3                                          ; 
       byte >C3,>C1,>C3,>C3                                          ; 
       byte >C3,>63,>66,>C3                                          ; 
       byte >C3,>36,>3C,>C3                                          ; 
       byte >C3,>1C,>18,>C3                                          ; 
       byte >C3,>1C,>3C,>C3                                          ; 
       byte >C3,>36,>66,>C3                                          ; 
       byte >C3,>63,>C3,>C3                                          ; 
       byte >C3,>C1,>81,>C3                                          ; 
       byte >C3,>C1,>C3,>C3                                          ; 
       byte >C3,>63,>66,>C3                                          ; 
       byte >C3,>36,>3C,>C3                                          ; 
       byte >C3,>1C,>18,>C3                                          ; 
       byte >C3,>1C,>3C,>C3                                          ; 
       byte >C3,>36,>66,>C3                                          ; 
       byte >C3,>63,>C3,>C3                                          ; 
       byte >C3,>C1,>81,>C3                                          ; 
       byte >C3,>C1,>C3,>C3                                          ; 
       byte >C3,>63,>66,>C3                                          ; 
       byte >C3,>36,>3C,>C3                                          ; 
       byte >C3,>1C,>18,>C3                                          ; 
       byte >C3,>1C,>3C,>C3                                          ; 
       byte >C3,>36,>66,>C3                                          ; 
       byte >C3,>63,>C3,>C3                                          ; 
       byte >C3,>C1,>81,>C3                                          ; 
       byte >C3,>FF,>FF,>C3                                          ; 
       byte >C3,>FF,>FF,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; 
       byte >C3,>18,>18,>C3                                          ; }

* Door Frame Right Side
door_frame_side:                       ; e3d0
       byte >C3                                                      ; {#UDGARRAY1,attr=24,scale=4,step=1;(#PC)-(#PC+$50)-$01-$08(door-side)
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; 
       byte >C3                                                      ; }

* Bottom Door Frames
* 
* #UDGARRAY32,attr=56,scale=4,step=32;(#PC)-(#PC)-$01-$100,attr=16;(#PC+$01)-(#PC+$09)-$01-$100;(#PC+$0A)-(#PC+$0B)-$01-$100,attr=16;(#PC+$0C)-(#PC+$14)-$01-$100;(#PC+$15)-(#PC+$16)-$01-$100,attr=16;(#PC+$17)-(#PC+$1F)-$01-$100(doors-bottom)
door_bottom:                           ; e428
       byte >18,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>18,>18,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>18,>18,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF
       byte >18,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>18,>18,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>18,>18,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF
       byte >18,>FC,>00,>00,>00,>00,>00,>00,>00,>3F,>18,>18,>FC,>00,>00,>00,>00,>00,>00,>00,>3F,>18,>18,>FC,>00,>00,>00,>00,>00,>00,>00,>3F
       byte >18,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>18,>18,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>18,>18,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF
       byte >18,>F0,>00,>00,>00,>00,>00,>00,>00,>0F,>18,>18,>F0,>00,>00,>00,>00,>00,>00,>00,>0F,>18,>18,>F0,>00,>00,>00,>00,>00,>00,>00,>0F
       byte >18,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>18,>18,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>18,>18,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF
       byte >FF,>C0,>00,>00,>00,>00,>00,>00,>00,>03,>FF,>FF,>C0,>00,>00,>00,>00,>00,>00,>00,>03,>FF,>FF,>C0,>00,>00,>00,>00,>00,>00,>00,>03
       byte >FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF

* Tellers
* 
* #UDGARRAY32,attr=48,scale=4,step=32;(#PC)-(#PC+$78)-$01-$100,attr=6;(#PC+$100)-(#PC+$280)-$01-$100;(#PC+$300)-(#PC+$380)-$01-$100,attr=40(tellers)
tellers:                               ; e528
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00
       byte >F8,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>F8,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>F8,>00,>00,>00,>00,>00,>00,>00,>00,>00
       byte >F8,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>F8,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>F8,>00,>00,>00,>00,>00,>00,>00,>00,>00
       byte >F8,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>F8,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>F8,>00,>00,>00,>00,>00,>00,>00,>00,>00
       byte >FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF
       byte >FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF
       byte >FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF
       byte >FD,>EF,>7B,>DE,>F7,>BF,>FE,>F7,>BD,>EF,>7B,>FD,>EF,>7B,>DE,>F7,>BF,>FE,>F7,>BD,>EF,>7B,>FD,>EF,>7B,>DE,>F7,>BF,>FE,>F7,>BD,>EF
       byte >FD,>EF,>7B,>DE,>F7,>FE,>3F,>F7,>BD,>EF,>7B,>FD,>EF,>7B,>DE,>F7,>FE,>3F,>F7,>BD,>EF,>7B,>FD,>EF,>7B,>DE,>F7,>FE,>3F,>F7,>BD,>EF
       byte >FD,>EF,>7B,>DE,>F7,>F8,>0F,>F7,>BD,>EF,>7B,>FD,>EF,>7B,>DE,>F7,>F8,>0F,>F7,>BD,>EF,>7B,>FD,>EF,>7B,>DE,>F7,>F8,>0F,>F7,>BD,>EF
       byte >FD,>EF,>7B,>DE,>F7,>C0,>01,>F7,>BD,>EF,>7B,>FD,>EF,>7B,>DE,>F7,>C0,>01,>F7,>BD,>EF,>7B,>FD,>EF,>7B,>DE,>F7,>C0,>01,>F7,>BD,>EF
       byte >FD,>EF,>7B,>DE,>FF,>00,>00,>7F,>BD,>EF,>7B,>FD,>EF,>7B,>DE,>FF,>00,>00,>7F,>BD,>EF,>7B,>FD,>EF,>7B,>DE,>FF,>00,>00,>7F,>BD,>EF
       byte >FD,>EF,>7B,>DE,>FE,>00,>00,>3F,>BD,>EF,>7B,>FD,>EF,>7B,>DE,>FE,>00,>00,>3F,>BD,>EF,>7B,>FD,>EF,>7B,>DE,>FE,>00,>1F,>BF,>BD,>EF
       byte >FD,>EF,>63,>D3,>10,>00,>00,>1F,>C9,>EF,>7B,>FD,>EF,>7B,>D3,>10,>00,>00,>1F,>C9,>EF,>7B,>FD,>EF,>63,>DE,>FC,>00,>2F,>1F,>C9,>EF
       byte >FD,>F3,>6B,>D4,>C4,>00,>00,>1F,>A5,>F7,>7B,>FD,>EF,>7B,>D4,>C4,>00,>00,>1F,>A5,>F7,>7B,>FD,>F3,>6B,>DE,>FC,>00,>56,>1F,>A5,>F7
       byte >FD,>EE,>4B,>D9,>2A,>00,>00,>0F,>B5,>BB,>7B,>FD,>EF,>7B,>D9,>2A,>00,>00,>0F,>B5,>BB,>7B,>FD,>EE,>4B,>DE,>F8,>00,>A4,>0F,>B5,>BB
       byte >FD,>C1,>9B,>DE,>5F,>00,>00,>07,>BD,>21,>7B,>FD,>EF,>7B,>DE,>5F,>00,>00,>07,>BD,>21,>7B,>FD,>C1,>9B,>DE,>F0,>00,>A8,>07,>BD,>21
       byte >FD,>FE,>DB,>DD,>B0,>00,>00,>07,>B2,>4F,>7B,>FD,>C0,>0B,>DD,>B0,>00,>00,>07,>B2,>4F,>7B,>FD,>FE,>DB,>DE,>F0,>01,>68,>07,>B2,>4F
       byte >FD,>FD,>3B,>DA,>08,>00,>00,>07,>A0,>2F,>7B,>FD,>80,>03,>DA,>08,>00,>00,>07,>A0,>2F,>7B,>FD,>FD,>3B,>DE,>F0,>01,>50,>07,>A0,>2F
       byte >FD,>FE,>1B,>DC,>44,>00,>00,>07,>AF,>AF,>7B,>FD,>00,>01,>DC,>44,>00,>00,>07,>AF,>AF,>7B,>FD,>FE,>1B,>DE,>F0,>00,>A0,>07,>AF,>AF
       byte >FF,>E8,>8F,>FD,>E7,>FF,>FF,>FF,>CA,>1F,>FF,>FF,>FF,>FF,>FD,>E7,>FF,>FF,>FF,>CA,>1F,>FF,>FF,>E8,>8F,>FF,>FF,>FD,>DF,>FF,>CA,>1F
       byte >FF,>F3,>EF,>F9,>43,>FF,>FF,>FF,>CF,>9F,>FF,>FE,>00,>01,>F9,>43,>FF,>FF,>FF,>CF,>9F,>FF,>FF,>F3,>EF,>FF,>FF,>FA,>2F,>FF,>CF,>9F
       byte >FF,>F2,>8F,>F9,>F3,>FF,>FF,>FF,>C2,>9F,>FF,>FF,>FF,>FF,>F9,>F3,>FF,>FF,>FF,>C2,>9F,>FF,>FF,>F2,>8F,>FF,>FF,>FB,>EF,>FF,>C2,>9F
       byte >F8,>13,>EC,>04,>54,>00,>00,>3C,>4F,>90,>00,>F8,>00,>00,>08,>54,>00,>00,>3C,>4F,>90,>00,>F8,>13,>EC,>00,>00,>04,>10,>3C,>4F,>90
       byte >F8,>10,>AD,>F5,>F4,>A0,>78,>42,>22,>28,>F0,>F9,>FF,>FF,>09,>F4,>A0,>78,>42,>22,>28,>F0,>F8,>10,>AD,>F0,>00,>07,>F0,>42,>22,>28
       byte >F8,>0B,>FA,>1A,>49,>50,>84,>3C,>10,>55,>08,>F8,>00,>00,>08,>49,>50,>84,>3C,>10,>55,>08,>F8,>0B,>FA,>18,>00,>07,>F4,>3C,>10,>55
       byte >F8,>04,>B5,>F6,>0A,>A8,>FC,>00,>0F,>A8,>F0,>F8,>FF,>FE,>04,>0A,>A8,>FC,>00,>0F,>A8,>F0,>F8,>04,>B5,>F4,>00,>03,>EA,>00,>0F,>A8
       byte >F8,>03,>EA,>EB,>F5,>50,>78,>00,>05,>54,>00,>F8,>00,>00,>03,>F5,>50,>78,>00,>05,>54,>00,>F8,>03,>EA,>E8,>00,>00,>54,>00,>05,>54
       byte >F8,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>F8,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>F8,>00,>00,>00,>00,>00,>00,>00,>00,>00

* Score Image (text)
score_text_image:                      ; e928
       byte >00,>00,>00,>00,>00,>00                                  ; {#UDGARRAY6,attr=7,scale=4,step=6;(#PC)-(#PC+$2A)-$01-$30;(#PC+$30)-(#PC+$5A)-$01-$30,attr=2(score-text)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >2E,>28,>28,>E8,>EC,>00                                  ; 
       byte >6E,>6C,>6C,>AC,>AA,>00                                  ; 
       byte >AA,>AA,>AA,>EA,>E6,>00                                  ; 
       byte >CE,>E6,>C6,>E6,>E2,>00                                  ; 
       byte >C0,>E2,>C6,>46,>60,>00                                  ; 
       byte >FC,>E0,>C6,>4E,>6C,>00                                  ; 
       byte >7A,>E0,>C6,>54,>6C,>00                                  ; 
       byte >06,>E2,>C6,>58,>60,>00                                  ; 
       byte >E6,>E6,>C6,>E4,>E2,>00                                  ; 
       byte >A6,>AA,>AA,>EA,>E6,>00                                  ; 
       byte >EC,>6C,>6C,>A6,>AA,>00                                  ; 
       byte >E8,>28,>28,>E2,>EC,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; }

* Lives Image (text)
lives_text_image:                      ; e988
       byte >00,>00,>00,>00,>00,>00                                  ; {#UDGARRAY6,attr=7,scale=4,step=6;(#PC)-(#PC+$42)-$01-$30;(#PC+$60)-(#PC+$84)-$01-$30,attr=3(lives-text)
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >00,>00,>00,>00,>00,>00                                  ; 
       byte >E0,>38,>EE,>EC,>2E,>00                                  ; 
       byte >A0,>28,>AA,>AA,>6E,>00                                  ; 
       byte >E0,>38,>EE,>E6,>AA,>00                                  ; 
       byte >E0,>38,>C6,>E2,>CE,>00                                  ; 
       byte >40,>10,>C6,>60,>C0,>00                                  ; 
       byte >40,>10,>44,>6C,>FC,>00                                  ; 
       byte >40,>10,>82,>6C,>7A,>00                                  ; 
       byte >40,>10,>C6,>60,>06,>00                                  ; 
       byte >E6,>38,>6C,>E2,>E6,>00                                  ; 
       byte >E6,>38,>6C,>E6,>A6,>00                                  ; 
       byte >BE,>28,>38,>AA,>EC,>00                                  ; 
       byte >FE,>38,>10,>EC,>E8,>00                                  ; }

       ;                               ;                   

* Door Buffer
* 
* Used by the routines at #R$6600, #R$C300 and #R$F950.
door_buffer:                           ; ea90
       byte >00,>00,>FF,>FF,>FF,>FF,>FF                              ; {#UDGARRAY7,scale=4,step=7;(#PC)-(#PC+$238)-$01-$38,$30(door-buffer)
       byte >00,>00,>88,>0F,>FF,>FF,>FF                              ; 
       byte >00,>00,>88,>00,>0F,>FF,>FF                              ; 
       byte >00,>00,>88,>00,>00,>07,>FF                              ; 
       byte >00,>00,>88,>00,>00,>00,>07                              ; 
       byte >00,>00,>88,>00,>00,>00,>00                              ; 
       byte >00,>00,>88,>00,>00,>00,>00                              ; 
       byte >00,>00,>88,>01,>F8,>00,>00                              ; 
       byte >00,>00,>88,>02,>87,>F8,>00                              ; 
       byte >00,>00,>88,>01,>40,>06,>00                              ; 
       byte >00,>00,>88,>02,>A0,>0A,>00                              ; 
       byte >00,>00,>88,>01,>51,>FA,>00                              ; 
       byte >00,>00,>88,>02,>A0,>0A,>00                              ; 
       byte >00,>00,>88,>01,>50,>0A,>00                              ; 
       byte >00,>00,>88,>02,>A0,>0A,>00                              ; 
       byte >00,>00,>88,>01,>50,>0A,>00                              ; 
       byte >00,>00,>88,>02,>A0,>0A,>07                              ; 
       byte >00,>00,>88,>01,>50,>0A,>04                              ; 
       byte >00,>01,>88,>02,>A0,>0A,>05                              ; 
       byte >00,>03,>88,>01,>50,>0A,>05                              ; 
       byte >00,>07,>88,>02,>A0,>0A,>04                              ; 
       byte >00,>0F,>88,>01,>50,>0A,>04                              ; 
       byte >00,>0F,>88,>02,>AF,>E2,>04                              ; 
       byte >00,>1F,>88,>01,>7F,>F2,>05                              ; 
       byte >00,>1F,>88,>02,>FF,>FA,>05                              ; 
       byte >00,>1F,>88,>01,>FF,>FE,>05                              ; 
       byte >00,>1F,>88,>00,>00,>00,>06                              ; 
       byte >00,>1F,>88,>00,>00,>00,>00                              ; 
       byte >00,>1F,>88,>00,>00,>00,>00                              ; 
       byte >00,>1F,>88,>03,>FF,>FE,>00                              ; 
       byte >00,>FF,>88,>01,>00,>06,>00                              ; 
       byte >00,>5F,>88,>02,>80,>0A,>00                              ; 
       byte >00,>33,>88,>01,>53,>E2,>00                              ; 
       byte >00,>1C,>88,>02,>A0,>0A,>00                              ; 
       byte >00,>09,>88,>01,>50,>0A,>00                              ; 
       byte >00,>1F,>88,>02,>A0,>0A,>00                              ; 
       byte >00,>20,>88,>01,>50,>0A,>00                              ; 
       byte >00,>3F,>88,>02,>A0,>0A,>00                              ; 
       byte >00,>20,>88,>01,>50,>0A,>00                              ; 
       byte >00,>3E,>88,>02,>A0,>0A,>00                              ; 
       byte >00,>31,>8B,>F1,>50,>0A,>00                              ; 
       byte >00,>43,>8A,>12,>A0,>0A,>00                              ; 
       byte >00,>88,>8A,>71,>50,>0A,>00                              ; 
       byte >00,>9E,>8A,>92,>A0,>0A,>00                              ; 
       byte >01,>18,>8A,>91,>50,>0A,>00                              ; 
       byte >01,>1E,>8A,>92,>A1,>E2,>00                              ; 
       byte >00,>8A,>8A,>91,>7F,>F2,>00                              ; 
       byte >00,>9E,>8A,>72,>BF,>FA,>00                              ; 
       byte >00,>41,>8A,>11,>7F,>FE,>00                              ; 
       byte >00,>3F,>8A,>D2,>FE,>00,>00                              ; 
       byte >00,>01,>8A,>D0,>00,>00,>00                              ; 
       byte >00,>01,>8A,>50,>00,>00,>00                              ; 
       byte >00,>01,>8A,>50,>00,>00,>00                              ; 
       byte >00,>00,>8A,>10,>00,>00,>00                              ; 
       byte >00,>00,>8A,>70,>00,>00,>00                              ; 
       byte >00,>00,>8B,>80,>00,>00,>00                              ; 
       byte >00,>00,>88,>00,>00,>00,>00                              ; 
       byte >00,>00,>88,>00,>00,>00,>00                              ; 
       byte >00,>00,>88,>00,>03,>FF,>C0                              ; 
       byte >00,>00,>88,>01,>FE,>00,>40                              ; 
       byte >00,>00,>88,>3F,>00,>01,>40                              ; 
       byte >00,>00,>88,>40,>00,>02,>40                              ; 
       byte >00,>00,>88,>20,>00,>FD,>40                              ; 
       byte >00,>00,>88,>50,>1F,>01,>41                              ; 
       byte >00,>00,>88,>2A,>E0,>01,>44                              ; 
       byte >00,>00,>88,>55,>00,>01,>45                              ; 
       byte >00,>00,>88,>2A,>00,>01,>45                              ; 
       byte >00,>00,>88,>55,>00,>01,>44                              ; 
       byte >00,>00,>88,>2A,>00,>01,>44                              ; 
       byte >00,>00,>88,>55,>00,>01,>44                              ; 
       byte >00,>00,>88,>2A,>00,>01,>44                              ; 
       byte >00,>00,>88,>55,>00,>01,>45                              ; 
       byte >00,>00,>88,>2A,>00,>01,>45                              ; 
       byte >00,>00,>88,>55,>00,>01,>46                              ; 
       byte >00,>00,>88,>2A,>00,>01,>44                              ; 
       byte >00,>00,>88,>55,>00,>00,>40                              ; 
       byte >00,>00,>88,>2A,>00,>00,>40                              ; 
       byte >00,>00,>88,>55,>00,>0F,>40                              ; 
       byte >00,>0B,>88,>2A,>01,>FF,>C0                              ; 
       byte >00,>1C,>88,>55,>3F,>FF,>C0                              ; 
       byte >00,>B1,>88,>2F,>FF,>E0,>00                              ; 
       byte >01,>43,>88,>5F,>FC,>00,>00                              ; 
       byte >02,>BF,>88,>3F,>00,>00,>00                              ; 
       byte >05,>55,>88,>5C,>00,>00,>07                              ; 
       byte >02,>AA,>88,>00,>00,>00,>FF                              ; 
       byte >01,>55,>88,>00,>00,>3F,>FF                              ; 
       byte >00,>00,>88,>00,>3F,>FF,>FF                              ; 
       byte >00,>00,>FF,>FF,>FF,>FF,>FF                              ; }

       ;                               ;                   

* Attribute Data
_ed00:
       byte >00,>38,>38,>38,>38,>38,>38,>38,>38,>38,>38,>38,>38,>00,>18,>03,>03,>18,>00,>38,>38,>38,>38,>38,>38,>38,>38,>38,>38,>38,>38,>00
       byte >00,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>00,>18,>30,>30,>18,>00,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>00
       byte >00,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>00,>18,>30,>30,>18,>00,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>0D,>00
       byte >04,>18,>18,>18,>18,>18,>18,>18,>18,>18,>04,>04,>18,>18,>18,>18,>18,>18,>18,>18,>18,>04,>04,>18,>18,>18,>18,>18,>18,>18,>18,>18
       byte >04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18
       byte >04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18
       byte >04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18
       byte >04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18
       byte >04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18
       byte >04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18
       byte >04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18,>04,>04,>18,>30,>30,>30,>30,>30,>30,>30,>18
       byte >10,>18,>30,>30,>30,>30,>30,>30,>30,>18,>10,>10,>18,>30,>30,>30,>30,>30,>30,>30,>18,>10,>10,>18,>30,>30,>30,>30,>30,>30,>30,>18
       byte >10,>18,>30,>30,>30,>30,>30,>30,>30,>18,>10,>10,>18,>30,>30,>30,>30,>30,>30,>30,>18,>10,>10,>18,>30,>30,>30,>30,>30,>30,>30,>18
       byte >10,>18,>30,>30,>30,>30,>30,>30,>30,>18,>10,>10,>18,>30,>30,>30,>30,>30,>30,>30,>18,>10,>10,>18,>30,>30,>30,>30,>30,>30,>30,>18
       byte >10,>18,>30,>30,>30,>30,>30,>30,>30,>18,>10,>10,>18,>30,>30,>30,>30,>30,>30,>30,>18,>10,>10,>18,>30,>30,>30,>30,>30,>30,>30,>18
       byte >10,>38,>38,>38,>38,>38,>38,>38,>38,>38,>10,>10,>38,>38,>38,>38,>38,>38,>38,>38,>38,>10,>10,>38,>38,>38,>38,>38,>38,>38,>38,>38
       byte >06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06
       byte >06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06,>06
       byte >30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30
       byte >30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30,>30
       byte >28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28,>28
       byte >03,>03,>03,>03,>03,>03,>05,>05,>05,>05,>05,>05,>05,>05,>05,>03,>03,>03,>03,>03,>03,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07
       byte >07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>05,>05,>05,>05,>05,>05,>05,>05,>05,>05
       byte >05,>02,>02,>02,>02,>02,>02,>02,>02,>02,>02,>02,>02,>02,>02,>02,>03,>03,>03,>03,>03,>03,>02,>02,>02,>02,>02,>02,>02,>02,>02,>02

* BANG Frames
bang_frame_1:                          ; f000
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; {#BANG(bang-1*)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>62,>52,>00,>00,>00                          ; 
       byte >00,>00,>00,>55,>55,>00,>00,>00                          ; 
       byte >00,>00,>00,>22,>24,>00,>00,>00                          ; 
       byte >00,>00,>00,>55,>55,>00,>00,>00                          ; 
       byte >00,>00,>00,>65,>52,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; }
bang_frame_2:                          ; f100
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; {#BANG(bang-2*)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>E8,>28,>EE,>28,>00,>00                          ; 
       byte >00,>00,>AC,>6C,>AA,>6C,>00,>00                          ; 
       byte >00,>00,>EA,>AA,>EE,>AA,>00,>00                          ; 
       byte >00,>00,>E6,>C6,>EE,>E6,>00,>00                          ; 
       byte >00,>00,>62,>82,>64,>E2,>00,>00                          ; 
       byte >00,>00,>6C,>44,>74,>E0,>00,>00                          ; 
       byte >00,>00,>6C,>FE,>5C,>EE,>00,>00                          ; 
       byte >00,>00,>62,>FE,>4C,>E6,>00,>00                          ; 
       byte >00,>00,>E6,>C6,>EE,>E6,>00,>00                          ; 
       byte >00,>00,>EA,>EE,>EE,>AA,>00,>00                          ; 
       byte >00,>00,>AC,>AA,>AA,>6C,>00,>00                          ; 
       byte >00,>00,>E8,>EE,>EE,>28,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; }
bang_frame_3:                          ; f200
       byte >FC,>C0,>0C,>C0,>FC,>FC,>0C,>C0                          ; {#BANG(bang-3*)
       byte >FC,>E0,>1C,>E0,>FC,>FC,>1C,>E0                          ; 
       byte >DC,>F0,>3C,>F0,>DC,>EC,>3C,>F0                          ; 
       byte >EC,>F8,>7C,>F8,>EC,>DC,>7C,>F8                          ; 
       byte >FC,>DC,>EC,>EC,>FC,>FC,>EC,>EC                          ; 
       byte >FC,>EC,>DC,>DC,>FC,>FC,>DC,>DC                          ; 
       byte >FC,>7C,>F8,>7C,>FC,>FC,>FC,>7C                          ; 
       byte >FC,>3C,>F0,>3C,>FC,>FC,>FC,>3C                          ; 
       byte >3C,>1C,>E0,>1C,>3C,>30,>FC,>1C                          ; 
       byte >3C,>0C,>E0,>1C,>3E,>30,>FC,>0C                          ; 
       byte >3C,>F8,>70,>38,>3F,>30,>FC,>00                          ; 
       byte >3C,>F0,>30,>30,>3F,>B0,>FC,>00                          ; 
       byte >3C,>F0,>FF,>FC,>37,>F0,>FC,>FC                          ; 
       byte >3C,>F8,>FF,>FC,>33,>F0,>FC,>FC                          ; 
       byte >3C,>0C,>FF,>FC,>31,>F0,>FC,>7C                          ; 
       byte >3C,>1C,>FF,>FC,>30,>F0,>FC,>3C                          ; 
       byte >FC,>3C,>F8,>7C,>FC,>FC,>FC,>3C                          ; 
       byte >FC,>7C,>F0,>3C,>FC,>FC,>FC,>7C                          ; 
       byte >FC,>EC,>FC,>FC,>FC,>FC,>DC,>EC                          ; 
       byte >FC,>DC,>FC,>FC,>FC,>FC,>EC,>DC                          ; 
       byte >DC,>F8,>EC,>DC,>DC,>EC,>7C,>F8                          ; 
       byte >EC,>F0,>DC,>EC,>EC,>DC,>3C,>F0                          ; 
       byte >FC,>E0,>FC,>FC,>FC,>FC,>1C,>E0                          ; 
       byte >FC,>C0,>FC,>FC,>FC,>FC,>0C,>C0                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; }
bang_frame_4:                          ; f300
       byte >40,>40,>04,>C0,>50,>68,>08,>80                          ; {#BANG(bang-4*)
       byte >58,>60,>04,>E0,>58,>68,>08,>C0                          ; 
       byte >58,>60,>2C,>E0,>58,>E8,>28,>40                          ; 
       byte >68,>70,>6C,>70,>C8,>DC,>7C,>58                          ; 
       byte >FC,>D8,>EC,>68,>EC,>FC,>6C,>4C                          ; 
       byte >FC,>C8,>CC,>4C,>EC,>FC,>4C,>DC                          ; 
       byte >FC,>68,>EC,>58,>FC,>78,>5C,>F8                          ; 
       byte >F8,>7C,>FC,>78,>FC,>78,>D8,>F8                          ; 
       byte >38,>5C,>E8,>58,>BC,>38,>F8,>9C                          ; 
       byte >3C,>0C,>E0,>18,>BC,>38,>78,>9C                          ; 
       byte >3C,>5C,>70,>3C,>BC,>30,>78,>10                          ; 
       byte >34,>74,>30,>3C,>1E,>B0,>78,>00                          ; 
       byte >34,>F0,>7C,>F8,>17,>F0,>30,>A4                          ; 
       byte >34,>F8,>7E,>F8,>33,>F0,>78,>EC                          ; 
       byte >3C,>0C,>7E,>FC,>33,>F0,>78,>E8                          ; 
       byte >3C,>1C,>FF,>FC,>32,>F0,>F8,>B8                          ; 
       byte >7C,>38,>FB,>78,>F8,>F8,>F8,>38                          ; 
       byte >7C,>78,>F1,>38,>F8,>78,>F8,>78                          ; 
       byte >7C,>7C,>79,>78,>FC,>78,>5C,>EC                          ; 
       byte >FC,>4C,>7C,>7C,>7C,>FC,>6C,>DC                          ; 
       byte >DC,>68,>68,>DC,>58,>EC,>6C,>FC                          ; 
       byte >EC,>F8,>D8,>6C,>C8,>5C,>38,>F8                          ; 
       byte >7C,>E8,>FC,>F8,>D8,>78,>3C,>F8                          ; 
       byte >7C,>E8,>FC,>78,>F8,>78,>1C,>C8                          ; 
       byte >18,>40,>48,>28,>18,>30,>18,>08                          ; 
       byte >08,>40,>60,>20,>00,>10,>08,>00                          ; 
       byte >00,>00,>20,>00,>00,>00,>08,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; }
bang_frame_5:                          ; f400
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; {#BANG(bang-5*)
       byte >18,>20,>00,>C0,>00,>40,>00,>00                          ; 
       byte >00,>20,>00,>E0,>10,>60,>08,>00                          ; 
       byte >28,>70,>04,>20,>40,>54,>08,>40                          ; 
       byte >28,>50,>44,>28,>24,>F0,>40,>40                          ; 
       byte >68,>48,>48,>0C,>64,>74,>04,>84                          ; 
       byte >7C,>E8,>4C,>58,>68,>38,>14,>C8                          ; 
       byte >38,>F8,>7C,>78,>48,>70,>10,>68                          ; 
       byte >38,>58,>68,>58,>18,>38,>B0,>08                          ; 
       byte >18,>08,>60,>10,>1C,>10,>30,>84                          ; 
       byte >38,>5C,>60,>30,>3C,>10,>38,>84                          ; 
       byte >14,>74,>20,>20,>9C,>10,>78,>80                          ; 
       byte >14,>70,>30,>74,>95,>08,>30,>04                          ; 
       byte >14,>B8,>34,>30,>35,>98,>20,>0C                          ; 
       byte >1C,>8C,>36,>78,>33,>90,>28,>88                          ; 
       byte >3C,>9C,>35,>F4,>12,>D0,>28,>88                          ; 
       byte >18,>08,>39,>60,>10,>D8,>B0,>B8                          ; 
       byte >30,>48,>30,>28,>30,>78,>30,>38                          ; 
       byte >38,>6C,>F9,>70,>78,>30,>50,>68                          ; 
       byte >38,>4C,>BD,>78,>70,>38,>68,>48                          ; 
       byte >5C,>00,>68,>D8,>58,>68,>E8,>48                          ; 
       byte >2C,>C8,>58,>68,>48,>48,>B0,>DC                          ; 
       byte >38,>00,>70,>30,>50,>50,>A8,>5C                          ; 
       byte >7C,>40,>F4,>68,>F8,>70,>0C,>C8                          ; 
       byte >3C,>08,>48,>68,>98,>20,>00,>A8                          ; 
       byte >24,>08,>08,>08,>80,>20,>08,>A8                          ; 
       byte >08,>40,>20,>20,>10,>10,>08,>08                          ; 
       byte >08,>40,>20,>20,>10,>10,>08,>00                          ; 
       byte >00,>00,>20,>00,>00,>10,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; }
bang_frame_6:                          ; f500
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; {#BANG(bang-6*)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>40,>00,>80,>00,>00,>00,>00                          ; 
       byte >00,>40,>00,>A0,>00,>80,>48,>00                          ; 
       byte >20,>00,>04,>20,>04,>24,>00,>40                          ; 
       byte >24,>00,>00,>40,>40,>04,>04,>80                          ; 
       byte >00,>20,>14,>68,>40,>40,>04,>08                          ; 
       byte >10,>60,>44,>48,>40,>28,>80,>28                          ; 
       byte >00,>20,>48,>00,>00,>10,>10,>00                          ; 
       byte >08,>00,>08,>20,>28,>00,>00,>04                          ; 
       byte >10,>44,>28,>20,>88,>10,>48,>80                          ; 
       byte >00,>44,>20,>44,>80,>00,>28,>80                          ; 
       byte >04,>00,>04,>20,>24,>10,>00,>04                          ; 
       byte >04,>00,>06,>08,>35,>10,>00,>84                          ; 
       byte >20,>94,>15,>A4,>01,>00,>08,>80                          ; 
       byte >08,>84,>19,>20,>00,>08,>80,>80                          ; 
       byte >28,>04,>00,>08,>00,>48,>20,>18                          ; 
       byte >28,>08,>A1,>00,>02,>48,>10,>08                          ; 
       byte >00,>48,>A9,>20,>02,>00,>00,>00                          ; 
       byte >04,>00,>28,>80,>40,>20,>40,>40                          ; 
       byte >04,>4C,>08,>08,>48,>00,>10,>C0                          ; 
       byte >00,>44,>20,>18,>00,>40,>80,>18                          ; 
       byte >14,>04,>A0,>40,>00,>50,>80,>88                          ; 
       byte >50,>40,>00,>40,>90,>10,>28,>00                          ; 
       byte >00,>00,>08,>00,>88,>20,>20,>A0                          ; 
       byte >00,>00,>00,>00,>80,>20,>00,>20                          ; 
       byte >08,>48,>20,>20,>10,>00,>08,>08                          ; 
       byte >08,>48,>20,>28,>00,>10,>08,>08                          ; 
       byte >00,>00,>20,>08,>00,>10,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; }
* #UDGARRAY*bang-1,10;bang-2;bang-3;bang-3;bang-3;bang-4;bang-5;bang-6(bang-frames)

* Sheriffs Badge
* 
badge_image:                           ; f600
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; {#UDGARRAY8,attr=6,scale=4,step=8;(#PC)-(#PC+$247)-$01-$40(badge)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>03,>C0,>00,>00,>00                          ; 
       byte >00,>00,>00,>07,>E0,>00,>00,>00                          ; 
       byte >00,>00,>00,>07,>E0,>00,>00,>00                          ; 
       byte >00,>00,>00,>05,>A0,>00,>00,>00                          ; 
       byte >00,>00,>00,>02,>40,>00,>00,>00                          ; 
       byte >00,>00,>00,>03,>C0,>00,>00,>00                          ; 
       byte >00,>00,>00,>07,>E0,>00,>00,>00                          ; 
       byte >00,>00,>00,>07,>E0,>00,>00,>00                          ; 
       byte >00,>00,>00,>0F,>F0,>00,>00,>00                          ; 
       byte >00,>00,>00,>0F,>F0,>00,>00,>00                          ; 
       byte >00,>00,>00,>1F,>F8,>00,>00,>00                          ; 
       byte >00,>00,>00,>0F,>F8,>00,>00,>00                          ; 
       byte >00,>00,>00,>15,>F0,>00,>00,>00                          ; 
       byte >00,>00,>00,>2A,>E8,>00,>00,>00                          ; 
       byte >00,>00,>00,>15,>54,>00,>00,>00                          ; 
       byte >00,>00,>00,>20,>04,>00,>00,>00                          ; 
       byte >1C,>00,>00,>1F,>F8,>00,>00,>38                          ; 
       byte >3E,>00,>00,>7F,>FE,>00,>00,>7C                          ; 
       byte >3E,>00,>01,>FF,>FF,>80,>00,>7C                          ; 
       byte >2A,>F8,>07,>FF,>FF,>E0,>1F,>54                          ; 
       byte >15,>FF,>EF,>FF,>FF,>F7,>FF,>A8                          ; 
       byte >03,>7F,>DF,>FF,>FF,>FB,>FE,>C0                          ; 
       byte >00,>FF,>BF,>FF,>FF,>FD,>FF,>00                          ; 
       byte >00,>7F,>7F,>FF,>FF,>FE,>FE,>00                          ; 
       byte >00,>BE,>FF,>FF,>FF,>FF,>7D,>00                          ; 
       byte >00,>56,>FF,>FF,>FF,>FF,>6A,>00                          ; 
       byte >00,>29,>FF,>FF,>FF,>FF,>94,>00                          ; 
       byte >00,>15,>FF,>FF,>FF,>FF,>A8,>00                          ; 
       byte >00,>0B,>FF,>FF,>FF,>FF,>D0,>00                          ; 
       byte >00,>0B,>FF,>FF,>FF,>FF,>D0,>00                          ; 
       byte >00,>07,>AA,>AA,>AA,>AA,>E0,>00                          ; 
       byte >00,>07,>FF,>FF,>FF,>FF,>E0,>00                          ; 
       byte >00,>07,>E6,>D1,>8D,>11,>E0,>00                          ; 
       byte >00,>07,>DA,>D7,>B5,>77,>E0,>00                          ; 
       byte >00,>07,>5E,>D7,>B5,>76,>E0,>00                          ; 
       byte >00,>07,>EE,>13,>B5,>33,>E0,>00                          ; 
       byte >00,>07,>76,>D7,>8D,>76,>E0,>00                          ; 
       byte >00,>16,>FA,>D7,>AD,>77,>68,>00                          ; 
       byte >00,>17,>5A,>D7,>B5,>76,>E8,>00                          ; 
       byte >00,>36,>E6,>D0,>B5,>77,>6C,>00                          ; 
       byte >00,>33,>7F,>FF,>FF,>FE,>EC,>00                          ; 
       byte >00,>7B,>00,>00,>00,>00,>DE,>00                          ; 
       byte >00,>7B,>AA,>AA,>AA,>AB,>9E,>00                          ; 
       byte >00,>FD,>FF,>55,>55,>FF,>BF,>00                          ; 
       byte >01,>FD,>FF,>FF,>FF,>FF,>BF,>80                          ; 
       byte >01,>FE,>FF,>FF,>FF,>FF,>7F,>80                          ; 
       byte >03,>FE,>FF,>FF,>FF,>FF,>7F,>C0                          ; 
       byte >07,>FF,>7F,>FF,>FF,>FE,>FF,>E0                          ; 
       byte >07,>FE,>BF,>FF,>FF,>FD,>7F,>E0                          ; 
       byte >3F,>D5,>5F,>FF,>FF,>FA,>AB,>FC                          ; 
       byte >7E,>AA,>0F,>FF,>FF,>F0,>55,>7E                          ; 
       byte >7D,>40,>07,>FF,>FF,>E0,>02,>BE                          ; 
       byte >28,>00,>01,>FF,>FF,>C0,>00,>1E                          ; 
       byte >54,>00,>00,>7F,>FF,>00,>00,>2A                          ; 
       byte >28,>00,>00,>0F,>FD,>80,>00,>14                          ; 
       byte >00,>00,>00,>60,>02,>00,>00,>00                          ; 
       byte >00,>00,>00,>5F,>FC,>00,>00,>00                          ; 
       byte >00,>00,>00,>2F,>F8,>00,>00,>00                          ; 
       byte >00,>00,>00,>1F,>F4,>00,>00,>00                          ; 
       byte >00,>00,>00,>0F,>E8,>00,>00,>00                          ; 
       byte >00,>00,>00,>17,>F0,>00,>00,>00                          ; 
       byte >00,>00,>00,>0F,>E0,>00,>00,>00                          ; 
       byte >00,>00,>00,>07,>D0,>00,>00,>00                          ; 
       byte >00,>00,>00,>0B,>E0,>00,>00,>00                          ; 
       byte >00,>00,>00,>07,>C0,>00,>00,>00                          ; 
       byte >00,>00,>00,>02,>A0,>00,>00,>00                          ; 
       byte >00,>00,>00,>01,>40,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>03,>C0,>00,>00,>00                          ; 
       byte >00,>00,>00,>07,>E0,>00,>00,>00                          ; 
       byte >00,>00,>00,>03,>A0,>00,>00,>00                          ; 
       byte >00,>00,>00,>05,>40,>00,>00,>00                          ; 
       byte >00,>00,>00,>02,>80,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; }

* ff
* 
* Used by the routine at #R$CD47.
_f880:
       movb @bytes+12,b                ; LD B,$0C          ; 
_f882:
       .push bc                        ; PUSH BC           ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       .call @_f894                    ; CALL $F894        ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $F882        ; 
       jne  _f882                      ;                   
       sb   a,a                        ; XOR A             ; 
       ; OUT ($FE),A                   ; OUT ($FE),A       ; 
       movb @bytes+64,b                ; LD B,$40          ; 
_f890:
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $F890        ; 
       jne  _f890                      ;                   
       .ret                            ; RET               ; 
_f894:
       movb @bytes+56,a                ; LD A,$38          ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       .call @_f8b2                    ; CALL $F8B2        ; 
       sb   a,a                        ; XOR A             ; 
       ; OUT ($FE),A                   ; OUT ($FE),A       ; 
       movb @bytes+4,b                 ; LD B,$04          ; 
_f8a0:
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $F8A0        ; 
       jne  _f8a0                      ;                   
       movb @bytes+7,a                 ; LD A,$07          ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       .call @_f8b2                    ; CALL $F8B2        ; 
       ; OUT ($FE),A                   ; OUT ($FE),A       ; 
       movb @bytes+3,b                 ; LD B,$03          ; 
_f8ae:
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $F8AE        ; 
       jne  _f8ae                      ;                   
       .ret                            ; RET               ; 
_f8b2:
       li   hl,_5860                   ; LD HL,$5860       ; 
       li   de,_5860+1                 ; LD DE,$5861       ; 
       li   bc,>01df                   ; LD BC,$01DF       ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .ldir                           ; LDIR              ; 
       .ret                            ; RET               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 

* Dollar Sign
* 
* These are the scrolling dollar signs in the centre of the header.
dollar_image:                          ; f900
       byte >00,>00                                                  ; {#UDGARRAY2,attr=48,scale=4,step=2;(#PC)-(#PC+$4F)-$01-$10(dollars)
       byte >02,>80                                                  ; 
       byte >0F,>C0                                                  ; 
       byte >1F,>F0                                                  ; 
       byte >1A,>B0                                                  ; 
       byte >1A,>80                                                  ; 
       byte >1A,>80                                                  ; 
       byte >1F,>E0                                                  ; 
       byte >0F,>F0                                                  ; 
       byte >02,>B0                                                  ; 
       byte >02,>B0                                                  ; 
       byte >1A,>B0                                                  ; 
       byte >1F,>F0                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >02,>80                                                  ; 
       byte >00,>00                                                  ; 
_f920:
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >02,>80                                                  ; 
       byte >0F,>C0                                                  ; 
       byte >1F,>F0                                                  ; 
       byte >1A,>B0                                                  ; 
       byte >1A,>80                                                  ; 
       byte >1A,>80                                                  ; 
       byte >1F,>E0                                                  ; 
_f940:
       byte >0F,>F0                                                  ; 
       byte >02,>B0                                                  ; 
       byte >02,>B0                                                  ; 
       byte >1A,>B0                                                  ; 
       byte >1F,>F0                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >02,>80                                                  ; 
       byte >00,>00                                                  ; }

* Dollar Sign (scrolling).
dollar_scroll:                         ; f950
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
* This entry point is used by the routine at #R$C7C0.
_f960:
       li   hl,_5b00                   ; LD HL,$5B00       ; {Blanks 254 bytes from #R$5B00 onwards.
       li   de,_5b01                   ; LD DE,$5B01       ; 
       li   bc,>00fe                   ; LD BC,$00FE       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .ldir                           ; LDIR              ; }
       li   de,_f940                   ; LD DE,$F940       ; {Sends #R$F940 to #R$F9C3.
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       .call @dollar_scroll_draw       ; CALL $F9C3        ; }
       li   de,>0006                   ; LD DE,$0006       ; {#HTML(Makes a noise using the <a href="https://skoolkid.github.io/rom/asm/03B5.html">BEEP</a> routine.)
       li   hl,>0cf8                   ; LD HL,$0CF8       ; #TABLE(default,centre)
       .call @>03b5                    ; CALL $03B5        ; { =h Pitch | =h Duration }
                                                           ; { $0CF8 | $0006 }
                                                           ; TABLE#}
       li   de,dollar_image            ; LD DE,$F900       ; {Sends #R$F900 to #R$F9C3.
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       .call @dollar_scroll_draw       ; CALL $F9C3        ; }
       li   de,>0006                   ; LD DE,$0006       ; {#HTML(Makes a noise using the <a href="https://skoolkid.github.io/rom/asm/03B5.html">BEEP</a> routine.)
       li   hl,>079e                   ; LD HL,$079E       ; #TABLE(default,centre)
       .call @>03b5                    ; CALL $03B5        ; { =h Pitch | =h Duration }
                                                           ; { $079E | $0006 }
                                                           ; TABLE#}
       li   de,_f920                   ; LD DE,$F920       ; {Sends #R$F920 to #R$F9C3.
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       .call @dollar_scroll_draw       ; CALL $F9C3        ; }
       li   de,>0006                   ; LD DE,$0006       ; {#HTML(Makes a noise using the <a href="https://skoolkid.github.io/rom/asm/03B5.html">BEEP</a> routine.)
       li   hl,>029e                   ; LD HL,$029E       ; #TABLE(default,centre)
       .call @>03b5                    ; CALL $03B5        ; { =h Pitch | =h Duration }
                                                           ; { $029E | $0006 }
                                                           ; TABLE#}
       li   de,dollar_image            ; LD DE,$F900       ; {Sends #R$F900 to #R$F9C3.
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       .call @dollar_scroll_draw       ; CALL $F9C3        ; }
       li   de,>0020                   ; LD DE,$0020       ; {#HTML(Makes a noise using the <a href="https://skoolkid.github.io/rom/asm/03B5.html">BEEP</a> routine.)
       li   hl,>0209                   ; LD HL,$0209       ; #TABLE(default,centre)
       .call @>03b5                    ; CALL $03B5        ; { =h Pitch | =h Duration }
                                                           ; { $0209 | $0020 }
                                                           ; TABLE#}
       li   de,_f920                   ; LD DE,$F920       ; {Sends #R$F920 to #R$F9C3.
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       .call @dollar_scroll_draw       ; CALL $F9C3        ; }
       ; HALT                          ; HALT              ; 
       li   de,_5b00                   ; LD DE,$5B00       ; {Sends #R$5B00 to #R$F9C3 (blanks the centrepiece).
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       .call @dollar_scroll_draw       ; CALL $F9C3        ; }
       .ret                            ; RET               ; Return.
* Draws the image to the screen.
dollar_scroll_draw:                    ; f9c3
       li   hl,loading+47              ; LD HL,$402F       ; 
       li   bc,>1002                   ; LD BC,$1002       ; 
dollar_scroll_draw_loop:               ; f9c9
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       sb   b,b                        ; LD B,$00          ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .ldir                           ; LDIR              ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .pop hl                         ; POP HL            ; 
       ab   one,h                      ; INC H             ; 
       movb h,a                        ; LD A,H            ; 
       andi a,7*256                    ; AND $07           ; 
       jne  _f9de                      ; JR NZ,$F9DE       ; 
       movb @bytes+64,h                ; LD H,$40          ; 
       movb @l,a                       ; LD A,L            ; 
       ab   @bytes+32,a                ; ADD A,$20         ; 
       movb a,@l                       ; LD L,A            ; 
_f9de:
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $F9C9        ; 
       jne  dollar_scroll_draw_loop    ;                   
       movb one,b                      ; LD B,$01          ; 
dollar_scroll_halt_loop:               ; f9e3
       ; HALT                          ; HALT              ; 
       sb   one,b                      ; DJNZ $F9E3        ; 
       jne  dollar_scroll_halt_loop    ;                   
       .ret                            ; RET               ; Return.
       b    @door_buffer               ; JP $EA90          ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 

* High Score Entry.
* 
* Used by the routine at #R$C7C0.
new_high_score:                        ; fa00
       .call @high_score               ; CALL $FA06        ; 
       b    @high_score_input          ; JP $FB62          ; 
high_score:                            ; fa06
       li   de,print_two_tone_text_alias ; LD DE,$5B80       ; {Copies $40 bytes of data from #REGhl to #R$5B80.
       li   bc,>0040                   ; LD BC,$0040       ; 
       .ldir                           ; LDIR              ; }
       movb @bytes+48,a                ; LD A,$30          ; {Writes "0" ($30 in ASCII) to #R$FB94.
       movb a,@high_score_text_buffer  ; LD ($FB94),A      ; }
       .call @high_score_clear_screen  ; CALL $FAD4        ; Call #R$FAD4.
       li   hl,_4040                   ; LD HL,$4040       ; {Writes $4040 to #R$FBF0.
       mov  hl,@_fbf0                  ; LD ($FBF0),HL     ; }
       .push ix                        ; PUSH IX           ; 
       .call @_fc09                    ; CALL $FC09        ; Call #R$FC09.
       movb a,@_fb57                   ; LD ($FB57),A      ; 
       .pop ix                         ; POP IX            ; 
       cb   a,@bytes+31                ; CP $1F            ; 
       movb one,a                      ; LD A,$01          ; 
       jne  !                          ; JP Z,$FAB0        ; 
       b    @_fab0                     ;                   
!
       li   hl,loading                 ; LD HL,$4000       ; 
       mov  hl,@_fbf0                  ; LD ($FBF0),HL     ; 
       movb @_fb57,a                   ; LD A,($FB57)      ; 
       .call @high_score_position      ; CALL $FB19        ; 
       li   de,highscore_table+495     ; LD DE,$61EF       ; 
       .push de                        ; PUSH DE           ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       .push hl                        ; PUSH HL           ; 
       .pop bc                         ; POP BC            ; 
       .pop hl                         ; POP HL            ; 
       li   de,highscore_table+511     ; LD DE,$61FF       ; 
       inc  bc                         ; INC BC            ; 
       ; LDDR                          ; LDDR              ; 
       movb @_fb57,a                   ; LD A,($FB57)      ; 
       sb   one,a                      ; DEC A             ; 
       .call @_fbff                    ; CALL $FBFF        ; 
       li   de,highscore_table+761     ; LD DE,$62F9       ; 
       .push de                        ; PUSH DE           ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       .push hl                        ; PUSH HL           ; 
       .pop bc                         ; POP BC            ; 
       .pop hl                         ; POP HL            ; 
       li   de,highscore_table+767     ; LD DE,$62FF       ; 
       inc  bc                         ; INC BC            ; 
       ; LDDR                          ; LDDR              ; 
       movb @_fb57,a                   ; LD A,($FB57)      ; 
       .call @_fbff                    ; CALL $FBFF        ; 
       dec  hl                         ; DEC HL            ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       movb @bytes+6,b                 ; LD B,$06          ; 
_fa6f:
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   @bytes+48,a                ; ADD A,$30         ; 
       movb a,*de                      ; LD (DE),A         ; 
       dec  de                         ; DEC DE            ; 
       inc  hl                         ; INC HL            ; 
       sb   one,b                      ; DJNZ $FA6F        ; 
       jne  _fa6f                      ;                   
       li   hl,dueller_1               ; LD HL,$5BC0       ; {Overwrites the text at #R$5BC0 with spaces to "blank"
       li   de,_5bc1                   ; LD DE,$5BC1       ; it out ($12 characters).
       li   bc,>0011                   ; LD BC,$0011       ; 
       movb @bytes+32,*hl              ; LD (HL),$20       ; 
       .ldir                           ; LDIR              ; }
       movb @b255,*hl                  ; LD (HL),$FF       ; Set a string termination character ($FF) at the end of
                                                           ; the string.
       .call @high_score_clear_screen  ; CALL $FAD4        ; 
       li   hl,high_score_title        ; LD HL,$FB78       ; {Points to #R$FB78 and sends it to #R$5B80.
       li   de,_4080+1922              ; LD DE,$4802       ; #TABLE(default,centre)
       li   bc,>0703                   ; LD BC,$0703       ; { =h Value | =h Ink | =h Paper | =h Bright }
       .call @print_two_tone_text_alias ; CALL $5B80        ; { $07 | $07 | $00 | $00 }
                                                           ; { $03 | $03 | $00 | $00 }
                                                           ; TABLE#}
       .call @high_score_something     ; CALL $FB26        ; 
       .call @high_score_clear_screen  ; CALL $FAD4        ; 
       movb @_fb57,a                   ; LD A,($FB57)      ; 
       .call @high_score_position      ; CALL $FB19        ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       li   hl,dueller_1               ; LD HL,$5BC0       ; 
       li   bc,>0010                   ; LD BC,$0010       ; 
       .ldir                           ; LDIR              ; 
       sb   @bytes+5,a                 ; SUB $05           ; 
       jnc  _fabd                      ; JR NC,$FABD       ; TODO: check code. 
       jmp  _fabc                      ; JR $FABC          ; 
_fab0:
       li   hl,high_score_sub_head     ; LD HL,$FBB5       ; {Points to #R$FBB5 and sends it to #R$5B80.
       li   de,loading                 ; LD DE,$4000       ; #TABLE(default,centre)
       li   bc,>0706                   ; LD BC,$0706       ; { =h Value | =h Ink | =h Paper | =h Bright }
       .call @print_two_tone_text_alias ; CALL $5B80        ; { $07 | $07 | $00 | $00 }
                                                           ; { $06 | $06 | $00 | $00 }
                                                           ; TABLE#}
_fabc:
       sb   a,a                        ; XOR A             ; 
_fabd:
       ab   one,a                      ; INC A             ; 
       movb @bytes+10,b                ; LD B,$0A          ; 
_fac0:
       .push bc                        ; PUSH BC           ; 
       .push af                        ; PUSH AF           ; 
       .call @_fae2                    ; CALL $FAE2        ; 
       li   de,high_score_text_buffer  ; LD DE,$FB94       ; 
       .call @_fbd5                    ; CALL $FBD5        ; 
       .pop af                         ; POP AF            ; 
       .pop bc                         ; POP BC            ; 
       ab   one,a                      ; INC A             ; 
       cb   a,@bytes+31                ; CP $1F            ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       sb   one,b                      ; DJNZ $FAC0        ; 
       jne  _fac0                      ;                   
       .ret                            ; RET               ; 
high_score_clear_screen:               ; fad4
       li   hl,loading                 ; LD HL,$4000       ; {Clears the screen buffer by writing $00 to all 6912
       li   de,loading+1               ; LD DE,$4001       ; memory locations.
       li   bc,>1aff                   ; LD BC,$1AFF       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .ldir                           ; LDIR              ; 
       .ret                            ; RET               ; }
_fae2:
       movb a,@c                       ; LD C,A            ; 
       li   hl,high_score_text_buffer  ; LD HL,$FB94       ; 
       sb   @bytes+10,a                ; SUB $0A           ; 
       joc  _fafa                      ; JR C,$FAFA        ; TODO: check code. 
       movb @bytes+49,*hl              ; LD (HL),$31       ; 
       sb   @bytes+10,a                ; SUB $0A           ; 
       joc  _fafa                      ; JR C,$FAFA        ; TODO: check code. 
       movb @bytes+50,*hl              ; LD (HL),$32       ; 
       sb   @bytes+10,a                ; SUB $0A           ; 
       joc  _fafa                      ; JR C,$FAFA        ; TODO: check code. 
       movb @bytes+51,*hl              ; LD (HL),$33       ; 
       sb   @bytes+10,a                ; SUB $0A           ; 
_fafa:
       ab   @bytes+10,a                ; ADD A,$0A         ; 
       inc  hl                         ; INC HL            ; 
       ab   @bytes+48,a                ; ADD A,$30         ; 
       movb a,*hl                      ; LD (HL),A         ; 
       movb @c,a                       ; LD A,C            ; 
       .call @high_score_position      ; CALL $FB19        ; 
       li   de,high_score_text_buffer+6 ; LD DE,$FB9A       ; 
       li   bc,>0010                   ; LD BC,$0010       ; 
       .ldir                           ; LDIR              ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       .call @_fbff                    ; CALL $FBFF        ; 
       li   bc,>0006                   ; LD BC,$0006       ; 
       .ldir                           ; LDIR              ; 
       .ret                            ; RET               ; 
* Works out where in the high score table to place the score.
high_score_position:                   ; fb19
       sb   one,a                      ; DEC A             ; {Using #R$6000 as a base, work out where to place the new score.
       movb a,@l                       ; LD L,A            ; #LIST
       sb   h,h                        ; LD H,$00          ; { Decrease $1B by one... }
       a    hl,hl                      ; ADD HL,HL         ; { Loads $1A as the low-order byte; #REGhl=$001A }
       a    hl,hl                      ; ADD HL,HL         ; { Times by $10; #REGhl=$1A0 }
       a    hl,hl                      ; ADD HL,HL         ; { Add $6000=#R$61A0 }
       a    hl,hl                      ; ADD HL,HL         ; LIST#
       li   de,highscore_table         ; LD DE,$6000       ; 
       a    de,hl                      ; ADD HL,DE         ; }
       .ret                            ; RET               ; Return.
high_score_something:                  ; fb26
       li   hl,dueller_1               ; LD HL,$5BC0       ; {Stores #R$5BC0 at #R$FB55.
_fb29:
       mov  hl,@_fb55                  ; LD ($FB55),HL     ; 
       .call @_fbf2                    ; CALL $FBF2        ; }
       .call @high_score_input         ; CALL $FB62        ; 
       mov  @_fb55,hl                  ; LD HL,($FB55)     ; 
       cb   a,@bytes+13                ; CP $0D            ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       cb   a,@bytes+12                ; CP $0C            ; 
       jeq  _fb58                      ; JR Z,$FB58        ; 
       movb a,@c                       ; LD C,A            ; 
       movb @l,a                       ; LD A,L            ; 
       cb   a,@bytes+209               ; CP $D1            ; 
       jhe  _fb29                      ; JR NC,$FB29       ; 
       movb @c,a                       ; LD A,C            ; 
       cb   a,@bytes+32                ; CP $20            ; 
       jeq  _fb51                      ; JR Z,$FB51        ; 
       cb   a,@bytes+97                ; CP $61            ; 
       jl   _fb29                      ; JR C,$FB29        ; 
       cb   a,@bytes+123               ; CP $7B            ; 
       jhe  _fb29                      ; JR NC,$FB29       ; 
       sb   @bytes+32,a                ; SUB $20           ; 
_fb51:
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       jmp  _fb29                      ; JR $FB29          ; 
_fb55:
       data 0                                                        ; Cache.
_fb57:
       ; RRA                           ; RRA               ; 
_fb58:
       movb @l,a                       ; LD A,L            ; 
       cb   a,@bytes+193               ; CP $C1            ; 
       jl   _fb29                      ; JR C,$FB29        ; 
       dec  hl                         ; DEC HL            ; 
       movb @bytes+32,*hl              ; LD (HL),$20       ; 
       jmp  _fb29                      ; JR $FB29          ; 
* Returns a single keypress.
high_score_input:                      ; fb62
       li   hl,dueller_3+38            ; LD HL,$5C08       ; {#HTML(Keep looping around until <em>any</em> input is detected. This is achieved by writing $00 to
       sb   *hl,*hl                    ; LD (HL),$00       ; <a href="https://skoolkid.github.io/rom/asm/5C08.html">LAST_K</a> and looping until it's non-zero.)
high_score_input_loop:                 ; fb67
       ; HALT                          ; HALT              ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; 
       jeq  high_score_input_loop      ; JR Z,$FB67        ; }
       .push af                        ; PUSH AF           ; Store it on the stack for now.
       li   de,>0010                   ; LD DE,$0010       ; {#HTML(Makes a noise using the <a href="https://skoolkid.github.io/rom/asm/03B5.html">BEEP</a> routine.)
       li   hl,>00c0                   ; LD HL,$00C0       ; #TABLE(default,centre)
       .call @>03b5                    ; CALL $03B5        ; { =h Pitch | =h Duration }
                                                           ; { $00C0 | $0010 }
                                                           ; TABLE#}
       .pop af                         ; POP AF            ; {Return with the keypress in #REGa.
       .ret                            ; RET               ; }

* High Score Table Name Entry.
high_score_title:                      ; fb78
       text '  WRITE YOUR NAME PLEASE   ',>ff
high_score_text_buffer:                ; fb94
       text '10    PANCHO VILLA        241610',>ff
high_score_sub_head:                   ; fbb5
       text '     THESE ARE THE BEST        ',>ff

* Routine at FBD5
* 
* Used by the routine at #R$FA00.
_fbd5:
       mov  @_fbf0,hl                  ; LD HL,($FBF0)     ; 
       movb @l,a                       ; LD A,L            ; 
       ab   @bytes+64,a                ; ADD A,$40         ; 
       ; CALL C,$FBEA                  ; CALL C,$FBEA      ; 
       movb a,@l                       ; LD L,A            ; 
       mov  hl,@_fbf0                  ; LD ($FBF0),HL     ; 
       li   bc,>0705                   ; LD BC,$0705       ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .call @print_two_tone_text_alias ; CALL $5B80        ; 
       .ret                            ; RET               ; 
_fbea:
       movb h,a                        ; LD A,H            ; 
       ab   @bytes+8,a                 ; ADD A,$08         ; 
       movb a,h                        ; LD H,A            ; 
       sb   a,a                        ; XOR A             ; 
       .ret                            ; RET               ; 
_fbf0:
       data _50c0                                                    ; Cache
* This entry point is used by the routine at #R$FA00.
_fbf2:
       li   hl,dueller_1               ; LD HL,$5BC0       ; {Points to #R$5BC0 and sends it to #R$5B80.
       li   de,_4080+2055              ; LD DE,$4887       ; #TABLE(default,centre)
       li   bc,>0705                   ; LD BC,$0705       ; { =h Value | =h Ink | =h Paper | =h Bright }
       .call @print_two_tone_text_alias ; CALL $5B80        ; { $07 | $07 | $00 | $00 }
       .ret                            ; RET               ; { $05 | $05 | $00 | $00 }
                                                           ; TABLE#}
* This entry point is used by the routine at #R$FA00.
_fbff:
       movb a,@c                       ; LD C,A            ; 
       sb   a,a                        ; XOR A             ; 
       ab   @c,a                       ; ADD A,C           ; 
       ab   @c,a                       ; ADD A,C           ; 
       ab   @c,a                       ; ADD A,C           ; 
       ab   a,a                        ; ADD A,A           ; 
       movb a,@l                       ; LD L,A            ; 
       movb @bytes+98,h                ; LD H,$62          ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$FA00.
_fc09:
       li   hl,highscore_table+506     ; LD HL,$61FA       ; 
       li   bc,>0006                   ; LD BC,$0006       ; 
       sb   @e,@e                      ; LD E,$00          ; 
_fc11:
       ab   one,@e                     ; INC E             ; 
       movb @e,a                       ; LD A,E            ; 
       cb   a,@bytes+31                ; CP $1F            ; 
       jl   !                          ; RET NC            ; 
       .ret                            ;                   
!
       a    bc,hl                      ; ADD HL,BC         ; 
       movb @5(ix),a                   ; LD A,(IX+$05)     ; 
       ab   @bytes+48,a                ; ADD A,$30         ; 
       cb   a,*hl                      ; CP (HL)           ; 
       jl   _fc11                      ; JR C,$FC11        ; 
       jeq  _fc23                      ; JR Z,$FC23        ; 
       movb @e,a                       ; LD A,E            ; 
       .ret                            ; RET               ; 
_fc23:
       movb @4(ix),a                   ; LD A,(IX+$04)     ; 
       ab   @bytes+48,a                ; ADD A,$30         ; 
       inc  hl                         ; INC HL            ; 
       cb   a,*hl                      ; CP (HL)           ; 
       dec  hl                         ; DEC HL            ; 
       joc  _fc11                      ; JR C,$FC11        ; TODO: check code. 
       jeq  _fc31                      ; JR Z,$FC31        ; 
       movb @e,a                       ; LD A,E            ; 
       .ret                            ; RET               ; 
_fc31:
       movb @3(ix),a                   ; LD A,(IX+$03)     ; 
       ab   @bytes+48,a                ; ADD A,$30         ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       cb   a,*hl                      ; CP (HL)           ; 
       dec  hl                         ; DEC HL            ; 
       dec  hl                         ; DEC HL            ; 
       joc  _fc11                      ; JR C,$FC11        ; TODO: check code. 
       jeq  _fc41                      ; JR Z,$FC41        ; 
       movb @e,a                       ; LD A,E            ; 
       .ret                            ; RET               ; 
_fc41:
       movb @2(ix),a                   ; LD A,(IX+$02)     ; 
       ab   @bytes+48,a                ; ADD A,$30         ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       cb   a,*hl                      ; CP (HL)           ; 
       dec  hl                         ; DEC HL            ; 
       dec  hl                         ; DEC HL            ; 
       dec  hl                         ; DEC HL            ; 
       joc  _fc11                      ; JR C,$FC11        ; TODO: check code. 
       jeq  _fc53                      ; JR Z,$FC53        ; 
       movb @e,a                       ; LD A,E            ; 
       .ret                            ; RET               ; 
_fc53:
       movb @1(ix),a                   ; LD A,(IX+$01)     ; 
       ab   @bytes+48,a                ; ADD A,$30         ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       cb   a,*hl                      ; CP (HL)           ; 
       dec  hl                         ; DEC HL            ; 
       dec  hl                         ; DEC HL            ; 
       dec  hl                         ; DEC HL            ; 
       dec  hl                         ; DEC HL            ; 
       jnc  _fc65                      ; JR NC,$FC65       ; TODO: check code. 
       jmp  _fc11                      ; JR $FC11          ; 
_fc65:
       movb @e,a                       ; LD A,E            ; 
       .ret                            ; RET               ; 

* Unused
       byte >C3,>90,>EA

       ;                               ;                   

* Data block at FD00
       byte >A7,>C2,>0F,>FC,>3A,>0A,>FC
       byte >F6,>01,>D3,>7F,>3A,>0C,>FC
       byte >CB,>7F,>20,>06,>CD,>54,>1F
       byte >D2,>30,>FD,>DB,>FB,>E6,>01
       byte >20,>ED,>79,>D3,>FB,>3A,>0A
       byte >FC,>E6,>FE,>D3,>7F,>F6,>01
       byte >D3,>7F,>32,>0A,>FC,>C9,>3A
       byte >0C,>FC,>E6,>40,>28,>13,>3A
       byte >0C,>FC,>F6,>80,>32,>0C,>FC
       byte >CD,>F5,>FE,>CD,>B8,>FE,>3E
       byte >06,>CD,>03,>FF,>CD,>50,>FD
       byte >C3,>0A,>0F,>3E,>FF,>32,>0A
       byte >FC,>D3,>7F,>3A,>0C,>FC,>E6
       byte >3E,>32,>0C,>FC,>3A,>07,>FC
       byte >A7,>3A,>0C,>FC,>CB,>EF,>20
       byte >02,>CB,>AF,>32,>0C,>FC,>FB
       byte >C9,>4F,>3A,>0C,>FC,>E6,>01
       byte >28,>1C,>3A,>0C,>FC,>CB,>87
       byte >32,>0C,>18,>02,>18,>24,>3E
       byte >FD,>DB,>FE,>1F,>30,>02,>18
       byte >16,>3E,>BF,>DB,>FE,>1F,>30
       byte >01,>C9,>11,>80,>5B,>01,>40
       byte >00,>ED,>B0,>2A,>86,>5B,>36
       byte >FF,>C9,>31,>F0,>5F,>18,>14
       byte >FB,>00,>00,>00,>00,>00,>00
       byte >00,>00,>21,>01,>01,>22,>B0
       byte >5C,>3E,>00,>CD,>9B,>22,>21
       byte >00,>40,>11,>01,>40,>01,>FF
       byte >1A,>36,>00,>ED,>B0,>CD,>C0
       byte >C7,>18,>EE,>C3,>90,>EA,>00
       byte >00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00
       byte >3A

* Title Screen.
* 
* Used by the routine at #R$C7C0.
title_screen:                          ; fe00
       li   de,print_two_tone_text_alias ; LD DE,$5B80       ; 
       li   bc,>0040                   ; LD BC,$0040       ; 
       .ldir                           ; LDIR              ; 
       movb one,a                      ; LD A,$01          ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       .call @ts_draw_bandit           ; CALL $FEA4        ; 
       li   hl,title_screen_game_name  ; LD HL,$FEEA       ; {Points to #R$FEEA and sends it to #R$5B80.
       li   de,loading+43              ; LD DE,$402B       ; 
       li   bc,>0703                   ; LD BC,$0703       ; 
       .call @print_two_tone_text_alias ; CALL $5B80        ; }
       li   hl,title_screen_play       ; LD HL,$FEF4       ; {Points to #R$FEF4 and sends it to #R$FEE4.
       li   de,_4080+75                ; LD DE,$40CB       ; 
       .call @title_screen_print       ; CALL $FEE4        ; }
       li   hl,title_screen_keys       ; LD HL,$FEFC       ; Points to #R$FEFC and sends it to #R$FEE4.
       li   de,_4080+1963              ; LD DE,$482B       ; 
       .call @title_screen_print       ; CALL $FEE4        ; 
       li   hl,title_screen_joystick   ; LD HL,$FF06       ; Points to #R$FF06 and sends it to #R$FEE4.
       li   de,_4080+2059              ; LD DE,$488B       ; 
       .call @title_screen_print       ; CALL $FEE4        ; 
       li   hl,title_screen_level      ; LD HL,$FF11       ; Points to #R$FF11 and sends it to #R$FEE4.
       li   de,_48e0+11                ; LD DE,$48EB       ; 
       .call @title_screen_print       ; CALL $FEE4        ; 
       li   hl,title_screen_author     ; LD HL,$FF19       ; Points to #R$FF19 and sends it to #R$5B80.
       li   de,_5020+99                ; LD DE,$5083       ; 
       li   bc,>0705                   ; LD BC,$0705       ; 
       .call @print_two_tone_text_alias ; CALL $5B80        ; 
       li   hl,title_screen_copyright  ; LD HL,$FF34       ; {Points to #R$FF34 and sends it to #R$5B80.
       li   de,_50c0                   ; LD DE,$50C0       ; 
       li   bc,>0704                   ; LD BC,$0704       ; 
       .call @print_two_tone_text_alias ; CALL $5B80        ; }
* Act on input.
title_screen_input:                    ; fe58
       movb @controller,a              ; LD A,($5CB0)      ; {If #R$5CB0 is zero (joystick) then #REGde=$0787 else #REGde=$8707. Then call the subroutine at #R$FE95.
       ; AND A                         ; AND A             ; The $07/ $87 correspond to white INK and white INK flashing for the selected control method.
       jeq  ts_select_kempston         ; JR Z,$FE63        ; #TABLE(default,centre,centre,centre,centre,centre)
       li   de,_80f0+1559              ; LD DE,$8707       ; { =h Value | =h Ink | =h Paper | =h Bright | =h Flash }
       jmp  ts_call_flash              ; JR $FE66          ; { $07 | $07 | $00 | $00 | $00 }
ts_select_kempston:                    ; fe63
       li   de,>0787                   ; LD DE,$0787       ; { $87 | $07 | $00 | $00 | $01 }
ts_call_flash:                         ; fe66
       .call @ts_flash_text            ; CALL $FE95        ; TABLE#}
       li   hl,controller              ; LD HL,$5CB0       ; Point #REGhl=#R$5CB0.
       movb @bytes+247,a               ; LD A,$F7          ; {Read keys 1, 2, 3, 4, 5.
       ; IN A,($FE)                    ; IN A,($FE)        ; }
       ; RRA                           ; RRA               ; {Jump to #R$FE86 if "1" is pressed.
       jnc  ts_set_keyboard            ; JR NC,$FE86       ; TODO: check code. }
       ; RRA                           ; RRA               ; {Jump to #R$FE8B if "2" is pressed.
       jnc  ts_set_kempston            ; JR NC,$FE8B       ; TODO: check code. }
       movb @bytes+127,a               ; LD A,$7F          ; {Read keys SPACE, FULL-STOP, M, N, & B.
       ; IN A,($FE)                    ; IN A,($FE)        ; }
       movb a,tmp0                     ; BIT 3,A           ; {Jump to #R$FE8F if "N" is pressed.
       andi tmp0,8*256                 ;                   
       jeq  ts_select_level            ; JR Z,$FE8F        ; }
       movb @bytes+239,a               ; LD A,$EF          ; {Read keys 0, 9, 8, 7, 6.
       ; IN A,($FE)                    ; IN A,($FE)        ; }
       ; RRA                           ; RRA               ; {Return if "0" is pressed, else loop back around to
       joc  !                          ; RET NC            ; TODO: check code. #R$FE58.
       .ret                            ;                   
!
       jmp  title_screen_input         ; JR $FE58          ; }
ts_set_keyboard:                       ; fe86
       movb one,a                      ; LD A,$01          ; {Writes $01 to #R$5CB0 and loop back around to #R$FE58.
       movb a,*hl                      ; LD (HL),A         ; 
       jmp  title_screen_input         ; JR $FE58          ; }
ts_set_kempston:                       ; fe8b
       sb   a,a                        ; XOR A             ; {Writes $00 to #R$5CB0 and loop back around to #R$FE58.
       movb a,*hl                      ; LD (HL),A         ; 
       jmp  title_screen_input         ; JR $FE58          ; }
ts_select_level:                       ; fe8f
       li   hl,print_two_tone_text_alias ; LD HL,$5B80       ; {Jump to #R$6380 with #REGhl=#R$5B80.
       b    @level_select              ; JP $6380          ; }
ts_flash_text:                         ; fe95
       li   bc,>0020                   ; LD BC,$0020       ; {ggg
       li   hl,_58a0+139               ; LD HL,$592B       ; 
       movb d,*hl                      ; LD (HL),D         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb d,*hl                      ; LD (HL),D         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb @e,*hl                     ; LD (HL),E         ; }
       .ret                            ; RET               ; Return.
* Draw bandits.
ts_draw_bandit:                        ; fea4
       li   hl,_58a0+33                ; LD HL,$58C1       ; {Sets attributes on the left and right of the screen and
       .call @ts_bandit_attributes     ; CALL $FEC3        ; points #REGde at #R$6800.
       li   hl,_58a0+57                ; LD HL,$58D9       ; 
       .call @ts_bandit_attributes     ; CALL $FEC3        ; 
       li   hl,_4080+65                ; LD HL,$40C1       ; 
       .call @_feb9                    ; CALL $FEB9        ; 
       li   hl,_4080+89                ; LD HL,$40D9       ; 
_feb9:
       li   de,character_00            ; LD DE,$6800       ; 
       movb @bytes+88,b                ; LD B,$58          ; 
       movb @bytes+6,@c                ; LD C,$06          ; }
       b    @draw_character            ; JP $5B92          ; Jump to #R$5B92.
ts_bandit_attributes:                  ; fec3
       movb @bytes+8,b                 ; LD B,$08          ; {Calls #R$FECE with #REGb=$08 and #REGa=$28.
       movb @bytes+40,a                ; LD A,$28          ; 
       .call @ts_bandit_attr_loop      ; CALL $FECE        ; }
       movb @bytes+3,b                 ; LD B,$03          ; {Calls #R$FEDA with #REGb=$03 and #REGa=$20.
       movb @bytes+32,a                ; LD A,$20          ; 
ts_bandit_attr_loop:                   ; fece
       .push bc                        ; PUSH BC           ; }
       .call @ts_bandit_attr_copy      ; CALL $FEDA        ; 
       li   bc,>001b                   ; LD BC,$001B       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $FECE        ; 
       jne  ts_bandit_attr_loop        ;                   
       .ret                            ; RET               ; Return.
ts_bandit_attr_copy:                   ; feda
       .push hl                        ; PUSH HL           ; 
       .pop de                         ; POP DE            ; 
       inc  de                         ; INC DE            ; 
       li   bc,>0005                   ; LD BC,$0005       ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .ldir                           ; LDIR              ; 
       .ret                            ; RET               ; Return.
title_screen_print:                    ; fee4
       li   bc,>0702                   ; LD BC,$0702       ; {#REGb=$07, #REGc=$02 and jump to #R$5B80.
       b    @print_two_tone_text_alias ; JP $5B80          ; }

* Title Screen/ Game Options
title_screen_game_name:                ; feea
       text 'WEST BANK',>ff
* Playing Options.
title_screen_play:                     ; fef4
       text '0 PLAY ',>ff
title_screen_keys:                     ; fefc
       text '1 KEYS   ',>ff
title_screen_joystick:                 ; ff06
       text '2 KEMPSTON',>ff
title_screen_level:                    ; ff11
       text 'N LEVEL',>ff
* Credits.
title_screen_author:                   ; ff19
       text ' PROGRAM BY ALVARO MATEOS ',>ff
title_screen_copyright:                ; ff34
       text 'COPYRIGHT  DINAMIC SOFTWARE 1985',>ff
       text >00,>00,>ff

* Gun Shot Mask.
shot_mask_image:                       ; ff58
       byte >00,>00,>00,>00,>00,>00,>05,>D0                          ; {#UDGARRAY2,attr=7,scale=4,step=2;(#PC)-(#PC+$01)(shot-mask)
       byte >04,>10,>05,>D0,>00,>00,>00,>00                          ; }

* Gun Shot.
shot_image:                            ; ff68
       byte >00,>00,>04,>90,>02,>A0,>30,>0C                          ; {#UDGARRAY2,attr=7,scale=4,step=2;(#PC)-(#PC+$01)(shot)
       byte >04,>20,>08,>90,>00,>80,>00,>00                          ; }

* Cash Box.
empty_box_image:                       ; ff78
       byte >FF,>FF                                                  ; {#UDGARRAY2,attr=13,scale=4,step=2;(#PC)-(#PC+$11)-$01-$10(empty)
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >FF,>FF                                                  ; }
dollar_box_image:                      ; ff98
       byte >FF,>FF                                                  ; {#UDGARRAY2,attr=13,scale=4,step=2;(#PC)-(#PC+$11)-$01-$10(dollar)
       byte >80,>01                                                  ; 
       byte >81,>01                                                  ; 
       byte >81,>41                                                  ; 
       byte >83,>E1                                                  ; 
       byte >85,>41                                                  ; 
       byte >85,>41                                                  ; 
       byte >83,>E1                                                  ; 
       byte >81,>51                                                  ; 
       byte >81,>51                                                  ; 
       byte >83,>E1                                                  ; 
       byte >81,>41                                                  ; 
       byte >80,>41                                                  ; 
       byte >80,>01                                                  ; 
       byte >80,>01                                                  ; 
       byte >FF,>FF                                                  ; }

* Lives Graphic
lives_image:                           ; ffb8
       byte >00,>00                                                  ; {#UDGARRAY#(2,scale=4,step=2#FOR0,$20,$10||n|;(#PC+n)-(#PC+n+$02)-$01-$10,#PEEK(#EVAL($EFBF+n*2))||)(lives)
       byte >03,>40                                                  ; 
       byte >03,>C0                                                  ; 
       byte >0C,>70                                                  ; 
       byte >04,>E0                                                  ; 
       byte >05,>C0                                                  ; 
       byte >03,>C0                                                  ; 
       byte >05,>A0                                                  ; 
       byte >0C,>30                                                  ; 
       byte >0F,>78                                                  ; 
       byte >0B,>68                                                  ; 
       byte >0B,>E8                                                  ; 
       byte >0B,>E8                                                  ; 
       byte >0B,>E8                                                  ; 
       byte >08,>08                                                  ; 
       byte >0B,>E8                                                  ; 
       byte >05,>D0                                                  ; 
       byte >01,>40                                                  ; 
       byte >01,>40                                                  ; 
       byte >01,>40                                                  ; 
_ffe0:
       byte >03,>60                                                  ; 
       byte >03,>60                                                  ; 
       byte >03,>60                                                  ; 
       byte >07,>78                                                  ; }

* Data block at FFE8
       byte >56,>01,>E5,>CD,>33,>03,>E1,>77
       byte >32,>08,>5C,>FD,>CB,>01,>EE,>C9
       byte >00,>00,>00,>00,>00,>00,>00,>00
