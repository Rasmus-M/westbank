       limi 0
       lwpi wrksp
       bl   @setup_environment
       bl   @ti_draw_playfield
       clr  bc
       clr  hl
loop:
       bl   @vsync
       bl   @vsync
       bl   @vsync
       bl   @vsync
       bl   @vsync
       bl   @vsync
       bl   @vsync
       bl   @vsync

       mov  bc,tmp1
       li   tmp2,3
       bl   @draw_door_1

       clr  tmp1
       mov  bc,tmp2
       andi tmp2,15
       sla  tmp2,1
       mov  @door_frames(tmp2),tmp2
       bl   @draw_door_2

       mov  bc,tmp1
       li   tmp2,2
       bl   @draw_door_3

       inc  bc
       ci   bc,>28
       jne  loop

       mov  hl,tmp0
       andi tmp0,1
       jne  main1
       bl   @ti_scroll_left
       jmp  main2
main1:
       bl   @ti_scroll_right
main2:
       inc  hl

       clr  bc
       jmp  loop

door_frames:
       data 0,0,0,0,1,2,3,3,3,3,3,3,2,2,1,0

*********************************************************************
*
* Draw playfield
*
ti_draw_playfield:
       .proc
       seto @graphics_bank_select
       li   hl,playfield_data
ti_draw_playfield_1:
       mov  *hl+,tmp0
       jeq  ti_draw_playfield_2
       mov  *hl+,tmp1
       mov  *hl+,tmp2
       bl   @ti_draw_graphics
       jmp  ti_draw_playfield_1
ti_draw_playfield_2:
       li   hl,attributes
       li   de,zx_attributes
       li   bc,768
ti_draw_playfield_3:
       movb *hl+,a
       mov  de,tmp1
       bl   @ti_draw_attribute
       inc  de
       dec  bc
       jne  ti_draw_playfield_3
       .endproc
playfield_data:
       data (0*32+1)*8,gfx_slot_numbers_left,>0c01
       data (0*32+14)*8,gfx_centrepiece,>0403
       data (0*32+19)*8,gfx_slot_numbers_right,>0c01
       data (1*32+1)*8,gfx_empty_box_image,>0202
       data (1*32+3)*8,gfx_empty_box_image,>0202
       data (1*32+5)*8,gfx_empty_box_image,>0202
       data (1*32+7)*8,gfx_empty_box_image,>0202
       data (1*32+9)*8,gfx_empty_box_image,>0202
       data (1*32+11)*8,gfx_empty_box_image,>0202
       data (1*32+19)*8,gfx_empty_box_image,>0202
       data (1*32+21)*8,gfx_empty_box_image,>0202
       data (1*32+23)*8,gfx_empty_box_image,>0202
       data (1*32+25)*8,gfx_empty_box_image,>0202
       data (1*32+27)*8,gfx_empty_box_image,>0202
       data (1*32+29)*8,gfx_empty_box_image,>0202
       data (3*32+0)*8,gfx_doors_top,>2001
       data (4*32+0)*8,gfx_wall_left,>020b
       data (4*32+9)*8,gfx_wall_middle,>040b
       data (4*32+20)*8,gfx_wall_middle,>040b
       data (4*32+31)*8,gfx_door_frame_side,>010b
       data (15*32+0)*8,gfx_door_bottom,>2001
       data (17*32+0)*8,gfx_tellers,>2004
       data (22*32+1)*8,gfx_score_text_image,>0602
       data (21*32+16)*8,gfx_lives_text_image,>0603
       data (21*32+22)*8,gfx_lives_image,>0203
       data (21*32+24)*8,gfx_lives_image,>0203
       data (21*32+26)*8,gfx_lives_image,>0203
*      test
       data (1*32+15)*8,gfx_dollar_image,>0202
       data (1*32+29)*8,gfx_dollar_box_image,>0202
       data 0
*// ti_draw_playfield

*********************************************************************
*
* Draw door 1
*
* tmp1: character index to draw
* tmp2: door frame 0-3
*
draw_door_1:
       .proc
       li   tmp0,4*32+2
       bl   @ti_draw_character_and_door
       .endproc
*// draw_door_1

*********************************************************************
*
* Draw door 2
*
* tmp1: character index to draw
* tmp2: door frame 0-3
*
draw_door_2:
       .proc
       li   tmp0,4*32+13
       bl   @ti_draw_character_and_door
       .endproc
*// draw_door_2

*********************************************************************
*
* Draw door 3
*
* tmp1: character index to draw
* tmp2: door frame 0-3
*
draw_door_3:
       .proc
       li   tmp0,4*32+24
       bl   @ti_draw_character_and_door
       .endproc
*// draw_door_3

*********************************************************************
*
* Draw a character behind a door
*
* tmp0: screen position in characters
* tmp1: character index to draw
* tmp2: door frame 0-3
*
ti_draw_character_and_door:
       .proc
       .push tmp2                      ; Save door frame
       mov  tmp2,tmp2                  ; Check door frame
       jeq  ti_draw_character_and_door_1 ; If door frame is 0 then don't draw any character
       .push tmp0                      ; Save screen position
       sla tmp2,1                      ; Columns to drawn = door frame * 2
       bl   @ti_draw_partical_character
       .pop tmp0                       ; Restore screen position
ti_draw_character_and_door_1:
       .pop tmp1                       ; Move door frame to tmp1
       bl   @ti_draw_door
       .endproc
*// ti_draw_character_and_door

*********************************************************************
*
* Draw a character
*
* tmp0: screen position in characters
* tmp1: character index to draw
*
ti_draw_character:
       .proc
       sla  tmp1,2                     ; 4 bytes per entry
       ai   tmp1,character_table       ; Add character table base
       mov  *tmp1+,tmp2                ; Get ROM select address
       seto *tmp2                      ; Select ROM bank
       mov  *tmp1,tmp1                 ; Get source address
       sla  tmp0,3                     ; VDP address
       li   tmp2,>060b                 ; Width/height in characters
       bl   @ti_draw_graphics          ; Draw graphics
       li   tmp1,>1700
       bl   @ti_draw_color_area
       .endproc
*// ti_draw_character

*********************************************************************
*
* Draw a character
*
* tmp0: screen position in characters
* tmp1: character index to draw
* tmp2: number of columns to draw
*
ti_draw_partical_character:
       .proc
       sla  tmp1,2                     ; 4 bytes per entry
       ai   tmp1,character_table       ; Add character table base
       mov  *tmp1+,a                   ; Get ROM select address
       seto *a                         ; Select ROM bank
       mov  *tmp1,tmp1                 ; Get source address
       sla  tmp0,3                     ; VDP address
       li   a,6                        ; Calculate source skip
       s    tmp2,a                     ; 6 - columns to draw
       sla  a,3                        ; x 8
       mov  a,@row_src_skip            ; Set source skip
       sla  tmp2,8                     ; Width to MSB
       ori  tmp2,>000b                 ; Set height
       bl   @ti_draw_graphics          ; Draw graphics
       clr  @row_src_skip
       li   tmp1,>1700
       bl   @ti_draw_color_area
       .endproc
*// ti_draw_partial_character

*********************************************************************
*
* Draw a door
*
* tmp0: screen position in characters
* tmp1: frame 0-3
*
ti_draw_door:
       .proc
       seto @graphics_bank_select
       sla  tmp1,1                     ; X offset in characters
       a    tmp1,tmp0                  ; Add offset to screen position
       li   tmp2,7                     ; Full door width
       s    tmp1,tmp2                  ; Subtract offset
       mov   @door_frame_table(tmp1),tmp1 ; Source address
       sla  tmp0,3                     ; VDP address
       sla  tmp2,8                     ; Width to MSB
       ori  tmp2,>000b                 ; Set height
       bl   @ti_draw_graphics          ; Draw graphics
       li   tmp1,>1a00
       bl   @ti_draw_color_area
       .endproc
*// ti_draw_door

*********************************************************************
*
* Scroll screen left
*
ti_scroll_left:
       .proc
       li   tmp0,1
ti_scroll_left_1:
       bl   @scroll_screen
       inc  tmp0
       ci   tmp0,33
       jlt  ti_scroll_left_1
       .endproc
*// ti_scroll_left

*********************************************************************
*
* Scroll screen right
*
ti_scroll_right:
       .proc
       li   tmp0,31
ti_scroll_right_1:
       bl   @scroll_screen
       dec  tmp0
       ci   tmp0,-1
       jgt  ti_scroll_right_1
       .endproc
*// ti_scroll_right

*********************************************************************
*
* Scroll screen
*
* tmp0: offset in characters
*
scroll_screen:
       .proc
       .push tmp0
       andi tmp0,31
       bl   @ti_scroll_screen
       bl   @vsync
       andi tmp0,1
       jne  scroll_screen_1
       bl   @ti_select_name_table_1
       jmp  scroll_screen_2
scroll_screen_1:
       bl   @ti_select_name_table_2
scroll_screen_2:
       .pop tmp0
       .endproc
*// scroll_screen
