* Dueller Number 1.
*
* Populated initially by #R$C3EA.
dueller_1:                             ; 5bc0
       byte >00                        ; 00 Dueller state ("0" is complete).
       byte >00                        ; 01 Dueller timer.
       byte >00                        ; 02
       byte >00                        ; 03 Dueller position.
       byte >00,>00                    ; 04 Screen position above dueller to display "EXTRA" or
                                       ; 05 points.
       byte >00                        ; 06
       byte >00                        ; 07 Bonus points (x100, e.g. "9" == "900").
       byte >00                        ; 08
       byte >00                        ; 09 Current frame?
       byte >00                        ; 10 Character index frame 1.
       byte >00                        ; 11 Character index frame 2.
       byte >00                        ; 12 Character index frame 3.
       byte >00                        ; 13
       byte >00                        ; 14
       byte >00                        ; 15
       byte >00                        ; 16

* Dueller Number 2.
*
* Populated initially by #R$C3EA.
dueller_2:                             ; 5bd1
       byte >00                        ; Dueller state ("0" is complete).
       byte >00                        ; Dueller timer.
       byte >00
       byte >00                        ; Dueller position.
       byte >00,>00                    ; Screen position above dueller to display "EXTRA" or
                                       ; points.
       byte >00
       byte >00                        ; Bonus points (x100, e.g. "9" == "900").
       byte >00
       byte >00                        ; Current frame?
       byte >00                        ; Character index frame 1.
       byte >00                        ; Character index frame 2.
       byte >00                        ; Character index frame 3.
       byte >00
       byte >00
       byte >00
       byte >00

* Dueller Number 3.
*
* Populated initially by #R$C3EA.
dueller_3:                             ; 5be2
       byte >00                        ; Dueller state ("0" is complete).
       byte >00                        ; Dueller timer.
       byte >00
       byte >00                        ; Dueller position.
       byte >00,>00                    ; Screen position above dueller to display "EXTRA" or
                                       ; points.
       byte >00
       byte >00                        ; Bonus points (x100, e.g. "9" == "900").
       byte >00
       byte >00                        ; Current frame?
       byte >00                        ; Character index frame 1.
       byte >00                        ; Character index frame 2.
       byte >00                        ; Character index frame 3.
       byte >00
       byte >00
       byte >00
       byte >00

* Duel Bonus Round Data.
*
* Dueller 1 data.
duel_data:                             ; c3ea
       byte >00                        ; 00 Dueller state ("1" is complete). Set when dueller is shot
       byte >80                        ; 01 Dueller timer.
       byte >12                        ; 02 Timer (after draw?)
       byte >01                        ; 03 Dueller position (1).
       byte >C3,>40                    ; 04 Screen position above dueller to display "EXTRA"
                                       ; 05 or points.
       byte >00                        ; 06
       byte >00                        ; 07 Bonus points (x100, e.g. "9" == "900").
       byte >01                        ; 08 Zero means duel is complete
       byte >01                        ; 09 Current frame?
       byte >12,>13,>14                ; 10 Dueller 1 frames.
       byte >00                        ; 13 Set when dueller is shot
       byte >08                        ; 14 Timer
       byte >08                        ; 15 Timer
       byte >0A                        ; 16 Timer
* Dueller 2 data.
       byte >00                        ; Dueller state ("0" is complete).
       byte >80                        ; Dueller timer.
       byte >12                        ;
       byte >02                        ; Dueller position (2).
       byte >CE,>40                    ; Screen position above dueller to display "EXTRA"
                                       ; or points.
       byte >00                        ;
       byte >00                        ; Bonus points (x100, e.g. "9" == "900").
       byte >01                        ;
       byte >01                        ; Current frame?
       byte >15,>16,>17                ; Dueller 2 frames.
       byte >00                        ;
       byte >08,>08,>0A                ;
* Dueller 3 data.
       byte >00                        ; Dueller state ("0" is complete).
       byte >80                        ; Dueller timer.
       byte >12                        ;
       byte >03                        ; Dueller position (3).
       byte >D9,>40                    ; Screen position above dueller to display "EXTRA"
                                       ; or points.
       byte >00                        ;
       byte >00                        ; Bonus points (x100, e.g. "9" == "900").
       byte >01                        ;
       byte >01                        ; Current frame?
       byte >18,>19,>1A                ; Dueller 3 frames.
       byte >00                        ;
       byte >08,>08,>0A                ;

* Buffer holding bonus text.
duel_bonus_text:                       ; c41d
       text '900',>ff                                                ; Bonus text.
* Not sure ... it is used though       ; TODO
duel_counter:                          ; c421
       byte >00                                                      ;

* Control method
*
* Whether to utilise keyboard or joystick for input.
controller:                            ; 5cb0
       byte >01
* #TABLE(default,centre)
* { =h Value | =h Method }
* { $00 | Kempston }
* { $01 | Keyboard }
* TABLE#

* Current Level
level:                                 ; 5cb1
       byte >01

* High Score Table
high_score_table:                       ; 6000
       text 'LUCKY LUCKE     '
       text 'BILLY THE KID   '
       text 'BUFALO BILL     '
       text 'CALAMITY JANE   '
       text 'JESSE JAMES     '
       text 'JOE DALTON      '
       text 'THE GOOD        '
       text 'JACK THE FAST   '
       text 'DAVY CROCKETT   '
       text 'PANCHO VILLA    '
       text 'ALVARO MATEOS H '
       text 'JACK DALTON     '
       text 'THOMY WILLIANS  '
       text 'LIBERTY B       '
       text 'THE UGLY        '
       text 'GRAL GRANT      '
       text 'JIMMY THE BLACK '
       text 'WILLIAM DALTON  '
       text 'THE BAD         '
       text 'GRAL CASTER     '
       text 'FRANK MATA      '
       text 'KIT WILLIANS    '
       text 'ALBERT THE HEAVY'
       text 'THE SCREW MAN   '
       text 'AVERELL DALTON  '
       text 'ANDREW THE BELL '
       text 'GRAL LEE        '
       text 'THE CHICKEN MAN '
       text 'THE BLONDE GIRL '
       text 'TOM SMITH       '
high_score_table_last_name:
       text 'UNKNOWN         '
high_score_table_scores:               ; 6200
       text '275430'
       text '265980'
       text '263230'
       text '258980'
       text '254070'
       text '255430'
       text '250990'
       text '245430'
       text '240510'
       text '241610'
       text '231940'
       text '226450'
       text '226520'
       text '223320'
       text '213230'
       text '204510'
       text '200640'
       text '195910'
       text '196900'
       text '193030'
       text '188320'
       text '176510'
       text '164760'
       text '157110'
       text '149070'
       text '139970'
       text '135150'
       text '129110'
       text '129730'
       text '125960'                   ; Tom Smith
high_score_table_last_score:
       text '000000'


* Bandit open close
bandit_open_source:                            ; Used in init_bandit_open
       byte >01,>08,>08,>08,>60,>08,>08        ; State and timers
bandit_close_source:                           ; Used in init_bandit_close
       byte >01,>0B,>0B,>0B,>0B,>0B,>0B
* Bowie
bowie_source:                                  ; Used in init_bowie
       byte >01,>1B,>01,>08,>08,>08,>80,>08,>08
* Daisy
daisy_source_1:                        ; Used in init_customer_close
       byte >0A,>0B,>0C,>0D,>0E
daisy_source_2:                        ; Used in init_customer_close
       byte >00,>01,>08,>08,>08
       byte >40,>10,>08,>08,>08
* Jordan
jordan_source_1:                       ; Used in init_customer_open
       byte >03,>04,>05,>06,>07
jordan_source_2:                       ; Used in init_customer_open
       byte >01,>01,>08,>08,>08
       byte >38,>0C,>06,>08,>08
* Customer shot
customer_shot_source:                          ; Used in init_customer_shot
       byte >01,>0B,>0B
* Julius open/close
julius_open_source:                            ; Used in init_julius_open
       byte >00,>00,>01,>08,>08,>08,>50,>08
       byte >08,>80
julius_close_source:                           ; Used in init_julius_close
       byte >00,>01,>0B,>0B,>0B,>0B,>0B,>0B    ; {??
       byte >0B                                ; }
* Bandit 3.
bandit_3_source:
       byte >00,>10,>0F,>11,>02,>01,>08,>08    ; {Bandit 3 source data.
       byte >08,>40,>40                        ; }
bandit_3_buffer:
       byte >00,>10,>0F,>11,>02,>01,>0B,>0B    ; {Bandit 3 buffer.
       byte >0B,>0B,>0B                        ; }
* Bandit 4.
bandit_4_source:
       byte >00,>12,>13,>14,>02,>01,>08,>08    ; {Bandit 4 source data.
       byte >08,>30,>40                        ; }
bandit_4_buffer:
       byte >00,>12,>13,>14,>02,>01,>0B,>0B    ; {Bandit 4 buffer.
       byte >0B,>0B,>0B                        ; }
* Bandit 5.
bandit_5_source:
       byte >00,>15,>16,>17,>02,>01,>08,>08    ; {Bandit 5 source data.
       byte >08,>20,>38                        ; }
bandit_5_buffer:
       byte >00,>15,>16,>17,>02,>01,>0B,>0B    ; {Bandit 5 buffer.
       byte >0B,>0B,>0B                        ; }
* Bandit 6.
bandit_6_source:
       byte >00,>18,>19,>1A,>02,>01,>08,>08    ; {Bandit 6 source data.
       byte >08,>10,>38                        ; }
bandit_6_buffer:
       byte >00,>18,>19,>1A,>02,>01,>0B,>0B    ; {Bandit 6 buffer.
       byte >0B,>0B,>0B                        ; }
* Bandit 2.
bandit_2_source:
       byte >00,>08,>08,>09,>07,>01,>08,>08    ; {Bandit 2 source data.
       byte >08,>01,>30                        ; }
bandit_2_buffer:
       byte >00,>08,>08,>09,>07,>01,>0B,>0B    ; {Bandit 2 buffer.
       byte >0B,>0B,>0B                        ; }

* Door data/buffer?
door_1_data_buffer:
       byte >00,>10,>0F,>11,>02,>04,>00,>00
       byte >00,>0D,>40,>10,>08,>00,>00,>20
       byte >20,>20
door_2_data_buffer:
       byte >00,>08,>08,>09,>07,>05,>00,>00
       byte >00,>00,>00
       byte >10,>08,>00,>00,>20,>20,>20
door_3_data_buffer:
       byte >03,>04,>05,>06,>07,>01,>02,>0B    ; {Target
       byte >00,>00,>1E                        ; }
       byte >0C,>06,>08,>08,>20,>20,>20

* Door 1 Flags.
door_1_flags:                          ; d165 (IX+$00)
       data door_1_routine
door_1_source:                         ; d167 (IX+$02)
       data door_1_data_buffer
door_1_bowie_action:                   ; d169 (IX+$04)
       data bowie_bomb_action
door_1_scoring:                        ; d16b (IX+$06)
       data 0
door_1_cash_action:                    ; d16d (IX+$08)
       byte >00
door_1_count_down:                     ; d16e (IX+$09)
       byte >08
door_1_char_buffer:                    ; d16f (IX+$0a)
       data bandit_3_buffer
door_1_char_source:                    ; d171 (IX+$0c)
       data bandit_3_source

* Door 2 Flags.
door_2_flags:                          ; d173
       data door_2_routine
door_2_source:                         ; d175
       data door_2_data_buffer
door_2_bowie_action:                   ; d177
       data bowie_bomb_action
door_2_scoring:                        ; d179
       data 0
door_2_cash_action:                    ; d17b
       byte >00
door_2_count_down:                     ; d17c
       byte >06
door_2_char_buffer:                    ; d17d
       data bandit_2_buffer
door_2_char_source:                    ; d17f
       data bandit_2_source

* Door 3 Flags.
door_3_flags:                          ; d181
       data door_3_routine
door_3_source:                         ; d183
       data door_3_data_buffer
door_3_bowie_action:                   ; d185
       data bowie_bomb_action
door_3_scoring:                        ; d187
       data 0
door_3_cash_action:                    ; d189
       byte >00
door_3_count_down:                     ; d18a
       byte >1D
door_3_char_buffer:                    ; d18b
       data bandit_3_buffer
door_3_char_source:                    ; d18d
       data bandit_3_source

* Game status buffer entry at D18F
copy_char_data_flag:
       byte >00

* Game status buffer entry at D190
deposit_flag:                          ; d190
       byte >00

* Game status buffer entry at D191
sheriff_star_flag:
       byte >01

character_table:
       data char_bank_1_select,gfx_character_00
       data char_bank_1_select,gfx_character_01
       data char_bank_1_select,gfx_character_02
       data char_bank_1_select,gfx_character_03
       data char_bank_1_select,gfx_character_04
       data char_bank_1_select,gfx_character_05
       data char_bank_1_select,gfx_character_06
       data char_bank_1_select,gfx_character_07
       data char_bank_1_select,gfx_character_08
       data char_bank_1_select,gfx_character_09
       data char_bank_1_select,gfx_character_0a
       data char_bank_1_select,gfx_character_0b
       data char_bank_1_select,gfx_character_0c
       data char_bank_1_select,gfx_character_0d
       data char_bank_1_select,gfx_character_0e
       data char_bank_2_select,gfx_character_0f
       data char_bank_2_select,gfx_character_10
       data char_bank_2_select,gfx_character_11
       data char_bank_2_select,gfx_character_12
       data char_bank_2_select,gfx_character_13
       data char_bank_2_select,gfx_character_14
       data char_bank_2_select,gfx_character_15
       data char_bank_2_select,gfx_character_16
       data char_bank_2_select,gfx_character_17
       data char_bank_2_select,gfx_character_18
       data char_bank_2_select,gfx_character_19
       data char_bank_2_select,gfx_character_1a
       data char_bank_3_select,gfx_character_1b
       data char_bank_3_select,gfx_character_1c
       data char_bank_3_select,gfx_character_1d
       data char_bank_3_select,gfx_character_1e
       data char_bank_3_select,gfx_character_1f
       data char_bank_3_select,gfx_character_20
       data char_bank_3_select,gfx_character_21
       data char_bank_3_select,gfx_character_22
       data char_bank_3_select,gfx_character_23
       data char_bank_3_select,gfx_character_24
       data char_bank_3_select,gfx_character_25
       data char_bank_3_select,gfx_character_26
       data char_bank_3_select,gfx_character_27

door_frame_table:
       data gfx_door_frame_1
       data gfx_door_frame_2
       data gfx_door_frame_3
       data gfx_door_frame_4

bytes:
       byte >00,>01,>02,>03,>04,>05,>06,>07,>08,>09,>0a,>0b,>0c,>0d,>0e,>0f
       byte >10,>11,>12,>13,>14,>15,>16,>17,>18,>19,>1a,>1b,>1c,>1d,>1e,>1f
       byte >20,>21,>22,>23,>24,>25,>26,>27,>28,>29,>2a,>2b,>2c,>2d,>2e,>2f
       byte >30,>31,>32,>33,>34,>35,>36,>37,>38,>39,>3a,>3b,>3c,>3d,>3e,>3f
       byte >40,>41,>42,>43,>44,>45,>46,>47,>48,>49,>4a,>4b,>4c,>4d,>4e,>4f
       byte >50,>51,>52,>53,>54,>55,>56,>57,>58,>59,>5a,>5b,>5c,>5d,>5e,>5f
       byte >60,>61,>62,>63,>64,>65,>66,>67,>68,>69,>6a,>6b,>6c,>6d,>6e,>6f
       byte >70,>71,>72,>73,>74,>75,>76,>77,>78,>79,>7a,>7b,>7c,>7d,>7e,>7f
       byte >80,>81,>82,>83,>84,>85,>86,>87,>88,>89,>8a,>8b,>8c,>8d,>8e,>8f
       byte >90,>91,>92,>93,>94,>95,>96,>97,>98,>99,>9a,>9b,>9c,>9d,>9e,>9f
       byte >a0,>a1,>a2,>a3,>a4,>a5,>a6,>a7,>a8,>a9,>aa,>ab,>ac,>ad,>ae,>af
       byte >b0,>b1,>b2,>b3,>b4,>b5,>b6,>b7,>b8,>b9,>ba,>bb,>bc,>bd,>be,>bf
       byte >c0,>c1,>c2,>c3,>c4,>c5,>c6,>c7,>c8,>c9,>ca,>cb,>cc,>cd,>ce,>cf
       byte >d0,>d1,>d2,>d3,>d4,>d5,>d6,>d7,>d8,>d9,>da,>db,>dc,>dd,>de,>df
       byte >e0,>e1,>e2,>e3,>e4,>e5,>e6,>e7,>e8,>e9,>ea,>eb,>ec,>ed,>ee,>ef
       byte >f0,>f1,>f2,>f3,>f4,>f5,>f6,>f7,>f8,>f9,>fa,>fb,>fc,>fd,>fe,>ff

ti_colors:
       byte >11,>41,>61,>d1,>c1,>71,>a1,>e1,>14,>44,>64,>d4,>c4,>74,>a4,>e4
       byte >16,>46,>66,>d6,>c6,>76,>a6,>e6,>1d,>4d,>6d,>dd,>cd,>7d,>ad,>ed
       byte >1c,>4c,>6c,>dc,>cc,>7c,>ac,>ec,>17,>47,>67,>d7,>c7,>77,>a7,>e7
       byte >1a,>4a,>6a,>da,>ca,>7a,>aa,>ea,>1e,>4e,>6e,>de,>ce,>7e,>ae,>ee
       byte >11,>51,>81,>d1,>21,>71,>b1,>f1,>15,>55,>85,>d5,>25,>75,>b5,>f5
       byte >18,>58,>88,>d8,>28,>78,>b8,>f8,>1d,>5d,>8d,>dd,>2d,>7d,>bd,>fd
       byte >12,>52,>82,>d2,>22,>72,>b2,>f2,>17,>57,>87,>d7,>27,>77,>b7,>f7
       byte >1b,>5b,>8b,>db,>2b,>7b,>bb,>fb,>1f,>5f,>8f,>df,>2f,>7f,>bf,>ff
       byte >11,>14,>16,>1d,>1c,>17,>1a,>1e,>41,>44,>46,>4d,>4c,>47,>4a,>4e
       byte >61,>64,>66,>6d,>6c,>67,>6a,>6e,>d1,>d4,>d6,>dd,>dc,>d7,>da,>de
       byte >c1,>c4,>c6,>cd,>cc,>c7,>ca,>ce,>71,>74,>76,>7d,>7c,>77,>7a,>7e
       byte >a1,>a4,>a6,>ad,>ac,>a7,>aa,>ae,>e1,>e4,>e6,>ed,>ec,>e7,>ea,>ee
       byte >11,>15,>18,>1d,>12,>17,>1b,>1f,>51,>55,>58,>5d,>52,>57,>5b,>5f
       byte >81,>85,>88,>8d,>82,>87,>8b,>8f,>d1,>d5,>d8,>dd,>d2,>d7,>db,>df
       byte >21,>25,>28,>2d,>22,>27,>2b,>2f,>71,>75,>78,>7d,>72,>77,>7b,>7f
       byte >b1,>b5,>b8,>bd,>b2,>b7,>bb,>bf,>f1,>f5,>f8,>fd,>f2,>f7,>fb,>ff

character_attr:
       data >0028
