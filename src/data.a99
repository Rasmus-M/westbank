*********************************************************************
*
* Game variables
*

* Control method
* Whether to utilise keyboard or joystick for input.
controller:                            ; 5cb0
       byte >01
* #TABLE(default,centre)
* { =h Value | =h Method }
* { $00 | Kempston }
* { $01 | Keyboard }
* TABLE#

*********************************************************************
*
player_died_status:                    ; d2fe
       byte >02                        ; 1=dead, 2=killed innocent; 5=died from bomb
* Keep next together
byte_before_hit:
       byte >00                        ; just cleared - not used
* Player Shot. Which door player is shooting at.
hit:                                   ; d300
       byte >00                                                      ; #TABLE(default,centre,centre)
                                                                     ; { =h Value | =h What }
                                                                     ; { $00 | No shot/ inactive }
                                                                     ; { $01 | Door 1 }
                                                                     ; { $02 | Door 2 }
                                                                     ; { $03 | Door 3 }
                                                                     ; TABLE#

* Player Left/ Right.
*
* These flags don't control left/ right movement they just indicate whether
* keys are being pressed/ joystick used.
right_pressed:                         ; d301
       byte >00                                                      ; Defaults to $00, holds $01 when the player is pressing
                                                                     ; "right".
left_pressed:                          ; d302
       byte >00                                                      ; Defaults to $00, holds $01 when the player is pressing
                                                                     ; "left".

* Player Shooting.
two_pressed:                           ; d303
       byte >00                                                      ; Defaults to $00, holds $01 when the player is pressing
                                                                     ; "2".
three_pressed:                         ; d304
       byte >00                                                      ; Defaults to $00, holds $01 when the player is pressing
                                                                     ; "3".
one_pressed:                           ; d305
       byte >00                                                      ; Defaults to $00, holds $01 when the player is pressing
                                                                     ; "1".
controls_byte:                         ; d306
       byte >11                                                      ; Holds the controls in one byte.
                                                                     ; #TABLE(default,centre,centre,centre)
                                                                     ; { =h Value | =h Bits | Door }
                                                                     ; { $10 | #EVAL($10, 2, 8) | Door 2 }
                                                                     ; { $11 | #EVAL($11, 2, 8) | Door 3 }
                                                                     ; { $12 | #EVAL($12, 2, 8) | Door 1 }
                                                                     ; TABLE#

*********************************************************************
* Control Method Routine Alias.
*
* Points to either #R$D392 or #R$D39B depending on the chosen control method.
control_routine_alias:                 ; ce12
       data controls_keyboard                              ; 16 bit memory location of either the keyboard or
                                                           ; joystick control routines.


* Number of lives remaining
lives:                                 ; cc59
       byte >00

* Current Level
level:                                 ; 5cb1
       byte >01

copy_char_data_flag:                   ; d18f
       byte >00

deposit_flag:                          ; d190
       byte >00

cashboxes_completed_flag:              ; ca80
       byte >00                                                      ;

sheriff_star_flag:                     ; d191
       byte >01

phase:                                 ; ca4a
       data >0600                      ; BCD low endian
day:                                   ; ca4c
       data >0100                      ; BCD low endian
day_ascii:                             ; ca58
       text ' 1'                                                     ;
phase_ascii:                           ; ca5a
       text ' 6'                                                     ;
progress_buffer:                       ; ca5c
       text 'PHASE 6',>ff                                            ;

*********************************************************************
*
* Score (6 bytes)
score_digit_6:                         ; cd86
       byte >00
score_digit_5:                         ; cd87
       byte >00
score_digit_4:                         ; cd88
       byte >00
score_digit_3:                         ; cd89
       byte >00
score_digit_2:                         ; cd8a
       byte >00
score_digit_1:                         ; cd8b
       byte >00

*********************************************************************
* Deposit Flags.
*
* Stores whether a deposit has been made for each door.
       even
door_deposited_01:                     ; cc8d
       byte >00
door_deposited_02:                     ; cc8e
       byte >00
door_deposited_03:                     ; cc8f
       byte >00
door_deposited_04:                     ; cc90
       byte >00
door_deposited_05:                     ; cc91
       byte >00
door_deposited_06:                     ; cc92
       byte >00
door_deposited_07:                     ; cc93
       byte >00
door_deposited_08:                     ; cc94
       byte >00
door_deposited_09:                     ; cc95
       byte >00
door_deposited_10:                     ; cc96
       byte >00
door_deposited_11:                     ; cc97
       byte >00
door_deposited_12:                     ; cc98
       byte >00

* Probably represents each block of six deposit flags.
door_deposited_01_06:                  ; cc99
       byte >00
door_deposited_07_12:                  ; cc9a
       byte >00

* Draw Text.
two_tone_attributes_buffer:            ; cbd0
       data 1797                                                     ; Stores the attributes; top attribute/ bottom attribute.


*********************************************************************
duel_parameter:                         ; cbcf                       ; This always appear to be 1
       byte >01                                                      ;

*********************************************************************
*
* Duel data
*
* Dueller Number 1.
*
* Populated initially by #R$C3EA.
       even
dueller_1:                             ; 5bc0
       byte >00                        ; 00 Dueller state ("0" is complete).
       byte >00                        ; 01 Dueller timer.
       byte >00                        ; 02
       byte >00                        ; 03 Dueller position.
       byte >00,>00                    ; 04 Screen position above dueller to display "EXTRA" or
                                       ; 05 points.
       byte >00                        ; 06
       byte >00                        ; 07 Bonus points (x100, e.g. "9" == "900").
       byte >00                        ; 08
       byte >00                        ; 09 Current frame?
       byte >00                        ; 10 Character index frame 1.
       byte >00                        ; 11 Character index frame 2.
       byte >00                        ; 12 Character index frame 3.
       byte >00                        ; 13
       byte >00                        ; 14
       byte >00                        ; 15
       byte >00                        ; 16
       byte >00                        ; 17 Character index frame 4.

* Dueller Number 2.
*
* Populated initially by #R$C3EA.
dueller_2:                             ; 5bd1
       byte >00                        ; Dueller state ("0" is complete).
       byte >00                        ; Dueller timer.
       byte >00
       byte >00                        ; Dueller position.
       byte >00,>00                    ; Screen position above dueller to display "EXTRA" or
                                       ; points.
       byte >00
       byte >00                        ; Bonus points (x100, e.g. "9" == "900").
       byte >00
       byte >00                        ; Current frame?
       byte >00                        ; Character index frame 1.
       byte >00                        ; Character index frame 2.
       byte >00                        ; Character index frame 3.
       byte >00
       byte >00
       byte >00
       byte >00
       byte >00                        ; 17 Character index frame 4.

* Dueller Number 3.
*
* Populated initially by #R$C3EA.
dueller_3:                             ; 5be2
       byte >00                        ; Dueller state ("0" is complete).
       byte >00                        ; Dueller timer.
       byte >00
       byte >00                        ; Dueller position.
       byte >00,>00                    ; Screen position above dueller to display "EXTRA" or
                                       ; points.
       byte >00
       byte >00                        ; Bonus points (x100, e.g. "9" == "900").
       byte >00
       byte >00                        ; Current frame?
       byte >00                        ; Character index frame 1.
       byte >00                        ; Character index frame 2.
       byte >00                        ; Character index frame 3.
       byte >00
       byte >00
       byte >00
       byte >00
       byte >00                        ; 17 Character index frame 4.

* Duel Bonus Round Data.
*
* Dueller 1 data.
       even
duel_data:                             ; c3ea
       byte >00                        ; 00 Dueller state ("1" is complete). Set when dueller is shot
       byte >80                        ; 01 Dueller timer.
       byte >12                        ; 02 Timer (after draw?)
       byte >01                        ; 03 Dueller position (1).
       byte >C3,>40                    ; 04 Screen position above dueller to display "EXTRA"
                                       ; 05 or points.
       byte >00                        ; 06
       byte >00                        ; 07 Bonus points (x100, e.g. "9" == "900").
       byte >01                        ; 08 Zero means duel is complete
       byte >01                        ; 09 Current frame?
       byte >12,>13,>14                ; 10 Dueller 1 frames.
       byte >00                        ; 13 Set when dueller is shot
       byte >08                        ; 14 Timer
       byte >08                        ; 15 Timer
       byte >0A                        ; 16 Timer
       byte >2b                        ; Dueller 1 frame 4.

* Dueller 2 data.
       byte >00                        ; Dueller state ("0" is complete).
       byte >80                        ; Dueller timer.
       byte >12                        ;
       byte >02                        ; Dueller position (2).
       byte >CE,>40                    ; Screen position above dueller to display "EXTRA"
                                       ; or points.
       byte >00                        ;
       byte >00                        ; Bonus points (x100, e.g. "9" == "900").
       byte >01                        ;
       byte >01                        ; Current frame?
       byte >15,>16,>17                ; Dueller 2 frames.
       byte >00                        ;
       byte >08,>08,>0A                ;
       byte >2c                        ; Dueller 2 frame 4.

* Dueller 3 data.
       byte >00                        ; Dueller state ("0" is complete).
       byte >80                        ; Dueller timer.
       byte >12                        ;
       byte >03                        ; Dueller position (3).
       byte >D9,>40                    ; Screen position above dueller to display "EXTRA"
                                       ; or points.
       byte >00                        ;
       byte >00                        ; Bonus points (x100, e.g. "9" == "900").
       byte >01                        ;
       byte >01                        ; Current frame?
       byte >18,>19,>1A                ; Dueller 3 frames.
       byte >00                        ;
       byte >08,>08,>0A                ;
       byte >28                        ; Dueller 3 frame 4.

* Buffer holding bonus text.
duel_bonus_text:                       ; c41d
       text '900',>ff                                                ; Bonus text.

* Not sure ... it is used though       ; TODO
duel_counter:                          ; c421
       byte >00                                                      ;


* Duel Countdown Timer
duel_timer:                            ; c6e0
       byte >20
       byte >FF

* Duel Shot Flag.
*
* See #R$C690 for the clearest example of usage.
duel_bang_flag:                        ; c6e2
       byte >00                                                      ; Holds $00/ $01 to indicate player has been shot.

* Duel Lost Life Flag.
*
* See #R$C690 for the clearest example of usage.
duel_lose_life_flag:                   ; c6e3
       byte >00                                                      ; Holds $00/ $01 to indicate player should lose a life (as
                                                                     ; they shot too quickly).

* Duel Extra Life Flag.
*
* See #R$C690 for the clearest example of usage.
duel_extra_life_flag:                  ; c6e4
       byte >00                                                      ; Holds $00/ $01 to indicate player has gained an extra
                                                                     ; life.

*********************************************************************
* Door Routine Buffer.
*
* These buffers point to the routines for character/ door actions for each door that are currently "in-play".
* Some example routines would be;
* #TABLE(default,centre,centre)
* { =h Routine | =h Door }
* { #R$D192 | "Normal" Bandit }
* { #R$D1DC | Bowie }
* { #R$D201 | Customer }
* { #R$D241 | Julius }
* { #R$D289 | "Drawing" Bandit }
* TABLE#
* And will also hold the door closing routines as well.
door_1_routine:                        ; ce14
       data 0                                                        ; Door 1 character/ door routine in-play.
door_2_routine:                        ; ce16
       data 0                                                        ; Door 2 character/ door routine in-play.
door_3_routine:                        ; ce18
       data 0                                                        ; Door 3 character/ door routine in-play.

* Door Frame Reference
*
* Only one door is "active" at a time, this status buffer points to the
* "currently in-focus door".
door_frame_ref:                        ; ce1a
       byte >03                                                      ; #TABLE(default,centre,centre)
                                                                     ; { =h Value | =h Which One }
                                                                     ; { $01 | Door 1 }
                                                                     ; { $02 | Door 2 }
                                                                     ; { $03 | Door 3 }
                                                                     ; TABLE#

*********************************************************************
* Door 1 Flags.
door_1_flags:                          ; d165 (IX+$00)
       data door_1_routine
door_1_source:                         ; d167 (IX+$02)
       data door_1_data_buffer
door_1_bowie_action:                   ; d169 (IX+$04)
       data bowie_bomb_action
door_1_scoring:                        ; d16b (IX+$06)
       data 0
door_1_cash_action:                    ; d16d (IX+$08)
       byte >00
door_1_count_down:                     ; d16e (IX+$09)
       byte >08
door_1_char_buffer:                    ; d16f (IX+$0a)
       data bandit_3_buffer
door_1_char_source:                    ; d171 (IX+$0c)
       data bandit_3_source

* Door 2 Flags.
door_2_flags:                          ; d173
       data door_2_routine
door_2_source:                         ; d175
       data door_2_data_buffer
door_2_bowie_action:                   ; d177
       data bowie_bomb_action
door_2_scoring:                        ; d179
       data 0
door_2_cash_action:                    ; d17b
       byte >00
door_2_count_down:                     ; d17c
       byte >06
door_2_char_buffer:                    ; d17d
       data bandit_2_buffer
door_2_char_source:                    ; d17f
       data bandit_2_source

* Door 3 Flags.
door_3_flags:                          ; d181
       data door_3_routine
door_3_source:                         ; d183
       data door_3_data_buffer
door_3_bowie_action:                   ; d185
       data bowie_bomb_action
door_3_scoring:                        ; d187
       data 0
door_3_cash_action:                    ; d189
       byte >00
door_3_count_down:                     ; d18a
       byte >1D
door_3_char_buffer:                    ; d18b
       data bandit_3_buffer
door_3_char_source:                    ; d18d
       data bandit_3_source

*********************************************************************
*
* Game status buffer entry at CE1B
*
chooser_countdown_init:                ; ce1b copied to _ce1e
       byte >03
delay:                                 ; ce1c
       data >0380
chooser_countdown:                     ; ce1e
       byte >03

* Defines the entry point for the choosing routines. Note, this isn't for one choice - they chain into each other
* this simply points to where the chain starts.
chooser_routine_ptr:                   ; ce1f
       data choose_bandit_5

*********************************************************************
*
* Character data
*
       even

* Bandit open close
bandit_open_source:                            ; Used in init_bandit_open
       byte >01,>08,>08,>08,>60,>08,>08        ; State and timers
bandit_shot_source:                            ; Used in init_bandit_shot
       byte >01,>0B,>0B,>0B,>0B,>0B,>0B
* Bowie
bowie_source:                                  ; Used in init_bowie
       byte >01,>1B,>01,>08,>08,>08,>80,>08,>08
* Daisy
daisy_source_1:                        ; Used in init_customer_close
       byte >0A,>0B,>0C,>0D,>0E
daisy_source_2:                        ; Used in init_customer_close
       byte >00,>01,>08,>08,>08
       byte >40,>10,>08,>08,>08
* Jordan
jordan_source_1:                       ; Used in init_customer_open
       byte >03,>04,>05,>06,>07
jordan_source_2:                       ; Used in init_customer_open
       byte >01,>01,>08,>08,>08
       byte >38,>0C,>06,>08,>08
* Customer shot
customer_shot_source:                          ; Used in init_customer_shot
       byte >01,>0B,>0B
* Julius open/close
julius_open_source:                            ; Used in init_julius_open
       byte >00,>00,>01,>08,>08,>08,>50,>08
       byte >08,>80
julius_close_source:                           ; Used in init_julius_close
       byte >00,>01,>0B,>0B,>0B,>0B,>0B,>0B    ; {??
       byte >0B                                ; }
* Bandit 3.
bandit_3_source:
       byte >00,>10,>0F,>11,>2a,>01,>08,>08    ; {Bandit 3 source data.
       byte >08,>40,>40                        ; }
bandit_3_buffer:
       byte >00,>10,>0F,>11,>2a,>01,>0B,>0B    ; {Bandit 3 buffer.
       byte >0B,>0B,>0B                        ; }
* Bandit 4.
bandit_4_source:
       byte >00,>12,>13,>14,>2b,>01,>08,>08    ; {Bandit 4 source data.
       byte >08,>30,>40                        ; }
bandit_4_buffer:
       byte >00,>12,>13,>14,>2b,>01,>0B,>0B    ; {Bandit 4 buffer.
       byte >0B,>0B,>0B                        ; }
* Bandit 5.
bandit_5_source:
       byte >00,>15,>16,>17,>2c,>01,>08,>08    ; {Bandit 5 source data.
       byte >08,>20,>38                        ; }
bandit_5_buffer:
       byte >00,>15,>16,>17,>2c,>01,>0B,>0B    ; {Bandit 5 buffer.
       byte >0B,>0B,>0B                        ; }
* Bandit 6.
bandit_6_source:
       byte >00,>18,>19,>1A,>28,>01,>08,>08    ; {Bandit 6 source data.
       byte >08,>10,>38                        ; }
bandit_6_buffer:
       byte >00,>18,>19,>1A,>28,>01,>0B,>0B    ; {Bandit 6 buffer.
       byte >0B,>0B,>0B                        ; }
* Bandit 2.
bandit_2_source:
       byte >00,>08,>08,>09,>29,>01,>08,>08    ; {Bandit 2 source data.
       byte >08,>01,>30                        ; }
bandit_2_buffer:
       byte >00,>08,>08,>09,>29,>01,>0B,>0B    ; {Bandit 2 buffer.
       byte >0B,>0B,>0B                        ; }

* Door data/buffer?
       even
door_1_data_buffer:
       byte >00,>10,>0F,>11,>02,>04,>00,>00
       byte >00,>0D,>40,>10,>08,>00,>00,>20
       byte >20,>20
       even
door_2_data_buffer:
       byte >00,>08,>08,>09,>07,>05,>00,>00
       byte >00,>00,>00
       byte >10,>08,>00,>00,>20,>20,>20
       even
door_3_data_buffer:
       byte >03,>04,>05,>06,>07,>01,>02,>0B    ; {Target
       byte >00,>00,>1E                        ; }
       byte >0C,>06,>08,>08,>20,>20,>20

*********************************************************************
* Customer Logic.
*
* Character state variables/ flags.
       even
customer_frame_1:                      ; d48f
       byte >03                                                      ; Character frame index 1.
customer_frame_2:                      ; d490
       byte >04                                                      ; Character frame index 2.
customer_frame_3:                      ; d491
       byte >05                                                      ; Character frame index 3.
customer_frame_4:                      ; d492
       byte >06                                                      ; Character frame index 4.
customer_frame_5:                      ; d493
       byte >07                                                      ; Character frame index 5.
customer_flag_uncover:                 ; d494
       byte >01                                                      ; Represents whether the customer will move to uncover a bandit
                                                                     ; ($00 "normal" / $01 "uncover" action).
customer_state_ref:                    ; d495
       byte >02                                                      ; The current character state.
customer_1_timer:                      ; d496
       byte >0B                                                      ; Character timer 1.
customer_2_timer:                      ; d497
       byte >00                                                      ; Character timer 2.
customer_3_timer:                      ; d498
       byte >00                                                      ; Character timer 3.
customer_4_timer:                      ; d499
       byte >1E                                                      ; Character timer 4.
customer_5_timer:                      ; d49a
       byte >0C                                                      ; Character timer 5.
customer_6_timer:                      ; d49b
       byte >06                                                      ; Character timer 6.
customer_7_timer:                      ; d49c
       byte >08                                                      ; Character timer 7.
customer_8_timer:                      ; d49d
       byte >08                                                      ; Character timer 8.

*********************************************************************
* Generic Bandit in Door Frame Logic.
*
* Character state variables/ flags.
       even
bandit_state_ref:                      ; d71e
       byte >04                                                      ; The current character state.
bandit_1_timer:                        ; d71f
       byte >08                                                      ; Character timer 1.
bandit_2_timer:                        ; d720
       byte >08                                                      ; Character timer 2.
bandit_3_timer:                        ; d721
       byte >00                                                      ; Character timer 3.
bandit_4_timer:                        ; d722
       byte >55                                                      ; Character timer 4.
       byte >08                                                      ;
       byte >08                                                      ;

*********************************************************************
* Bowie logic.
*
* Handles all the logic around drawing Bowie and handling his "special" logic.
*
* Bowie state variables/ flags.
       even
bowie_good_bad:                        ; d7c5
       byte >01                                                      ; If this is $00 then Bowie is "good". If this is $01
                                                                     ; then he is "bad" (i.e. there's a bomb under his hat).
bowie_frame_ref:                       ; d7c6
       byte >22                                                      ; The current character frame index reference.
bowie_state_ref:                       ; d7c7
       byte >06                                                      ; The current character state.
bowie_1_timer:                         ; d7c8
       byte >00                                                      ; Character timer 1.
bowie_2_timer:                         ; d7c9
       byte >00                                                      ; Character timer 2.
bowie_3_timer:                         ; d7ca
       byte >00                                                      ; Character timer 3.
bowie_4_timer:                         ; d7cb
       byte >00                                                      ; Character timer 4.
bowie_5_timer:                         ; d7cc
       byte >00                                                      ; Character timer 5.
bowie_6_timer:                         ; d7cd
       byte >00                                                      ; Character timer 6.

*********************************************************************
* Julius logic.
*
* Handles all the logic around drawing Julius and handling his "special" logic.
       even
julius_good_bad:                       ; d8e5
       byte >00                                                      ; If this is $00 then Julius is "good". If this is $01
                                                                     ; then he is "bad" (i.e. will draw on you).
julius_flag:                           ; d8e6
       byte >00                                                      ;
julius_state_ref:                      ; d8e7
       byte >04                                                      ; The current character state.
julius_1_timer:                        ; d8e8
       byte >00                                                      ; Character timer 1.
julius_2_timer:                        ; d8e9
       byte >00                                                      ; Character timer 2.
julius_3_timer:                        ; d8ea
       byte >00                                                      ; Character timer 3.
julius_4_timer:                        ; d8eb
       byte >1B                                                      ; Character timer 4.
julius_5_timer:                        ; d8ec
       byte >08                                                      ; Character timer 5.
julius_6_timer:                        ; d8ed
       byte >08                                                      ; Character timer 6.
julius_7_timer:                        ; d8ee
       byte >80                                                      ; Character timer 7.

*********************************************************************
* Drawing Bandit Logic.
*
* Character state variables/ flags.
       even
bandit_draw:                           ; da0c
       byte >00                                                      ;
bandit_draw_frame_1:                   ; da0d
       byte >08                                                      ; Character frame index 1.
bandit_draw_frame_2:                   ; da0e
       byte >08                                                      ; Character frame index 2.
bandit_draw_frame_3:                   ; da0f
       byte >09                                                      ; Character frame index 3.
bandit_draw_frame_4:                   ; da10
       byte >07                                                      ; Character frame index 4.
bandit_draw_state_ref:                 ; da11
       byte >05                                                      ; The current character state.
bandit_draw_1_timer:                   ; da12
       byte >00                                                      ; Character timer 1.
bandit_draw_2_timer:                   ; da13
       byte >00                                                      ; Character timer 2.
bandit_draw_3_timer:                   ; da14
       byte >00                                                      ; Character timer 3.
bandit_draw_4_timer:                   ; da15
       byte >00                                                      ; Character timer 4.
bandit_draw_5_timer:                   ; da16
       byte >00                                                      ; Character timer 5.

*********************************************************************
*
* TI specific data
*
character_table:
       even
       data char_bank_1_select,gfx_character_00_patterns
       data char_bank_1_select,gfx_character_01_patterns
       data char_bank_1_select,gfx_character_02_patterns
       data char_bank_1_select,gfx_character_03_patterns
       data char_bank_1_select,gfx_character_04_patterns
       data char_bank_1_select,gfx_character_05_patterns
       data char_bank_1_select,gfx_character_06_patterns
       data char_bank_2_select,gfx_character_07_patterns
       data char_bank_2_select,gfx_character_08_patterns
       data char_bank_2_select,gfx_character_09_patterns
       data char_bank_2_select,gfx_character_0a_patterns
       data char_bank_2_select,gfx_character_0b_patterns
       data char_bank_2_select,gfx_character_0c_patterns
       data char_bank_2_select,gfx_character_0d_patterns
       data char_bank_3_select,gfx_character_0e_patterns
       data char_bank_3_select,gfx_character_0f_patterns
       data char_bank_3_select,gfx_character_10_patterns
       data char_bank_3_select,gfx_character_11_patterns
       data char_bank_3_select,gfx_character_12_patterns
       data char_bank_3_select,gfx_character_13_patterns
       data char_bank_3_select,gfx_character_14_patterns
       data char_bank_4_select,gfx_character_15_patterns
       data char_bank_4_select,gfx_character_16_patterns
       data char_bank_4_select,gfx_character_17_patterns
       data char_bank_4_select,gfx_character_18_patterns
       data char_bank_4_select,gfx_character_19_patterns
       data char_bank_4_select,gfx_character_1a_patterns
       data char_bank_4_select,gfx_character_1b_patterns
       data char_bank_5_select,gfx_character_1c_patterns
       data char_bank_5_select,gfx_character_1d_patterns
       data char_bank_5_select,gfx_character_1e_patterns
       data char_bank_5_select,gfx_character_1f_patterns
       data char_bank_5_select,gfx_character_20_patterns
       data char_bank_5_select,gfx_character_21_patterns
       data char_bank_5_select,gfx_character_22_patterns
       data char_bank_6_select,gfx_character_23_patterns
       data char_bank_6_select,gfx_character_24_patterns
       data char_bank_6_select,gfx_character_25_patterns
       data char_bank_6_select,gfx_character_26_patterns
       data char_bank_6_select,gfx_character_27_patterns
       data char_bank_6_select,gfx_character_28_patterns
       data char_bank_6_select,gfx_character_29_patterns
       data char_bank_7_select,gfx_character_2a_patterns
       data char_bank_7_select,gfx_character_2b_patterns
       data char_bank_7_select,gfx_character_2c_patterns
       data char_bank_7_select,gfx_character_2d_patterns
       data char_bank_7_select,gfx_character_2e_patterns
       data char_bank_7_select,gfx_character_2f_patterns

door_frame_table:
       data gfx_door_frame_1_patterns
       data gfx_door_frame_2_patterns
       data gfx_door_frame_3_patterns
       data gfx_door_frame_4_patterns

bytes:
       byte >00,>01,>02,>03,>04,>05,>06,>07,>08,>09,>0a,>0b,>0c,>0d,>0e,>0f
       byte >10,>11,>12,>13,>14,>15,>16,>17,>18,>19,>1a,>1b,>1c,>1d,>1e,>1f
       byte >20,>21,>22,>23,>24,>25,>26,>27,>28,>29,>2a,>2b,>2c,>2d,>2e,>2f
       byte >30,>31,>32,>33,>34,>35,>36,>37,>38,>39,>3a,>3b,>3c,>3d,>3e,>3f
       byte >40,>41,>42,>43,>44,>45,>46,>47,>48,>49,>4a,>4b,>4c,>4d,>4e,>4f
       byte >50,>51,>52,>53,>54,>55,>56,>57,>58,>59,>5a,>5b,>5c,>5d,>5e,>5f
       byte >60,>61,>62,>63,>64,>65,>66,>67,>68,>69,>6a,>6b,>6c,>6d,>6e,>6f
       byte >70,>71,>72,>73,>74,>75,>76,>77,>78,>79,>7a,>7b,>7c,>7d,>7e,>7f
       byte >80,>81,>82,>83,>84,>85,>86,>87,>88,>89,>8a,>8b,>8c,>8d,>8e,>8f
       byte >90,>91,>92,>93,>94,>95,>96,>97,>98,>99,>9a,>9b,>9c,>9d,>9e,>9f
       byte >a0,>a1,>a2,>a3,>a4,>a5,>a6,>a7,>a8,>a9,>aa,>ab,>ac,>ad,>ae,>af
       byte >b0,>b1,>b2,>b3,>b4,>b5,>b6,>b7,>b8,>b9,>ba,>bb,>bc,>bd,>be,>bf
       byte >c0,>c1,>c2,>c3,>c4,>c5,>c6,>c7,>c8,>c9,>ca,>cb,>cc,>cd,>ce,>cf
       byte >d0,>d1,>d2,>d3,>d4,>d5,>d6,>d7,>d8,>d9,>da,>db,>dc,>dd,>de,>df
       byte >e0,>e1,>e2,>e3,>e4,>e5,>e6,>e7,>e8,>e9,>ea,>eb,>ec,>ed,>ee,>ef
       byte >f0,>f1,>f2,>f3,>f4,>f5,>f6,>f7,>f8,>f9,>fa,>fb,>fc,>fd,>fe,>ff

ti_colors:
       byte >11,>41,>61,>d1,>c1,>71,>a1,>e1,>14,>44,>64,>d4,>c4,>74,>a4,>e4
       byte >16,>46,>66,>d6,>c6,>76,>a6,>e6,>1d,>4d,>6d,>dd,>cd,>7d,>ad,>ed
       byte >1c,>4c,>6c,>dc,>cc,>7c,>ac,>ec,>17,>47,>67,>d7,>c7,>77,>a7,>e7
       byte >1a,>4a,>6a,>da,>ca,>7a,>aa,>ea,>1e,>4e,>6e,>de,>ce,>7e,>ae,>ee
       byte >11,>51,>81,>d1,>21,>71,>b1,>f1,>15,>55,>85,>d5,>25,>75,>b5,>f5
       byte >18,>58,>88,>d8,>28,>78,>b8,>f8,>1d,>5d,>8d,>dd,>2d,>7d,>bd,>fd
       byte >12,>52,>82,>d2,>22,>72,>b2,>f2,>17,>57,>87,>d7,>27,>77,>b7,>f7
       byte >1b,>5b,>8b,>db,>2b,>7b,>bb,>fb,>1f,>5f,>8f,>df,>2f,>7f,>bf,>ff
       byte >11,>14,>16,>1d,>1c,>17,>1a,>1e,>41,>44,>46,>4d,>4c,>47,>4a,>4e
       byte >61,>64,>66,>6d,>6c,>67,>6a,>6e,>d1,>d4,>d6,>dd,>dc,>d7,>da,>de
       byte >c1,>c4,>c6,>cd,>cc,>c7,>ca,>ce,>71,>74,>76,>7d,>7c,>77,>7a,>7e
       byte >a1,>a4,>a6,>ad,>ac,>a7,>aa,>ae,>e1,>e4,>e6,>ed,>ec,>e7,>ea,>ee
       byte >11,>15,>18,>1d,>12,>17,>1b,>1f,>51,>55,>58,>5d,>52,>57,>5b,>5f
       byte >81,>85,>88,>8d,>82,>87,>8b,>8f,>d1,>d5,>d8,>dd,>d2,>d7,>db,>df
       byte >21,>25,>28,>2d,>22,>27,>2b,>2f,>71,>75,>78,>7d,>72,>77,>7b,>7f
       byte >b1,>b5,>b8,>bd,>b2,>b7,>bb,>bf,>f1,>f5,>f8,>fd,>f2,>f7,>fb,>ff

character_attr:
       data >0028

scroll_position:
       data 0
scroll_amount_ptr:
       data scroll_amounts
scroll_amounts:
       data 11
       data 11
       data 10
scroll_amounts_end:
       equ  $
