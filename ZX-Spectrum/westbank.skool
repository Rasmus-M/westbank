; Paul Maddern's SkoolKit disassembly of the ZX Spectrum version
; Latest version at https://github.com/pobtastic/westbank

@org=$4000

; Loading screen
;
; #UDGTABLE
; { #SCR(loading) | West Bank Loading Screen. }
; TABLE#
@label=LOADING
b$4000 DEFB $FC,$00,$57,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$EA,$00,$3F,$FE,$7F,$CC,$FF,$FF,$FF,$FF ; {Pixels
 $4020 DEFB $FE,$00,$0F,$FF,$FF,$FF,$FF,$FC,$21,$9F,$1F,$9F,$93,$C3,$CD,$87,$0F,$FF,$FF,$FF,$FF,$FF,$F0,$00,$7F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4040 DEFB $FE,$00,$07,$FF,$FF,$FF,$FF,$FE,$53,$1A,$43,$2F,$43,$18,$88,$C9,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$7F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4060 DEFB $FE,$80,$07,$FF,$FF,$FF,$FF,$FF,$27,$FF,$FF,$E0,$FF,$FF,$FF,$97,$CF,$FF,$FF,$FF,$FF,$FF,$E0,$01,$7F,$BE,$7E,$00,$AA,$AB,$7F,$BF ;
 $4080 DEFB $FE,$21,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$C0,$40,$0F,$00,$BF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$84,$7F,$EE,$7E,$3F,$FF,$FB,$FE,$FF ;
 $40A0 DEFB $7E,$20,$37,$FF,$FF,$FF,$FF,$FF,$FD,$E3,$E0,$08,$0C,$02,$2F,$FF,$87,$AA,$FF,$7F,$FF,$E7,$EC,$84,$7E,$BE,$7E,$3F,$EF,$FB,$FF,$FF ;
 $40C0 DEFB $FE,$00,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$40,$00,$00,$C0,$01,$04,$00,$22,$FF,$FF,$FF,$67,$FF,$FC,$80,$7F,$FE,$7E,$3F,$FF,$FB,$FF,$FF ;
 $40E0 DEFB $FE,$81,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$A9,$00,$00,$50,$F0,$54,$06,$FD,$17,$6F,$AF,$FF,$FF,$F8,$81,$7F,$FE,$7E,$3F,$FF,$FF,$FF,$FF ;
 $4100 DEFB $FE,$00,$2F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F4,$00,$7F,$FE,$FF,$FF,$FF,$FF,$FF,$FF ;
 $4120 DEFB $FE,$00,$0F,$FF,$F7,$F7,$F7,$FC,$21,$87,$9F,$9F,$87,$C3,$C5,$86,$4F,$F7,$F7,$F7,$FF,$FF,$F0,$00,$7F,$FC,$BF,$FF,$FF,$FF,$FF,$FF ;
 $4140 DEFB $FE,$00,$07,$FF,$FF,$FF,$FF,$FE,$53,$1A,$07,$0F,$07,$5A,$88,$CD,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$7F,$FE,$BF,$FF,$FF,$FF,$FF,$FF ;
 $4160 DEFB $FE,$80,$87,$FF,$FF,$FF,$FF,$FF,$27,$FF,$FF,$9F,$1F,$FF,$FF,$87,$CF,$FF,$FF,$FF,$FF,$FF,$E1,$01,$7F,$7E,$BE,$15,$55,$FD,$FF,$7F ;
 $4180 DEFB $BE,$21,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$00,$40,$1F,$00,$5F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$84,$7D,$DE,$3E,$5F,$DF,$FD,$FF,$FF ;
 $41A0 DEFB $FE,$20,$37,$FF,$FF,$FF,$FF,$FF,$FD,$70,$F8,$08,$00,$01,$2F,$FC,$78,$55,$FE,$FF,$FF,$DB,$EC,$84,$7F,$7E,$BE,$7F,$DF,$FF,$FF,$7F ;
 $41C0 DEFB $FC,$00,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$40,$00,$00,$E0,$00,$64,$00,$06,$FF,$FF,$FE,$8F,$FF,$FC,$80,$3F,$FC,$BE,$7F,$DF,$FF,$FF,$FF ;
 $41E0 DEFB $FC,$81,$17,$FF,$FF,$FF,$FF,$FF,$F0,$29,$40,$00,$07,$00,$A8,$09,$F8,$AF,$77,$5F,$FF,$FF,$E8,$81,$3F,$FE,$FE,$7F,$DF,$FD,$FF,$FF ;
 $4200 DEFB $FC,$00,$17,$FF,$FF,$FF,$FF,$FC,$21,$03,$8A,$07,$07,$E7,$88,$87,$FF,$FF,$FF,$FF,$FF,$FF,$E8,$00,$3F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4220 DEFB $FE,$00,$0F,$FF,$F7,$F7,$F7,$FE,$73,$87,$8F,$9F,$93,$DB,$D1,$CC,$FF,$F7,$F7,$F7,$FF,$FF,$F0,$00,$7F,$FD,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4240 DEFB $FE,$00,$07,$FF,$FF,$FF,$FF,$FF,$07,$42,$8F,$FF,$FF,$18,$8A,$84,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$7F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4260 DEFB $7E,$81,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$60,$E1,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$81,$7E,$BE,$7E,$2A,$EB,$FB,$FE,$FF ;
 $4280 DEFB $DE,$21,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FA,$00,$20,$1F,$80,$5F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$84,$7B,$EE,$7E,$3F,$FF,$FB,$FE,$FF ;
 $42A0 DEFB $FE,$00,$37,$FF,$FF,$FF,$FF,$FF,$FD,$A0,$3C,$04,$00,$00,$AF,$E3,$80,$3B,$F9,$FF,$FF,$A5,$EC,$80,$7F,$FE,$7E,$3F,$EF,$FB,$FF,$FF ;
 $42C0 DEFB $FE,$00,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$40,$00,$00,$E0,$00,$0E,$00,$ED,$FF,$FF,$FD,$3F,$FF,$FC,$80,$7F,$FA,$7E,$7F,$FF,$FB,$FF,$FF ;
 $42E0 DEFB $FE,$C1,$17,$FF,$FF,$FF,$FF,$FE,$0F,$E9,$A0,$00,$38,$00,$70,$17,$F4,$5F,$57,$5F,$FF,$FF,$E8,$83,$7F,$FE,$7E,$3F,$FF,$FF,$FF,$FF ;
 $4300 DEFB $FE,$00,$07,$FF,$FF,$FF,$FF,$FD,$29,$43,$02,$07,$43,$E7,$A8,$A7,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$7F,$FE,$BF,$FF,$FF,$FF,$FF,$FF ;
 $4320 DEFB $FE,$00,$0F,$FF,$80,$80,$80,$FE,$73,$9F,$C7,$9F,$99,$81,$D9,$CC,$FF,$80,$80,$80,$FF,$FF,$F0,$00,$7F,$BA,$FF,$FF,$FF,$FF,$FF,$FF ;
 $4340 DEFB $FE,$00,$07,$FF,$FF,$FF,$FF,$FF,$27,$03,$FF,$FF,$FF,$FF,$88,$86,$4F,$FF,$FF,$FF,$FF,$FF,$E0,$00,$7F,$FE,$BF,$FF,$FF,$7F,$FF,$FF ;
 $4360 DEFB $FE,$81,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$80,$1E,$01,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$81,$7F,$5E,$FE,$57,$DF,$FD,$FF,$7F ;
 $4380 DEFB $BE,$21,$07,$FF,$FF,$FF,$FF,$FF,$FF,$F4,$00,$20,$1C,$C0,$5F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$84,$7D,$DE,$3E,$5F,$DF,$FD,$FF,$FF ;
 $43A0 DEFB $FE,$E0,$37,$FF,$FF,$FF,$FF,$FF,$FE,$E0,$DE,$02,$00,$00,$97,$1C,$07,$D7,$E7,$FF,$FF,$45,$EC,$87,$7F,$7C,$BE,$7F,$DF,$FF,$FF,$FF ;
 $43C0 DEFB $FC,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$A0,$00,$00,$C0,$00,$3E,$07,$1B,$F1,$FF,$FA,$7F,$FF,$F8,$80,$3F,$FC,$BE,$7F,$DF,$FF,$FF,$FF ;
 $43E0 DEFB $FE,$81,$17,$FF,$FF,$FF,$FF,$E1,$F1,$B9,$40,$01,$C0,$00,$C0,$6F,$F4,$5F,$B7,$7F,$FF,$FF,$E8,$81,$7F,$FE,$FE,$7F,$DF,$FD,$FF,$FF ;
 $4400 DEFB $FC,$00,$0F,$FF,$FF,$FF,$FF,$FC,$A5,$1A,$B2,$97,$19,$E7,$88,$97,$CF,$FF,$FF,$FF,$FF,$FF,$F0,$00,$3F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4420 DEFB $FC,$00,$0F,$FF,$E3,$E3,$E3,$FE,$73,$9F,$C7,$9F,$99,$81,$DD,$C9,$FF,$E3,$E3,$E3,$FF,$FF,$F0,$00,$3F,$7D,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4440 DEFB $FE,$00,$07,$FF,$FF,$FF,$FF,$FF,$27,$FF,$FF,$FF,$FF,$FF,$FF,$86,$4F,$FF,$FF,$FF,$FF,$FF,$E0,$00,$7F,$FE,$7F,$FF,$FE,$1F,$FE,$00 ;
 $4460 DEFB $7E,$81,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F3,$20,$01,$FE,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$81,$7E,$BE,$7E,$3F,$EF,$FB,$FE,$FF ;
 $4480 DEFB $7E,$21,$17,$FF,$FF,$FF,$FF,$FF,$FF,$88,$00,$20,$38,$40,$5F,$FF,$FF,$FF,$80,$FF,$FF,$FF,$E8,$84,$7E,$FE,$7E,$3F,$FF,$FB,$FE,$FF ;
 $44A0 DEFB $FE,$E0,$37,$FF,$FF,$FF,$FF,$FF,$FE,$A1,$1E,$02,$00,$00,$50,$E0,$FA,$BF,$DF,$FF,$FD,$CB,$EC,$87,$7F,$FE,$7E,$3F,$EF,$FB,$FF,$FF ;
 $44C0 DEFB $FE,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$A0,$00,$01,$40,$00,$D7,$08,$17,$CE,$7F,$F4,$FF,$FF,$F8,$80,$7F,$FA,$7E,$7F,$FF,$FB,$FF,$FF ;
 $44E0 DEFB $FE,$01,$17,$FF,$FF,$FE,$07,$1E,$02,$27,$C0,$FE,$00,$03,$80,$9F,$FB,$BF,$B6,$BF,$FF,$FF,$E8,$80,$7F,$FE,$7E,$3F,$FF,$FF,$FF,$FF ;
 $4500 DEFB $FE,$00,$1F,$FF,$FF,$FF,$FF,$FC,$21,$1A,$7A,$97,$19,$E7,$88,$87,$CF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$7F,$FE,$BF,$FF,$FF,$FF,$FF,$FF ;
 $4520 DEFB $F8,$00,$07,$FF,$C9,$C9,$C9,$FE,$53,$9F,$E3,$9F,$99,$99,$DD,$C3,$FF,$C9,$C9,$C9,$FF,$FF,$E0,$00,$1F,$BE,$FF,$FF,$FF,$FF,$FF,$FF ;
 $4540 DEFB $FE,$00,$07,$FF,$FF,$FF,$FF,$FF,$27,$FF,$FF,$FF,$FF,$FF,$FF,$87,$0F,$FF,$FF,$FF,$FF,$FF,$E0,$00,$7F,$7E,$BF,$FF,$FE,$08,$01,$7E ;
 $4560 DEFB $BE,$81,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$EC,$4C,$00,$01,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$81,$7D,$DE,$3E,$5F,$DF,$FF,$FF,$FF ;
 $4580 DEFB $BE,$21,$17,$FF,$FF,$FF,$FF,$FF,$FE,$70,$00,$20,$38,$00,$5F,$FF,$FF,$FC,$7F,$7F,$FF,$FF,$E8,$84,$7D,$DE,$3E,$5F,$DF,$FD,$FF,$FF ;
 $45A0 DEFB $FE,$80,$3F,$FF,$FF,$FF,$FF,$FF,$FE,$D5,$9C,$01,$00,$00,$2F,$00,$01,$7F,$3F,$FF,$F2,$37,$FC,$81,$7F,$7C,$BE,$7F,$DF,$FF,$FF,$FF ;
 $45C0 DEFB $FC,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$A0,$00,$06,$92,$83,$AF,$00,$6F,$B3,$BF,$E9,$FF,$FF,$F8,$80,$3F,$FC,$BE,$7F,$DF,$FD,$FF,$FF ;
 $45E0 DEFB $FE,$01,$07,$FF,$FF,$FD,$F8,$E0,$0C,$20,$3F,$00,$00,$0C,$01,$4F,$FC,$7F,$B6,$BF,$FF,$FF,$E0,$80,$7F,$FE,$FE,$3F,$FF,$FD,$FF,$FF ;
 $4600 DEFB $FC,$00,$0F,$FF,$FF,$FF,$FF,$FC,$21,$9E,$7B,$9F,$99,$E7,$DD,$87,$8F,$FF,$FF,$FF,$FF,$FF,$F0,$00,$3F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4620 DEFB $FE,$00,$07,$FF,$DD,$DD,$DD,$FE,$53,$9F,$EB,$0F,$19,$18,$DD,$C3,$FF,$DD,$DD,$DD,$FF,$FF,$E0,$00,$7F,$DE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4640 DEFB $FE,$80,$07,$FF,$FF,$FF,$FF,$FF,$27,$FF,$FF,$FF,$FF,$FF,$FF,$87,$8F,$FF,$FF,$FF,$FF,$FF,$E0,$01,$7F,$FE,$7F,$FF,$E0,$02,$AA,$BF ;
 $4660 DEFB $7E,$81,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$D0,$50,$00,$00,$BF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$81,$7E,$EE,$7E,$3F,$EF,$FB,$FE,$FF ;
 $4680 DEFB $7E,$21,$17,$FF,$FF,$FF,$FF,$FF,$FD,$88,$00,$10,$38,$00,$5F,$FF,$FF,$83,$9F,$BF,$FF,$FF,$E8,$84,$7E,$BE,$7E,$3F,$EF,$FB,$FE,$FF ;
 $46A0 DEFB $FE,$80,$3F,$FF,$FF,$FF,$FF,$FF,$FE,$B3,$88,$01,$80,$00,$08,$00,$BF,$E0,$FF,$FF,$EC,$0F,$FC,$81,$7F,$FE,$7E,$3F,$FF,$FB,$FF,$FF ;
 $46C0 DEFB $FA,$01,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$A2,$00,$19,$2C,$0D,$57,$00,$9F,$47,$5F,$D3,$FF,$FF,$F8,$80,$5F,$FE,$7E,$7F,$FF,$FF,$FF,$FF ;
 $46E0 DEFB $FE,$81,$07,$FF,$FF,$FB,$FF,$00,$10,$10,$00,$5C,$00,$10,$02,$B7,$FF,$FF,$B6,$BF,$FF,$FF,$E0,$81,$7F,$FE,$7E,$3F,$FF,$FF,$FF,$FF ;
 $4700 DEFB $FE,$00,$0F,$FF,$FF,$FF,$FF,$FC,$21,$9E,$3F,$9F,$99,$C3,$DD,$87,$0F,$FF,$FF,$FF,$FF,$FF,$F0,$00,$7F,$FE,$BF,$FF,$FF,$FF,$FF,$FF ;
 $4720 DEFB $FE,$00,$07,$FF,$FF,$FF,$FF,$FE,$53,$9A,$E3,$4F,$19,$18,$D8,$C3,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$7F,$BE,$FF,$FF,$FF,$FF,$FF,$FF ;
 $4740 DEFB $FE,$80,$07,$FF,$FF,$FF,$FF,$FF,$27,$FF,$FF,$FF,$FF,$FF,$FF,$A7,$8F,$FF,$FF,$FF,$FF,$FF,$E0,$01,$7F,$7E,$BE,$00,$05,$55,$D7,$7F ;
 $4760 DEFB $BE,$21,$07,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$20,$40,$06,$00,$BF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$84,$7D,$DE,$3E,$5F,$DF,$FF,$FF,$FF ;
 $4780 DEFB $FE,$21,$17,$FF,$FF,$FF,$FF,$FF,$FD,$50,$00,$10,$1E,$04,$5F,$FF,$F8,$7D,$7F,$BF,$FF,$FF,$E8,$84,$7F,$5E,$BE,$7F,$DF,$FF,$FF,$FF ;
 $47A0 DEFB $FE,$00,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$50,$00,$01,$40,$00,$E4,$01,$D5,$1F,$FF,$FF,$91,$FF,$FC,$80,$7F,$FC,$BE,$7F,$DF,$FF,$FF,$FF ;
 $47C0 DEFB $FC,$81,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$A4,$80,$0E,$50,$1A,$2A,$01,$7F,$88,$AF,$D7,$FF,$FF,$F8,$81,$3F,$FE,$FE,$7F,$FF,$FD,$FF,$FF ;
 $47E0 DEFB $FE,$81,$07,$FF,$FF,$F7,$FF,$E0,$20,$F0,$00,$A0,$00,$60,$9D,$CF,$FF,$FF,$B6,$DF,$FF,$FF,$E0,$81,$7F,$FE,$BE,$3F,$FF,$FF,$FF,$FF ;
 $4800 DEFB $FE,$81,$07,$FF,$FF,$EF,$FF,$F8,$03,$30,$00,$40,$03,$81,$FE,$8F,$FF,$FF,$B6,$DF,$FF,$FF,$E0,$81,$7F,$FE,$7E,$FF,$FF,$FF,$FF,$FF ;
 $4820 DEFB $FE,$20,$07,$FF,$FF,$FF,$FF,$FF,$F6,$E5,$FB,$FF,$F3,$EA,$EA,$55,$60,$6C,$C5,$9B,$FF,$FF,$EA,$7C,$7F,$DE,$7F,$CC,$FF,$FF,$FF,$FF ;
 $4840 DEFB $DE,$00,$07,$FF,$FF,$FF,$AB,$FF,$E5,$FB,$EB,$CE,$80,$9B,$EB,$00,$19,$03,$46,$00,$81,$7F,$E9,$45,$7F,$BE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4860 DEFB $FE,$00,$07,$FF,$FD,$AF,$AA,$13,$FF,$53,$CE,$A2,$70,$D2,$0D,$7E,$80,$16,$CC,$88,$FB,$00,$E1,$00,$7F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4880 DEFB $DC,$C0,$2F,$FF,$FE,$AA,$00,$00,$0F,$9F,$FF,$C8,$40,$02,$2D,$34,$BD,$60,$50,$61,$F8,$30,$15,$03,$3F,$FE,$7F,$00,$AA,$AB,$7F,$BF ;
 $48A0 DEFB $FE,$00,$2F,$FF,$FF,$FB,$00,$FF,$FF,$F7,$EF,$B2,$89,$00,$53,$3B,$90,$A0,$51,$6B,$A8,$41,$35,$00,$7F,$FE,$7F,$3F,$FF,$FB,$FE,$FF ;
 $48C0 DEFB $FE,$00,$27,$FF,$FF,$FF,$6B,$A2,$4B,$50,$AB,$01,$FF,$FF,$F0,$F0,$47,$DE,$28,$2F,$EE,$1A,$04,$50,$7F,$FE,$7F,$3F,$EF,$FB,$FF,$FF ;
 $48E0 DEFB $DC,$00,$27,$FF,$FF,$FF,$D0,$4A,$30,$01,$24,$FE,$CB,$E1,$55,$86,$55,$03,$90,$02,$FF,$AA,$07,$40,$3F,$FE,$7F,$3F,$FF,$FB,$FF,$FF ;
 $4900 DEFB $FE,$81,$07,$FF,$FF,$EF,$FF,$FF,$04,$10,$00,$C0,$1C,$06,$F4,$37,$E3,$FF,$A6,$DF,$FF,$FF,$E0,$81,$7F,$FE,$BE,$7F,$FF,$FF,$FF,$FF ;
 $4920 DEFB $FD,$20,$0F,$FF,$FF,$FF,$FF,$FF,$F1,$9B,$5F,$55,$5D,$55,$C6,$C6,$B0,$33,$BA,$85,$FF,$FF,$F5,$57,$BF,$FE,$BF,$FF,$FF,$FF,$FF,$FF ;
 $4940 DEFB $FE,$00,$07,$FF,$FF,$FF,$A5,$FF,$E9,$FE,$D5,$3D,$40,$4E,$1D,$A0,$86,$86,$AA,$00,$80,$8F,$E1,$44,$7F,$DE,$BF,$FF,$FF,$FF,$FF,$FF ;
 $4960 DEFB $FE,$00,$07,$FF,$FD,$77,$B5,$0C,$FF,$99,$EF,$62,$CF,$A0,$19,$AE,$40,$1B,$84,$28,$F6,$80,$E1,$80,$7F,$FE,$FF,$FF,$FF,$FF,$FF,$FF ;
 $4980 DEFB $FE,$00,$0F,$FF,$FE,$95,$04,$00,$07,$B7,$D7,$A4,$58,$FC,$13,$34,$99,$C0,$E2,$51,$70,$18,$6B,$00,$7F,$FE,$BF,$15,$55,$FD,$FF,$7F ;
 $49A0 DEFB $FE,$00,$0F,$FF,$FF,$FC,$BF,$FC,$BF,$EA,$FF,$69,$F4,$44,$AD,$A3,$64,$D0,$23,$75,$D4,$50,$CE,$00,$7F,$FE,$BF,$5F,$DF,$FD,$FF,$FF ;
 $49C0 DEFB $FE,$04,$07,$FF,$FF,$FE,$81,$52,$4A,$89,$5C,$00,$5F,$FF,$BF,$E0,$8E,$AE,$18,$2F,$F1,$05,$49,$60,$7F,$FE,$BF,$7F,$DF,$FF,$FF,$7F ;
 $49E0 DEFB $EE,$20,$27,$FF,$FF,$FF,$DE,$25,$18,$01,$24,$7D,$49,$E0,$EE,$0C,$EB,$03,$D0,$01,$7F,$56,$14,$04,$7F,$FE,$BF,$7F,$DF,$FF,$FF,$FF ;
 $4A00 DEFB $FE,$81,$07,$FF,$FF,$F7,$FF,$FF,$C0,$2E,$01,$40,$E0,$09,$EA,$57,$DD,$FF,$B6,$DF,$FF,$FF,$E0,$81,$7F,$FE,$7E,$BF,$FF,$FF,$FF,$FF ;
 $4A20 DEFB $FC,$21,$0F,$FF,$FF,$FF,$FF,$FF,$E5,$8D,$2A,$FF,$EB,$AE,$B9,$E9,$58,$18,$C6,$82,$FF,$FF,$FF,$AC,$3F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4A40 DEFB $FE,$20,$07,$FF,$FF,$FF,$45,$FF,$E5,$FF,$E2,$FB,$C0,$40,$01,$D0,$43,$47,$34,$00,$80,$73,$E1,$04,$7F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4A60 DEFB $FC,$00,$07,$FF,$FD,$B9,$AA,$FF,$7F,$EC,$7E,$A2,$15,$40,$15,$52,$A0,$17,$14,$28,$EB,$40,$A1,$00,$3F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4A80 DEFB $DC,$00,$27,$FF,$FF,$4A,$AF,$28,$03,$EB,$5B,$90,$A7,$00,$55,$18,$9F,$00,$D1,$63,$E8,$14,$95,$00,$3F,$FE,$7F,$2A,$EB,$FB,$FE,$FF ;
 $4AA0 DEFB $FE,$00,$0F,$FF,$FF,$FF,$7F,$F9,$55,$F5,$BF,$FC,$51,$39,$57,$CC,$E2,$B8,$32,$BA,$E8,$A0,$3D,$00,$7F,$FE,$7F,$3F,$FF,$FB,$FE,$FF ;
 $4AC0 DEFB $FE,$00,$07,$FF,$FF,$FF,$7F,$31,$4F,$15,$B8,$7C,$2F,$5D,$D5,$80,$99,$96,$10,$17,$FA,$02,$B1,$50,$7F,$FE,$7F,$3F,$EF,$FB,$FF,$FF ;
 $4AE0 DEFB $DC,$80,$27,$FF,$FF,$FF,$D1,$93,$08,$02,$22,$3A,$89,$A0,$38,$09,$57,$05,$A0,$01,$7F,$AC,$16,$01,$3F,$FE,$7F,$7F,$FF,$FB,$FF,$FF ;
 $4B00 DEFB $FE,$81,$07,$FF,$FF,$F8,$00,$01,$FC,$15,$E0,$BF,$40,$33,$D6,$AF,$3E,$FF,$66,$DF,$FF,$FF,$E0,$81,$7F,$BE,$BE,$7F,$FF,$FF,$FF,$FF ;
 $4B20 DEFB $FC,$01,$0F,$FF,$FF,$FF,$FF,$FF,$E9,$ED,$D7,$D5,$11,$7D,$DD,$F4,$A8,$09,$83,$01,$7F,$FF,$FD,$F5,$1F,$FE,$BF,$FF,$FF,$FF,$FF,$FF ;
 $4B40 DEFB $FE,$20,$07,$FF,$FF,$FF,$45,$FF,$F2,$FF,$35,$76,$20,$30,$11,$F0,$21,$C6,$28,$01,$80,$9D,$E1,$04,$7F,$FE,$FF,$FF,$FF,$FF,$FF,$FF ;
 $4B60 DEFB $FE,$00,$87,$FF,$FD,$56,$D7,$00,$BF,$F6,$BB,$40,$0A,$82,$09,$20,$C0,$2A,$36,$48,$F2,$80,$61,$80,$7F,$FE,$BF,$FF,$FF,$7F,$FF,$FF ;
 $4B80 DEFB $FE,$00,$27,$FF,$FF,$A5,$78,$00,$03,$CB,$2B,$EA,$18,$3C,$9B,$2C,$BC,$00,$E0,$D3,$D4,$0B,$17,$00,$7F,$FE,$BF,$57,$DF,$FD,$FF,$7F ;
 $4BA0 DEFB $FE,$C0,$0F,$FF,$FF,$FF,$8F,$C6,$FE,$8B,$1B,$EF,$2F,$EE,$AF,$B0,$6D,$B0,$24,$BD,$50,$C0,$1A,$83,$7F,$FE,$BF,$5F,$DF,$FD,$FF,$FF ;
 $4BC0 DEFB $DE,$04,$07,$FF,$FF,$FF,$85,$99,$2A,$2A,$59,$87,$2F,$EA,$AB,$01,$12,$8F,$00,$0B,$F5,$01,$62,$60,$7F,$FE,$BF,$7F,$DF,$FF,$FF,$FF ;
 $4BE0 DEFB $FE,$80,$07,$FF,$FF,$FF,$D0,$4F,$88,$02,$12,$15,$91,$30,$06,$1A,$6F,$04,$E0,$01,$7F,$D4,$27,$01,$7F,$DE,$FF,$7F,$DF,$FF,$FF,$FF ;
 $4C00 DEFB $BE,$81,$07,$FF,$FF,$FF,$FF,$FE,$0F,$8A,$BF,$EA,$88,$4F,$BB,$C0,$E3,$7F,$56,$DF,$FF,$FF,$E0,$81,$7F,$DE,$7E,$BF,$FF,$FF,$FC,$00 ;
 $4C20 DEFB $DE,$01,$07,$FF,$FF,$FF,$FF,$FF,$E3,$F6,$AE,$7C,$AA,$2A,$AB,$F9,$54,$0D,$43,$01,$7F,$FF,$EA,$AE,$1F,$AE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4C40 DEFB $FC,$00,$07,$FF,$FF,$7F,$42,$FF,$F5,$7F,$2A,$CC,$E0,$08,$11,$F4,$80,$47,$58,$03,$03,$05,$E1,$40,$3F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4C60 DEFB $FC,$00,$87,$FF,$FD,$31,$18,$00,$5F,$FB,$45,$80,$05,$05,$29,$7C,$80,$5E,$33,$00,$A9,$25,$41,$00,$3F,$FE,$7F,$FF,$FE,$1F,$FE,$00 ;
 $4C80 DEFB $DE,$00,$27,$FF,$FF,$A3,$80,$01,$F3,$F4,$D5,$C4,$40,$7E,$67,$7A,$E8,$00,$C0,$E3,$E8,$0A,$05,$00,$7F,$FE,$7F,$3F,$EF,$FB,$FE,$FF ;
 $4CA0 DEFB $FE,$20,$27,$FF,$FF,$FF,$F0,$41,$91,$74,$AF,$7B,$D8,$55,$7F,$40,$ED,$78,$34,$5E,$A2,$A0,$0D,$04,$7F,$FE,$7F,$3F,$FF,$FB,$FE,$FF ;
 $4CC0 DEFB $FE,$00,$07,$FF,$FF,$FF,$DA,$69,$AD,$35,$B2,$3A,$97,$35,$7E,$02,$35,$97,$00,$0B,$F6,$80,$82,$D0,$7F,$FE,$7F,$3F,$EF,$FB,$FF,$FF ;
 $4CE0 DEFB $FC,$80,$07,$FF,$FF,$FF,$E8,$21,$00,$02,$E9,$AB,$21,$B0,$F9,$0C,$DF,$04,$68,$00,$BF,$E8,$36,$01,$3F,$FE,$7F,$7F,$FF,$FB,$FF,$FF ;
 $4D00 DEFB $FE,$21,$07,$FF,$FF,$FF,$FF,$FF,$EE,$45,$55,$55,$11,$9F,$76,$8F,$01,$BF,$6E,$DF,$FF,$FF,$E0,$84,$7F,$EE,$FE,$7F,$FF,$F8,$00,$55 ;
 $4D20 DEFB $FE,$08,$0F,$FF,$FF,$FF,$F7,$FF,$EB,$F0,$DA,$25,$55,$45,$55,$AC,$AC,$07,$85,$02,$1F,$FF,$F5,$55,$1F,$FE,$FF,$FF,$FF,$FF,$FF,$FF ;
 $4D40 DEFB $FE,$00,$07,$FF,$FE,$BF,$41,$7F,$FA,$BF,$F5,$B9,$20,$1C,$09,$70,$C0,$0E,$70,$62,$0F,$05,$E1,$80,$7F,$FE,$FF,$FF,$FF,$FF,$FF,$FF ;
 $4D60 DEFB $FA,$00,$87,$FF,$FD,$58,$D0,$00,$5F,$FC,$EA,$80,$00,$09,$02,$3C,$C0,$7C,$6B,$00,$F1,$AA,$A9,$80,$5F,$FE,$BF,$FF,$FE,$08,$01,$7E ;
 $4D80 DEFB $FE,$00,$07,$FF,$FF,$D0,$00,$02,$AF,$FA,$AF,$65,$31,$86,$2B,$3D,$B4,$80,$E0,$F3,$D0,$04,$0A,$00,$7F,$FE,$BF,$5F,$DF,$FF,$FF,$FF ;
 $4DA0 DEFB $FE,$01,$07,$FF,$FF,$FF,$FF,$82,$EA,$F8,$D4,$EF,$A6,$AA,$DF,$82,$DD,$3C,$24,$5F,$55,$50,$02,$80,$7F,$FE,$BF,$5F,$DF,$FD,$FF,$FF ;
 $4DC0 DEFB $FE,$04,$07,$FF,$FF,$FF,$A1,$38,$E7,$6B,$62,$7D,$8B,$9F,$80,$02,$6A,$8B,$00,$0B,$F5,$00,$62,$E0,$7F,$FE,$BF,$7F,$DF,$FF,$FF,$FF ;
 $4DE0 DEFB $FE,$80,$87,$FF,$FF,$FF,$E8,$20,$02,$02,$58,$7C,$21,$1B,$01,$15,$3F,$05,$D8,$00,$5F,$F4,$27,$01,$7F,$FE,$FF,$7F,$DF,$FD,$FF,$FF ;
 $4E00 DEFB $BE,$21,$07,$FF,$FF,$FF,$FF,$FF,$F6,$F0,$A2,$20,$06,$FA,$AA,$77,$00,$8F,$4D,$DF,$FF,$FF,$E0,$84,$7F,$FE,$7E,$BF,$C0,$01,$5F,$EE ;
 $4E20 DEFB $FE,$00,$07,$FF,$FF,$FF,$EB,$FF,$E3,$EA,$B9,$CA,$BF,$A8,$8B,$FF,$96,$03,$45,$03,$E0,$FF,$EB,$6E,$1F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4E40 DEFB $FC,$00,$07,$FF,$FE,$BF,$40,$9F,$FD,$4F,$CA,$29,$10,$64,$09,$58,$40,$0C,$F0,$96,$3F,$02,$E1,$40,$3F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $4E60 DEFB $DC,$00,$2F,$FF,$FD,$24,$3C,$00,$2E,$FF,$1E,$88,$3C,$75,$17,$3C,$20,$F8,$71,$80,$F8,$D4,$75,$00,$3F,$FE,$7F,$FF,$E0,$02,$AA,$BF ;
 $4E80 DEFB $FE,$00,$07,$FF,$FF,$E8,$00,$00,$51,$FC,$D5,$FA,$4E,$02,$B7,$6A,$EC,$80,$51,$3B,$AA,$1C,$0D,$00,$7F,$FE,$7F,$3F,$EF,$FB,$FE,$FF ;
 $4EA0 DEFB $FE,$00,$07,$FF,$FF,$FF,$FF,$82,$5D,$3C,$60,$94,$FD,$FF,$FF,$0C,$FE,$D8,$24,$5F,$AB,$E8,$01,$40,$7F,$FE,$7F,$3F,$EF,$FB,$FE,$FF ;
 $4EC0 DEFB $FE,$00,$27,$FF,$FF,$FF,$40,$9C,$65,$52,$A4,$FE,$CF,$C0,$03,$E4,$D5,$87,$80,$05,$FA,$80,$14,$D0,$7F,$DE,$7F,$3F,$FF,$FB,$FF,$FF ;
 $4EE0 DEFB $FC,$80,$07,$FF,$FF,$FF,$EA,$06,$01,$02,$B4,$00,$41,$8C,$0E,$19,$7F,$0A,$68,$00,$2F,$FB,$5E,$01,$3F,$FE,$7F,$7F,$FF,$FF,$FF,$FF ;
 $4F00 DEFB $FE,$21,$0F,$FF,$FF,$FF,$FF,$FF,$F1,$4E,$54,$00,$7F,$B7,$1B,$EA,$C0,$F2,$AD,$A7,$FF,$FF,$FF,$84,$7F,$EE,$FE,$00,$18,$FF,$FF,$FF ;
 $4F20 DEFB $FC,$08,$07,$FF,$FF,$FF,$DB,$FF,$EB,$DD,$54,$35,$60,$F5,$55,$7C,$6B,$03,$85,$00,$1F,$7F,$E9,$3F,$3F,$FE,$BF,$FF,$FF,$FF,$FF,$FF ;
 $4F40 DEFB $DE,$00,$07,$FF,$FD,$5F,$B0,$6F,$FE,$A7,$F5,$52,$00,$62,$09,$7C,$00,$09,$58,$9C,$7E,$81,$E1,$80,$7F,$FE,$FF,$FF,$FF,$FF,$FF,$FF ;
 $4F60 DEFB $FE,$80,$0F,$FF,$FE,$B4,$00,$00,$13,$FF,$DD,$58,$43,$8A,$0F,$3C,$CF,$F0,$68,$C1,$F4,$48,$19,$01,$7F,$FE,$BF,$00,$05,$55,$D7,$7F ;
 $4F80 DEFB $DE,$00,$0F,$FF,$FF,$F4,$00,$0F,$AA,$ED,$EA,$D5,$80,$0A,$6B,$75,$FC,$C0,$61,$57,$D4,$22,$1A,$00,$7F,$FE,$BF,$5F,$DF,$FF,$FF,$FF ;
 $4FA0 DEFB $FE,$01,$07,$FF,$FF,$FF,$FF,$42,$4A,$A2,$38,$FE,$6F,$80,$FF,$18,$FE,$AC,$28,$2F,$D6,$34,$00,$A0,$7F,$FE,$BF,$7F,$DF,$FF,$FF,$FF ;
 $4FC0 DEFB $FE,$04,$27,$FF,$FF,$FF,$A0,$54,$60,$E4,$24,$FD,$4B,$C0,$3E,$E7,$AB,$03,$08,$02,$FD,$41,$0D,$A0,$7F,$FE,$BF,$7F,$DF,$FF,$FF,$FF ;
 $4FE0 DEFB $FE,$90,$87,$FF,$FF,$FF,$D1,$71,$81,$02,$13,$01,$81,$04,$30,$2A,$BF,$0C,$B0,$00,$2F,$FC,$FD,$09,$7F,$FE,$FF,$7F,$FF,$FD,$FF,$FF ;
 $5000 DEFB $FC,$00,$07,$FF,$FF,$FF,$D1,$0C,$60,$02,$E0,$FE,$71,$C2,$20,$55,$FE,$15,$C0,$00,$2F,$FF,$EA,$00,$3F,$FE,$7F,$3F,$FF,$FF,$FF,$FF ;
 $5020 DEFB $BA,$00,$0F,$FF,$FF,$F7,$C0,$01,$38,$07,$5A,$AA,$E5,$5F,$40,$D6,$82,$30,$A3,$E0,$02,$FF,$F0,$00,$7F,$FE,$7F,$3F,$FF,$FF,$FF,$FF ;
 $5040 DEFB $FE,$00,$07,$FF,$FB,$01,$0E,$00,$7D,$85,$55,$40,$9D,$D0,$BF,$FE,$08,$01,$05,$55,$C0,$5F,$E0,$00,$7F,$DE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $5060 DEFB $FE,$80,$47,$FE,$80,$A0,$15,$30,$08,$80,$0B,$FF,$C1,$E0,$03,$10,$04,$14,$03,$FF,$D7,$0B,$E2,$01,$3F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $5080 DEFB $FE,$20,$0F,$FD,$01,$90,$41,$21,$C2,$65,$40,$49,$0F,$04,$26,$88,$C0,$04,$0F,$FF,$FD,$59,$F0,$04,$7F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $50A0 DEFB $FF,$90,$07,$FE,$A6,$20,$00,$AA,$83,$40,$75,$5D,$FE,$86,$82,$11,$50,$02,$1F,$FF,$FF,$54,$F0,$00,$7F,$FE,$7F,$00,$AA,$AB,$7F,$BF ;
 $50C0 DEFB $FF,$10,$87,$FF,$60,$80,$02,$A6,$4A,$AA,$BF,$FF,$00,$80,$3A,$85,$80,$A0,$0F,$FF,$FF,$D5,$E0,$00,$3F,$FE,$7F,$3F,$FF,$FB,$FE,$FF ;
 $50E0 DEFB $00,$00,$00,$00,$E8,$00,$80,$0A,$2A,$AA,$8B,$AA,$A0,$07,$87,$80,$28,$06,$02,$FF,$FF,$D7,$E2,$01,$7F,$FE,$7F,$3F,$FF,$FB,$FE,$FF ;
 $5100 DEFB $FE,$00,$07,$FF,$FF,$FF,$B0,$02,$10,$02,$00,$44,$A9,$A1,$20,$AA,$F6,$2B,$E0,$00,$2F,$FF,$F4,$00,$7F,$FE,$FF,$7F,$DF,$FD,$FF,$FF ;
 $5120 DEFB $FE,$00,$0F,$FF,$FF,$E8,$3E,$3F,$E6,$0E,$67,$FF,$DD,$1F,$B1,$AA,$C2,$28,$A2,$A0,$02,$FF,$F0,$00,$7F,$FC,$BF,$3F,$FF,$FF,$FF,$FF ;
 $5140 DEFB $FE,$00,$07,$FF,$E4,$06,$34,$80,$EA,$C0,$A9,$80,$8A,$A8,$3F,$F4,$10,$03,$01,$AA,$40,$5F,$E0,$00,$7F,$FE,$FF,$FF,$FF,$FF,$FF,$FF ;
 $5160 DEFB $FE,$80,$07,$FE,$81,$40,$1A,$28,$10,$C0,$15,$95,$60,$E0,$03,$20,$0A,$08,$03,$FA,$A9,$0B,$E0,$01,$7F,$FE,$FF,$FF,$FF,$FF,$FF,$FF ;
 $5180 DEFB $FE,$80,$0F,$FD,$01,$10,$41,$A0,$31,$35,$40,$55,$10,$24,$05,$89,$80,$08,$0F,$FE,$EA,$A8,$F0,$01,$7F,$FE,$FF,$FF,$FF,$FF,$FF,$FF ;
 $51A0 DEFB $DE,$90,$07,$FE,$CC,$20,$01,$56,$43,$C0,$1A,$AB,$F8,$0F,$45,$16,$B8,$02,$3F,$FF,$FA,$AC,$F0,$00,$7F,$FE,$BF,$15,$55,$FD,$FF,$7F ;
 $51C0 DEFB $FF,$10,$1F,$FF,$50,$00,$03,$17,$25,$55,$95,$5D,$00,$60,$C5,$07,$00,$C0,$0F,$FF,$FF,$A9,$E0,$00,$7F,$FE,$BF,$5F,$DF,$FD,$FF,$FF ;
 $51E0 DEFB $00,$00,$00,$00,$E8,$01,$00,$00,$15,$54,$1D,$5E,$40,$01,$1F,$00,$40,$0C,$05,$FF,$FE,$A7,$E0,$01,$7F,$FE,$BF,$5F,$DF,$FD,$FF,$FF ;
 $5200 DEFB $FC,$00,$07,$FF,$FF,$FF,$AF,$FC,$08,$02,$18,$6F,$99,$E1,$11,$4D,$E8,$26,$F0,$00,$2F,$FF,$E8,$00,$3F,$FE,$7F,$3F,$FF,$FF,$FF,$FF ;
 $5220 DEFB $BA,$00,$0F,$FF,$FF,$D0,$07,$F5,$58,$1F,$7B,$AA,$D8,$8F,$4F,$55,$C4,$50,$A6,$70,$01,$7F,$F0,$00,$7F,$FD,$7F,$3F,$FF,$FF,$FF,$FF ;
 $5240 DEFB $FE,$00,$47,$FF,$D8,$08,$E9,$41,$D5,$80,$07,$00,$85,$78,$3D,$F8,$60,$01,$01,$D5,$20,$5F,$E2,$00,$7F,$DE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $5260 DEFB $FE,$80,$47,$FE,$82,$80,$12,$50,$10,$80,$0A,$89,$B1,$E0,$00,$C0,$0C,$19,$17,$FF,$D5,$85,$E2,$01,$3F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $5280 DEFB $FE,$80,$0F,$FD,$02,$90,$01,$02,$88,$AF,$40,$49,$35,$44,$07,$11,$00,$10,$0F,$FF,$FF,$49,$F0,$01,$7F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $52A0 DEFB $FF,$80,$07,$FE,$A8,$20,$01,$AA,$4D,$C0,$0D,$56,$F8,$1E,$8B,$2C,$70,$04,$3F,$FF,$FF,$55,$F0,$00,$3F,$FE,$7F,$2A,$EB,$FB,$FE,$FF ;
 $52C0 DEFB $FF,$10,$BF,$FF,$A0,$00,$06,$AE,$FA,$AB,$FF,$AA,$80,$1F,$06,$0C,$01,$80,$0F,$FF,$FB,$D3,$E2,$00,$3F,$FE,$7F,$3F,$FF,$FB,$FE,$FF ;
 $52E0 DEFB $3F,$29,$F6,$A6,$F4,$02,$00,$00,$00,$A0,$20,$65,$A0,$00,$98,$00,$00,$08,$15,$FF,$FD,$D7,$E2,$01,$7F,$FE,$7F,$3F,$FF,$FB,$FE,$FF ;
 $5300 DEFB $FE,$00,$07,$FF,$FF,$FF,$40,$03,$C0,$02,$2C,$54,$49,$F1,$10,$9A,$D0,$46,$F8,$00,$17,$FF,$E0,$00,$7F,$FE,$BF,$7F,$DF,$FD,$FF,$FF ;
 $5320 DEFB $FE,$00,$0F,$FF,$FF,$D0,$3A,$80,$00,$3F,$FF,$FF,$70,$47,$AA,$BA,$C8,$A0,$A5,$B8,$01,$7F,$F0,$00,$7F,$FA,$FF,$3F,$FF,$FF,$FF,$FF ;
 $5340 DEFB $EE,$00,$27,$FF,$A0,$11,$52,$83,$A2,$C0,$09,$FF,$82,$B8,$1E,$F0,$00,$03,$01,$AA,$90,$2F,$E4,$00,$7F,$FE,$FF,$FF,$FF,$FF,$FF,$FF ;
 $5360 DEFB $FE,$80,$07,$FD,$04,$00,$20,$A0,$10,$C0,$05,$55,$50,$E0,$B1,$00,$18,$09,$0F,$EE,$AA,$C5,$E0,$01,$7F,$FE,$BF,$FF,$FF,$FF,$FF,$FF ;
 $5380 DEFB $FE,$80,$0F,$FD,$03,$10,$00,$82,$80,$9F,$C3,$C1,$CA,$88,$03,$21,$00,$00,$2F,$FF,$EA,$A8,$F0,$03,$7F,$FE,$BF,$FF,$FF,$7F,$FF,$FF ;
 $53A0 DEFB $FF,$90,$07,$FE,$CC,$20,$01,$16,$53,$E0,$02,$BC,$F0,$2D,$0D,$50,$20,$08,$3F,$FF,$FA,$AD,$F0,$00,$7F,$FE,$BF,$57,$DF,$FD,$FF,$7F ;
 $53C0 DEFB $FF,$10,$8F,$FF,$D0,$00,$04,$5D,$55,$5F,$55,$71,$40,$00,$04,$18,$03,$01,$0F,$FF,$FF,$AB,$E4,$00,$7F,$FE,$BF,$5F,$DF,$FD,$FF,$FF ;
 $53E0 DEFB $41,$A4,$48,$A9,$F4,$03,$00,$00,$01,$41,$C0,$46,$C0,$00,$00,$00,$00,$18,$0B,$FF,$FF,$AF,$E0,$01,$7F,$FE,$BF,$5F,$DF,$FD,$FF,$FF ;
 $5400 DEFB $BA,$00,$0F,$FF,$FF,$FE,$80,$00,$21,$02,$56,$38,$33,$D8,$80,$35,$E0,$44,$FC,$00,$17,$FF,$F0,$00,$3F,$FE,$7F,$3F,$FF,$FF,$FF,$FF ;
 $5420 DEFB $BE,$00,$0F,$FF,$FF,$D0,$D0,$3F,$C0,$7F,$FD,$92,$E7,$C7,$D5,$75,$81,$00,$6D,$5C,$01,$7F,$F0,$00,$3F,$FD,$7F,$3F,$FF,$FF,$FC,$00 ;
 $5440 DEFB $FE,$00,$47,$FF,$40,$22,$83,$0F,$04,$60,$16,$02,$41,$70,$0F,$E0,$00,$06,$03,$F5,$58,$2F,$E2,$00,$7F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $5460 DEFB $FE,$20,$47,$FD,$08,$00,$30,$C0,$12,$A2,$02,$C9,$A9,$E0,$42,$00,$30,$19,$2F,$FF,$FD,$65,$E2,$04,$7F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $5480 DEFB $FE,$80,$0F,$FD,$A6,$10,$00,$1D,$80,$95,$FF,$C1,$85,$08,$00,$22,$00,$00,$2F,$FB,$FF,$5D,$F0,$01,$7F,$FF,$7F,$FF,$FE,$1F,$FE,$00 ;
 $54A0 DEFB $FF,$90,$07,$FE,$A8,$20,$01,$2B,$2A,$FF,$C1,$E0,$E0,$3A,$07,$40,$50,$18,$3F,$FF,$FF,$55,$F0,$00,$3F,$FE,$7F,$3F,$EF,$FB,$FE,$FF ;
 $54C0 DEFB $FF,$10,$8F,$FF,$E8,$00,$06,$0A,$AB,$EA,$AA,$BF,$80,$00,$08,$30,$04,$81,$03,$FF,$FF,$D3,$E2,$00,$7F,$FE,$7F,$3F,$FF,$FB,$FE,$FF ;
 $54E0 DEFB $39,$6E,$48,$E9,$FA,$02,$00,$00,$00,$0E,$00,$45,$A0,$00,$00,$00,$00,$18,$17,$FF,$FD,$5F,$E2,$04,$7F,$FE,$7F,$3F,$FF,$FB,$FE,$FF ;
 $5500 DEFB $BA,$00,$1F,$FF,$FF,$FE,$83,$F8,$00,$01,$62,$00,$22,$EC,$80,$2A,$C0,$8A,$FC,$00,$0B,$FF,$F8,$00,$7F,$FE,$BF,$3F,$FF,$FD,$FF,$FF ;
 $5520 DEFB $BE,$00,$07,$FF,$FF,$A3,$07,$EA,$E0,$7F,$29,$8A,$98,$27,$BA,$EB,$02,$00,$68,$AA,$00,$BF,$E0,$00,$1F,$FE,$FF,$7F,$FF,$F8,$03,$D5 ;
 $5540 DEFB $FE,$80,$27,$FF,$40,$4D,$06,$36,$84,$40,$2A,$E3,$43,$F0,$0B,$A0,$00,$0A,$0B,$AA,$AC,$17,$E4,$01,$7F,$FE,$FF,$FF,$FF,$FF,$FF,$FF ;
 $5560 DEFB $FE,$20,$0F,$FD,$10,$00,$20,$80,$0C,$C4,$85,$55,$5A,$E0,$84,$00,$20,$32,$0F,$FA,$AA,$A5,$F0,$04,$7F,$FE,$BF,$FF,$FF,$FF,$FF,$FF ;
 $5580 DEFB $FE,$81,$0F,$FD,$55,$10,$00,$35,$81,$4A,$BA,$C1,$8A,$10,$3A,$44,$00,$00,$2F,$FF,$FA,$A4,$F0,$C1,$7F,$FE,$BF,$FF,$FE,$08,$01,$7E ;
 $55A0 DEFB $FF,$90,$07,$FE,$C8,$40,$02,$45,$35,$BF,$F0,$03,$40,$15,$00,$90,$A0,$10,$3F,$FF,$FE,$AD,$E0,$00,$5F,$FE,$BF,$5F,$DF,$FF,$FF,$FF ;
 $55C0 DEFB $FB,$54,$0F,$FF,$E8,$00,$0C,$55,$D7,$55,$55,$5F,$40,$03,$C0,$70,$05,$03,$0C,$FF,$FF,$AB,$E4,$01,$7F,$FE,$BF,$5F,$DF,$FD,$FF,$FF ;
 $55E0 DEFB $85,$21,$48,$A9,$FD,$01,$00,$00,$00,$48,$00,$86,$50,$00,$00,$00,$00,$10,$0F,$FF,$BA,$9F,$F0,$04,$7F,$FE,$BF,$5F,$DF,$FD,$FF,$FF ;
 $5600 DEFB $FE,$00,$0F,$FF,$FF,$FD,$05,$5E,$00,$01,$4C,$00,$22,$F6,$00,$55,$A1,$0C,$FE,$80,$0B,$FF,$F0,$00,$3F,$FE,$7F,$3F,$FF,$FF,$FF,$FF ;
 $5620 DEFB $BE,$00,$07,$FF,$FF,$5C,$38,$00,$01,$FF,$15,$52,$A7,$D3,$D7,$D7,$04,$00,$65,$55,$00,$BF,$E0,$00,$7F,$DE,$7F,$7F,$C3,$07,$FF,$FF ;
 $5640 DEFB $FE,$80,$47,$FF,$40,$1A,$0C,$4D,$08,$65,$56,$A2,$41,$F0,$05,$40,$00,$06,$03,$FD,$54,$0B,$E2,$01,$3F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $5660 DEFB $FE,$20,$4F,$FD,$00,$90,$41,$40,$04,$A4,$82,$C9,$8F,$C0,$48,$00,$40,$14,$0F,$FF,$FD,$55,$F2,$04,$7F,$FE,$7F,$FF,$FF,$FF,$FF,$FF ;
 $5680 DEFB $FA,$80,$0F,$FD,$A6,$20,$00,$6A,$81,$47,$55,$41,$88,$20,$E8,$84,$00,$01,$1F,$FF,$FF,$54,$F1,$53,$5B,$FE,$7F,$FF,$E0,$02,$AA,$BF ;
 $56A0 DEFB $FF,$90,$07,$FF,$68,$40,$02,$AA,$AA,$D7,$FC,$0C,$80,$0A,$A1,$21,$40,$20,$1F,$FF,$FF,$D5,$E0,$00,$3F,$FE,$7F,$3F,$EF,$FB,$FE,$FF ;
 $56C0 DEFB $FB,$44,$CF,$FF,$E8,$00,$38,$0A,$FA,$AA,$AA,$EE,$80,$04,$00,$E0,$0A,$06,$03,$FF,$FF,$D3,$E2,$01,$7F,$FE,$7F,$3F,$EF,$FB,$FE,$FF ;
 $56E0 DEFB $79,$20,$C7,$A6,$FE,$81,$00,$00,$00,$08,$00,$83,$AA,$00,$00,$00,$00,$28,$1F,$FF,$FD,$3F,$F2,$04,$7F,$FE,$7F,$3F,$EF,$FB,$FE,$FF ;
 $5700 DEFB $FE,$00,$0F,$FF,$FF,$F9,$02,$83,$C0,$00,$25,$55,$26,$FB,$80,$AA,$C1,$18,$F7,$60,$05,$FF,$F0,$00,$7F,$FE,$BF,$3F,$FF,$FF,$FF,$FF ;
 $5720 DEFB $FE,$00,$07,$FF,$FC,$E0,$C1,$80,$1F,$FF,$09,$4A,$8F,$F3,$FB,$AF,$04,$00,$5D,$AB,$80,$BF,$E0,$00,$7F,$FE,$FF,$00,$15,$BF,$FF,$FF ;
 $5740 DEFB $EE,$C0,$27,$FE,$80,$74,$08,$9A,$08,$42,$A6,$1C,$40,$E0,$03,$80,$02,$0C,$03,$6A,$AA,$0B,$E4,$03,$7F,$FE,$BF,$FF,$FF,$FF,$FF,$FF ;
 $5760 DEFB $FE,$20,$0F,$FD,$01,$10,$61,$9E,$02,$D5,$20,$55,$0F,$C0,$13,$04,$60,$24,$0F,$FF,$AA,$92,$F0,$04,$7F,$FE,$BF,$FF,$FF,$FF,$FF,$FF ;
 $5780 DEFB $8E,$91,$07,$FD,$44,$20,$00,$56,$81,$C1,$AA,$A3,$01,$41,$51,$08,$E0,$01,$1F,$FF,$DA,$AD,$E0,$C0,$7B,$FE,$BF,$00,$05,$55,$D7,$7F ;
 $57A0 DEFB $FF,$90,$07,$FF,$48,$40,$02,$5D,$95,$7D,$77,$F5,$00,$07,$51,$42,$80,$50,$1F,$FF,$FE,$A9,$E0,$00,$7F,$FE,$BF,$5F,$DF,$FF,$FF,$FF ;
 $57C0 DEFB $E3,$5C,$EF,$FF,$E8,$00,$40,$15,$55,$55,$45,$FD,$40,$08,$03,$C0,$14,$04,$02,$FF,$FE,$AB,$E4,$03,$7F,$FE,$BF,$7F,$DF,$FF,$FF,$FF ;
 $57E0 DEFB $00,$00,$00,$00,$FF,$41,$00,$00,$00,$18,$01,$02,$D5,$50,$00,$00,$00,$10,$3F,$FF,$FA,$7F,$F0,$04,$7F,$FE,$BF,$7F,$DF,$FF,$FF,$FF ; }
 $5800 DEFB $01,$38,$38,$38,$38,$38,$38,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$38,$38,$38,$38,$38,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ; {Attributes
 $5820 DEFB $01,$38,$38,$38,$38,$38,$38,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$38,$38,$38,$38,$38,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5840 DEFB $01,$38,$38,$38,$38,$38,$38,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$38,$38,$38,$38,$38,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5860 DEFB $01,$38,$38,$38,$38,$38,$38,$10,$18,$30,$30,$30,$30,$30,$30,$18,$18,$38,$38,$38,$38,$38,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5880 DEFB $01,$38,$38,$38,$38,$38,$38,$38,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$38,$38,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $58A0 DEFB $01,$38,$38,$38,$38,$38,$38,$38,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$28,$28,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $58C0 DEFB $01,$38,$38,$38,$38,$38,$38,$38,$30,$30,$30,$30,$30,$30,$30,$30,$30,$28,$28,$28,$28,$28,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $58E0 DEFB $01,$38,$38,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$28,$28,$28,$28,$10,$38,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5900 DEFB $01,$38,$38,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$38,$28,$28,$28,$28,$28,$38,$38,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5920 DEFB $01,$38,$38,$38,$38,$38,$10,$38,$28,$38,$38,$38,$38,$38,$38,$28,$28,$28,$28,$28,$28,$30,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5940 DEFB $01,$38,$38,$38,$10,$10,$10,$10,$28,$28,$38,$38,$38,$38,$38,$02,$28,$28,$28,$28,$28,$30,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5960 DEFB $01,$38,$38,$38,$10,$10,$10,$10,$10,$28,$28,$38,$38,$38,$38,$02,$28,$28,$28,$28,$30,$30,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5980 DEFB $01,$38,$38,$38,$10,$10,$10,$10,$10,$10,$10,$38,$38,$38,$38,$02,$28,$28,$28,$28,$30,$30,$30,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $59A0 DEFB $01,$38,$38,$38,$38,$10,$10,$28,$28,$28,$28,$38,$38,$38,$38,$02,$02,$28,$28,$28,$30,$30,$30,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $59C0 DEFB $01,$38,$38,$38,$28,$28,$28,$28,$28,$28,$38,$38,$38,$10,$10,$10,$10,$20,$28,$28,$30,$30,$30,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $59E0 DEFB $01,$38,$38,$38,$28,$28,$28,$28,$28,$28,$38,$38,$38,$10,$10,$10,$10,$20,$28,$28,$28,$30,$30,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5A00 DEFB $01,$38,$38,$38,$28,$28,$28,$28,$28,$28,$38,$38,$38,$10,$10,$10,$20,$20,$2C,$28,$28,$28,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5A20 DEFB $01,$38,$38,$38,$28,$28,$28,$28,$28,$2E,$30,$38,$30,$20,$10,$10,$20,$20,$20,$28,$28,$28,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5A40 DEFB $01,$38,$38,$28,$28,$28,$28,$28,$28,$30,$30,$38,$30,$20,$20,$20,$20,$20,$20,$28,$28,$28,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5A60 DEFB $01,$38,$38,$28,$28,$28,$28,$28,$28,$30,$30,$38,$30,$20,$20,$20,$20,$20,$20,$28,$28,$28,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5A80 DEFB $01,$38,$38,$28,$28,$28,$28,$28,$28,$30,$30,$38,$30,$20,$20,$20,$20,$20,$20,$28,$28,$28,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5AA0 DEFB $01,$38,$38,$28,$28,$28,$28,$28,$28,$30,$30,$30,$26,$20,$20,$20,$20,$20,$20,$28,$28,$28,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5AC0 DEFB $01,$38,$38,$28,$28,$28,$28,$28,$28,$28,$28,$28,$20,$20,$20,$20,$20,$20,$20,$28,$28,$28,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ;
 $5AE0 DEFB $02,$02,$02,$02,$28,$28,$28,$28,$28,$28,$28,$28,$20,$20,$20,$20,$20,$20,$20,$28,$28,$28,$38,$38,$01,$01,$01,$01,$01,$01,$01,$01 ; }

i$5B00 DEFB $00      ; @start=$6000

@org
@replace=/#CHARACTERSET,\i/#UDGARRAY1,attr=\1,scale=4,step=1;(#PC)-(#PC+$08)-$01-$08
@replace=/#CHARACTERS/#UDGARRAY6,attr=40,scale=4,step=6;(#PC)-(#PC+$1E5)-$01-$30
@replace=/#BANG/#UDGARRAY8,attr=2,scale=4,step=8;(#PC)-(#PC+$F8)-$01-$40
i$5B01

; Draw Text (alias).
;
; This is an alias for a jump to #R$CBD2.
@label=PRINT_TWO_TONE_TEXT_ALIAS
c$5B80 JP $CBD2      ;

; Displays The "Life" Images.
;
; An alias for a jump to #R$CC5A.
@label=DRAW_LIFE_IMAGES_ALIAS
c$5B83 JP $CC5A      ;

; Lives Memory Address.
@label=LIVES_ADDR
c$5B86 DEFW $CC59    ; The 16 bit memory location for the address that holds
                     ; how many lives the player has remaining.

; Jump Controls.
;
; Loads the 16 bit address stored at #R$CE12 into #REGhl and jumps to it.
@label=JUMP_CONTROL_METHOD
c$5B88 LD HL,($CE12) ;
 $5B8B JP (HL)       ;

; Scoring Preparation (alias).
;
; Used by the routine at #R$C607.
@label=SCORING_PREP_ALIAS
c$5B8C JP $CDDC      ;

; Character Address (alias).
;
; An alias for #R$D5B0 which returns the 16 bit memory location of a character
; from a given character index.
@label=CHARACTER_ADDR_ALIAS
c$5B8F JP $D5B0      ;

; Draw Character (alias).
;
; Used by the routines at #R$6380, #R$C661, #R$C720 and #R$FE00.
@label=DRAW_CHARACTER
c$5B92 JP $D5E6      ;

; Merge Shot (alias).
@label=MERGE_SHOT_ALIAS
c$5B95 JP $D5FA      ;

; Display The "Score" Images (alias).
;
; Used by the routines at #R$C422 and #R$C607.
@label=DRAW_SCORE_ALIAS
c$5B98 JP $CD90      ;

; Routine at 5B9B
c$5B9B LD BC,$0705   ; {Stashes a text attribute at #R$CBD0.
 $5B9E LD ($CBD0),BC ; #TABLE(default,centre)
                     ; { =h Value | =h Ink | =h Paper | =h Bright }
                     ; { $07 | $07 | $00 | $00 }
                     ; { $05 | $05 | $00 | $00 }
                     ; TABLE#}
*$5BA2 LD A,(HL)     ;
 $5BA3 CP $FF        ;
 $5BA5 RET Z         ;
 $5BA6 CP $30        ;
 $5BA8 JR NZ,$5BAC   ;
 $5BAA LD A,$3A      ;
*$5BAC PUSH HL       ;
 $5BAD PUSH DE       ;
 $5BAE CALL $CBFC    ;
 $5BB1 POP DE        ;
 $5BB2 POP HL        ;
 $5BB3 INC HL        ;
 $5BB4 INC E         ;
 $5BB5 LD A,E        ;
 $5BB6 AND $1F       ;
 $5BB8 JR NZ,$5BA2   ;
 $5BBA LD A,E        ;
 $5BBB ADD A,$20     ;
 $5BBD LD E,A        ;
 $5BBE AND $E0       ;

; Dueller Number 1.
;
; Populated initially by #R$C3EA.
@label=DUELLER_1
g$5BC0 DEFB $00      ; Dueller state ("0" is complete).
 $5BC1 DEFB $00      ; Dueller timer.
 $5BC2 DEFB $00
 $5BC3 DEFB $00      ; Dueller position.
 $5BC4 DEFW $0000    ; Screen position above dueller to display "EXTRA" or
                     ; points.
 $5BC6 DEFB $00
 $5BC7 DEFB $00      ; Bonus points (x100, e.g. "9" == "900").
 $5BC8 DEFB $00
 $5BC9 DEFB $00      ; Current frame?
 $5BCA DEFB $00      ; Character index frame 1.
 $5BCB DEFB $00      ; Character index frame 2.
 $5BCC DEFB $00      ; Character index frame 3.
 $5BCD DEFB $00
 $5BCE DEFB $00
 $5BCF DEFB $00
 $5BD0 DEFB $00

; Dueller Number 2.
;
; Populated initially by #R$C3EA.
@label=DUELLER_2
g$5BD1 DEFB $00      ; Dueller state ("0" is complete).
 $5BD2 DEFB $00      ; Dueller timer.
 $5BD3 DEFB $00
 $5BD4 DEFB $00      ; Dueller position.
 $5BD5 DEFW $0000    ; Screen position above dueller to display "EXTRA" or
                     ; points.
 $5BD7 DEFB $00
 $5BD8 DEFB $00      ; Bonus points (x100, e.g. "9" == "900").
 $5BD9 DEFB $00
 $5BDA DEFB $00      ; Current frame?
 $5BDB DEFB $00      ; Character index frame 1.
 $5BDC DEFB $00      ; Character index frame 2.
 $5BDD DEFB $00      ; Character index frame 3.
 $5BDE DEFB $00
 $5BDF DEFB $00
 $5BE0 DEFB $00
 $5BE1 DEFB $00

; Dueller Number 3.
;
; Populated initially by #R$C3EA.
@label=DUELLER_3
g$5BE2 DEFB $00      ; Dueller state ("0" is complete).
 $5BE3 DEFB $00      ; Dueller timer.
 $5BE4 DEFB $00
 $5BE5 DEFB $00      ; Dueller position.
 $5BE6 DEFB $00,$00  ; Screen position above dueller to display "EXTRA" or
                     ; points.
 $5BE8 DEFB $00
 $5BE9 DEFB $00      ; Bonus points (x100, e.g. "9" == "900").
 $5BEA DEFB $00
 $5BEB DEFB $00      ; Current frame?
 $5BEC DEFB $00      ; Character index frame 1.
 $5BED DEFB $00      ; Character index frame 2.
 $5BEE DEFB $00      ; Character index frame 3.
 $5BEF DEFB $00
 $5BF0 DEFB $00
 $5BF1 DEFB $00
 $5BF2 DEFB $00

; Data block at 5BF3
b$5BF3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BFB DEFB $00,$00,$00,$00,$00,$FF,$00,$00
 $5C03 DEFB $00,$20,$05,$23,$20,$20,$23,$05
 $5C0B DEFB $00,$00,$00,$00,$00,$01,$00,$06
 $5C13 DEFB $00,$0B,$00,$01,$00,$01,$00,$06
 $5C1B DEFB $00,$10,$00,$00,$00,$00,$00,$00
 $5C23 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C2B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C33 DEFB $00,$00,$00,$00,$3C,$40,$00,$FF
 $5C3B DEFB $CD,$00,$00,$5F,$00,$00,$00,$0A
 $5C43 DEFB $00,$FF,$0A,$00,$0B,$07,$00,$00
 $5C4B DEFB $C8,$5D,$C8,$5D,$B6,$5C,$BB,$5C
 $5C53 DEFB $CB,$5C,$5B,$5D,$CA,$5C,$DC,$5D
 $5C5B DEFB $DF,$5D,$5A,$5D,$36,$5E,$E1,$5D
 $5C63 DEFB $E1,$5D,$E1,$5D,$2D,$92,$5C,$00
 $5C6B DEFB $02,$00,$00,$00,$00,$00,$00,$66
 $5C73 DEFB $CC,$B6,$1A,$00,$00,$47,$03,$00
 $5C7B DEFB $58,$FF,$00,$00,$21,$00,$5B,$21
 $5C83 DEFB $17,$80,$40,$E0,$50,$21,$14,$21
 $5C8B DEFB $17,$03,$38,$00,$38,$00,$00,$00
 $5C93 DEFB $00,$01,$00,$00,$00,$00,$00,$00
 $5C9B DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA3 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CAB DEFB $00,$00,$00,$00,$00

; Control method
;
; Whether to utilise keyboard or joystick for input.
@label=CONTROLLER
g$5CB0 DEFB $00
; #TABLE(default,centre)
; { =h Value | =h Method }
; { $00 | Kempston }
; { $01 | Keyboard }
; TABLE#

; Current Level
@label=LEVEL
g$5CB1 DEFB $00

i$5CB2

; Data block at 5CF0
b$5CF0 DEFB $36,$34,$39,$34,$34,$0E,$00,$00
 $5CF8 DEFB $B0,$FD,$00,$3A,$F4,$66,$2C,$30
 $5D00 DEFB $0E,$00,$00,$00,$00,$00,$3A,$F3
 $5D08 DEFB $66,$3A,$F4,$36,$34,$39,$33,$36
 $5D10 DEFB $0E,$00,$00,$A8,$FD,$00,$2C,$32
 $5D18 DEFB $35,$31,$0E,$00,$00,$FB,$00,$00
 $5D20 DEFB $3A,$EF,$22,$22,$AA,$3A,$E7,$30
 $5D28 DEFB $0E,$00,$00,$00,$00,$00,$3A,$F2
 $5D30 DEFB $30,$0E,$00,$00,$00,$00,$00,$3A
 $5D38 DEFB $F4,$32,$33,$36,$31,$33,$0E,$00
 $5D40 DEFB $00,$3D,$5C,$00,$2C,$30,$0E,$00
 $5D48 DEFB $00,$00,$00,$00,$3A,$F9,$C0,$35
 $5D50 DEFB $36,$30,$37,$30,$0E,$00,$00,$06
 $5D58 DEFB $DB,$00,$0D,$00,$14,$3B,$00,$F8
 $5D60 DEFB $22,$77,$65,$73,$74,$20,$62,$61
 $5D68 DEFB $6E,$6B,$22,$CA,$31,$30,$0E,$00
 $5D70 DEFB $00,$0A,$00,$00,$3A,$F8,$22,$57
 $5D78 DEFB $45,$53,$54,$20,$42,$41,$4E,$4B
 $5D80 DEFB $22,$AF,$32,$34,$35,$37,$36,$0E
 $5D88 DEFB $00,$00,$00,$60,$00,$2C,$34,$30
 $5D90 DEFB $39,$36,$30,$0E,$00,$00,$00,$A0
 $5D98 DEFB $00,$0D,$03,$E8,$2A,$00,$EB,$66
 $5DA0 DEFB $3D,$32,$35,$37,$34,$36,$0E,$00
 $5DA8 DEFB $00,$92,$64,$00,$CC,$37,$30,$30
 $5DB0 DEFB $30,$30,$0E,$91,$08,$B8,$00,$00
 $5DB8 DEFB $3A,$F5,$66,$3B,$22,$5F,$5F,$22
 $5DC0 DEFB $3B,$C2,$BE,$66,$3A,$F3,$66,$0D
 $5DC8 DEFB $E6,$00,$00,$B1,$FD,$00,$00,$00
 $5DD0 DEFB $B0,$FD,$00,$00,$00,$01,$00,$00
 $5DD8 DEFB $0A,$00,$04,$80,$EF,$22,$22,$0D
 $5DE0 DEFB $80,$00,$00,$06,$DB,$00,$00,$00
 $5DE8 DEFB $00,$00,$00,$20,$00,$1B,$00,$40
 $5DF0 DEFB $00,$00,$03,$AA,$20,$20,$20,$20
 $5DF8 DEFB $20,$20,$20,$20,$20,$00,$1B,$00
 $5E00 DEFB $80,$20,$80,$AA,$23,$5D,$00,$00
 $5E08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5F98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5FD0 DEFB $00,$00,$00,$00,$DB,$02,$4D,$00
 $5FD8 DEFB $A0,$3F,$CE,$0B,$6D,$40,$CE,$0B
 $5FE0 DEFB $B7,$2D,$E1,$5D,$DC,$5D,$06,$DB
 $5FE8 DEFB $2B,$2D,$65,$33,$02,$80,$ED,$10
 $5FF0 DEFB $0D,$00,$09,$00,$85,$1C,$10,$1C
 $5FF8 DEFB $52,$1B,$76,$1A,$DB,$82,$FD,$3E

; High Score Table
@label=HIGHSCORE_TABLE
t$6000 DEFM "LUCKY LUCKE     "
 $6010 DEFM "BILLY THE KID   "
 $6020 DEFM "BUFALO BILL     "
 $6030 DEFM "CALAMITY JANE   "
 $6040 DEFM "JESSE JAMES     "
 $6050 DEFM "JOE DALTON      "
 $6060 DEFM "THE GOOD        "
 $6070 DEFM "JACK THE FAST   "
 $6080 DEFM "DAVY CROCKETT   "
 $6090 DEFM "PANCHO VILLA    "
 $60A0 DEFM "ALVARO MATEOS H "
 $60B0 DEFM "JACK DALTON     "
 $60C0 DEFM "THOMY WILLIANS  "
 $60D0 DEFM "LIBERTY B       "
 $60E0 DEFM "THE UGLY        "
 $60F0 DEFM "GRAL GRANT      "
 $6100 DEFM "JIMMY THE BLACK "
 $6110 DEFM "WILLIAM DALTON  "
 $6120 DEFM "THE BAD         "
 $6130 DEFM "GRAL CASTER     "
 $6140 DEFM "FRANK MATA      "
 $6150 DEFM "KIT WILLIANS    "
 $6160 DEFM "ALBERT THE HEAVY"
 $6170 DEFM "THE SCREW MAN   "
 $6180 DEFM "AVERELL DALTON  "
 $6190 DEFM "ANDREW THE BELL "
 $61A0 DEFM "GRAL LEE        "
 $61B0 DEFM "THE CHICKEN MAN "
 $61C0 DEFM "THE BLONDE GIRL "
 $61D0 DEFM "TOM SMITH       "
 $61E0 DEFS $20
 $6200 DEFM "275430"
 $6206 DEFM "265980"
 $620C DEFM "263230"
 $6212 DEFM "258980"
 $6218 DEFM "254070"
 $621E DEFM "255430"
 $6224 DEFM "250990"
 $622A DEFM "245430"
 $6230 DEFM "240510"
 $6236 DEFM "241610"
 $623C DEFM "231940"
 $6242 DEFM "226450"
 $6248 DEFM "226520"
 $624E DEFM "223320"
 $6254 DEFM "213230"
 $625A DEFM "204510"
 $6260 DEFM "200640"
 $6266 DEFM "195910"
 $626C DEFM "196900"
 $6272 DEFM "193030"
 $6278 DEFM "188320"
 $627E DEFM "176510"
 $6284 DEFM "164760"
 $628A DEFM "157110"
 $6290 DEFM "149070"
 $6296 DEFM "139970"
 $629C DEFM "135150"
 $62A2 DEFM "129110"
 $62A8 DEFM "129730"
 $62AE DEFM "125960"
 $62B4 DEFM "115240"
 $62BA DEFM "115040"
 $62C0 DEFM "105590"
 $62C6 DEFM "102670"
 $62CC DEFM "099200"
 $62D2 DEFM "096960"
 $62D8 DEFM "088620"
 $62DE DEFM "084720"
 $62E4 DEFM "078000"
 $62EA DEFM "069990"
 $62F0 DEFM "063130"
 $62F6 DEFM "058530"
 $62FC DEFM "000500"

i$6302

; Level Selection
;
; Used by the routine at #R$FE00.
@label=LEVEL_SELECT
c$6380 LD DE,$5B80   ; {#REGhl points to $5B80 on entry as #REGde is also $5B80
 $6383 LD BC,$0040   ; - this does nothing, it just creates a very short pause.
 $6386 LDIR          ; }
 $6388 LD HL,$4000   ; {Writes $00 to all 6144 bytes of the screen bufffer
 $638B LD DE,$4001   ; (i.e. "blanks it").
 $638E LD BC,$1AFF   ;
 $6391 LD (HL),$00   ;
 $6393 LDIR          ; }
 $6395 LD HL,$58A0   ; {Writes $28 to $58A0 in the attribute buffer $100 times.
 $6398 LD DE,$58A1   ; #TABLE(default,centre)
 $639B LD BC,$0100   ; { =h Value | =h Ink | =h Paper | =h Bright }
 $639E LD (HL),$28   ; { $28 | $00 | $05 | $00 }
 $63A0 LDIR          ; TABLE#}
 $63A2 LD (HL),$20   ; {...and $20 to the attribute buffer another $5F times (following on from the previous location).
 $63A4 LD BC,$005F   ; #TABLE(default,centre)
 $63A7 LDIR          ; { =h Value | =h Ink | =h Paper | =h Bright }
                     ; { $20 | $00 | $04 | $00 }
                     ; TABLE#}
; Prints the labels to the screen.
 $63A9 LD HL,$64AC   ; {Pass #R$64AC to #R$647C (index "1").
 $63AC LD A,$01      ;
 $63AE CALL $647C    ; }
 $63B1 LD HL,$64B3   ; {Pass #R$64B3 to #R$647C (index "2").
 $63B4 LD A,$02      ;
 $63B6 CALL $647C    ; }
 $63B9 LD HL,$64BA   ; {Pass #R$64BA to #R$647C (index "3").
 $63BC LD A,$03      ;
 $63BE CALL $647C    ; }
 $63C1 LD HL,$6492   ; {Points to #R$6492 and sends it to #R$5B80
 $63C4 LD DE,$4023   ; #TABLE(default,centre)
 $63C7 LD BC,$0706   ; { =h Value | =h Ink | =h Paper | =h Bright }
 $63CA CALL $5B80    ; { $07 | $07 | $00 | $00 }
                     ; { $06 | $06 | $00 | $00 }
                     ; TABLE#}
; Prints the images to the screen.
 $63CD LD A,$25      ; {Calls #R$643A with (#R$B450(draw | $25)) for index "1".
 $63CF LD B,$01      ;
 $63D1 CALL $643A    ; }
 $63D4 LD A,$08      ; {Calls #R$643A with (#R$7880(draw | $08)) for index "2".
 $63D6 LD B,$02      ;
 $63D8 CALL $643A    ; }
 $63DB LD A,$19      ; {Calls #R$643A with (#R$9B90(draw | $19)) for index "3".
 $63DD LD B,$03      ;
 $63DF CALL $643A    ; }
; Loop for getting user keyboard input.
 $63E2 LD HL,$5CB1   ; Used later for setting the current level at #R$5CB1.
@label=LEVEL_SELECT_INPUT
*$63E5 LD A,$F7      ; {Read keys 1-2-3-4-5.
 $63E7 IN A,($FE)    ; }
 $63E9 RRA           ; {If "1" is pressed, jump to #R$63F4.
 $63EA JR NC,$63F4   ; }
 $63EC RRA           ; {If "2" is pressed, jump to #R$6405.
 $63ED JR NC,$6405   ; }
 $63EF RRA           ; {If "3" is pressed, jump to #R$6416.
 $63F0 JR NC,$6416   ; }
 $63F2 JR $63E5      ; Cycle back to #R$63E5.
; Act on level being selected.
@label=LEVEL_SELECT_LEVEL_1
*$63F4 LD (HL),$01   ; {Store $01 at #R$5CB1 and call #R$6427 with
 $63F6 LD A,$26      ; (#R$B660(shot | $26)) for index "1".
 $63F8 LD B,$01      ;
 $63FA CALL $6427    ; }
 $63FD LD A,$01      ; {Jump to #R$6457 with #REGhl=#R$64AC and #REGa=$01.
 $63FF LD HL,$64AC   ;
 $6402 JP $6457      ; }
@label=LEVEL_SELECT_LEVEL_3
*$6405 LD (HL),$02   ; {Store $02 at #R$5CB1 and call #R$6427 with
 $6407 LD A,$09      ; (#R$7A90(shot | $09)) for index "2".
 $6409 LD B,$02      ;
 $640B CALL $6427    ; }
 $640E LD A,$02      ; {Jump to #R$6457 with #REGhl=#R$64B3 and #REGa=$02.
 $6410 LD HL,$64B3   ;
 $6413 JP $6457      ; }
@label=LEVEL_SELECT_LEVEL_6
*$6416 LD (HL),$03   ; {Store $03 at #R$5CB1 and call #R$6427 with
 $6418 LD A,$1A      ; (#R$9DA0(shot | $1A)) for index "3".
 $641A LD B,$03      ;
 $641C CALL $6427    ; }
 $641F LD A,$03      ; {Jump to #R$6457 with #REGhl=#R$64BA and #REGa=$03.
 $6421 LD HL,$64BA   ;
 $6424 JP $6457      ; }
; Animates the selected bandit being shot.
@label=LS_ANIMATE_SHOT
*$6427 PUSH BC       ;
 $6428 CALL $643A    ; Call #R$643A.
 $642B CALL $6500    ; Call #R$6500.
 $642E LD B,$10      ; {Short interrupt driven halt loop.
@label=LS_ANIMATE_SHOT_HALT_LOOP
*$6430 HALT          ;
 $6431 DJNZ $6430    ; }
 $6433 POP BC        ;
 $6434 LD A,$27      ; {Call #R$643A with (#R$B870(floor | $27)).
 $6436 CALL $643A    ; }
 $6439 RET           ; Return.
; Prints the images to the screen.
@label=LEVEL_SELECT_GRAPHICS
*$643A PUSH BC       ; {Stash the current counter and convert the accumulator
 $643B CALL $5B8F    ; which is holding a character ID into their memory
                     ; location.}
 $643E EX DE,HL      ;
 $643F POP AF        ;
 $6440 LD HL,$40A2   ; {Work out which screen position to use;
 $6443 DEC A         ; #TABLE(default,centre)
 $6444 JR Z,$644F    ; { =h #REGa | =h Screen Address }
 $6446 LD HL,$40AD   ; { $01 | $40A2 }
 $6449 DEC A         ; { $02 | $40AD }
 $644A JR Z,$644F    ; { $03 | $40B8 }
 $644C LD HL,$40B8   ; TABLE#}
@label=LS_GRAPHICS_SKIP
*$644F LD B,$58      ; {Set the dimensions and call #R$5B92.
 $6451 LD C,$06      ;
 $6453 CALL $5B92    ; }
 $6456 RET           ; Return.
; Flashes the selected level text.
@label=LS_TEXT_FLASH
*$6457 LD B,$08      ; {This prints #R$64C1 and the passed level copy alternately with a delay caused by a HALT loop
 $6459 LD C,A        ;           (which continues execution after an interrupt is fired), the sequence repeats $08 times.
@label=LS_TEXT_FLASH_LOOP
*$645A PUSH HL       ;
 $645B PUSH BC       ;
 $645C LD A,C        ;
 $645D CALL $647C    ;
 $6460 LD B,$10      ;
@label=LS_FLASH_HALT_LOOP_1
*$6462 HALT          ;
 $6463 DJNZ $6462    ;
 $6465 LD HL,$64C1   ;
 $6468 POP BC        ;
 $6469 PUSH BC       ;
 $646A LD A,C        ;
 $646B CALL $647C    ;
 $646E LD B,$10      ;
@label=LS_FLASH_HALT_LOOP_2
*$6470 HALT          ;
 $6471 DJNZ $6470    ;
 $6473 POP BC        ;
 $6474 POP HL        ;
 $6475 DJNZ $645A    ;
 $6477 LD A,C        ;
 $6478 CALL $647C    ; }
 $647B RET           ; Return.
; Print level select copy to the screen.
@label=LEVEL_SELECT_PRINT
*$647C LD DE,$5022   ; {First, work out which screen position to use;
 $647F DEC A         ; #TABLE(default,centre)
 $6480 JR Z,$648B    ; { =h #REGa | =h Screen Address }
 $6482 LD DE,$502D   ; { $01 | $5022 }
 $6485 DEC A         ; { $02 | $502D }
 $6486 JR Z,$648B    ; { $03 | $5038 }
 $6488 LD DE,$5038   ; TABLE#}
*$648B LD BC,$0702   ; {Then call the print routine at #R$5B80.
 $648E CALL $5B80    ; #TABLE(default,centre)
                     ; { =h Value | =h Ink | =h Paper | =h Bright }
                     ; { $07 | $07 | $00 | $00 }
                     ; { $02 | $02 | $00 | $00 }
                     ; TABLE#}
 $6491 RET           ; Return.

; Level Selection Text
@label=LEVEL_SELECT_COPY
t$6492 DEFM "CHOOSE THE LEVEL PREFERED",$FF ; "CHOOSE THE LEVEL PREFERED"
@label=LEVEL_SELECT_ONE
 $64AC DEFM " ONE  ",$FF                    ; "ONE"
@label=LEVEL_SELECT_THREE
 $64B3 DEFM " THREE",$FF                    ; "THREE"
@label=LEVEL_SELECT_SIX
 $64BA DEFM "  SIX ",$FF                    ; "SIX"
@label=LEVEL_SELECT_WHITESPACE
 $64C1 DEFM "      ",$FF                    ; "WHITESPACE"

; Unused
u$64C8 DEFB $C3,$90,$EA

i$64CB

; Sounds.
;
; Used by the routines at #R$6380, #R$C422 and #R$D307.
@label=SHOT_SOUND_1_ALIAS
c$6500 JR $6537                 ;
; This entry point is used by the routines at #R$C000 and #R$D307.
@label=SHOT_SOUND_2_ALIAS
*$6502 JR $653F                 ;
; This entry point is used by the routine at #R$D307.
@label=SHOT_SOUND_3_ALIAS
*$6504 JR $6547                 ;
 $6506 DEFW $2020               ;
 $6508 DEFW $2020               ;
 $650A DEFW $2020               ;
 $650C DEFW $2020               ;
 $650E DEFW $2020               ;
 $6510 DEFW $2020               ;
 $6512 DEFW $2020               ;
 $6514 DEFW $2020               ;
 $6516 DEFW $2020               ;
 $6518 DEFW $2020               ;
 $651A DEFB $20,$00,$00,$00,$00 ;
; Sound data.
@label=DATA_SOUND_1
 $651F DEFW $0A02               ;
 $6521 DEFW $4060               ;
 $6523 DEFW $0803               ;
 $6525 DEFW $00C0               ;
@label=DATA_SOUND_2
 $6527 DEFW $0A02               ;
 $6529 DEFW $2040               ;
 $652B DEFW $0803               ;
 $652D DEFW $80F0               ;
@label=DATA_SOUND_3
 $652F DEFW $0A02               ;
 $6531 DEFW $4050               ;
 $6533 DEFW $0803               ;
 $6535 DEFW $8000               ;
; Shot sound 1.
@label=SHOT_SOUND_1
*$6537 LD IX,$651F              ; {Calls #R$654F using #R$651F.
 $653B CALL $654F               ; }
 $653E RET                      ; Return.
; Shot sound 2.
@label=SHOT_SOUND_2
*$653F LD IX,$6527              ; {Calls #R$654F using #R$6527.
 $6543 CALL $654F               ; }
 $6546 RET                      ; Return.
; Shot sound 3.
@label=SHOT_SOUND_3
*$6547 LD IX,$652F              ; {Calls #R$654F using #R$652F.
 $654B CALL $654F               ; }
 $654E RET                      ; Return.
@label=PLAY_SHOT_SOUND
*$654F CALL $655E               ; Call #R$655E.
 $6552 INC IX                   ; {Increase #REGix by 4.
 $6554 INC IX                   ;
 $6556 INC IX                   ;
 $6558 INC IX                   ; }
 $655A CALL $655E               ; Call #R$655E.
 $655D RET                      ; Return.
@label=SHOT_SOUND
*$655E LD E,(IX+$00)            ; {jjj
 $6561 LD A,$18                 ;
*$6563 XOR $18                  ;
 $6565 OUT ($FE),A              ;
 $6567 LD C,(IX+$01)            ;
*$656A XOR $18                  ;
 $656C OUT ($FE),A              ; }
 $656E LD B,(IX+$02)            ;
@label=SHOT_SOUND_LOOPBACK
*$6571 DJNZ $6571               ;
 $6573 DEC C                    ;
 $6574 JR NZ,$656A              ;
 $6576 LD D,(IX+$03)            ;
*$6579 DEC D                    ;
 $657A JR NZ,$6579              ;
 $657C DEC E                    ;
 $657D JR NZ,$6563              ;
 $657F RET                      ; Return.

; Unused
u$6580 DEFB $00,$00,$00,$00,$CD,$A2,$65,$06
 $6588 DEFB $03,$76,$10,$FD,$CD,$A2,$65,$06
 $6590 DEFB $05,$76,$10,$FD,$CD,$A2,$65,$76
 $6598 DEFB $76,$CD,$A2,$65,$76,$76,$CD,$A2
 $65A0 DEFB $65,$C9,$DD,$21,$2F,$65,$CD,$4F
 $65A8 DEFB $65,$C9,$C3,$90,$EA,$C9

; Unused
u$65AE DEFB $C3,$90,$EA

i$65B1

; Routine at 6600
;
; Used by the routine at #R$D3EA.
c$6600 LD B,$0B      ;
*$6602 PUSH BC       ;
 $6603 CALL $6610    ;
 $6606 CALL $6647    ;
 $6609 CALL $6647    ;
 $660C POP BC        ;
 $660D DJNZ $6602    ;
 $660F RET           ;
*$6610 LD IX,$5B00   ;
 $6614 LD HL,$406A   ;
 $6617 LD B,$0D      ;
 $6619 CALL $6664    ;
 $661C LD HL,$407E   ;
 $661F LD DE,$407F   ;
 $6622 LD IX,$5B00   ;
 $6626 LD B,$0D      ;
 $6628 CALL $66A0    ;
 $662B LD HL,$59EA   ;
 $662E LD IX,$5B00   ;
 $6632 LD B,$0D      ;
 $6634 CALL $6681    ;
 $6637 LD HL,$59FE   ;
 $663A LD DE,$59FF   ;
 $663D LD IX,$5B00   ;
 $6641 LD B,$0D      ;
 $6643 CALL $668E    ;
 $6646 RET           ;
*$6647 LD IX,$5B00   ;
 $664B LD HL,$502A   ;
 $664E LD B,$04      ;
 $6650 CALL $6664    ;
 $6653 LD HL,$503E   ;
 $6656 LD DE,$503F   ;
 $6659 LD IX,$5B00   ;
 $665D LD B,$04      ;
 $665F CALL $66A0    ;
 $6662 RET           ;
 $6663 RET           ;
*$6664 LD C,$08      ;
*$6666 LD A,(HL)     ;
 $6667 LD (IX+$00),A ;
 $666A INC IX        ;
 $666C INC H         ;
 $666D DEC C         ;
 $666E JR NZ,$6666   ;
 $6670 LD A,H        ;
 $6671 SUB $08       ;
 $6673 LD H,A        ;
 $6674 LD DE,$0020   ;
 $6677 ADD HL,DE     ;
 $6678 LD A,H        ;
 $6679 AND $07       ;
 $667B CALL NZ,$66D2 ;
 $667E DJNZ $6664    ;
 $6680 RET           ;
*$6681 LD A,(HL)     ;
 $6682 LD (IX+$00),A ;
 $6685 LD DE,$FFE0   ;
 $6688 ADD HL,DE     ;
 $6689 INC IX        ;
 $668B DJNZ $6681    ;
 $668D RET           ;
*$668E PUSH BC       ;
 $668F LD BC,$001F   ;
 $6692 LD A,(IX+$00) ;
 $6695 LDDR          ;
 $6697 LD (DE),A     ;
 $6698 INC IX        ;
 $669A DEC HL        ;
 $669B DEC DE        ;
 $669C POP BC        ;
 $669D DJNZ $668E    ;
 $669F RET           ;
*$66A0 PUSH BC       ;
 $66A1 PUSH HL       ;
 $66A2 CALL $66BA    ;
 $66A5 POP HL        ;
 $66A6 LD BC,$0020   ;
 $66A9 ADD HL,BC     ;
 $66AA LD A,H        ;
 $66AB AND $07       ;
 $66AD JR Z,$66B3    ;
 $66AF LD A,H        ;
 $66B0 ADD A,$07     ;
 $66B2 LD H,A        ;
*$66B3 PUSH HL       ;
 $66B4 POP DE        ;
 $66B5 INC DE        ;
 $66B6 POP BC        ;
 $66B7 DJNZ $66A0    ;
 $66B9 RET           ;
*$66BA PUSH HL       ;
 $66BB PUSH HL       ;
 $66BC LD BC,$001F   ;
 $66BF LD A,(IX+$00) ;
 $66C2 INC IX        ;
 $66C4 LDDR          ;
 $66C6 LD (DE),A     ;
 $66C7 POP DE        ;
 $66C8 POP HL        ;
 $66C9 INC H         ;
 $66CA INC D         ;
 $66CB INC DE        ;
 $66CC LD A,H        ;
 $66CD AND $07       ;
 $66CF RET Z         ;
 $66D0 JR $66BA      ;
*$66D2 LD A,H        ;
 $66D3 ADD A,$07     ;
 $66D5 LD H,A        ;
 $66D6 RET           ;
 $66D7 JP $EA90      ;
 $66DA NOP           ;
 $66DB NOP           ;
 $66DC NOP           ;
 $66DD NOP           ;
 $66DE NOP           ;
 $66DF NOP           ;
 $66E0 NOP           ;
 $66E1 NOP           ;
 $66E2 NOP           ;
 $66E3 NOP           ;
 $66E4 NOP           ;
 $66E5 NOP           ;
 $66E6 NOP           ;
 $66E7 NOP           ;
 $66E8 NOP           ;
 $66E9 NOP           ;
 $66EA NOP           ;
 $66EB NOP           ;
 $66EC NOP           ;
 $66ED NOP           ;
 $66EE NOP           ;
 $66EF NOP           ;
 $66F0 NOP           ;
 $66F1 NOP           ;
 $66F2 NOP           ;
 $66F3 NOP           ;
 $66F4 NOP           ;
 $66F5 NOP           ;
 $66F6 NOP           ;
 $66F7 NOP           ;
 $66F8 NOP           ;
 $66F9 NOP           ;
 $66FA NOP           ;
 $66FB NOP           ;
 $66FC NOP           ;
 $66FD NOP           ;
 $66FE NOP           ;
 $66FF NOP           ;
; This entry point is used by the routine at #R$D3EA.
*$6700 LD B,$0B      ;
*$6702 PUSH BC       ;
 $6703 CALL $6710    ;
 $6706 CALL $6747    ;
 $6709 CALL $6747    ;
 $670C POP BC        ;
 $670D DJNZ $6702    ;
 $670F RET           ;
*$6710 LD IX,$5B00   ;
 $6714 LD HL,$406A   ;
 $6717 LD B,$0D      ;
 $6719 CALL $677E    ;
 $671C LD HL,$4061   ;
 $671F LD DE,$4060   ;
 $6722 LD IX,$5B00   ;
 $6726 LD B,$0D      ;
 $6728 CALL $67BA    ;
 $672B LD HL,$586A   ;
 $672E LD IX,$5B00   ;
 $6732 LD B,$0D      ;
 $6734 CALL $679B    ;
 $6737 LD HL,$5861   ;
 $673A LD DE,$5860   ;
 $673D LD IX,$5B00   ;
 $6741 LD B,$0D      ;
 $6743 CALL $67A8    ;
 $6746 RET           ;
*$6747 LD IX,$5B00   ;
 $674B LD HL,$502A   ;
 $674E LD B,$04      ;
 $6750 CALL $677E    ;
 $6753 LD HL,$5021   ;
 $6756 LD DE,$5020   ;
 $6759 LD IX,$5B00   ;
 $675D LD B,$04      ;
 $675F CALL $67BA    ;
 $6762 LD HL,$5A20   ;
 $6765 LD IX,$5B00   ;
 $6769 LD B,$04      ;
 $676B CALL $679B    ;
 $676E LD HL,$5A21   ;
 $6771 LD DE,$5A20   ;
 $6774 LD IX,$5B00   ;
 $6778 LD B,$04      ;
 $677A CALL $67A8    ;
 $677D RET           ;
*$677E LD C,$08      ;
*$6780 LD A,(HL)     ;
 $6781 LD (IX+$00),A ;
 $6784 INC IX        ;
 $6786 INC H         ;
 $6787 DEC C         ;
 $6788 JR NZ,$6780   ;
 $678A LD A,H        ;
 $678B SUB $08       ;
 $678D LD H,A        ;
 $678E LD DE,$0020   ;
 $6791 ADD HL,DE     ;
 $6792 LD A,H        ;
 $6793 AND $07       ;
 $6795 CALL NZ,$67EC ;
 $6798 DJNZ $677E    ;
 $679A RET           ;
*$679B LD A,(HL)     ;
 $679C LD (IX+$00),A ;
 $679F LD DE,$0020   ;
 $67A2 ADD HL,DE     ;
 $67A3 INC IX        ;
 $67A5 DJNZ $679B    ;
 $67A7 RET           ;
*$67A8 PUSH BC       ;
 $67A9 LD BC,$001F   ;
 $67AC LD A,(IX+$00) ;
 $67AF LDIR          ;
 $67B1 LD (DE),A     ;
 $67B2 INC IX        ;
 $67B4 INC HL        ;
 $67B5 INC DE        ;
 $67B6 POP BC        ;
 $67B7 DJNZ $67A8    ;
 $67B9 RET           ;
*$67BA PUSH BC       ;
 $67BB PUSH DE       ;
 $67BC CALL $67D4    ;
 $67BF POP HL        ;
 $67C0 LD BC,$0020   ;
 $67C3 ADD HL,BC     ;
 $67C4 LD A,H        ;
 $67C5 AND $07       ;
 $67C7 JR Z,$67CD    ;
 $67C9 LD A,H        ;
 $67CA ADD A,$07     ;
 $67CC LD H,A        ;
*$67CD PUSH HL       ;
 $67CE POP DE        ;
 $67CF INC HL        ;
 $67D0 POP BC        ;
 $67D1 DJNZ $67BA    ;
 $67D3 RET           ;
*$67D4 PUSH DE       ;
 $67D5 PUSH DE       ;
 $67D6 LD BC,$001F   ;
 $67D9 LD A,(IX+$00) ;
 $67DC INC IX        ;
 $67DE LDIR          ;
 $67E0 LD (DE),A     ;
 $67E1 POP DE        ;
 $67E2 POP HL        ;
 $67E3 INC H         ;
 $67E4 INC D         ;
 $67E5 INC HL        ;
 $67E6 LD A,H        ;
 $67E7 AND $07       ;
 $67E9 RET Z         ;
 $67EA JR $67D4      ;
*$67EC LD A,H        ;
 $67ED ADD A,$07     ;
 $67EF LD H,A        ;
 $67F0 RET           ;
 $67F1 JP $EA90      ;
 $67F4 NOP           ;
 $67F5 NOP           ;
 $67F6 NOP           ;
 $67F7 NOP           ;
 $67F8 NOP           ;
 $67F9 NOP           ;
 $67FA NOP           ;
 $67FB NOP           ;
 $67FC NOP           ;
 $67FD NOP           ;
 $67FE NOP           ;
 $67FF NOP           ;

; Jack Vicious (bandit)
;
; JACK VISCIOUS - The sponging swindler of the WEST. Don't hesitate
;       - shoot whenever you see his face.
;
; .
;
; Bandit 1 (draw | $00)
@label=CHARACTER_00
b$6800 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-00*)
 $6806 DEFB $00,$00,$02,$00,$00,$00 ;
 $680C DEFB $00,$00,$0D,$80,$00,$00 ;
 $6812 DEFB $00,$00,$10,$40,$00,$00 ;
 $6818 DEFB $00,$01,$9F,$C6,$00,$00 ;
 $681E DEFB $00,$03,$7F,$F9,$00,$00 ;
 $6824 DEFB $00,$02,$8F,$C1,$00,$00 ;
 $682A DEFB $00,$05,$00,$00,$80,$00 ;
 $6830 DEFB $00,$06,$AA,$A0,$80,$00 ;
 $6836 DEFB $00,$0D,$40,$18,$40,$00 ;
 $683C DEFB $00,$0A,$90,$44,$40,$00 ;
 $6842 DEFB $00,$0D,$98,$C4,$40,$00 ;
 $6848 DEFB $00,$06,$85,$44,$80,$00 ;
 $684E DEFB $00,$03,$0F,$84,$00,$00 ;
 $6854 DEFB $00,$00,$DF,$E8,$00,$00 ;
 $685A DEFB $00,$00,$FF,$F0,$00,$00 ;
 $6860 DEFB $00,$00,$7F,$E0,$00,$00 ;
 $6866 DEFB $00,$00,$7F,$F0,$00,$00 ;
 $686C DEFB $00,$01,$BF,$EC,$00,$00 ;
 $6872 DEFB $00,$07,$DF,$DF,$80,$00 ;
 $6878 DEFB $00,$1B,$EF,$DF,$E0,$00 ;
 $687E DEFB $00,$23,$FF,$9F,$98,$00 ;
 $6884 DEFB $00,$63,$E7,$9F,$C4,$00 ;
 $688A DEFB $00,$73,$E7,$8F,$C4,$00 ;
 $6890 DEFB $00,$73,$E3,$0F,$CC,$00 ;
 $6896 DEFB $00,$57,$E2,$0F,$CC,$00 ;
 $689C DEFB $00,$47,$E1,$1F,$D4,$00 ;
 $68A2 DEFB $00,$27,$E0,$9F,$C4,$00 ;
 $68A8 DEFB $00,$47,$E1,$1F,$C8,$00 ;
 $68AE DEFB $00,$47,$E1,$1F,$C8,$00 ;
 $68B4 DEFB $00,$47,$E0,$9F,$C4,$00 ;
 $68BA DEFB $00,$47,$E1,$1F,$C4,$00 ;
 $68C0 DEFB $00,$43,$E1,$0F,$C8,$00 ;
 $68C6 DEFB $01,$E1,$C0,$8F,$C8,$00 ;
 $68CC DEFB $02,$D1,$81,$03,$D0,$80 ;
 $68D2 DEFB $05,$29,$01,$01,$15,$40 ;
 $68D8 DEFB $05,$E9,$01,$02,$AB,$40 ;
 $68DE DEFB $04,$C9,$00,$82,$9A,$80 ;
 $68E4 DEFB $04,$CB,$10,$82,$8D,$C0 ;
 $68EA DEFB $02,$12,$8B,$42,$8F,$E0 ;
 $68F0 DEFB $05,$ED,$FF,$26,$91,$E0 ;
 $68F6 DEFB $0E,$DD,$44,$3A,$7F,$E0 ;
 $68FC DEFB $0E,$CD,$FF,$FE,$11,$E0 ;
 $6902 DEFB $0F,$F8,$0F,$FE,$1F,$E0 ;
 $6908 DEFB $0F,$08,$7E,$FE,$19,$C0 ;
 $690E DEFB $0F,$F9,$F8,$FC,$0F,$A0 ;
 $6914 DEFB $07,$1F,$F3,$FC,$12,$10 ;
 $691A DEFB $03,$EF,$FF,$FC,$27,$90 ;
 $6920 DEFB $00,$47,$8F,$FC,$26,$10 ;
 $6926 DEFB $00,$76,$7E,$7E,$27,$90 ;
 $692C DEFB $00,$75,$FC,$7E,$12,$A0 ;
 $6932 DEFB $00,$77,$F0,$3E,$0B,$C0 ;
 $6938 DEFB $00,$37,$F0,$3E,$04,$80 ;
 $693E DEFB $00,$37,$F0,$1E,$03,$00 ;
 $6944 DEFB $00,$27,$E0,$1F,$00,$00 ;
 $694A DEFB $00,$37,$E0,$1F,$00,$00 ;
 $6950 DEFB $00,$37,$C0,$1F,$00,$00 ;
 $6956 DEFB $00,$17,$C0,$1F,$00,$00 ;
 $695C DEFB $00,$1F,$C0,$1F,$00,$00 ;
 $6962 DEFB $00,$1F,$C0,$0F,$80,$00 ;
 $6968 DEFB $00,$1F,$C0,$0F,$80,$00 ;
 $696E DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $6974 DEFB $00,$0F,$C0,$1D,$80,$00 ;
 $697A DEFB $00,$0E,$C0,$0A,$40,$00 ;
 $6980 DEFB $00,$0D,$00,$1F,$C0,$00 ;
 $6986 DEFB $00,$1B,$C0,$1F,$80,$00 ;
 $698C DEFB $00,$1F,$C0,$0F,$80,$00 ;
 $6992 DEFB $00,$0F,$C0,$1F,$80,$00 ;
 $6998 DEFB $00,$07,$C0,$0F,$80,$00 ;
 $699E DEFB $00,$07,$C0,$0F,$80,$00 ;
 $69A4 DEFB $00,$07,$C0,$0F,$80,$00 ;
 $69AA DEFB $00,$07,$C0,$0F,$80,$00 ;
 $69B0 DEFB $00,$07,$C0,$0F,$80,$00 ;
 $69B6 DEFB $00,$07,$C0,$0F,$80,$00 ;
 $69BC DEFB $00,$07,$C0,$0F,$80,$00 ;
 $69C2 DEFB $00,$07,$F5,$5F,$80,$00 ;
 $69C8 DEFB $00,$07,$EA,$BF,$80,$00 ;
 $69CE DEFB $00,$3F,$F5,$5F,$C0,$00 ;
 $69D4 DEFB $01,$FF,$FA,$BF,$E0,$00 ;
 $69DA DEFB $07,$FF,$F5,$5F,$F8,$00 ;
 $69E0 DEFB $07,$FE,$6A,$A9,$FE,$00 ;
 $69E6 DEFB $05,$55,$55,$55,$7E,$00 ;
 $69EC DEFB $0A,$AA,$AA,$AA,$AA,$00 ;
 $69F2 DEFB $05,$55,$55,$55,$54,$00 ;
 $69F8 DEFB $00,$2A,$AA,$AA,$A0,$00 ;
 $69FE DEFB $00,$05,$55,$54,$00,$00 ;
 $6A04 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A0A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 1 (shot | $01)
@label=CHARACTER_01
 $6A10 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-01*)
 $6A16 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A1C DEFB $00,$00,$00,$00,$00,$00 ;
 $6A22 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A28 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A2E DEFB $00,$00,$00,$00,$00,$00 ;
 $6A34 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A3A DEFB $00,$00,$00,$00,$00,$00 ;
 $6A40 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A46 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A4C DEFB $00,$00,$00,$00,$00,$00 ;
 $6A52 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A58 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A5E DEFB $00,$00,$00,$00,$00,$00 ;
 $6A64 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A6A DEFB $00,$00,$00,$00,$00,$00 ;
 $6A70 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A76 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A7C DEFB $00,$00,$00,$00,$00,$00 ;
 $6A82 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A88 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A8E DEFB $00,$00,$00,$00,$00,$00 ;
 $6A94 DEFB $00,$00,$00,$00,$00,$00 ;
 $6A9A DEFB $00,$00,$00,$00,$00,$00 ;
 $6AA0 DEFB $00,$00,$00,$00,$00,$00 ;
 $6AA6 DEFB $00,$00,$00,$00,$00,$00 ;
 $6AAC DEFB $00,$00,$00,$00,$00,$00 ;
 $6AB2 DEFB $00,$00,$00,$00,$00,$00 ;
 $6AB8 DEFB $00,$00,$00,$00,$00,$00 ;
 $6ABE DEFB $00,$00,$00,$00,$00,$00 ;
 $6AC4 DEFB $00,$00,$00,$00,$00,$00 ;
 $6ACA DEFB $00,$00,$00,$7F,$C0,$00 ;
 $6AD0 DEFB $00,$00,$01,$80,$30,$00 ;
 $6AD6 DEFB $00,$00,$02,$1E,$08,$00 ;
 $6ADC DEFB $00,$00,$04,$21,$04,$00 ;
 $6AE2 DEFB $00,$00,$04,$22,$84,$00 ;
 $6AE8 DEFB $00,$00,$04,$2C,$84,$00 ;
 $6AEE DEFB $00,$2E,$04,$21,$84,$00 ;
 $6AF4 DEFB $00,$57,$BC,$3F,$84,$00 ;
 $6AFA DEFB $00,$8F,$C4,$1F,$07,$80 ;
 $6B00 DEFB $01,$17,$E2,$00,$08,$E0 ;
 $6B06 DEFB $02,$B1,$ED,$00,$10,$F8 ;
 $6B0C DEFB $05,$61,$CE,$C0,$7C,$84 ;
 $6B12 DEFB $0A,$20,$8F,$BF,$FF,$02 ;
 $6B18 DEFB $14,$41,$0F,$EC,$FC,$82 ;
 $6B1E DEFB $28,$42,$0F,$E4,$FC,$60 ;
 $6B24 DEFB $50,$84,$0F,$E4,$FC,$11 ;
 $6B2A DEFB $A0,$84,$0F,$E4,$FC,$01 ;
 $6B30 DEFB $40,$84,$0F,$E8,$FC,$09 ;
 $6B36 DEFB $01,$08,$0F,$E4,$FC,$C5 ;
 $6B3C DEFB $01,$88,$0F,$E0,$FC,$35 ;
 $6B42 DEFB $1C,$48,$0F,$E4,$FC,$0B ;
 $6B48 DEFB $03,$48,$03,$E4,$F8,$77 ;
 $6B4E DEFB $7D,$56,$03,$C2,$78,$0D ;
 $6B54 DEFB $02,$B8,$02,$04,$08,$00 ;
 $6B5A DEFB $01,$F8,$02,$04,$08,$00 ;
 $6B60 DEFB $00,$B0,$61,$08,$08,$00 ;
 $6B66 DEFB $00,$00,$F3,$BF,$B8,$00 ;
 $6B6C DEFB $00,$01,$FB,$B1,$B8,$00 ;
 $6B72 DEFB $00,$1B,$F7,$FF,$FF,$80 ;
 $6B78 DEFB $00,$3B,$B0,$7B,$FF,$CE ;
 $6B7E DEFB $07,$FF,$FF,$FB,$FF,$F1 ;
 $6B84 DEFB $08,$19,$FF,$FB,$FF,$E1 ;
 $6B8A DEFB $08,$09,$FF,$80,$07,$C1 ;
 $6B90 DEFB $08,$07,$F8,$00,$07,$83 ;
 $6B96 DEFB $06,$03,$F8,$00,$0F,$C4 ;
 $6B9C DEFB $01,$86,$F8,$00,$0F,$68 ;
 $6BA2 DEFB $00,$6D,$38,$00,$0C,$B0 ;
 $6BA8 DEFB $00,$02,$10,$00,$08,$40 ;
 $6BAE DEFB $00,$01,$20,$00,$08,$80 ;
 $6BB4 DEFB $00,$00,$C0,$00,$05,$00 ;
 $6BBA DEFB $00,$00,$00,$00,$02,$00 ;
 $6BC0 DEFB $00,$00,$00,$00,$00,$00 ;
 $6BC6 DEFB $00,$00,$00,$00,$00,$00 ;
 $6BCC DEFB $00,$00,$00,$00,$00,$00 ;
 $6BD2 DEFB $00,$00,$05,$55,$00,$00 ;
 $6BD8 DEFB $00,$00,$AA,$AA,$A0,$00 ;
 $6BDE DEFB $00,$01,$55,$55,$50,$00 ;
 $6BE4 DEFB $00,$02,$AA,$AA,$A8,$00 ;
 $6BEA DEFB $00,$01,$55,$55,$54,$00 ;
 $6BF0 DEFB $00,$02,$AA,$AA,$A8,$00 ;
 $6BF6 DEFB $00,$05,$55,$55,$54,$00 ;
 $6BFC DEFB $00,$02,$AA,$AA,$A8,$00 ;
 $6C02 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C08 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C0E DEFB $00,$00,$00,$00,$00,$00 ;
 $6C14 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C1A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 1 (floor | $02)
@label=CHARACTER_02
 $6C20 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-02*)
 $6C26 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C2C DEFB $00,$00,$00,$00,$00,$00 ;
 $6C32 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C38 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C3E DEFB $00,$00,$00,$00,$00,$00 ;
 $6C44 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C4A DEFB $00,$00,$00,$00,$00,$00 ;
 $6C50 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C56 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C5C DEFB $00,$00,$00,$00,$00,$00 ;
 $6C62 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C68 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C6E DEFB $00,$00,$00,$00,$00,$00 ;
 $6C74 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C7A DEFB $00,$00,$00,$00,$00,$00 ;
 $6C80 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C86 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C8C DEFB $00,$00,$00,$00,$00,$00 ;
 $6C92 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C98 DEFB $00,$00,$00,$00,$00,$00 ;
 $6C9E DEFB $00,$00,$00,$00,$00,$00 ;
 $6CA4 DEFB $00,$00,$00,$00,$00,$00 ;
 $6CAA DEFB $00,$00,$00,$00,$00,$00 ;
 $6CB0 DEFB $00,$00,$00,$00,$00,$00 ;
 $6CB6 DEFB $00,$00,$00,$00,$00,$00 ;
 $6CBC DEFB $00,$00,$00,$00,$00,$00 ;
 $6CC2 DEFB $00,$00,$00,$00,$00,$00 ;
 $6CC8 DEFB $00,$00,$00,$00,$00,$00 ;
 $6CCE DEFB $00,$00,$00,$00,$00,$00 ;
 $6CD4 DEFB $00,$00,$00,$00,$00,$00 ;
 $6CDA DEFB $00,$00,$00,$00,$00,$00 ;
 $6CE0 DEFB $00,$00,$00,$00,$00,$00 ;
 $6CE6 DEFB $00,$00,$00,$00,$00,$00 ;
 $6CEC DEFB $00,$00,$00,$00,$00,$00 ;
 $6CF2 DEFB $00,$00,$00,$00,$00,$00 ;
 $6CF8 DEFB $00,$00,$00,$00,$00,$00 ;
 $6CFE DEFB $00,$00,$00,$00,$00,$00 ;
 $6D04 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D0A DEFB $00,$00,$00,$00,$00,$00 ;
 $6D10 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D16 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D1C DEFB $00,$00,$00,$00,$00,$00 ;
 $6D22 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D28 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D2E DEFB $00,$00,$00,$00,$00,$00 ;
 $6D34 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D3A DEFB $00,$00,$00,$00,$00,$00 ;
 $6D40 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D46 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D4C DEFB $00,$00,$00,$00,$00,$00 ;
 $6D52 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D58 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D5E DEFB $00,$00,$00,$00,$00,$00 ;
 $6D64 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D6A DEFB $00,$00,$00,$00,$00,$00 ;
 $6D70 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D76 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D7C DEFB $00,$00,$00,$00,$00,$00 ;
 $6D82 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D88 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D8E DEFB $00,$00,$00,$00,$00,$00 ;
 $6D94 DEFB $00,$00,$00,$00,$00,$00 ;
 $6D9A DEFB $00,$00,$00,$00,$00,$00 ;
 $6DA0 DEFB $00,$00,$00,$00,$00,$00 ;
 $6DA6 DEFB $00,$00,$00,$38,$00,$00 ;
 $6DAC DEFB $00,$00,$01,$C7,$00,$00 ;
 $6DB2 DEFB $00,$00,$02,$10,$80,$00 ;
 $6DB8 DEFB $00,$00,$04,$EE,$40,$00 ;
 $6DBE DEFB $00,$00,$07,$FF,$E0,$00 ;
 $6DC4 DEFB $00,$00,$0F,$13,$E0,$00 ;
 $6DCA DEFB $00,$00,$07,$D7,$E0,$07 ;
 $6DD0 DEFB $00,$00,$0F,$FF,$E0,$19 ;
 $6DD6 DEFB $07,$E0,$1C,$CC,$30,$31 ;
 $6DDC DEFB $08,$18,$7F,$FF,$FC,$61 ;
 $6DE2 DEFB $08,$0F,$FF,$EF,$FF,$C1 ;
 $6DE8 DEFB $08,$07,$FF,$EF,$FF,$81 ;
 $6DEE DEFB $06,$03,$FF,$FF,$FE,$C2 ;
 $6DF4 DEFB $01,$86,$FF,$55,$FD,$6C ;
 $6DFA DEFB $0A,$ED,$3E,$AA,$B8,$B8 ;
 $6E00 DEFB $15,$52,$15,$55,$78,$50 ;
 $6E06 DEFB $0A,$AC,$2A,$AA,$B8,$A8 ;
 $6E0C DEFB $01,$56,$75,$55,$5D,$50 ;
 $6E12 DEFB $00,$AB,$EA,$02,$AE,$A0 ;
 $6E18 DEFB $00,$15,$50,$00,$55,$40 ;
 $6E1E DEFB $00,$0A,$A0,$00,$0A,$80 ;
 $6E24 DEFB $00,$00,$00,$00,$00,$00 ;
 $6E2A DEFB $00,$00,$00,$00,$00,$00 ; }
; #UDGARRAY*character-00,100;character-01;character-02;(jack-frames)

; Green Jordan (customer)
;
; GREEN JORDAN - The farmer. The untiring worker who goes to the
;       bank to put in his savings. You should not shoot
;       him.
;
; .
;
; Green Jordan (depositing | $03)
@label=CHARACTER_03
b$6E30 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-03*)
 $6E36 DEFB $00,$00,$00,$00,$00,$00 ;
 $6E3C DEFB $00,$00,$00,$00,$00,$00 ;
 $6E42 DEFB $00,$00,$00,$00,$00,$00 ;
 $6E48 DEFB $00,$00,$00,$00,$00,$00 ;
 $6E4E DEFB $00,$00,$00,$00,$00,$00 ;
 $6E54 DEFB $00,$00,$01,$F0,$00,$00 ;
 $6E5A DEFB $00,$00,$03,$F8,$00,$00 ;
 $6E60 DEFB $00,$00,$03,$F8,$00,$00 ;
 $6E66 DEFB $00,$00,$03,$F8,$00,$00 ;
 $6E6C DEFB $00,$00,$73,$F8,$E0,$00 ;
 $6E72 DEFB $00,$00,$FE,$0F,$F0,$00 ;
 $6E78 DEFB $00,$01,$FF,$FF,$F8,$00 ;
 $6E7E DEFB $00,$01,$FA,$0F,$F8,$00 ;
 $6E84 DEFB $00,$00,$F0,$01,$F0,$00 ;
 $6E8A DEFB $00,$00,$60,$90,$E0,$00 ;
 $6E90 DEFB $00,$00,$30,$01,$80,$00 ;
 $6E96 DEFB $00,$00,$28,$62,$80,$00 ;
 $6E9C DEFB $00,$00,$34,$05,$00,$00 ;
 $6EA2 DEFB $00,$00,$1A,$AB,$00,$00 ;
 $6EA8 DEFB $00,$00,$14,$06,$00,$00 ;
 $6EAE DEFB $00,$00,$0A,$AA,$00,$00 ;
 $6EB4 DEFB $00,$00,$35,$55,$80,$00 ;
 $6EBA DEFB $00,$00,$CE,$AC,$60,$00 ;
 $6EC0 DEFB $00,$03,$0D,$FC,$18,$00 ;
 $6EC6 DEFB $00,$04,$0C,$4C,$04,$00 ;
 $6ECC DEFB $00,$08,$0C,$4C,$02,$00 ;
 $6ED2 DEFB $00,$08,$0C,$4C,$02,$00 ;
 $6ED8 DEFB $00,$08,$0C,$8C,$42,$00 ;
 $6EDE DEFB $00,$10,$2C,$8C,$41,$00 ;
 $6EE4 DEFB $00,$10,$2C,$8C,$21,$00 ;
 $6EEA DEFB $00,$10,$EC,$4C,$21,$00 ;
 $6EF0 DEFB $00,$11,$4C,$46,$21,$00 ;
 $6EF6 DEFB $00,$FA,$58,$46,$21,$E0 ;
 $6EFC DEFB $00,$76,$98,$87,$F2,$40 ;
 $6F02 DEFB $00,$0B,$18,$47,$95,$80 ;
 $6F08 DEFB $00,$3F,$98,$86,$6E,$00 ;
 $6F0E DEFB $00,$30,$18,$86,$3E,$00 ;
 $6F14 DEFB $00,$3F,$98,$46,$03,$00 ;
 $6F1A DEFB $00,$30,$38,$86,$7F,$00 ;
 $6F20 DEFB $00,$3F,$38,$86,$03,$00 ;
 $6F26 DEFB $00,$20,$B8,$46,$FF,$00 ;
 $6F2C DEFB $00,$44,$78,$46,$82,$00 ;
 $6F32 DEFB $00,$5F,$30,$86,$BD,$00 ;
 $6F38 DEFB $00,$54,$30,$4D,$01,$00 ;
 $6F3E DEFB $00,$5F,$30,$FE,$7C,$80 ;
 $6F44 DEFB $00,$45,$7F,$FE,$50,$80 ;
 $6F4A DEFB $00,$5F,$7F,$FE,$7C,$80 ;
 $6F50 DEFB $00,$24,$FF,$FE,$15,$00 ;
 $6F56 DEFB $00,$1F,$FB,$FF,$7D,$00 ;
 $6F5C DEFB $00,$01,$FB,$FF,$82,$00 ;
 $6F62 DEFB $00,$01,$FD,$FF,$FC,$00 ;
 $6F68 DEFB $00,$01,$F5,$FF,$C0,$00 ;
 $6F6E DEFB $00,$01,$F5,$FF,$C0,$00 ;
 $6F74 DEFB $00,$00,$FA,$FF,$C0,$00 ;
 $6F7A DEFB $00,$00,$EE,$FF,$80,$00 ;
 $6F80 DEFB $00,$00,$F3,$7F,$80,$00 ;
 $6F86 DEFB $00,$00,$FF,$7F,$80,$00 ;
 $6F8C DEFB $00,$00,$FF,$7F,$80,$00 ;
 $6F92 DEFB $00,$00,$FF,$7F,$80,$00 ;
 $6F98 DEFB $00,$00,$FF,$7F,$00,$00 ;
 $6F9E DEFB $00,$00,$FF,$7F,$00,$00 ;
 $6FA4 DEFB $00,$00,$6F,$6F,$00,$00 ;
 $6FAA DEFB $00,$00,$1E,$73,$00,$00 ;
 $6FB0 DEFB $00,$00,$7E,$3F,$00,$00 ;
 $6FB6 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $6FBC DEFB $00,$00,$3E,$3E,$00,$00 ;
 $6FC2 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $6FC8 DEFB $00,$00,$3C,$38,$00,$00 ;
 $6FCE DEFB $00,$00,$76,$3F,$00,$00 ;
 $6FD4 DEFB $00,$00,$5E,$2F,$00,$00 ;
 $6FDA DEFB $00,$00,$5E,$2F,$00,$00 ;
 $6FE0 DEFB $00,$00,$5E,$2F,$00,$00 ;
 $6FE6 DEFB $00,$00,$5E,$2F,$00,$00 ;
 $6FEC DEFB $00,$00,$5E,$2F,$00,$00 ;
 $6FF2 DEFB $00,$00,$5E,$2F,$00,$00 ;
 $6FF8 DEFB $00,$00,$5E,$2F,$00,$00 ;
 $6FFE DEFB $00,$00,$DF,$6F,$00,$00 ;
 $7004 DEFB $00,$0B,$7E,$AC,$80,$00 ;
 $700A DEFB $00,$1C,$FF,$64,$D0,$00 ;
 $7010 DEFB $00,$B1,$FE,$B8,$68,$00 ;
 $7016 DEFB $01,$43,$DD,$78,$34,$00 ;
 $701C DEFB $02,$BF,$AA,$AC,$2A,$00 ;
 $7022 DEFB $01,$55,$55,$57,$F4,$00 ;
 $7028 DEFB $00,$AA,$AA,$AA,$A8,$00 ;
 $702E DEFB $00,$05,$55,$55,$00,$00 ;
 $7034 DEFB $00,$00,$00,$00,$00,$00 ;
 $703A DEFB $00,$00,$00,$00,$00,$00 ; }
; Green Jordan (hands up | $04)
@label=CHARACTER_04
 $7040 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-04*)
 $7046 DEFB $00,$00,$00,$00,$00,$00 ;
 $704C DEFB $00,$00,$00,$00,$00,$00 ;
 $7052 DEFB $00,$00,$00,$00,$00,$00 ;
 $7058 DEFB $00,$80,$00,$00,$00,$00 ;
 $705E DEFB $02,$80,$00,$00,$00,$08 ;
 $7064 DEFB $02,$A0,$01,$F0,$00,$08 ;
 $706A DEFB $02,$A0,$03,$F8,$00,$2A ;
 $7070 DEFB $0A,$A0,$03,$F8,$00,$2B ;
 $7076 DEFB $0B,$A0,$03,$F8,$00,$2B ;
 $707C DEFB $08,$04,$73,$F8,$E0,$3B ;
 $7082 DEFB $08,$C8,$FE,$0F,$F1,$83 ;
 $7088 DEFB $07,$91,$FF,$FF,$F8,$4E ;
 $708E DEFB $03,$01,$FA,$0F,$F8,$1C ;
 $7094 DEFB $01,$00,$F0,$01,$F0,$18 ;
 $709A DEFB $03,$C0,$60,$90,$E0,$18 ;
 $70A0 DEFB $04,$20,$30,$01,$80,$3E ;
 $70A6 DEFB $04,$20,$28,$62,$80,$42 ;
 $70AC DEFB $04,$20,$34,$05,$00,$42 ;
 $70B2 DEFB $04,$20,$1A,$AB,$00,$42 ;
 $70B8 DEFB $04,$20,$15,$F6,$00,$42 ;
 $70BE DEFB $04,$20,$0B,$1A,$00,$42 ;
 $70C4 DEFB $02,$10,$75,$57,$00,$44 ;
 $70CA DEFB $02,$11,$8E,$AC,$C0,$84 ;
 $70D0 DEFB $02,$1E,$0D,$FC,$30,$84 ;
 $70D6 DEFB $02,$10,$0C,$4C,$0F,$84 ;
 $70DC DEFB $01,$10,$0C,$4C,$00,$84 ;
 $70E2 DEFB $01,$00,$8C,$4C,$00,$88 ;
 $70E8 DEFB $01,$03,$0C,$8C,$10,$08 ;
 $70EE DEFB $00,$9D,$0C,$8C,$2C,$08 ;
 $70F4 DEFB $00,$61,$0C,$8C,$23,$F0 ;
 $70FA DEFB $00,$01,$0C,$4C,$20,$00 ;
 $7100 DEFB $00,$01,$0C,$46,$20,$00 ;
 $7106 DEFB $02,$01,$18,$46,$41,$00 ;
 $710C DEFB $07,$09,$18,$86,$41,$9E ;
 $7112 DEFB $09,$19,$18,$46,$40,$A4 ;
 $7118 DEFB $02,$B0,$98,$86,$40,$48 ;
 $711E DEFB $00,$50,$98,$86,$40,$50 ;
 $7124 DEFB $01,$60,$98,$46,$80,$A8 ;
 $712A DEFB $02,$A0,$B8,$86,$82,$44 ;
 $7130 DEFB $05,$10,$B8,$86,$82,$04 ;
 $7136 DEFB $07,$D0,$B8,$46,$84,$F2 ;
 $713C DEFB $0B,$08,$B8,$46,$84,$C2 ;
 $7142 DEFB $0B,$C8,$B0,$86,$84,$F2 ;
 $7148 DEFB $09,$48,$B0,$4E,$82,$54 ;
 $714E DEFB $07,$D0,$B0,$FF,$C2,$F4 ;
 $7154 DEFB $04,$11,$FF,$FF,$C1,$08 ;
 $715A DEFB $03,$61,$FE,$9F,$80,$F0 ;
 $7160 DEFB $00,$81,$FF,$FF,$80,$00 ;
 $7166 DEFB $00,$00,$FF,$FF,$C0,$00 ;
 $716C DEFB $00,$00,$FB,$FF,$C0,$00 ;
 $7172 DEFB $00,$00,$FD,$FF,$C0,$00 ;
 $7178 DEFB $00,$00,$F5,$FF,$C0,$00 ;
 $717E DEFB $00,$00,$F5,$FF,$C0,$00 ;
 $7184 DEFB $00,$00,$FA,$FF,$C0,$00 ;
 $718A DEFB $00,$00,$EE,$FF,$80,$00 ;
 $7190 DEFB $00,$00,$F3,$7F,$80,$00 ;
 $7196 DEFB $00,$00,$FF,$7F,$80,$00 ;
 $719C DEFB $00,$00,$FF,$7F,$80,$00 ;
 $71A2 DEFB $00,$00,$FF,$7F,$80,$00 ;
 $71A8 DEFB $00,$00,$FF,$7F,$00,$00 ;
 $71AE DEFB $00,$00,$FF,$7F,$00,$00 ;
 $71B4 DEFB $00,$00,$6F,$6F,$00,$00 ;
 $71BA DEFB $00,$00,$1E,$73,$00,$00 ;
 $71C0 DEFB $00,$00,$7E,$3F,$00,$00 ;
 $71C6 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $71CC DEFB $00,$00,$3E,$3E,$00,$00 ;
 $71D2 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $71D8 DEFB $00,$00,$3C,$38,$00,$00 ;
 $71DE DEFB $00,$00,$76,$3F,$00,$00 ;
 $71E4 DEFB $00,$00,$5E,$2F,$00,$00 ;
 $71EA DEFB $00,$00,$5E,$2F,$00,$00 ;
 $71F0 DEFB $00,$00,$5E,$2F,$00,$00 ;
 $71F6 DEFB $00,$00,$5E,$2F,$00,$00 ;
 $71FC DEFB $00,$00,$5E,$2F,$00,$00 ;
 $7202 DEFB $00,$00,$5E,$2F,$00,$00 ;
 $7208 DEFB $00,$00,$5E,$AF,$00,$00 ;
 $720E DEFB $00,$00,$DF,$6F,$40,$00 ;
 $7214 DEFB $00,$0B,$7E,$AC,$A0,$00 ;
 $721A DEFB $00,$1C,$FF,$64,$D4,$00 ;
 $7220 DEFB $00,$B1,$FE,$B8,$6A,$00 ;
 $7226 DEFB $01,$43,$DD,$78,$35,$00 ;
 $722C DEFB $02,$BF,$AA,$AC,$2A,$80 ;
 $7232 DEFB $05,$55,$55,$57,$F5,$00 ;
 $7238 DEFB $02,$AA,$AA,$AA,$AA,$00 ;
 $723E DEFB $01,$55,$55,$55,$50,$00 ;
 $7244 DEFB $00,$00,$00,$00,$00,$00 ;
 $724A DEFB $00,$00,$00,$00,$00,$00 ; }
; Green Jordan (uncover | $05)
@label=CHARACTER_05
 $7250 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-05*)
 $7256 DEFB $00,$00,$02,$00,$00,$00 ;
 $725C DEFB $00,$00,$0D,$80,$00,$00 ;
 $7262 DEFB $00,$02,$10,$40,$00,$00 ;
 $7268 DEFB $00,$0A,$9F,$C6,$00,$00 ;
 $726E DEFB $0F,$0A,$FF,$F9,$00,$00 ;
 $7274 DEFB $1F,$8A,$8F,$C1,$00,$00 ;
 $727A DEFB $1F,$8A,$80,$00,$80,$00 ;
 $7280 DEFB $3F,$6A,$AA,$A0,$80,$00 ;
 $7286 DEFB $7F,$B0,$C0,$18,$40,$00 ;
 $728C DEFB $FF,$D9,$90,$44,$40,$00 ;
 $7292 DEFB $FF,$F9,$98,$C4,$40,$00 ;
 $7298 DEFB $E0,$FE,$85,$44,$80,$00 ;
 $729E DEFB $40,$7E,$0F,$84,$00,$00 ;
 $72A4 DEFB $40,$FF,$DF,$E8,$00,$00 ;
 $72AA DEFB $48,$10,$FF,$F0,$00,$00 ;
 $72B0 DEFB $40,$90,$FF,$E0,$00,$00 ;
 $72B6 DEFB $40,$70,$FF,$F0,$00,$00 ;
 $72BC DEFB $60,$B0,$BF,$EC,$00,$00 ;
 $72C2 DEFB $41,$60,$DF,$DF,$80,$00 ;
 $72C8 DEFB $5E,$A0,$EF,$DF,$E0,$00 ;
 $72CE DEFB $43,$40,$FF,$9F,$98,$00 ;
 $72D4 DEFB $29,$A0,$C7,$9F,$C4,$00 ;
 $72DA DEFB $15,$61,$87,$8F,$C4,$00 ;
 $72E0 DEFB $1F,$E1,$03,$0F,$CC,$00 ;
 $72E6 DEFB $19,$C1,$82,$0F,$CC,$00 ;
 $72EC DEFB $19,$C1,$81,$1F,$D4,$00 ;
 $72F2 DEFB $19,$81,$80,$9F,$C4,$00 ;
 $72F8 DEFB $19,$91,$81,$1F,$C8,$00 ;
 $72FE DEFB $19,$93,$81,$1F,$C8,$00 ;
 $7304 DEFB $19,$8C,$40,$9F,$C4,$00 ;
 $730A DEFB $19,$80,$41,$1F,$C4,$00 ;
 $7310 DEFB $19,$80,$41,$0F,$C8,$00 ;
 $7316 DEFB $39,$80,$40,$8F,$C8,$00 ;
 $731C DEFB $31,$80,$41,$03,$D0,$80 ;
 $7322 DEFB $B0,$60,$41,$01,$15,$40 ;
 $7328 DEFB $B2,$60,$41,$02,$AB,$40 ;
 $732E DEFB $B4,$60,$40,$82,$9A,$80 ;
 $7334 DEFB $B2,$60,$40,$82,$8D,$C0 ;
 $733A DEFB $72,$60,$43,$42,$8F,$E0 ;
 $7340 DEFB $72,$60,$47,$26,$91,$E0 ;
 $7346 DEFB $74,$60,$84,$3A,$7F,$E0 ;
 $734C DEFB $72,$60,$8F,$FE,$11,$E0 ;
 $7352 DEFB $72,$60,$8F,$FE,$1F,$E0 ;
 $7358 DEFB $31,$60,$FE,$FE,$19,$C0 ;
 $735E DEFB $33,$FF,$F8,$FC,$0F,$A0 ;
 $7364 DEFB $3F,$FF,$F3,$FC,$12,$10 ;
 $736A DEFB $7F,$FF,$FF,$FC,$27,$90 ;
 $7370 DEFB $7F,$FF,$8F,$FC,$26,$10 ;
 $7376 DEFB $7B,$FF,$FE,$7E,$27,$90 ;
 $737C DEFB $7B,$FF,$FC,$7E,$12,$A0 ;
 $7382 DEFB $3B,$FF,$F0,$3E,$0B,$C0 ;
 $7388 DEFB $3F,$FF,$F0,$3E,$04,$80 ;
 $738E DEFB $3F,$FF,$F0,$1E,$03,$00 ;
 $7394 DEFB $1F,$FF,$E0,$1F,$00,$00 ;
 $739A DEFB $0F,$FD,$E0,$1F,$00,$00 ;
 $73A0 DEFB $1F,$FB,$C0,$1F,$00,$00 ;
 $73A6 DEFB $3F,$F7,$C0,$1F,$00,$00 ;
 $73AC DEFB $7F,$E7,$C0,$1F,$00,$00 ;
 $73B2 DEFB $6F,$F7,$C0,$0F,$80,$00 ;
 $73B8 DEFB $9F,$37,$C0,$0F,$80,$00 ;
 $73BE DEFB $FE,$FB,$C0,$0F,$80,$00 ;
 $73C4 DEFB $FF,$FB,$C0,$1D,$80,$00 ;
 $73CA DEFB $F9,$FD,$C0,$0A,$40,$00 ;
 $73D0 DEFB $F1,$FC,$00,$1F,$C0,$00 ;
 $73D6 DEFB $E0,$FD,$C0,$1F,$80,$00 ;
 $73DC DEFB $C0,$7F,$C0,$0F,$80,$00 ;
 $73E2 DEFB $80,$77,$C0,$1F,$80,$00 ;
 $73E8 DEFB $00,$3F,$C0,$0F,$80,$00 ;
 $73EE DEFB $00,$3B,$C0,$0F,$80,$00 ;
 $73F4 DEFB $00,$1D,$C0,$0F,$80,$00 ;
 $73FA DEFB $00,$1D,$C0,$0F,$80,$00 ;
 $7400 DEFB $00,$1E,$C0,$0F,$80,$00 ;
 $7406 DEFB $00,$0E,$C0,$0F,$80,$00 ;
 $740C DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $7412 DEFB $00,$07,$F5,$5F,$80,$00 ;
 $7418 DEFB $00,$07,$EA,$BF,$80,$00 ;
 $741E DEFB $00,$07,$F5,$5F,$C0,$00 ;
 $7424 DEFB $00,$05,$FA,$BF,$E0,$00 ;
 $742A DEFB $00,$05,$F5,$5F,$F8,$00 ;
 $7430 DEFB $A0,$79,$6A,$A9,$FE,$00 ;
 $7436 DEFB $54,$C3,$55,$55,$7E,$00 ;
 $743C DEFB $AA,$86,$AA,$AA,$AA,$00 ;
 $7442 DEFB $55,$FD,$55,$55,$50,$00 ;
 $7448 DEFB $AA,$AA,$AA,$AA,$00,$00 ;
 $744E DEFB $55,$55,$55,$50,$00,$00 ;
 $7454 DEFB $00,$00,$00,$00,$00,$00 ;
 $745A DEFB $00,$00,$00,$00,$00,$00 ; }
; Green Jordan (shot | $06)
@label=CHARACTER_06
 $7460 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-06*)
 $7466 DEFB $00,$00,$00,$00,$00,$00 ;
 $746C DEFB $00,$00,$00,$00,$00,$00 ;
 $7472 DEFB $00,$00,$00,$00,$00,$00 ;
 $7478 DEFB $00,$00,$00,$00,$00,$00 ;
 $747E DEFB $00,$00,$00,$00,$00,$00 ;
 $7484 DEFB $00,$00,$00,$00,$00,$00 ;
 $748A DEFB $00,$00,$00,$00,$00,$00 ;
 $7490 DEFB $00,$00,$00,$00,$00,$00 ;
 $7496 DEFB $00,$00,$00,$00,$00,$00 ;
 $749C DEFB $00,$00,$00,$00,$00,$00 ;
 $74A2 DEFB $00,$00,$00,$00,$00,$00 ;
 $74A8 DEFB $00,$00,$00,$00,$00,$00 ;
 $74AE DEFB $00,$00,$00,$00,$00,$00 ;
 $74B4 DEFB $00,$00,$00,$00,$00,$00 ;
 $74BA DEFB $00,$00,$00,$00,$00,$00 ;
 $74C0 DEFB $00,$00,$00,$00,$00,$00 ;
 $74C6 DEFB $00,$00,$00,$00,$00,$00 ;
 $74CC DEFB $00,$00,$00,$00,$00,$00 ;
 $74D2 DEFB $00,$00,$00,$00,$00,$00 ;
 $74D8 DEFB $00,$00,$00,$00,$00,$00 ;
 $74DE DEFB $00,$00,$00,$00,$00,$00 ;
 $74E4 DEFB $00,$00,$00,$00,$00,$02 ;
 $74EA DEFB $00,$00,$00,$00,$02,$85 ;
 $74F0 DEFB $00,$00,$00,$00,$01,$C6 ;
 $74F6 DEFB $00,$00,$00,$00,$00,$C4 ;
 $74FC DEFB $00,$00,$00,$00,$00,$64 ;
 $7502 DEFB $00,$00,$20,$08,$00,$3C ;
 $7508 DEFB $00,$10,$18,$08,$01,$24 ;
 $750E DEFB $1C,$30,$04,$00,$06,$4A ;
 $7514 DEFB $0A,$50,$00,$00,$00,$BD ;
 $751A DEFB $05,$A1,$C0,$7F,$C0,$A9 ;
 $7520 DEFB $03,$42,$E1,$FF,$F1,$3E ;
 $7526 DEFB $07,$83,$03,$FF,$F9,$0A ;
 $752C DEFB $08,$80,$07,$FF,$FC,$BF ;
 $7532 DEFB $14,$40,$07,$FE,$FC,$89 ;
 $7538 DEFB $2F,$40,$07,$FC,$FC,$42 ;
 $753E DEFB $2C,$40,$07,$E1,$FC,$3C ;
 $7544 DEFB $4F,$21,$FF,$FF,$FC,$00 ;
 $754A DEFB $45,$26,$07,$FF,$FF,$80 ;
 $7550 DEFB $4F,$28,$03,$FF,$F8,$E0 ;
 $7556 DEFB $24,$50,$01,$FF,$F0,$F8 ;
 $755C DEFB $20,$50,$7C,$FF,$E4,$84 ;
 $7562 DEFB $1F,$A0,$8A,$3F,$C3,$02 ;
 $7568 DEFB $00,$41,$08,$6C,$C2,$82 ;
 $756E DEFB $00,$42,$08,$64,$C2,$60 ;
 $7574 DEFB $00,$84,$08,$64,$C2,$11 ;
 $757A DEFB $00,$84,$C8,$64,$C2,$01 ;
 $7580 DEFB $00,$85,$90,$68,$C2,$09 ;
 $7586 DEFB $01,$09,$10,$64,$C1,$C5 ;
 $758C DEFB $01,$88,$10,$60,$C1,$35 ;
 $7592 DEFB $1C,$48,$10,$64,$C1,$0B ;
 $7598 DEFB $03,$48,$10,$E4,$E1,$77 ;
 $759E DEFB $7D,$56,$10,$C2,$61,$0D ;
 $75A4 DEFB $02,$B8,$08,$C4,$61,$00 ;
 $75AA DEFB $01,$F8,$08,$C4,$62,$00 ;
 $75B0 DEFB $00,$B0,$68,$C8,$62,$00 ;
 $75B6 DEFB $00,$00,$FB,$BF,$E2,$00 ;
 $75BC DEFB $00,$01,$FB,$FF,$FA,$00 ;
 $75C2 DEFB $00,$1B,$F7,$FF,$FF,$80 ;
 $75C8 DEFB $00,$3B,$B3,$FB,$FF,$CE ;
 $75CE DEFB $07,$FF,$FF,$FB,$FF,$F1 ;
 $75D4 DEFB $08,$19,$FF,$9B,$FF,$E1 ;
 $75DA DEFB $08,$09,$FF,$FA,$FF,$C1 ;
 $75E0 DEFB $08,$07,$FF,$F7,$FF,$83 ;
 $75E6 DEFB $06,$03,$F9,$FF,$CF,$C4 ;
 $75EC DEFB $01,$86,$F8,$00,$0F,$68 ;
 $75F2 DEFB $00,$6D,$38,$00,$0C,$B0 ;
 $75F8 DEFB $00,$02,$10,$00,$08,$40 ;
 $75FE DEFB $00,$01,$20,$00,$08,$80 ;
 $7604 DEFB $00,$00,$C0,$00,$05,$00 ;
 $760A DEFB $00,$00,$00,$00,$02,$00 ;
 $7610 DEFB $00,$00,$00,$00,$00,$00 ;
 $7616 DEFB $00,$00,$00,$00,$00,$00 ;
 $761C DEFB $00,$00,$00,$00,$00,$00 ;
 $7622 DEFB $00,$00,$15,$55,$00,$00 ;
 $7628 DEFB $00,$00,$AA,$AA,$A0,$00 ;
 $762E DEFB $00,$01,$55,$55,$50,$00 ;
 $7634 DEFB $00,$02,$AA,$AA,$A8,$00 ;
 $763A DEFB $00,$05,$55,$55,$54,$00 ;
 $7640 DEFB $00,$02,$AA,$AA,$A8,$00 ;
 $7646 DEFB $00,$01,$55,$55,$50,$00 ;
 $764C DEFB $00,$00,$AA,$AA,$A0,$00 ;
 $7652 DEFB $00,$00,$00,$00,$00,$00 ;
 $7658 DEFB $00,$00,$00,$00,$00,$00 ;
 $765E DEFB $00,$00,$00,$00,$00,$00 ;
 $7664 DEFB $00,$00,$00,$00,$00,$00 ;
 $766A DEFB $00,$00,$00,$00,$00,$00 ; }
; Green Jordan (floor | $07)
@label=CHARACTER_07
 $7670 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-07*)
 $7676 DEFB $00,$00,$00,$00,$00,$00 ;
 $767C DEFB $00,$00,$00,$00,$00,$00 ;
 $7682 DEFB $00,$00,$00,$00,$00,$00 ;
 $7688 DEFB $00,$00,$00,$00,$00,$00 ;
 $768E DEFB $00,$00,$00,$00,$00,$00 ;
 $7694 DEFB $00,$00,$00,$00,$00,$00 ;
 $769A DEFB $00,$00,$00,$00,$00,$00 ;
 $76A0 DEFB $00,$00,$00,$00,$00,$00 ;
 $76A6 DEFB $00,$00,$00,$00,$00,$00 ;
 $76AC DEFB $00,$00,$00,$00,$00,$00 ;
 $76B2 DEFB $00,$00,$00,$00,$00,$00 ;
 $76B8 DEFB $00,$00,$00,$00,$00,$00 ;
 $76BE DEFB $00,$00,$00,$00,$00,$00 ;
 $76C4 DEFB $00,$00,$00,$00,$00,$00 ;
 $76CA DEFB $00,$00,$00,$00,$00,$00 ;
 $76D0 DEFB $00,$00,$00,$00,$00,$00 ;
 $76D6 DEFB $00,$00,$00,$00,$00,$00 ;
 $76DC DEFB $00,$00,$00,$00,$00,$00 ;
 $76E2 DEFB $00,$00,$00,$00,$00,$00 ;
 $76E8 DEFB $00,$00,$00,$00,$00,$00 ;
 $76EE DEFB $00,$00,$00,$00,$00,$00 ;
 $76F4 DEFB $00,$00,$00,$00,$00,$00 ;
 $76FA DEFB $00,$00,$00,$00,$00,$00 ;
 $7700 DEFB $00,$00,$00,$00,$00,$00 ;
 $7706 DEFB $00,$00,$00,$00,$00,$00 ;
 $770C DEFB $00,$00,$00,$00,$00,$00 ;
 $7712 DEFB $00,$00,$00,$00,$00,$00 ;
 $7718 DEFB $00,$00,$00,$00,$00,$00 ;
 $771E DEFB $00,$00,$00,$00,$00,$00 ;
 $7724 DEFB $00,$00,$00,$00,$00,$00 ;
 $772A DEFB $00,$00,$00,$00,$00,$00 ;
 $7730 DEFB $00,$00,$00,$00,$00,$00 ;
 $7736 DEFB $00,$00,$00,$00,$00,$00 ;
 $773C DEFB $00,$00,$00,$00,$00,$00 ;
 $7742 DEFB $00,$00,$00,$00,$00,$00 ;
 $7748 DEFB $00,$00,$00,$00,$00,$00 ;
 $774E DEFB $00,$00,$00,$00,$00,$00 ;
 $7754 DEFB $00,$00,$00,$00,$00,$00 ;
 $775A DEFB $00,$00,$00,$00,$00,$00 ;
 $7760 DEFB $00,$00,$00,$00,$00,$00 ;
 $7766 DEFB $00,$00,$00,$00,$00,$00 ;
 $776C DEFB $00,$00,$00,$00,$00,$00 ;
 $7772 DEFB $00,$00,$00,$00,$00,$00 ;
 $7778 DEFB $00,$00,$00,$00,$00,$00 ;
 $777E DEFB $00,$00,$00,$00,$00,$00 ;
 $7784 DEFB $00,$00,$00,$00,$00,$00 ;
 $778A DEFB $00,$00,$00,$00,$00,$00 ;
 $7790 DEFB $00,$00,$00,$00,$00,$00 ;
 $7796 DEFB $00,$00,$00,$00,$00,$00 ;
 $779C DEFB $00,$00,$00,$00,$00,$00 ;
 $77A2 DEFB $00,$00,$00,$00,$00,$00 ;
 $77A8 DEFB $00,$00,$00,$00,$00,$00 ;
 $77AE DEFB $00,$00,$00,$00,$00,$00 ;
 $77B4 DEFB $00,$00,$00,$00,$00,$00 ;
 $77BA DEFB $00,$00,$00,$00,$00,$00 ;
 $77C0 DEFB $00,$00,$00,$00,$00,$00 ;
 $77C6 DEFB $00,$00,$00,$00,$00,$00 ;
 $77CC DEFB $00,$00,$00,$00,$00,$00 ;
 $77D2 DEFB $00,$00,$00,$00,$00,$00 ;
 $77D8 DEFB $00,$00,$00,$00,$00,$00 ;
 $77DE DEFB $00,$00,$00,$00,$00,$00 ;
 $77E4 DEFB $00,$00,$00,$00,$00,$00 ;
 $77EA DEFB $00,$00,$00,$00,$00,$00 ;
 $77F0 DEFB $00,$00,$00,$7C,$00,$00 ;
 $77F6 DEFB $00,$00,$01,$FF,$00,$00 ;
 $77FC DEFB $00,$00,$03,$FF,$80,$00 ;
 $7802 DEFB $00,$00,$07,$FF,$C0,$00 ;
 $7808 DEFB $00,$00,$0F,$EF,$E0,$00 ;
 $780E DEFB $00,$00,$0F,$FF,$F0,$00 ;
 $7814 DEFB $00,$00,$1F,$13,$F0,$00 ;
 $781A DEFB $00,$00,$3F,$D7,$F8,$07 ;
 $7820 DEFB $00,$00,$7F,$FF,$FC,$19 ;
 $7826 DEFB $07,$E0,$BC,$CC,$32,$31 ;
 $782C DEFB $08,$19,$3F,$FF,$FD,$61 ;
 $7832 DEFB $08,$0E,$FF,$EF,$FF,$C1 ;
 $7838 DEFB $08,$07,$FF,$EF,$FF,$81 ;
 $783E DEFB $06,$03,$FF,$FF,$FE,$C2 ;
 $7844 DEFB $01,$86,$FF,$FF,$FD,$6C ;
 $784A DEFB $02,$ED,$3E,$AA,$B8,$B8 ;
 $7850 DEFB $01,$52,$15,$55,$78,$50 ;
 $7856 DEFB $00,$AC,$2A,$AA,$B8,$A8 ;
 $785C DEFB $00,$56,$75,$55,$5D,$50 ;
 $7862 DEFB $00,$2B,$EA,$02,$AE,$A0 ;
 $7868 DEFB $00,$15,$50,$00,$55,$40 ;
 $786E DEFB $00,$00,$00,$00,$00,$00 ;
 $7874 DEFB $00,$00,$00,$00,$00,$00 ;
 $787A DEFB $00,$00,$00,$00,$00,$00 ; }
; #UDGARRAY*character-03,50;character-04;character-05;character-00(green-jordan-uncover-frames)
;       #UDGARRAY*character-03,50;character-04;character-06;character-07(green-jordan-shot-frames)

; Bandit 2
;
; ALFRED DALTON - A real baddie. Shoot as soon as he takes out his
;       gun!
;
; .
;
; Bandit 2 (draw | $08)
@label=CHARACTER_08
b$7880 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-08*)
 $7886 DEFB $00,$00,$00,$00,$00,$00 ;
 $788C DEFB $00,$00,$00,$00,$00,$00 ;
 $7892 DEFB $00,$00,$00,$00,$00,$00 ;
 $7898 DEFB $00,$00,$00,$00,$00,$00 ;
 $789E DEFB $00,$00,$00,$00,$00,$00 ;
 $78A4 DEFB $00,$00,$03,$F0,$00,$00 ;
 $78AA DEFB $00,$00,$07,$F8,$00,$00 ;
 $78B0 DEFB $00,$00,$0F,$FC,$00,$00 ;
 $78B6 DEFB $00,$00,$10,$FC,$00,$00 ;
 $78BC DEFB $00,$00,$7F,$FE,$00,$00 ;
 $78C2 DEFB $00,$03,$FF,$FF,$80,$00 ;
 $78C8 DEFB $00,$0F,$FF,$FF,$E0,$00 ;
 $78CE DEFB $00,$1F,$FF,$FF,$F0,$00 ;
 $78D4 DEFB $00,$1F,$F8,$1F,$F8,$00 ;
 $78DA DEFB $00,$1F,$E0,$03,$F8,$00 ;
 $78E0 DEFB $00,$1F,$C0,$03,$F8,$00 ;
 $78E6 DEFB $00,$0F,$C4,$13,$F8,$00 ;
 $78EC DEFB $00,$0F,$C2,$23,$F0,$00 ;
 $78F2 DEFB $00,$07,$C3,$C3,$E0,$00 ;
 $78F8 DEFB $00,$03,$CF,$E7,$C0,$00 ;
 $78FE DEFB $00,$01,$FF,$FF,$00,$00 ;
 $7904 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $790A DEFB $00,$00,$3F,$FC,$00,$00 ;
 $7910 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $7916 DEFB $00,$00,$7F,$FF,$80,$00 ;
 $791C DEFB $00,$07,$FF,$FF,$F0,$00 ;
 $7922 DEFB $00,$19,$F7,$EF,$8C,$00 ;
 $7928 DEFB $00,$61,$F3,$CF,$C2,$00 ;
 $792E DEFB $01,$83,$F8,$8F,$C2,$00 ;
 $7934 DEFB $02,$03,$F8,$8F,$C1,$00 ;
 $793A DEFB $02,$07,$F8,$9F,$E0,$80 ;
 $7940 DEFB $04,$0F,$F8,$DF,$F0,$40 ;
 $7946 DEFB $04,$1F,$F8,$5F,$F0,$40 ;
 $794C DEFB $04,$1F,$F8,$5F,$F8,$20 ;
 $7952 DEFB $08,$2F,$F8,$9F,$F4,$20 ;
 $7958 DEFB $08,$2F,$F8,$9F,$F4,$20 ;
 $795E DEFB $08,$2F,$F8,$9F,$F4,$10 ;
 $7964 DEFB $10,$4F,$F8,$8F,$F4,$10 ;
 $796A DEFB $10,$4F,$F8,$8F,$F2,$10 ;
 $7970 DEFB $10,$4F,$F1,$0F,$F2,$10 ;
 $7976 DEFB $10,$5F,$F1,$8F,$FA,$30 ;
 $797C DEFB $16,$5F,$F0,$CF,$FA,$48 ;
 $7982 DEFB $19,$5F,$F0,$41,$FA,$CC ;
 $7988 DEFB $19,$9E,$00,$40,$19,$7A ;
 $798E DEFB $2F,$50,$00,$40,$11,$32 ;
 $7994 DEFB $26,$50,$00,$80,$10,$86 ;
 $799A DEFB $20,$48,$00,$80,$10,$7E ;
 $79A0 DEFB $30,$88,$01,$80,$10,$FE ;
 $79A6 DEFB $3F,$08,$01,$80,$20,$0E ;
 $79AC DEFB $3F,$84,$03,$C0,$20,$FC ;
 $79B2 DEFB $30,$07,$0F,$F3,$F0,$0C ;
 $79B8 DEFB $3F,$04,$F8,$3E,$38,$78 ;
 $79BE DEFB $30,$0F,$47,$C9,$DC,$00 ;
 $79C4 DEFB $1F,$1F,$FE,$FF,$FC,$00 ;
 $79CA DEFB $00,$3F,$FE,$FF,$FC,$00 ;
 $79D0 DEFB $00,$3F,$FE,$FF,$FC,$00 ;
 $79D6 DEFB $00,$3B,$FE,$FF,$B8,$00 ;
 $79DC DEFB $00,$3B,$FE,$FF,$B8,$00 ;
 $79E2 DEFB $00,$03,$FE,$FF,$80,$00 ;
 $79E8 DEFB $00,$33,$FF,$FF,$98,$00 ;
 $79EE DEFB $00,$33,$FE,$3F,$98,$00 ;
 $79F4 DEFB $00,$30,$FE,$3F,$98,$00 ;
 $79FA DEFB $00,$30,$FC,$1F,$88,$00 ;
 $7A00 DEFB $00,$20,$FC,$1F,$00,$00 ;
 $7A06 DEFB $00,$00,$F8,$0E,$00,$00 ;
 $7A0C DEFB $00,$00,$78,$0E,$00,$00 ;
 $7A12 DEFB $00,$00,$7C,$3E,$00,$00 ;
 $7A18 DEFB $00,$00,$F8,$1F,$00,$00 ;
 $7A1E DEFB $00,$00,$F8,$1F,$00,$00 ;
 $7A24 DEFB $00,$00,$F8,$17,$00,$00 ;
 $7A2A DEFB $00,$00,$D8,$17,$00,$00 ;
 $7A30 DEFB $00,$00,$D8,$17,$00,$00 ;
 $7A36 DEFB $00,$00,$D8,$17,$00,$00 ;
 $7A3C DEFB $00,$00,$D8,$17,$00,$00 ;
 $7A42 DEFB $00,$00,$D8,$17,$00,$00 ;
 $7A48 DEFB $00,$00,$D8,$17,$00,$00 ;
 $7A4E DEFB $00,$03,$DA,$B7,$80,$00 ;
 $7A54 DEFB $00,$0E,$FD,$76,$40,$00 ;
 $7A5A DEFB $00,$31,$FE,$BE,$20,$00 ;
 $7A60 DEFB $00,$C3,$FD,$7F,$18,$00 ;
 $7A66 DEFB $00,$FF,$BA,$BB,$84,$00 ;
 $7A6C DEFB $01,$55,$55,$55,$FC,$00 ;
 $7A72 DEFB $02,$AA,$AA,$AA,$AA,$00 ;
 $7A78 DEFB $01,$55,$55,$55,$54,$00 ;
 $7A7E DEFB $00,$AA,$AA,$AA,$A8,$00 ;
 $7A84 DEFB $00,$01,$55,$50,$00,$00 ;
 $7A8A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 2 (shot | $09)
@label=CHARACTER_09
 $7A90 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-09*)
 $7A96 DEFB $00,$00,$00,$00,$00,$00 ;
 $7A9C DEFB $00,$00,$00,$00,$00,$00 ;
 $7AA2 DEFB $00,$00,$00,$00,$00,$00 ;
 $7AA8 DEFB $00,$00,$00,$00,$00,$00 ;
 $7AAE DEFB $00,$00,$00,$00,$00,$00 ;
 $7AB4 DEFB $00,$00,$00,$00,$00,$00 ;
 $7ABA DEFB $00,$00,$00,$00,$00,$00 ;
 $7AC0 DEFB $00,$00,$00,$00,$00,$00 ;
 $7AC6 DEFB $00,$00,$00,$00,$00,$00 ;
 $7ACC DEFB $00,$00,$00,$00,$00,$00 ;
 $7AD2 DEFB $00,$00,$00,$00,$00,$00 ;
 $7AD8 DEFB $00,$00,$00,$00,$00,$00 ;
 $7ADE DEFB $00,$00,$00,$00,$00,$00 ;
 $7AE4 DEFB $00,$00,$00,$00,$00,$00 ;
 $7AEA DEFB $00,$00,$00,$00,$00,$00 ;
 $7AF0 DEFB $00,$00,$00,$00,$00,$00 ;
 $7AF6 DEFB $00,$00,$00,$00,$00,$00 ;
 $7AFC DEFB $00,$00,$00,$00,$00,$00 ;
 $7B02 DEFB $00,$00,$00,$00,$00,$00 ;
 $7B08 DEFB $38,$00,$00,$00,$00,$00 ;
 $7B0E DEFB $28,$00,$00,$00,$00,$00 ;
 $7B14 DEFB $28,$00,$00,$00,$00,$00 ;
 $7B1A DEFB $28,$00,$00,$00,$04,$00 ;
 $7B20 DEFB $28,$00,$10,$00,$0A,$00 ;
 $7B26 DEFB $28,$00,$08,$00,$05,$00 ;
 $7B2C DEFB $28,$00,$08,$00,$02,$80 ;
 $7B32 DEFB $28,$00,$04,$00,$01,$40 ;
 $7B38 DEFB $28,$01,$C0,$00,$00,$A0 ;
 $7B3E DEFB $28,$02,$E0,$00,$00,$50 ;
 $7B44 DEFB $28,$03,$10,$3F,$80,$38 ;
 $7B4A DEFB $3E,$00,$00,$FF,$F0,$34 ;
 $7B50 DEFB $2A,$10,$03,$FF,$F8,$4A ;
 $7B56 DEFB $2A,$70,$07,$FF,$FC,$25 ;
 $7B5C DEFB $2B,$F0,$0F,$FF,$FE,$13 ;
 $7B62 DEFB $23,$F0,$0F,$FE,$FE,$3A ;
 $7B68 DEFB $1F,$F0,$0F,$FE,$FE,$FC ;
 $7B6E DEFB $00,$F0,$0F,$F1,$FE,$FC ;
 $7B74 DEFB $00,$00,$3F,$FF,$FE,$78 ;
 $7B7A DEFB $00,$0F,$CF,$FF,$FF,$B8 ;
 $7B80 DEFB $00,$10,$07,$FF,$FC,$F0 ;
 $7B86 DEFB $00,$10,$1F,$FF,$F8,$B8 ;
 $7B8C DEFB $00,$20,$5F,$FF,$FC,$04 ;
 $7B92 DEFB $00,$20,$BF,$FF,$FF,$02 ;
 $7B98 DEFB $00,$41,$3F,$CC,$7F,$82 ;
 $7B9E DEFB $00,$42,$3F,$C4,$FF,$E0 ;
 $7BA4 DEFB $00,$82,$3F,$C4,$FF,$A1 ;
 $7BAA DEFB $00,$84,$3F,$C4,$FF,$A1 ;
 $7BB0 DEFB $00,$84,$3F,$C8,$FF,$A9 ;
 $7BB6 DEFB $01,$04,$3F,$C4,$7F,$C5 ;
 $7BBC DEFB $01,$84,$3F,$80,$7F,$B5 ;
 $7BC2 DEFB $1C,$44,$3F,$84,$7F,$8B ;
 $7BC8 DEFB $03,$4C,$30,$04,$02,$F7 ;
 $7BCE DEFB $7D,$56,$30,$02,$02,$0D ;
 $7BD4 DEFB $02,$B8,$10,$04,$01,$00 ;
 $7BDA DEFB $01,$F8,$10,$0C,$01,$00 ;
 $7BE0 DEFB $00,$B0,$68,$1E,$01,$00 ;
 $7BE6 DEFB $00,$00,$FF,$BF,$B9,$00 ;
 $7BEC DEFB $00,$01,$FF,$B1,$BF,$80 ;
 $7BF2 DEFB $00,$1B,$F7,$FF,$FF,$C0 ;
 $7BF8 DEFB $00,$3B,$B0,$7B,$FF,$CE ;
 $7BFE DEFB $07,$FF,$FF,$FB,$FF,$D1 ;
 $7C04 DEFB $08,$19,$FF,$FB,$FF,$E1 ;
 $7C0A DEFB $08,$09,$FF,$FF,$E7,$C1 ;
 $7C10 DEFB $08,$07,$F9,$FF,$07,$83 ;
 $7C16 DEFB $06,$03,$F8,$00,$0F,$C4 ;
 $7C1C DEFB $01,$86,$F8,$00,$0F,$68 ;
 $7C22 DEFB $00,$6D,$38,$00,$0C,$B0 ;
 $7C28 DEFB $00,$02,$10,$00,$08,$40 ;
 $7C2E DEFB $00,$01,$20,$00,$08,$80 ;
 $7C34 DEFB $00,$00,$C0,$00,$05,$00 ;
 $7C3A DEFB $00,$00,$00,$00,$02,$00 ;
 $7C40 DEFB $00,$00,$00,$00,$00,$00 ;
 $7C46 DEFB $00,$00,$00,$00,$00,$00 ;
 $7C4C DEFB $00,$00,$00,$00,$00,$00 ;
 $7C52 DEFB $00,$00,$15,$50,$00,$00 ;
 $7C58 DEFB $00,$00,$AA,$AA,$00,$00 ;
 $7C5E DEFB $00,$01,$55,$55,$40,$00 ;
 $7C64 DEFB $00,$02,$AA,$AA,$A0,$00 ;
 $7C6A DEFB $00,$05,$55,$55,$50,$00 ;
 $7C70 DEFB $00,$02,$AA,$AA,$A0,$00 ;
 $7C76 DEFB $00,$01,$55,$55,$40,$00 ;
 $7C7C DEFB $00,$00,$AA,$AA,$00,$00 ;
 $7C82 DEFB $00,$00,$00,$00,$00,$00 ;
 $7C88 DEFB $00,$00,$00,$00,$00,$00 ;
 $7C8E DEFB $00,$00,$00,$00,$00,$00 ;
 $7C94 DEFB $00,$00,$00,$00,$00,$00 ;
 $7C9A DEFB $00,$00,$00,$00,$00,$00 ; }
; #UDGARRAY*character-08,100;character-09;character-07;(bandit-2-frames)

; Daisy (customer)
;
; DAISY - The beautiful daughter of the City Jeweller.
;       Always loaded with money - never hurt her.
;
; .
;
; Normal 2 (depositing | $0A)
@label=CHARACTER_0A
b$7CA0 DEFB $00,$06,$0C,$38,$1C,$00 ; {#CHARACTERS(character-0A*)
 $7CA6 DEFB $00,$09,$92,$44,$62,$00 ;
 $7CAC DEFB $00,$08,$69,$44,$81,$00 ;
 $7CB2 DEFB $00,$06,$18,$C5,$11,$00 ;
 $7CB8 DEFB $00,$01,$8C,$66,$2D,$00 ;
 $7CBE DEFB $00,$00,$64,$6A,$46,$00 ;
 $7CC4 DEFB $00,$00,$1A,$2A,$80,$00 ;
 $7CCA DEFB $00,$00,$05,$34,$80,$00 ;
 $7CD0 DEFB $00,$00,$0F,$FE,$00,$00 ;
 $7CD6 DEFB $00,$00,$1F,$FF,$00,$00 ;
 $7CDC DEFB $00,$00,$1F,$FF,$80,$00 ;
 $7CE2 DEFB $00,$00,$1F,$0F,$80,$00 ;
 $7CE8 DEFB $00,$00,$3D,$FF,$C0,$00 ;
 $7CEE DEFB $00,$00,$3C,$01,$C0,$00 ;
 $7CF4 DEFB $00,$00,$38,$89,$C0,$00 ;
 $7CFA DEFB $00,$00,$38,$01,$C0,$00 ;
 $7D00 DEFB $00,$00,$38,$01,$80,$00 ;
 $7D06 DEFB $00,$00,$18,$21,$80,$00 ;
 $7D0C DEFB $00,$00,$04,$02,$00,$00 ;
 $7D12 DEFB $00,$00,$02,$62,$00,$00 ;
 $7D18 DEFB $00,$00,$02,$04,$00,$00 ;
 $7D1E DEFB $00,$00,$01,$08,$00,$00 ;
 $7D24 DEFB $00,$00,$06,$E6,$00,$00 ;
 $7D2A DEFB $00,$00,$18,$01,$80,$00 ;
 $7D30 DEFB $00,$00,$60,$00,$E0,$00 ;
 $7D36 DEFB $00,$00,$90,$00,$90,$00 ;
 $7D3C DEFB $00,$00,$90,$01,$08,$00 ;
 $7D42 DEFB $00,$00,$88,$A2,$08,$00 ;
 $7D48 DEFB $00,$01,$04,$42,$04,$00 ;
 $7D4E DEFB $00,$01,$04,$44,$02,$00 ;
 $7D54 DEFB $00,$01,$02,$48,$02,$00 ;
 $7D5A DEFB $00,$01,$01,$F0,$41,$00 ;
 $7D60 DEFB $00,$71,$00,$40,$41,$00 ;
 $7D66 DEFB $00,$29,$D0,$40,$A1,$00 ;
 $7D6C DEFB $00,$2A,$50,$40,$90,$80 ;
 $7D72 DEFB $00,$36,$4A,$A9,$10,$80 ;
 $7D78 DEFB $00,$0F,$88,$02,$11,$00 ;
 $7D7E DEFB $00,$10,$84,$02,$11,$00 ;
 $7D84 DEFB $00,$1F,$C4,$02,$22,$00 ;
 $7D8A DEFB $00,$11,$44,$62,$44,$00 ;
 $7D90 DEFB $00,$1F,$45,$FA,$98,$00 ;
 $7D96 DEFB $00,$09,$A7,$FE,$24,$00 ;
 $7D9C DEFB $00,$0F,$27,$FD,$14,$00 ;
 $7DA2 DEFB $00,$10,$8E,$FB,$0A,$00 ;
 $7DA8 DEFB $00,$24,$57,$0E,$84,$00 ;
 $7DAE DEFB $00,$2F,$7B,$FD,$F8,$00 ;
 $7DB4 DEFB $00,$4C,$3B,$FD,$A0,$00 ;
 $7DBA DEFB $00,$4F,$3D,$FB,$A0,$00 ;
 $7DC0 DEFB $00,$25,$5E,$FB,$B0,$00 ;
 $7DC6 DEFB $00,$2F,$6E,$F7,$78,$00 ;
 $7DCC DEFB $00,$14,$EF,$0F,$78,$00 ;
 $7DD2 DEFB $00,$0F,$F7,$FF,$74,$00 ;
 $7DD8 DEFB $00,$00,$FB,$FE,$F4,$00 ;
 $7DDE DEFB $00,$03,$7B,$FE,$EE,$00 ;
 $7DE4 DEFB $00,$03,$7D,$FD,$EE,$00 ;
 $7DEA DEFB $00,$07,$7E,$FB,$EF,$00 ;
 $7DF0 DEFB $00,$07,$BE,$FB,$DF,$00 ;
 $7DF6 DEFB $00,$0F,$BF,$77,$DF,$00 ;
 $7DFC DEFB $00,$0F,$BF,$8F,$DF,$80 ;
 $7E02 DEFB $00,$0F,$DF,$FF,$DF,$80 ;
 $7E08 DEFB $00,$0F,$DF,$FF,$BF,$80 ;
 $7E0E DEFB $00,$13,$EF,$FF,$BF,$40 ;
 $7E14 DEFB $00,$13,$EF,$FF,$7F,$40 ;
 $7E1A DEFB $00,$11,$F7,$FE,$FE,$40 ;
 $7E20 DEFB $00,$11,$F7,$FE,$FE,$40 ;
 $7E26 DEFB $00,$11,$FB,$FD,$FE,$20 ;
 $7E2C DEFB $00,$12,$FD,$FB,$FE,$20 ;
 $7E32 DEFB $00,$22,$FD,$FB,$FD,$20 ;
 $7E38 DEFB $00,$22,$FE,$07,$FD,$20 ;
 $7E3E DEFB $00,$24,$7F,$FF,$FD,$10 ;
 $7E44 DEFB $00,$24,$7F,$FF,$FC,$90 ;
 $7E4A DEFB $00,$24,$7F,$FF,$F4,$50 ;
 $7E50 DEFB $00,$24,$5F,$FF,$E4,$50 ;
 $7E56 DEFB $00,$44,$5F,$FF,$E2,$50 ;
 $7E5C DEFB $00,$44,$8F,$FF,$C2,$50 ;
 $7E62 DEFB $00,$48,$8F,$FF,$C2,$20 ;
 $7E68 DEFB $00,$48,$8F,$FF,$C2,$20 ;
 $7E6E DEFB $00,$48,$87,$FF,$C2,$20 ;
 $7E74 DEFB $00,$48,$87,$FF,$41,$20 ;
 $7E7A DEFB $00,$90,$87,$FF,$41,$20 ;
 $7E80 DEFB $00,$90,$C5,$E0,$41,$70 ;
 $7E86 DEFB $01,$77,$F4,$1F,$C7,$D0 ;
 $7E8C DEFB $02,$BA,$ED,$EF,$FE,$A0 ;
 $7E92 DEFB $01,$55,$57,$55,$55,$50 ;
 $7E98 DEFB $00,$AA,$AA,$AA,$AA,$A0 ;
 $7E9E DEFB $00,$15,$55,$55,$55,$40 ;
 $7EA4 DEFB $00,$00,$00,$00,$00,$00 ;
 $7EAA DEFB $00,$00,$00,$00,$00,$00 ; }
; Normal 2 (hands up | $0B)
@label=CHARACTER_0B
 $7EB0 DEFB $00,$06,$0C,$38,$1C,$00 ; {#CHARACTERS(character-0B*)
 $7EB6 DEFB $00,$09,$92,$44,$62,$00 ;
 $7EBC DEFB $00,$08,$69,$44,$81,$00 ;
 $7EC2 DEFB $00,$06,$18,$C5,$11,$00 ;
 $7EC8 DEFB $00,$01,$8C,$66,$2D,$00 ;
 $7ECE DEFB $00,$00,$64,$6A,$46,$00 ;
 $7ED4 DEFB $00,$80,$1A,$2A,$80,$10 ;
 $7EDA DEFB $02,$A0,$05,$34,$80,$54 ;
 $7EE0 DEFB $02,$A0,$0F,$FE,$00,$54 ;
 $7EE6 DEFB $0A,$A0,$1F,$FF,$00,$55 ;
 $7EEC DEFB $0A,$A0,$1F,$FF,$80,$55 ;
 $7EF2 DEFB $0B,$A4,$1F,$0F,$80,$75 ;
 $7EF8 DEFB $0E,$08,$3D,$FF,$C2,$2D ;
 $7EFE DEFB $06,$30,$3C,$01,$C1,$02 ;
 $7F04 DEFB $02,$40,$38,$89,$C0,$E6 ;
 $7F0A DEFB $03,$C0,$38,$01,$C0,$2C ;
 $7F10 DEFB $04,$60,$38,$21,$80,$30 ;
 $7F16 DEFB $04,$20,$18,$01,$80,$7C ;
 $7F1C DEFB $04,$40,$04,$F2,$00,$42 ;
 $7F22 DEFB $04,$40,$02,$92,$00,$44 ;
 $7F28 DEFB $04,$40,$02,$F4,$00,$44 ;
 $7F2E DEFB $04,$40,$01,$08,$00,$84 ;
 $7F34 DEFB $04,$40,$06,$E6,$00,$88 ;
 $7F3A DEFB $04,$60,$18,$01,$81,$08 ;
 $7F40 DEFB $02,$30,$60,$00,$E1,$10 ;
 $7F46 DEFB $02,$0F,$90,$00,$9E,$10 ;
 $7F4C DEFB $01,$00,$10,$01,$00,$20 ;
 $7F52 DEFB $00,$80,$08,$A2,$00,$20 ;
 $7F58 DEFB $00,$60,$04,$42,$00,$40 ;
 $7F5E DEFB $00,$1F,$04,$44,$2F,$80 ;
 $7F64 DEFB $00,$00,$82,$48,$40,$00 ;
 $7F6A DEFB $00,$00,$41,$F0,$40,$00 ;
 $7F70 DEFB $00,$00,$40,$40,$40,$00 ;
 $7F76 DEFB $00,$00,$20,$40,$80,$00 ;
 $7F7C DEFB $00,$00,$10,$40,$80,$00 ;
 $7F82 DEFB $00,$00,$0A,$A9,$00,$00 ;
 $7F88 DEFB $03,$00,$08,$02,$00,$00 ;
 $7F8E DEFB $01,$9C,$04,$02,$00,$00 ;
 $7F94 DEFB $01,$64,$04,$02,$00,$00 ;
 $7F9A DEFB $00,$C0,$04,$62,$00,$00 ;
 $7FA0 DEFB $01,$A0,$05,$FA,$00,$00 ;
 $7FA6 DEFB $02,$10,$07,$FE,$00,$00 ;
 $7FAC DEFB $05,$C8,$07,$FD,$00,$00 ;
 $7FB2 DEFB $05,$88,$0E,$FB,$00,$00 ;
 $7FB8 DEFB $09,$E4,$17,$0E,$80,$00 ;
 $7FBE DEFB $08,$A4,$3B,$FD,$C0,$00 ;
 $7FC4 DEFB $05,$E8,$3B,$FD,$A0,$00 ;
 $7FCA DEFB $04,$88,$3D,$FB,$A0,$00 ;
 $7FD0 DEFB $02,$10,$5E,$FB,$B0,$00 ;
 $7FD6 DEFB $01,$E0,$6E,$F7,$78,$00 ;
 $7FDC DEFB $00,$00,$EF,$0F,$78,$00 ;
 $7FE2 DEFB $00,$01,$F7,$FF,$74,$00 ;
 $7FE8 DEFB $00,$00,$FB,$FE,$F4,$00 ;
 $7FEE DEFB $00,$03,$7B,$FE,$EE,$00 ;
 $7FF4 DEFB $00,$03,$7D,$FD,$EE,$00 ;
 $7FFA DEFB $00,$07,$7E,$FB,$EF,$00 ;
 $8000 DEFB $00,$07,$BE,$FB,$DF,$00 ;
 $8006 DEFB $00,$0F,$BF,$77,$DF,$00 ;
 $800C DEFB $00,$0F,$BF,$8F,$DF,$80 ;
 $8012 DEFB $00,$0F,$DF,$FF,$DF,$80 ;
 $8018 DEFB $00,$0F,$DF,$FF,$BF,$80 ;
 $801E DEFB $00,$13,$EF,$FF,$BF,$40 ;
 $8024 DEFB $00,$13,$EF,$FF,$7F,$40 ;
 $802A DEFB $00,$11,$F7,$FE,$FE,$40 ;
 $8030 DEFB $00,$11,$F7,$FE,$FE,$40 ;
 $8036 DEFB $00,$11,$FB,$FD,$FE,$20 ;
 $803C DEFB $00,$12,$FD,$FB,$FE,$20 ;
 $8042 DEFB $00,$22,$FD,$FB,$FD,$20 ;
 $8048 DEFB $00,$22,$FE,$07,$FD,$20 ;
 $804E DEFB $00,$24,$7F,$FF,$FD,$10 ;
 $8054 DEFB $00,$24,$7F,$FF,$FC,$90 ;
 $805A DEFB $00,$24,$7F,$FF,$F4,$50 ;
 $8060 DEFB $00,$24,$5F,$FF,$E4,$50 ;
 $8066 DEFB $00,$44,$5F,$FF,$E2,$50 ;
 $806C DEFB $00,$44,$8F,$FF,$C2,$50 ;
 $8072 DEFB $00,$48,$8F,$FF,$C2,$20 ;
 $8078 DEFB $00,$48,$8F,$FF,$C2,$20 ;
 $807E DEFB $00,$48,$87,$FF,$C2,$20 ;
 $8084 DEFB $00,$48,$87,$FF,$41,$20 ;
 $808A DEFB $00,$90,$87,$FF,$41,$20 ;
 $8090 DEFB $00,$90,$C5,$E0,$41,$70 ;
 $8096 DEFB $01,$77,$F4,$1F,$C7,$D0 ;
 $809C DEFB $02,$BA,$AD,$EF,$FA,$A0 ;
 $80A2 DEFB $01,$55,$57,$55,$55,$50 ;
 $80A8 DEFB $00,$AA,$AA,$AA,$AA,$A0 ;
 $80AE DEFB $00,$15,$55,$55,$55,$40 ;
 $80B4 DEFB $00,$00,$00,$00,$00,$00 ;
 $80BA DEFB $00,$00,$00,$00,$00,$00 ; }
; Normal 2 (uncover | $0C)
@label=CHARACTER_0C
 $80C0 DEFB $00,$00,$00,$00,$01,$80 ; {#CHARACTERS(character-0C*)
 $80C6 DEFB $00,$00,$02,$00,$0E,$70 ;
 $80CC DEFB $00,$00,$0D,$80,$31,$88 ;
 $80D2 DEFB $00,$00,$10,$40,$C0,$88 ;
 $80D8 DEFB $00,$01,$9F,$C6,$70,$44 ;
 $80DE DEFB $00,$03,$7F,$F9,$CC,$64 ;
 $80E4 DEFB $00,$02,$8F,$C1,$B2,$12 ;
 $80EA DEFB $00,$05,$00,$01,$8D,$93 ;
 $80F0 DEFB $00,$06,$AA,$A2,$82,$5F ;
 $80F6 DEFB $00,$0D,$40,$18,$71,$3F ;
 $80FC DEFB $00,$0A,$90,$44,$4E,$FF ;
 $8102 DEFB $00,$0D,$98,$C4,$41,$FF ;
 $8108 DEFB $00,$06,$85,$44,$81,$FC ;
 $810E DEFB $00,$03,$0F,$84,$01,$F4 ;
 $8114 DEFB $00,$00,$DF,$E8,$01,$F4 ;
 $811A DEFB $00,$00,$FF,$F0,$01,$E4 ;
 $8120 DEFB $00,$00,$7F,$E0,$00,$E0 ;
 $8126 DEFB $00,$00,$7F,$F0,$00,$E6 ;
 $812C DEFB $00,$01,$BF,$EC,$00,$C6 ;
 $8132 DEFB $00,$07,$DF,$DF,$80,$45 ;
 $8138 DEFB $00,$1B,$EF,$DF,$E0,$44 ;
 $813E DEFB $00,$23,$FF,$9F,$98,$84 ;
 $8144 DEFB $00,$63,$E7,$9F,$C4,$82 ;
 $814A DEFB $00,$73,$E7,$8F,$C4,$82 ;
 $8150 DEFB $00,$73,$E3,$0F,$CD,$01 ;
 $8156 DEFB $00,$57,$E2,$0F,$CD,$00 ;
 $815C DEFB $00,$47,$E1,$1F,$D5,$00 ;
 $8162 DEFB $00,$27,$E0,$9F,$C5,$08 ;
 $8168 DEFB $00,$47,$E1,$1F,$C9,$04 ;
 $816E DEFB $00,$47,$E1,$1F,$C9,$02 ;
 $8174 DEFB $00,$47,$E0,$9F,$C5,$02 ;
 $817A DEFB $00,$47,$E1,$1F,$C4,$81 ;
 $8180 DEFB $00,$43,$E1,$0F,$C8,$81 ;
 $8186 DEFB $01,$E1,$C0,$8F,$C8,$40 ;
 $818C DEFB $02,$D1,$81,$03,$D0,$40 ;
 $8192 DEFB $05,$29,$01,$01,$15,$40 ;
 $8198 DEFB $05,$E9,$01,$02,$AB,$80 ;
 $819E DEFB $04,$C9,$00,$82,$9A,$00 ;
 $81A4 DEFB $04,$CB,$10,$82,$8D,$00 ;
 $81AA DEFB $02,$12,$8B,$42,$8F,$81 ;
 $81B0 DEFB $05,$ED,$FF,$26,$11,$41 ;
 $81B6 DEFB $0E,$DD,$44,$3A,$22,$66 ;
 $81BC DEFB $0E,$CD,$FF,$FE,$24,$6F ;
 $81C2 DEFB $0F,$F8,$0F,$FE,$44,$57 ;
 $81C8 DEFB $0F,$08,$7E,$FE,$48,$57 ;
 $81CE DEFB $0F,$F9,$F8,$FC,$90,$9B ;
 $81D4 DEFB $07,$1F,$F3,$FC,$91,$3B ;
 $81DA DEFB $03,$EF,$FF,$FC,$91,$2D ;
 $81E0 DEFB $00,$47,$8F,$FD,$22,$2D ;
 $81E6 DEFB $00,$76,$7E,$7E,$24,$6D ;
 $81EC DEFB $00,$75,$FC,$7E,$44,$6E ;
 $81F2 DEFB $00,$77,$F0,$3C,$88,$EE ;
 $81F8 DEFB $00,$37,$F0,$3C,$88,$77 ;
 $81FE DEFB $00,$37,$F0,$1C,$91,$77 ;
 $8204 DEFB $00,$27,$E0,$18,$91,$77 ;
 $820A DEFB $00,$37,$E0,$19,$23,$7B ;
 $8210 DEFB $00,$37,$C0,$09,$22,$7B ;
 $8216 DEFB $00,$17,$C0,$0A,$22,$7B ;
 $821C DEFB $00,$1F,$C0,$0A,$42,$7D ;
 $8222 DEFB $00,$1F,$C0,$14,$44,$7E ;
 $8228 DEFB $00,$1F,$C0,$14,$88,$7E ;
 $822E DEFB $00,$0F,$C0,$18,$88,$7E ;
 $8234 DEFB $00,$0F,$C0,$10,$90,$9F ;
 $823A DEFB $00,$0E,$C0,$20,$90,$DF ;
 $8240 DEFB $00,$0D,$00,$21,$10,$DF ;
 $8246 DEFB $00,$1B,$C0,$21,$21,$EF ;
 $824C DEFB $00,$1F,$C0,$42,$21,$EF ;
 $8252 DEFB $00,$0F,$C0,$42,$21,$EF ;
 $8258 DEFB $00,$07,$C0,$42,$23,$EF ;
 $825E DEFB $00,$07,$C0,$84,$43,$EF ;
 $8264 DEFB $00,$07,$C0,$84,$43,$E7 ;
 $826A DEFB $00,$07,$C0,$84,$43,$F7 ;
 $8270 DEFB $00,$07,$C0,$04,$47,$F7 ;
 $8276 DEFB $00,$07,$C5,$04,$87,$F7 ;
 $827C DEFB $00,$07,$CA,$08,$87,$F3 ;
 $8282 DEFB $00,$07,$F5,$08,$87,$FB ;
 $8288 DEFB $00,$07,$EA,$08,$87,$FB ;
 $828E DEFB $00,$3F,$F5,$11,$0F,$FB ;
 $8294 DEFB $01,$FF,$FA,$11,$1F,$FD ;
 $829A DEFB $07,$FF,$F5,$11,$6B,$FD ;
 $82A0 DEFB $07,$FE,$6A,$A1,$D5,$7D ;
 $82A6 DEFB $05,$55,$55,$63,$AA,$AF ;
 $82AC DEFB $0A,$AA,$AA,$1D,$55,$55 ;
 $82B2 DEFB $15,$55,$55,$54,$AA,$AA ;
 $82B8 DEFB $00,$2A,$AA,$AA,$50,$50 ;
 $82BE DEFB $00,$05,$55,$50,$00,$00 ;
 $82C4 DEFB $00,$00,$00,$00,$00,$00 ;
 $82CA DEFB $00,$00,$00,$00,$00,$00 ; }
; Normal 2 (shot | $0D)
@label=CHARACTER_0D
 $82D0 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-0D*)
 $82D6 DEFB $00,$00,$00,$00,$00,$00 ;
 $82DC DEFB $00,$00,$00,$00,$00,$00 ;
 $82E2 DEFB $00,$00,$00,$00,$00,$00 ;
 $82E8 DEFB $00,$00,$00,$00,$00,$00 ;
 $82EE DEFB $00,$00,$00,$00,$00,$00 ;
 $82F4 DEFB $00,$00,$00,$00,$00,$00 ;
 $82FA DEFB $00,$00,$00,$00,$00,$00 ;
 $8300 DEFB $00,$00,$00,$00,$00,$00 ;
 $8306 DEFB $00,$00,$00,$00,$00,$00 ;
 $830C DEFB $00,$00,$00,$00,$00,$00 ;
 $8312 DEFB $00,$00,$00,$00,$00,$00 ;
 $8318 DEFB $00,$00,$00,$1C,$00,$00 ;
 $831E DEFB $00,$00,$00,$22,$00,$00 ;
 $8324 DEFB $00,$00,$07,$21,$00,$00 ;
 $832A DEFB $00,$00,$08,$A1,$00,$00 ;
 $8330 DEFB $00,$00,$08,$A1,$38,$00 ;
 $8336 DEFB $00,$00,$04,$52,$24,$00 ;
 $833C DEFB $00,$00,$F2,$52,$44,$00 ;
 $8342 DEFB $00,$01,$0E,$52,$84,$00 ;
 $8348 DEFB $00,$01,$02,$32,$88,$00 ;
 $834E DEFB $00,$00,$E1,$35,$10,$00 ;
 $8354 DEFB $00,$00,$18,$A5,$70,$00 ;
 $835A DEFB $00,$00,$04,$A6,$8C,$00 ;
 $8360 DEFB $00,$00,$03,$FD,$02,$00 ;
 $8366 DEFB $00,$00,$0F,$FF,$F2,$00 ;
 $836C DEFB $00,$00,$1F,$FF,$0C,$00 ;
 $8372 DEFB $00,$00,$1F,$FF,$80,$00 ;
 $8378 DEFB $00,$00,$1F,$FF,$80,$00 ;
 $837E DEFB $00,$00,$1F,$FF,$80,$00 ;
 $8384 DEFB $00,$00,$1F,$FF,$80,$00 ;
 $838A DEFB $00,$00,$1F,$FF,$00,$00 ;
 $8390 DEFB $00,$00,$6A,$06,$E0,$00 ;
 $8396 DEFB $00,$03,$97,$F8,$9C,$00 ;
 $839C DEFB $00,$1C,$10,$01,$03,$80 ;
 $83A2 DEFB $00,$60,$08,$A2,$00,$40 ;
 $83A8 DEFB $00,$80,$C4,$42,$F8,$20 ;
 $83AE DEFB $00,$87,$24,$04,$46,$10 ;
 $83B4 DEFB $01,$08,$22,$09,$41,$10 ;
 $83BA DEFB $00,$48,$21,$F0,$41,$10 ;
 $83C0 DEFB $01,$50,$20,$40,$41,$10 ;
 $83C6 DEFB $09,$50,$10,$40,$81,$10 ;
 $83CC DEFB $05,$50,$10,$40,$81,$50 ;
 $83D2 DEFB $03,$F0,$0A,$A9,$05,$50 ;
 $83D8 DEFB $01,$F2,$08,$02,$03,$5E ;
 $83DE DEFB $0E,$CC,$04,$02,$01,$60 ;
 $83E4 DEFB $0C,$10,$04,$02,$0E,$CE ;
 $83EA DEFB $13,$30,$04,$62,$01,$F0 ;
 $83F0 DEFB $1F,$B8,$05,$FA,$00,$00 ;
 $83F6 DEFB $01,$C4,$07,$FE,$00,$00 ;
 $83FC DEFB $02,$22,$07,$FC,$00,$00 ;
 $8402 DEFB $05,$10,$0E,$FB,$00,$00 ;
 $8408 DEFB $0B,$C8,$17,$0E,$80,$00 ;
 $840E DEFB $13,$04,$1B,$FD,$C0,$00 ;
 $8414 DEFB $13,$C4,$3B,$FD,$A0,$00 ;
 $841A DEFB $09,$48,$3D,$FB,$A0,$00 ;
 $8420 DEFB $0B,$C8,$7C,$F3,$E0,$00 ;
 $8426 DEFB $04,$11,$AF,$0F,$F8,$00 ;
 $842C DEFB $03,$E7,$2F,$FF,$E6,$00 ;
 $8432 DEFB $00,$0E,$37,$FC,$E9,$00 ;
 $8438 DEFB $00,$3C,$17,$FB,$54,$80 ;
 $843E DEFB $00,$7F,$FF,$FF,$B2,$80 ;
 $8444 DEFB $01,$BF,$F2,$AB,$DA,$40 ;
 $844A DEFB $02,$44,$09,$9B,$CE,$40 ;
 $8450 DEFB $04,$BE,$A5,$73,$C6,$60 ;
 $8456 DEFB $05,$1F,$D6,$57,$CB,$20 ;
 $845C DEFB $04,$6F,$EA,$CB,$D1,$A0 ;
 $8462 DEFB $04,$4F,$FD,$84,$09,$90 ;
 $8468 DEFB $04,$44,$EE,$FB,$C5,$90 ;
 $846E DEFB $02,$33,$EE,$8B,$CB,$90 ;
 $8474 DEFB $02,$2A,$DE,$8B,$D2,$20 ;
 $847A DEFB $02,$14,$78,$DD,$A6,$20 ;
 $8480 DEFB $01,$8E,$27,$77,$3C,$C0 ;
 $8486 DEFB $00,$61,$C2,$23,$C3,$00 ;
 $848C DEFB $00,$18,$3F,$FF,$0C,$00 ;
 $8492 DEFB $00,$07,$00,$00,$70,$00 ;
 $8498 DEFB $00,$00,$FF,$FF,$80,$00 ;
 $849E DEFB $00,$00,$00,$00,$00,$00 ;
 $84A4 DEFB $00,$00,$2A,$AA,$00,$00 ;
 $84AA DEFB $00,$00,$55,$55,$00,$00 ;
 $84B0 DEFB $00,$00,$AA,$AA,$80,$00 ;
 $84B6 DEFB $00,$01,$55,$55,$40,$00 ;
 $84BC DEFB $00,$02,$AA,$AA,$80,$00 ;
 $84C2 DEFB $00,$01,$55,$55,$40,$00 ;
 $84C8 DEFB $00,$00,$AA,$AA,$80,$00 ;
 $84CE DEFB $00,$00,$00,$00,$00,$00 ;
 $84D4 DEFB $00,$00,$00,$00,$00,$00 ;
 $84DA DEFB $00,$00,$00,$00,$00,$00 ; }
; Normal 2 (floor | $0E)
@label=CHARACTER_0E
 $84E0 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-0E*)
 $84E6 DEFB $00,$00,$00,$00,$00,$00 ;
 $84EC DEFB $00,$00,$00,$00,$00,$00 ;
 $84F2 DEFB $00,$00,$00,$00,$00,$00 ;
 $84F8 DEFB $00,$00,$00,$00,$00,$00 ;
 $84FE DEFB $00,$00,$00,$00,$00,$00 ;
 $8504 DEFB $00,$00,$00,$00,$00,$00 ;
 $850A DEFB $00,$00,$00,$00,$00,$00 ;
 $8510 DEFB $00,$00,$00,$00,$00,$00 ;
 $8516 DEFB $00,$00,$00,$00,$00,$00 ;
 $851C DEFB $00,$00,$00,$00,$00,$00 ;
 $8522 DEFB $00,$00,$00,$00,$00,$00 ;
 $8528 DEFB $00,$00,$00,$00,$00,$00 ;
 $852E DEFB $00,$00,$00,$00,$00,$00 ;
 $8534 DEFB $00,$00,$00,$00,$00,$00 ;
 $853A DEFB $00,$00,$00,$00,$00,$00 ;
 $8540 DEFB $00,$00,$00,$00,$00,$00 ;
 $8546 DEFB $00,$00,$00,$00,$00,$00 ;
 $854C DEFB $00,$00,$00,$00,$00,$00 ;
 $8552 DEFB $00,$00,$00,$00,$00,$00 ;
 $8558 DEFB $00,$00,$00,$00,$00,$00 ;
 $855E DEFB $00,$00,$00,$00,$00,$00 ;
 $8564 DEFB $00,$00,$00,$00,$00,$00 ;
 $856A DEFB $00,$00,$00,$00,$00,$00 ;
 $8570 DEFB $00,$00,$00,$00,$00,$00 ;
 $8576 DEFB $00,$00,$00,$00,$00,$00 ;
 $857C DEFB $00,$00,$00,$00,$00,$00 ;
 $8582 DEFB $00,$00,$00,$00,$00,$00 ;
 $8588 DEFB $00,$00,$00,$00,$00,$00 ;
 $858E DEFB $00,$00,$00,$00,$00,$00 ;
 $8594 DEFB $00,$00,$00,$00,$00,$00 ;
 $859A DEFB $00,$00,$00,$00,$00,$00 ;
 $85A0 DEFB $00,$00,$00,$00,$00,$00 ;
 $85A6 DEFB $00,$00,$00,$00,$00,$00 ;
 $85AC DEFB $00,$00,$00,$00,$00,$00 ;
 $85B2 DEFB $00,$00,$00,$00,$00,$00 ;
 $85B8 DEFB $00,$00,$00,$00,$00,$00 ;
 $85BE DEFB $00,$00,$00,$00,$00,$00 ;
 $85C4 DEFB $00,$00,$00,$00,$00,$00 ;
 $85CA DEFB $00,$00,$00,$00,$00,$00 ;
 $85D0 DEFB $00,$00,$00,$00,$00,$00 ;
 $85D6 DEFB $00,$00,$00,$00,$00,$00 ;
 $85DC DEFB $00,$00,$00,$00,$00,$00 ;
 $85E2 DEFB $00,$00,$00,$00,$00,$00 ;
 $85E8 DEFB $00,$00,$00,$00,$00,$00 ;
 $85EE DEFB $00,$00,$00,$00,$00,$00 ;
 $85F4 DEFB $00,$00,$00,$00,$00,$00 ;
 $85FA DEFB $00,$00,$00,$00,$00,$00 ;
 $8600 DEFB $00,$00,$00,$00,$00,$00 ;
 $8606 DEFB $00,$00,$00,$00,$00,$00 ;
 $860C DEFB $00,$00,$00,$00,$00,$00 ;
 $8612 DEFB $00,$00,$00,$00,$00,$00 ;
 $8618 DEFB $00,$00,$00,$00,$00,$00 ;
 $861E DEFB $00,$00,$00,$00,$00,$00 ;
 $8624 DEFB $00,$00,$00,$00,$00,$00 ;
 $862A DEFB $00,$00,$00,$00,$00,$00 ;
 $8630 DEFB $00,$00,$00,$00,$00,$00 ;
 $8636 DEFB $00,$00,$00,$00,$00,$00 ;
 $863C DEFB $00,$00,$00,$00,$00,$00 ;
 $8642 DEFB $00,$00,$30,$38,$00,$00 ;
 $8648 DEFB $00,$00,$4C,$44,$00,$00 ;
 $864E DEFB $00,$00,$42,$84,$00,$00 ;
 $8654 DEFB $00,$00,$21,$08,$00,$00 ;
 $865A DEFB $00,$00,$39,$08,$E0,$00 ;
 $8660 DEFB $00,$00,$C6,$93,$10,$00 ;
 $8666 DEFB $00,$01,$01,$94,$08,$00 ;
 $866C DEFB $00,$01,$41,$10,$C8,$00 ;
 $8672 DEFB $00,$00,$9F,$F9,$30,$00 ;
 $8678 DEFB $00,$00,$E0,$07,$00,$00 ;
 $867E DEFB $00,$03,$00,$00,$C0,$00 ;
 $8684 DEFB $00,$05,$8F,$F8,$00,$00 ;
 $868A DEFB $00,$19,$B1,$0F,$7C,$00 ;
 $8690 DEFB $00,$23,$A3,$18,$FE,$00 ;
 $8696 DEFB $00,$DB,$94,$A5,$F1,$00 ;
 $869C DEFB $01,$23,$8D,$47,$E9,$00 ;
 $86A2 DEFB $02,$43,$9A,$DF,$EC,$80 ;
 $86A8 DEFB $02,$63,$98,$D3,$94,$80 ;
 $86AE DEFB $02,$57,$A5,$39,$8A,$40 ;
 $86B4 DEFB $02,$48,$0A,$BC,$5A,$40 ;
 $86BA DEFB $02,$4B,$91,$78,$26,$40 ;
 $86C0 DEFB $02,$33,$AA,$42,$1E,$40 ;
 $86C6 DEFB $02,$13,$87,$FF,$E0,$80 ;
 $86CC DEFB $05,$1F,$FC,$00,$0D,$40 ;
 $86D2 DEFB $02,$FF,$FF,$FF,$FE,$80 ;
 $86D8 DEFB $05,$55,$55,$55,$55,$00 ;
 $86DE DEFB $02,$AA,$AA,$AA,$AA,$00 ;
 $86E4 DEFB $00,$00,$00,$00,$00,$00 ;
 $86EA DEFB $00,$00,$00,$00,$00,$00 ; }
; #UDGARRAY*character-0A,50;character-0B;character-0C;character-00(daisy-uncover-frames)
;       #UDGARRAY*character-0A,50;character-0B;character-0D;character-0E(daisy-shot-frames)

; Bandit 3
;
; JOE DALTON - Alfred Dalton's brother. It runs in the family.
;       Shoot as soon as he takes out his gun.
;
; .
;
; Bandit 3 (draw | $0F)
@label=CHARACTER_0F
b$86F0 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-0F*)
 $86F6 DEFB $00,$00,$00,$00,$00,$00 ;
 $86FC DEFB $00,$00,$00,$00,$00,$00 ;
 $8702 DEFB $00,$00,$00,$00,$00,$00 ;
 $8708 DEFB $00,$00,$02,$00,$00,$00 ;
 $870E DEFB $00,$00,$0F,$80,$00,$00 ;
 $8714 DEFB $00,$00,$1F,$C0,$00,$00 ;
 $871A DEFB $00,$01,$90,$46,$00,$00 ;
 $8720 DEFB $00,$03,$FF,$FE,$00,$00 ;
 $8726 DEFB $00,$0F,$FF,$FF,$00,$00 ;
 $872C DEFB $00,$0F,$FF,$FF,$00,$00 ;
 $8732 DEFB $00,$0F,$FF,$FF,$80,$00 ;
 $8738 DEFB $00,$1F,$C7,$3F,$80,$00 ;
 $873E DEFB $00,$1F,$D0,$BF,$80,$00 ;
 $8744 DEFB $00,$1F,$C9,$3F,$80,$00 ;
 $874A DEFB $00,$0F,$D6,$BF,$00,$00 ;
 $8750 DEFB $00,$03,$C6,$3E,$00,$00 ;
 $8756 DEFB $00,$00,$40,$38,$00,$00 ;
 $875C DEFB $00,$00,$7F,$F0,$00,$00 ;
 $8762 DEFB $00,$00,$F9,$F8,$00,$00 ;
 $8768 DEFB $00,$00,$40,$20,$00,$00 ;
 $876E DEFB $00,$7F,$CF,$3F,$00,$00 ;
 $8774 DEFB $01,$FC,$C0,$31,$80,$00 ;
 $877A DEFB $07,$FB,$E0,$5E,$C0,$00 ;
 $8780 DEFB $0F,$F7,$B0,$9E,$E0,$00 ;
 $8786 DEFB $1F,$F7,$DD,$9D,$E0,$00 ;
 $878C DEFB $3F,$F1,$AA,$1B,$F0,$00 ;
 $8792 DEFB $3F,$FB,$D6,$1B,$F0,$00 ;
 $8798 DEFB $3F,$87,$AA,$1F,$F8,$00 ;
 $879E DEFB $7F,$0F,$D6,$1F,$F8,$00 ;
 $87A4 DEFB $7E,$0F,$AA,$1F,$F8,$00 ;
 $87AA DEFB $7C,$0F,$D6,$1F,$F8,$00 ;
 $87B0 DEFB $7C,$0F,$A8,$27,$78,$00 ;
 $87B6 DEFB $FC,$0F,$D6,$5B,$78,$00 ;
 $87BC DEFB $FC,$0F,$A9,$42,$F8,$00 ;
 $87C2 DEFB $F8,$0F,$D6,$42,$F8,$00 ;
 $87C8 DEFB $F8,$0F,$AA,$3D,$F8,$00 ;
 $87CE DEFB $F8,$0F,$D6,$41,$F8,$00 ;
 $87D4 DEFB $F8,$0F,$AA,$7D,$F8,$00 ;
 $87DA DEFB $30,$0F,$D6,$43,$F8,$00 ;
 $87E0 DEFB $38,$0F,$AA,$3E,$F0,$00 ;
 $87E6 DEFB $FE,$13,$7F,$BF,$30,$00 ;
 $87EC DEFB $79,$1F,$FF,$FF,$80,$00 ;
 $87F2 DEFB $64,$9F,$FF,$FF,$C0,$00 ;
 $87F8 DEFB $52,$1F,$FF,$FF,$C0,$00 ;
 $87FE DEFB $48,$07,$FD,$FF,$C0,$00 ;
 $8804 DEFB $40,$0F,$FD,$FE,$C0,$00 ;
 $880A DEFB $00,$0F,$FD,$FE,$80,$00 ;
 $8810 DEFB $00,$07,$FB,$3E,$00,$00 ;
 $8816 DEFB $00,$07,$EE,$FE,$80,$00 ;
 $881C DEFB $00,$07,$F0,$7E,$80,$00 ;
 $8822 DEFB $00,$07,$F0,$7E,$80,$00 ;
 $8828 DEFB $00,$07,$E0,$3E,$00,$00 ;
 $882E DEFB $00,$07,$E0,$3E,$80,$00 ;
 $8834 DEFB $00,$07,$E0,$3E,$00,$00 ;
 $883A DEFB $00,$07,$E0,$1F,$00,$00 ;
 $8840 DEFB $00,$0F,$C0,$1F,$00,$00 ;
 $8846 DEFB $00,$0F,$C0,$1F,$00,$00 ;
 $884C DEFB $00,$0F,$C0,$1F,$00,$00 ;
 $8852 DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $8858 DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $885E DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $8864 DEFB $00,$0F,$80,$0F,$80,$00 ;
 $886A DEFB $00,$07,$80,$0F,$C0,$00 ;
 $8870 DEFB $00,$1F,$C0,$1F,$C0,$00 ;
 $8876 DEFB $00,$1E,$40,$1D,$80,$00 ;
 $887C DEFB $00,$0F,$40,$1D,$80,$00 ;
 $8882 DEFB $00,$0F,$40,$1D,$80,$00 ;
 $8888 DEFB $00,$0F,$40,$1D,$80,$00 ;
 $888E DEFB $00,$0F,$40,$1D,$80,$00 ;
 $8894 DEFB $00,$0F,$40,$1D,$80,$00 ;
 $889A DEFB $00,$0F,$40,$1D,$80,$00 ;
 $88A0 DEFB $00,$0F,$40,$1D,$80,$00 ;
 $88A6 DEFB $00,$0F,$40,$1D,$80,$00 ;
 $88AC DEFB $00,$0F,$40,$1D,$80,$00 ;
 $88B2 DEFB $00,$0F,$75,$5D,$80,$00 ;
 $88B8 DEFB $00,$0F,$6A,$BD,$80,$00 ;
 $88BE DEFB $00,$7F,$75,$7D,$C0,$00 ;
 $88C4 DEFB $01,$FF,$6A,$BC,$30,$00 ;
 $88CA DEFB $03,$FF,$D5,$5E,$08,$00 ;
 $88D0 DEFB $07,$FA,$AA,$A9,$04,$00 ;
 $88D6 DEFB $07,$D5,$55,$55,$FC,$00 ;
 $88DC DEFB $0A,$AA,$AA,$AA,$A8,$00 ;
 $88E2 DEFB $05,$55,$55,$55,$50,$00 ;
 $88E8 DEFB $00,$2A,$AA,$AA,$00,$00 ;
 $88EE DEFB $00,$05,$55,$50,$00,$00 ;
 $88F4 DEFB $00,$00,$00,$00,$00,$00 ;
 $88FA DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 3 (stand off | $10)
@label=CHARACTER_10
 $8900 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-10*)
 $8906 DEFB $00,$00,$02,$00,$00,$00 ;
 $890C DEFB $00,$00,$0F,$80,$00,$00 ;
 $8912 DEFB $00,$00,$1F,$C0,$00,$00 ;
 $8918 DEFB $00,$01,$90,$46,$00,$00 ;
 $891E DEFB $00,$03,$FF,$FF,$00,$00 ;
 $8924 DEFB $00,$0F,$FF,$FF,$00,$00 ;
 $892A DEFB $00,$0F,$FF,$FF,$80,$00 ;
 $8930 DEFB $00,$0F,$FF,$FF,$80,$00 ;
 $8936 DEFB $00,$1F,$C7,$3F,$C0,$00 ;
 $893C DEFB $00,$1F,$D0,$BF,$C0,$00 ;
 $8942 DEFB $00,$1F,$C9,$3F,$C0,$00 ;
 $8948 DEFB $00,$0F,$D6,$BF,$80,$00 ;
 $894E DEFB $00,$03,$C6,$3E,$00,$00 ;
 $8954 DEFB $00,$00,$40,$38,$00,$00 ;
 $895A DEFB $00,$00,$7F,$F0,$00,$00 ;
 $8960 DEFB $00,$00,$F9,$F8,$00,$00 ;
 $8966 DEFB $00,$00,$40,$20,$00,$00 ;
 $896C DEFB $00,$07,$CF,$38,$00,$00 ;
 $8972 DEFB $00,$1C,$40,$3F,$00,$00 ;
 $8978 DEFB $00,$3B,$E0,$51,$C0,$00 ;
 $897E DEFB $00,$F7,$F0,$9E,$F0,$00 ;
 $8984 DEFB $01,$F7,$D5,$9E,$F8,$00 ;
 $898A DEFB $07,$F3,$EB,$1D,$FE,$00 ;
 $8990 DEFB $0F,$FB,$D6,$1B,$FF,$00 ;
 $8996 DEFB $1F,$F7,$EB,$1B,$FF,$80 ;
 $899C DEFB $1F,$CF,$D6,$1F,$BF,$80 ;
 $89A2 DEFB $3F,$8F,$EA,$1F,$9F,$C0 ;
 $89A8 DEFB $3F,$0F,$D6,$1F,$8F,$C0 ;
 $89AE DEFB $3F,$0F,$EB,$1F,$8F,$C0 ;
 $89B4 DEFB $3F,$0F,$D4,$1F,$8F,$C0 ;
 $89BA DEFB $3F,$0F,$EB,$1F,$87,$E0 ;
 $89C0 DEFB $3E,$0F,$D4,$1F,$87,$E0 ;
 $89C6 DEFB $3E,$0F,$EA,$1F,$87,$E0 ;
 $89CC DEFB $3E,$0F,$D5,$1F,$87,$E0 ;
 $89D2 DEFB $3E,$0F,$EA,$1F,$07,$E0 ;
 $89D8 DEFB $3E,$0F,$D6,$1F,$03,$E0 ;
 $89DE DEFB $3E,$0F,$EA,$1F,$01,$80 ;
 $89E4 DEFB $18,$0F,$D6,$1B,$0F,$C0 ;
 $89EA DEFB $3E,$0F,$EA,$1B,$01,$F0 ;
 $89F0 DEFB $39,$8F,$D4,$1F,$39,$48 ;
 $89F6 DEFB $74,$11,$7F,$B9,$7C,$A4 ;
 $89FC DEFB $2A,$1F,$FF,$FE,$7C,$A0 ;
 $8A02 DEFB $29,$1F,$FF,$FF,$BC,$90 ;
 $8A08 DEFB $24,$1F,$FF,$FF,$C4,$00 ;
 $8A0E DEFB $20,$07,$FD,$FF,$C0,$00 ;
 $8A14 DEFB $00,$0F,$FD,$FE,$C0,$00 ;
 $8A1A DEFB $00,$0F,$FD,$FE,$C0,$00 ;
 $8A20 DEFB $00,$07,$FB,$FE,$00,$00 ;
 $8A26 DEFB $00,$07,$EE,$FE,$80,$00 ;
 $8A2C DEFB $00,$07,$F0,$7E,$80,$00 ;
 $8A32 DEFB $00,$07,$F0,$7E,$80,$00 ;
 $8A38 DEFB $00,$07,$E0,$3E,$00,$00 ;
 $8A3E DEFB $00,$07,$E0,$3E,$80,$00 ;
 $8A44 DEFB $00,$07,$E0,$3E,$00,$00 ;
 $8A4A DEFB $00,$07,$E0,$1F,$00,$00 ;
 $8A50 DEFB $00,$0F,$C0,$1F,$00,$00 ;
 $8A56 DEFB $00,$0F,$C0,$1F,$00,$00 ;
 $8A5C DEFB $00,$0F,$C0,$1F,$00,$00 ;
 $8A62 DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $8A68 DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $8A6E DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $8A74 DEFB $00,$0F,$80,$0F,$80,$00 ;
 $8A7A DEFB $00,$07,$80,$0F,$C0,$00 ;
 $8A80 DEFB $00,$1F,$C0,$1F,$C0,$00 ;
 $8A86 DEFB $00,$1E,$40,$1D,$80,$00 ;
 $8A8C DEFB $00,$0F,$40,$1D,$80,$00 ;
 $8A92 DEFB $00,$0F,$40,$1D,$80,$00 ;
 $8A98 DEFB $00,$0F,$40,$1D,$80,$00 ;
 $8A9E DEFB $00,$0F,$40,$1D,$80,$00 ;
 $8AA4 DEFB $00,$0F,$40,$1D,$80,$00 ;
 $8AAA DEFB $00,$0F,$40,$1D,$80,$00 ;
 $8AB0 DEFB $00,$0F,$40,$1D,$80,$00 ;
 $8AB6 DEFB $00,$0F,$40,$1D,$80,$00 ;
 $8ABC DEFB $00,$0F,$4A,$9D,$80,$00 ;
 $8AC2 DEFB $00,$0F,$75,$5D,$80,$00 ;
 $8AC8 DEFB $00,$0F,$6A,$BD,$80,$00 ;
 $8ACE DEFB $00,$7F,$75,$7D,$C0,$00 ;
 $8AD4 DEFB $01,$FF,$6A,$BC,$30,$00 ;
 $8ADA DEFB $03,$FF,$D5,$5E,$08,$00 ;
 $8AE0 DEFB $07,$FA,$AA,$A9,$04,$00 ;
 $8AE6 DEFB $07,$D5,$55,$55,$FC,$00 ;
 $8AEC DEFB $0A,$AA,$AA,$AA,$A8,$00 ;
 $8AF2 DEFB $15,$55,$55,$55,$50,$00 ;
 $8AF8 DEFB $00,$2A,$AA,$AA,$00,$00 ;
 $8AFE DEFB $00,$05,$55,$50,$00,$00 ;
 $8B04 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B0A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 3 (shot | $11)
@label=CHARACTER_11
 $8B10 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-11*)
 $8B16 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B1C DEFB $00,$00,$00,$00,$00,$00 ;
 $8B22 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B28 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B2E DEFB $00,$00,$00,$00,$00,$00 ;
 $8B34 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B3A DEFB $00,$00,$00,$00,$00,$00 ;
 $8B40 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B46 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B4C DEFB $00,$00,$00,$00,$00,$00 ;
 $8B52 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B58 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B5E DEFB $00,$00,$00,$00,$00,$00 ;
 $8B64 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B6A DEFB $00,$00,$00,$00,$00,$00 ;
 $8B70 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B76 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B7C DEFB $00,$00,$00,$00,$00,$00 ;
 $8B82 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B88 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B8E DEFB $00,$00,$00,$00,$00,$00 ;
 $8B94 DEFB $00,$00,$00,$00,$00,$00 ;
 $8B9A DEFB $00,$00,$00,$00,$00,$00 ;
 $8BA0 DEFB $00,$00,$00,$00,$00,$00 ;
 $8BA6 DEFB $00,$00,$00,$00,$00,$00 ;
 $8BAC DEFB $00,$00,$00,$00,$00,$00 ;
 $8BB2 DEFB $00,$00,$10,$00,$00,$00 ;
 $8BB8 DEFB $00,$00,$0C,$00,$38,$00 ;
 $8BBE DEFB $00,$00,$02,$00,$48,$00 ;
 $8BC4 DEFB $00,$00,$00,$00,$00,$00 ;
 $8BCA DEFB $00,$00,$00,$00,$00,$00 ;
 $8BD0 DEFB $00,$00,$E0,$7F,$00,$00 ;
 $8BD6 DEFB $00,$01,$31,$FF,$C0,$00 ;
 $8BDC DEFB $00,$01,$C1,$FF,$E0,$00 ;
 $8BE2 DEFB $00,$00,$03,$FF,$E0,$00 ;
 $8BE8 DEFB $00,$00,$03,$FF,$E0,$00 ;
 $8BEE DEFB $00,$00,$7F,$BF,$FC,$00 ;
 $8BF4 DEFB $00,$01,$FB,$DF,$FF,$00 ;
 $8BFA DEFB $00,$03,$FF,$E1,$FF,$C0 ;
 $8C00 DEFB $00,$07,$FB,$FF,$FF,$E0 ;
 $8C06 DEFB $00,$0F,$ED,$FF,$FF,$F8 ;
 $8C0C DEFB $00,$1F,$CD,$FF,$DF,$FC ;
 $8C12 DEFB $00,$3F,$8B,$EE,$BF,$FE ;
 $8C18 DEFB $00,$7F,$0F,$A0,$BC,$FE ;
 $8C1E DEFB $00,$7E,$0F,$DF,$3C,$7C ;
 $8C24 DEFB $00,$FC,$0F,$AB,$3C,$19 ;
 $8C2A DEFB $00,$FC,$0F,$D6,$3C,$01 ;
 $8C30 DEFB $00,$FC,$0F,$AA,$3C,$09 ;
 $8C36 DEFB $01,$F8,$0F,$D6,$3C,$C5 ;
 $8C3C DEFB $01,$F8,$0F,$AA,$3C,$35 ;
 $8C42 DEFB $1C,$58,$0F,$D6,$3C,$0B ;
 $8C48 DEFB $03,$48,$0F,$AA,$3C,$77 ;
 $8C4E DEFB $7D,$56,$07,$D6,$3C,$0D ;
 $8C54 DEFB $02,$B8,$07,$AC,$3C,$00 ;
 $8C5A DEFB $01,$F8,$07,$D4,$3C,$00 ;
 $8C60 DEFB $00,$B0,$6F,$EC,$7C,$00 ;
 $8C66 DEFB $00,$00,$FF,$FF,$FC,$00 ;
 $8C6C DEFB $00,$01,$FF,$B1,$FE,$00 ;
 $8C72 DEFB $00,$1B,$F7,$FF,$FF,$80 ;
 $8C78 DEFB $00,$3B,$B0,$7F,$FF,$CE ;
 $8C7E DEFB $07,$FF,$FF,$FF,$FF,$F1 ;
 $8C84 DEFB $08,$19,$FF,$FF,$FF,$E1 ;
 $8C8A DEFB $08,$09,$FF,$80,$7F,$C1 ;
 $8C90 DEFB $08,$07,$FF,$F1,$FF,$83 ;
 $8C96 DEFB $06,$03,$FF,$E0,$FF,$C4 ;
 $8C9C DEFB $01,$86,$FB,$80,$3F,$68 ;
 $8CA2 DEFB $00,$6D,$38,$00,$0C,$B0 ;
 $8CA8 DEFB $00,$02,$10,$00,$08,$40 ;
 $8CAE DEFB $00,$01,$20,$00,$08,$80 ;
 $8CB4 DEFB $00,$00,$C0,$00,$05,$00 ;
 $8CBA DEFB $00,$00,$00,$00,$02,$00 ;
 $8CC0 DEFB $00,$00,$00,$00,$00,$00 ;
 $8CC6 DEFB $00,$00,$00,$00,$00,$00 ;
 $8CCC DEFB $00,$00,$00,$00,$00,$00 ;
 $8CD2 DEFB $00,$00,$15,$50,$00,$00 ;
 $8CD8 DEFB $00,$00,$AA,$AA,$00,$00 ;
 $8CDE DEFB $00,$01,$55,$55,$40,$00 ;
 $8CE4 DEFB $00,$02,$AA,$AA,$A0,$00 ;
 $8CEA DEFB $00,$05,$55,$55,$50,$00 ;
 $8CF0 DEFB $00,$02,$AA,$AA,$A0,$00 ;
 $8CF6 DEFB $00,$01,$55,$55,$40,$00 ;
 $8CFC DEFB $00,$00,$AA,$AA,$00,$00 ;
 $8D02 DEFB $00,$00,$00,$00,$00,$00 ;
 $8D08 DEFB $00,$00,$00,$00,$00,$00 ;
 $8D0E DEFB $00,$00,$00,$00,$00,$00 ;
 $8D14 DEFB $00,$00,$00,$00,$00,$00 ;
 $8D1A DEFB $00,$00,$00,$00,$00,$00 ; }
; #UDGARRAY*character-10,100;character-0F;character-11;character-07;(bandit-3-frames)

; Bandit 4
;
; MACKEYHAM - The bloodthirsty villain. Everyone trembles when
;       they come up against him. Don't hesitate or it
;       might be too late. Shoot as quickly as you can.
;
; .
;
; Bandit 4 (stand off | $12)
@label=CHARACTER_12
b$8D20 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-12*)
 $8D26 DEFB $00,$00,$02,$00,$00,$00 ;
 $8D2C DEFB $00,$00,$0F,$80,$00,$00 ;
 $8D32 DEFB $00,$00,$1F,$C0,$00,$00 ;
 $8D38 DEFB $00,$01,$90,$46,$00,$00 ;
 $8D3E DEFB $00,$03,$FF,$FF,$00,$00 ;
 $8D44 DEFB $00,$0F,$FF,$FF,$00,$00 ;
 $8D4A DEFB $00,$0F,$FF,$FF,$80,$00 ;
 $8D50 DEFB $00,$0F,$FF,$FF,$80,$00 ;
 $8D56 DEFB $00,$1F,$80,$1F,$C0,$00 ;
 $8D5C DEFB $00,$1F,$10,$8F,$C0,$00 ;
 $8D62 DEFB $00,$1F,$09,$0F,$C0,$00 ;
 $8D68 DEFB $00,$0F,$16,$8F,$80,$00 ;
 $8D6E DEFB $00,$03,$86,$1E,$00,$00 ;
 $8D74 DEFB $00,$00,$C0,$28,$00,$00 ;
 $8D7A DEFB $00,$00,$A0,$70,$00,$00 ;
 $8D80 DEFB $00,$00,$DF,$D0,$00,$00 ;
 $8D86 DEFB $00,$00,$AA,$B0,$00,$00 ;
 $8D8C DEFB $00,$07,$D5,$58,$00,$00 ;
 $8D92 DEFB $00,$1F,$EA,$BF,$00,$00 ;
 $8D98 DEFB $00,$3F,$F5,$7F,$C0,$00 ;
 $8D9E DEFB $00,$FF,$EA,$FF,$F0,$00 ;
 $8DA4 DEFB $01,$FB,$FD,$FF,$F8,$00 ;
 $8DAA DEFB $07,$FB,$FF,$FF,$FE,$00 ;
 $8DB0 DEFB $0F,$F7,$FD,$FF,$FF,$00 ;
 $8DB6 DEFB $1F,$ED,$FF,$FF,$FF,$80 ;
 $8DBC DEFB $1F,$C3,$FD,$FF,$BF,$80 ;
 $8DC2 DEFB $3F,$9F,$FD,$C3,$9F,$C0 ;
 $8DC8 DEFB $3F,$1F,$FD,$FF,$8F,$C0 ;
 $8DCE DEFB $3F,$1F,$FD,$FF,$8F,$C0 ;
 $8DD4 DEFB $3F,$1F,$FF,$FF,$8F,$C0 ;
 $8DDA DEFB $3F,$1F,$FF,$FF,$87,$E0 ;
 $8DE0 DEFB $3E,$1F,$FD,$FF,$87,$E0 ;
 $8DE6 DEFB $3E,$0F,$FD,$FF,$87,$E0 ;
 $8DEC DEFB $3E,$07,$FD,$FF,$87,$E0 ;
 $8DF2 DEFB $3E,$0F,$FE,$FF,$07,$E0 ;
 $8DF8 DEFB $3E,$0F,$FD,$FE,$03,$E0 ;
 $8DFE DEFB $3E,$0F,$FF,$FE,$01,$80 ;
 $8E04 DEFB $18,$0F,$FF,$FE,$0F,$C0 ;
 $8E0A DEFB $3E,$07,$FD,$FE,$01,$F0 ;
 $8E10 DEFB $39,$8F,$FF,$FE,$39,$48 ;
 $8E16 DEFB $74,$11,$44,$39,$7C,$A4 ;
 $8E1C DEFB $2A,$1F,$FF,$FE,$7C,$A0 ;
 $8E22 DEFB $29,$1F,$92,$7E,$BC,$90 ;
 $8E28 DEFB $24,$19,$7F,$9E,$C4,$00 ;
 $8E2E DEFB $20,$07,$FF,$E0,$C0,$00 ;
 $8E34 DEFB $00,$0F,$FD,$FE,$C0,$00 ;
 $8E3A DEFB $00,$0F,$FD,$FE,$C0,$00 ;
 $8E40 DEFB $00,$07,$F1,$7E,$00,$00 ;
 $8E46 DEFB $00,$07,$CC,$9E,$80,$00 ;
 $8E4C DEFB $00,$07,$F0,$66,$80,$00 ;
 $8E52 DEFB $00,$07,$F0,$7E,$80,$00 ;
 $8E58 DEFB $00,$07,$E0,$3E,$00,$00 ;
 $8E5E DEFB $00,$07,$E0,$3E,$80,$00 ;
 $8E64 DEFB $00,$07,$E0,$3E,$00,$00 ;
 $8E6A DEFB $00,$07,$E0,$1F,$00,$00 ;
 $8E70 DEFB $00,$0F,$C0,$1F,$00,$00 ;
 $8E76 DEFB $00,$0F,$C0,$1F,$00,$00 ;
 $8E7C DEFB $00,$0F,$C0,$1F,$00,$00 ;
 $8E82 DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $8E88 DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $8E8E DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $8E94 DEFB $00,$0F,$80,$1D,$80,$00 ;
 $8E9A DEFB $00,$06,$80,$0A,$40,$00 ;
 $8EA0 DEFB $00,$1F,$C0,$1F,$C0,$00 ;
 $8EA6 DEFB $00,$1F,$C0,$1B,$80,$00 ;
 $8EAC DEFB $00,$0E,$40,$0B,$80,$00 ;
 $8EB2 DEFB $00,$06,$40,$1B,$80,$00 ;
 $8EB8 DEFB $00,$06,$40,$0B,$80,$00 ;
 $8EBE DEFB $00,$06,$40,$0B,$80,$00 ;
 $8EC4 DEFB $00,$06,$C0,$0B,$80,$00 ;
 $8ECA DEFB $00,$06,$C0,$0B,$80,$00 ;
 $8ED0 DEFB $00,$06,$C0,$0B,$80,$00 ;
 $8ED6 DEFB $00,$06,$C0,$0B,$80,$00 ;
 $8EDC DEFB $00,$06,$CA,$AB,$80,$00 ;
 $8EE2 DEFB $00,$06,$F5,$5B,$80,$00 ;
 $8EE8 DEFB $00,$0E,$EA,$BB,$80,$00 ;
 $8EEE DEFB $00,$3E,$F5,$5B,$C0,$00 ;
 $8EF4 DEFB $01,$FE,$FA,$BB,$E0,$00 ;
 $8EFA DEFB $07,$FF,$F5,$5F,$F8,$00 ;
 $8F00 DEFB $07,$FE,$6A,$A9,$FE,$00 ;
 $8F06 DEFB $07,$D5,$55,$55,$7E,$00 ;
 $8F0C DEFB $0A,$AA,$AA,$AA,$AA,$00 ;
 $8F12 DEFB $15,$55,$55,$55,$50,$00 ;
 $8F18 DEFB $00,$2A,$AA,$AA,$00,$00 ;
 $8F1E DEFB $00,$05,$55,$50,$00,$00 ;
 $8F24 DEFB $00,$00,$00,$00,$00,$00 ;
 $8F2A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 4 (draw | $13)
@label=CHARACTER_13
 $8F30 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-13*)
 $8F36 DEFB $00,$00,$00,$00,$00,$00 ;
 $8F3C DEFB $00,$00,$00,$00,$00,$00 ;
 $8F42 DEFB $00,$00,$00,$00,$00,$00 ;
 $8F48 DEFB $00,$00,$02,$00,$00,$00 ;
 $8F4E DEFB $00,$00,$0F,$80,$00,$00 ;
 $8F54 DEFB $00,$00,$1F,$C0,$00,$00 ;
 $8F5A DEFB $00,$01,$90,$46,$00,$00 ;
 $8F60 DEFB $00,$03,$FF,$FF,$00,$00 ;
 $8F66 DEFB $00,$0F,$FF,$FF,$80,$00 ;
 $8F6C DEFB $00,$0F,$FF,$FF,$C0,$00 ;
 $8F72 DEFB $00,$0F,$FF,$FF,$C0,$00 ;
 $8F78 DEFB $00,$1F,$80,$1F,$C0,$00 ;
 $8F7E DEFB $00,$1F,$10,$8F,$C0,$00 ;
 $8F84 DEFB $00,$1F,$09,$0F,$80,$00 ;
 $8F8A DEFB $00,$0F,$16,$8F,$00,$00 ;
 $8F90 DEFB $00,$03,$86,$1E,$00,$00 ;
 $8F96 DEFB $00,$00,$C0,$28,$00,$00 ;
 $8F9C DEFB $00,$00,$BF,$F0,$00,$00 ;
 $8FA2 DEFB $00,$3F,$D5,$5C,$00,$00 ;
 $8FA8 DEFB $01,$FF,$AA,$BF,$80,$00 ;
 $8FAE DEFB $07,$FF,$D5,$5F,$E0,$00 ;
 $8FB4 DEFB $0F,$FF,$EA,$BF,$F8,$00 ;
 $8FBA DEFB $1F,$FF,$F5,$7F,$F8,$00 ;
 $8FC0 DEFB $1F,$F7,$FF,$FF,$FE,$00 ;
 $8FC6 DEFB $1F,$AD,$FF,$FF,$FE,$00 ;
 $8FCC DEFB $1F,$03,$FD,$FF,$7E,$00 ;
 $8FD2 DEFB $3F,$1F,$FD,$C3,$7E,$00 ;
 $8FD8 DEFB $3F,$1F,$FD,$FF,$7E,$00 ;
 $8FDE DEFB $3E,$1F,$FD,$FF,$7E,$00 ;
 $8FE4 DEFB $3E,$1F,$FF,$FF,$7E,$00 ;
 $8FEA DEFB $3E,$1F,$FF,$FF,$7E,$00 ;
 $8FF0 DEFB $3E,$1F,$FD,$FF,$BE,$00 ;
 $8FF6 DEFB $3E,$0F,$FD,$FF,$BC,$00 ;
 $8FFC DEFB $1E,$07,$FD,$FF,$1C,$00 ;
 $9002 DEFB $0C,$0F,$FE,$FE,$AC,$00 ;
 $9008 DEFB $0C,$0F,$FD,$FE,$44,$00 ;
 $900E DEFB $1E,$0F,$FF,$FE,$04,$00 ;
 $9014 DEFB $3F,$0F,$FF,$FF,$0C,$00 ;
 $901A DEFB $5A,$87,$FD,$FE,$9C,$00 ;
 $9020 DEFB $1A,$4F,$FF,$FE,$FC,$00 ;
 $9026 DEFB $2A,$11,$44,$39,$8C,$00 ;
 $902C DEFB $29,$1F,$FF,$FE,$F8,$00 ;
 $9032 DEFB $28,$1F,$92,$7E,$78,$00 ;
 $9038 DEFB $08,$19,$7F,$9E,$E0,$00 ;
 $903E DEFB $00,$07,$FF,$E0,$C0,$00 ;
 $9044 DEFB $00,$0F,$FD,$FE,$C0,$00 ;
 $904A DEFB $00,$0F,$FD,$FE,$00,$00 ;
 $9050 DEFB $00,$07,$F1,$7E,$C0,$00 ;
 $9056 DEFB $00,$07,$CC,$9E,$C0,$00 ;
 $905C DEFB $00,$07,$F0,$66,$C0,$00 ;
 $9062 DEFB $00,$07,$F0,$7E,$C0,$00 ;
 $9068 DEFB $00,$07,$E0,$3E,$00,$00 ;
 $906E DEFB $00,$07,$E0,$3E,$00,$00 ;
 $9074 DEFB $00,$07,$E0,$3E,$00,$00 ;
 $907A DEFB $00,$07,$E0,$1F,$00,$00 ;
 $9080 DEFB $00,$0F,$C0,$1F,$00,$00 ;
 $9086 DEFB $00,$0F,$C0,$1F,$00,$00 ;
 $908C DEFB $00,$0F,$C0,$1F,$00,$00 ;
 $9092 DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $9098 DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $909E DEFB $00,$0F,$C0,$0F,$80,$00 ;
 $90A4 DEFB $00,$0F,$80,$1D,$80,$00 ;
 $90AA DEFB $00,$06,$80,$0A,$40,$00 ;
 $90B0 DEFB $00,$1F,$C0,$1F,$C0,$00 ;
 $90B6 DEFB $00,$1F,$C0,$1B,$80,$00 ;
 $90BC DEFB $00,$0E,$40,$0B,$80,$00 ;
 $90C2 DEFB $00,$06,$40,$1B,$80,$00 ;
 $90C8 DEFB $00,$06,$40,$0B,$80,$00 ;
 $90CE DEFB $00,$06,$40,$0B,$80,$00 ;
 $90D4 DEFB $00,$06,$C0,$0B,$80,$00 ;
 $90DA DEFB $00,$06,$C0,$0B,$80,$00 ;
 $90E0 DEFB $00,$06,$C0,$0B,$80,$00 ;
 $90E6 DEFB $00,$06,$C0,$0B,$80,$00 ;
 $90EC DEFB $00,$06,$CA,$AB,$80,$00 ;
 $90F2 DEFB $00,$06,$F5,$5B,$80,$00 ;
 $90F8 DEFB $00,$0E,$EA,$BB,$80,$00 ;
 $90FE DEFB $00,$3E,$F5,$5B,$C0,$00 ;
 $9104 DEFB $01,$FE,$FA,$BB,$E0,$00 ;
 $910A DEFB $07,$FF,$F5,$5F,$F8,$00 ;
 $9110 DEFB $07,$FE,$6A,$A9,$FE,$00 ;
 $9116 DEFB $07,$D5,$55,$55,$7E,$00 ;
 $911C DEFB $0A,$AA,$AA,$AA,$AA,$00 ;
 $9122 DEFB $15,$55,$55,$55,$50,$00 ;
 $9128 DEFB $00,$2A,$AA,$AA,$00,$00 ;
 $912E DEFB $00,$05,$55,$50,$00,$00 ;
 $9134 DEFB $00,$00,$00,$00,$00,$00 ;
 $913A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 4 (shot | $14)
@label=CHARACTER_14
 $9140 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-14*)
 $9146 DEFB $00,$00,$00,$00,$00,$00 ;
 $914C DEFB $00,$00,$00,$00,$00,$00 ;
 $9152 DEFB $00,$00,$00,$00,$00,$00 ;
 $9158 DEFB $00,$00,$00,$00,$00,$00 ;
 $915E DEFB $00,$00,$00,$00,$00,$00 ;
 $9164 DEFB $00,$00,$00,$00,$00,$00 ;
 $916A DEFB $00,$00,$00,$00,$00,$00 ;
 $9170 DEFB $00,$00,$00,$00,$00,$00 ;
 $9176 DEFB $00,$00,$00,$00,$00,$00 ;
 $917C DEFB $00,$00,$00,$00,$00,$00 ;
 $9182 DEFB $00,$00,$00,$00,$00,$00 ;
 $9188 DEFB $00,$00,$00,$00,$00,$00 ;
 $918E DEFB $00,$00,$00,$00,$00,$00 ;
 $9194 DEFB $00,$00,$00,$00,$00,$00 ;
 $919A DEFB $00,$00,$00,$00,$00,$00 ;
 $91A0 DEFB $00,$00,$00,$00,$00,$00 ;
 $91A6 DEFB $00,$00,$00,$00,$00,$00 ;
 $91AC DEFB $00,$00,$00,$00,$00,$00 ;
 $91B2 DEFB $00,$00,$00,$00,$00,$00 ;
 $91B8 DEFB $00,$00,$00,$00,$00,$00 ;
 $91BE DEFB $00,$00,$00,$00,$00,$00 ;
 $91C4 DEFB $00,$00,$00,$00,$00,$00 ;
 $91CA DEFB $00,$00,$00,$00,$00,$00 ;
 $91D0 DEFB $00,$00,$00,$00,$00,$00 ;
 $91D6 DEFB $00,$00,$00,$82,$00,$00 ;
 $91DC DEFB $00,$00,$00,$42,$0C,$00 ;
 $91E2 DEFB $00,$00,$00,$40,$13,$00 ;
 $91E8 DEFB $00,$03,$C0,$20,$24,$00 ;
 $91EE DEFB $00,$04,$A0,$00,$00,$00 ;
 $91F4 DEFB $00,$07,$00,$00,$00,$00 ;
 $91FA DEFB $00,$00,$00,$7F,$C0,$00 ;
 $9200 DEFB $00,$00,$01,$FF,$F0,$00 ;
 $9206 DEFB $00,$00,$03,$FF,$F8,$00 ;
 $920C DEFB $00,$00,$07,$FF,$FC,$00 ;
 $9212 DEFB $00,$00,$07,$FE,$FC,$00 ;
 $9218 DEFB $00,$00,$07,$EC,$FC,$00 ;
 $921E DEFB $00,$00,$07,$E1,$FC,$00 ;
 $9224 DEFB $00,$00,$7F,$FF,$FC,$00 ;
 $922A DEFB $00,$01,$FF,$FF,$FF,$80 ;
 $9230 DEFB $00,$07,$FD,$FF,$FF,$E0 ;
 $9236 DEFB $00,$0F,$FD,$FF,$FF,$F8 ;
 $923C DEFB $00,$1F,$FE,$FF,$FF,$FC ;
 $9242 DEFB $00,$3F,$C7,$7F,$BB,$FE ;
 $9248 DEFB $00,$7F,$0F,$9E,$7C,$FE ;
 $924E DEFB $00,$7E,$0F,$F7,$FC,$7E ;
 $9254 DEFB $00,$FC,$0F,$FF,$FC,$1D ;
 $925A DEFB $00,$FC,$0F,$FF,$FC,$09 ;
 $9260 DEFB $00,$FC,$0F,$F7,$FC,$09 ;
 $9266 DEFB $01,$F8,$0F,$F7,$FC,$C5 ;
 $926C DEFB $01,$F8,$0F,$FF,$FC,$35 ;
 $9272 DEFB $1C,$78,$0F,$F7,$FC,$0B ;
 $9278 DEFB $03,$78,$03,$FF,$F8,$77 ;
 $927E DEFB $7D,$76,$03,$FF,$F8,$0D ;
 $9284 DEFB $02,$B8,$03,$F7,$F8,$00 ;
 $928A DEFB $01,$F8,$03,$F7,$F8,$00 ;
 $9290 DEFB $00,$B0,$01,$FF,$F8,$00 ;
 $9296 DEFB $00,$00,$03,$FF,$F9,$C0 ;
 $929C DEFB $00,$00,$0F,$F1,$FF,$E0 ;
 $92A2 DEFB $00,$00,$3F,$FF,$FF,$E0 ;
 $92A8 DEFB $00,$00,$FF,$FB,$FF,$EE ;
 $92AE DEFB $07,$FF,$FF,$FB,$FF,$F1 ;
 $92B4 DEFB $08,$19,$FF,$FB,$FF,$E1 ;
 $92BA DEFB $08,$09,$FF,$80,$07,$C1 ;
 $92C0 DEFB $08,$07,$F8,$00,$07,$83 ;
 $92C6 DEFB $06,$03,$F8,$00,$0F,$C4 ;
 $92CC DEFB $01,$86,$F8,$00,$0F,$68 ;
 $92D2 DEFB $00,$6D,$38,$00,$0C,$B0 ;
 $92D8 DEFB $00,$02,$10,$00,$08,$40 ;
 $92DE DEFB $00,$01,$20,$00,$08,$80 ;
 $92E4 DEFB $00,$00,$C0,$00,$05,$00 ;
 $92EA DEFB $00,$00,$00,$00,$02,$00 ;
 $92F0 DEFB $00,$00,$00,$00,$00,$00 ;
 $92F6 DEFB $00,$00,$00,$00,$00,$00 ;
 $92FC DEFB $00,$00,$00,$00,$00,$00 ;
 $9302 DEFB $00,$00,$15,$50,$00,$00 ;
 $9308 DEFB $00,$00,$AA,$AA,$00,$00 ;
 $930E DEFB $00,$01,$55,$55,$40,$00 ;
 $9314 DEFB $00,$02,$AA,$AA,$A0,$00 ;
 $931A DEFB $00,$05,$55,$55,$50,$00 ;
 $9320 DEFB $00,$02,$AA,$AA,$A0,$00 ;
 $9326 DEFB $00,$01,$55,$55,$40,$00 ;
 $932C DEFB $00,$00,$AA,$AA,$00,$00 ;
 $9332 DEFB $00,$00,$00,$00,$00,$00 ;
 $9338 DEFB $00,$00,$00,$00,$00,$00 ;
 $933E DEFB $00,$00,$00,$00,$00,$00 ;
 $9344 DEFB $00,$00,$00,$00,$00,$00 ;
 $934A DEFB $00,$00,$00,$00,$00,$00 ; }
; #UDGARRAY*character-12,100;character-13;character-14;character-07;(bandit-4-frames)

; Bandit 5
;
;
; .
;
; Bandit 5 (stand off | $15)
@label=CHARACTER_15
b$9350 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-15*)
 $9356 DEFB $00,$00,$07,$E0,$00,$00 ;
 $935C DEFB $00,$00,$0F,$F0,$00,$00 ;
 $9362 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $9368 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $936E DEFB $00,$00,$0F,$F0,$00,$00 ;
 $9374 DEFB $00,$07,$D8,$17,$C0,$00 ;
 $937A DEFB $00,$0F,$FF,$FF,$E0,$00 ;
 $9380 DEFB $00,$0F,$FF,$FF,$F0,$00 ;
 $9386 DEFB $00,$06,$3F,$FC,$00,$00 ;
 $938C DEFB $00,$00,$0B,$E8,$00,$00 ;
 $9392 DEFB $00,$00,$1F,$7C,$00,$00 ;
 $9398 DEFB $00,$00,$1C,$9C,$00,$00 ;
 $939E DEFB $00,$00,$08,$08,$00,$00 ;
 $93A4 DEFB $00,$00,$08,$08,$00,$00 ;
 $93AA DEFB $00,$00,$38,$0E,$00,$00 ;
 $93B0 DEFB $00,$00,$F8,$0F,$60,$00 ;
 $93B6 DEFB $00,$03,$F9,$CF,$B8,$00 ;
 $93BC DEFB $00,$05,$F8,$0F,$84,$00 ;
 $93C2 DEFB $00,$09,$FC,$1F,$82,$00 ;
 $93C8 DEFB $00,$11,$FB,$EF,$C1,$00 ;
 $93CE DEFB $00,$21,$FC,$0F,$E0,$80 ;
 $93D4 DEFB $00,$23,$FC,$9F,$E0,$80 ;
 $93DA DEFB $00,$43,$FE,$1F,$D0,$80 ;
 $93E0 DEFB $00,$85,$FC,$0F,$C8,$40 ;
 $93E6 DEFB $00,$85,$FC,$1F,$C8,$40 ;
 $93EC DEFB $00,$89,$FC,$9F,$C8,$40 ;
 $93F2 DEFB $01,$09,$FC,$1F,$C8,$40 ;
 $93F8 DEFB $01,$09,$FC,$1F,$C4,$40 ;
 $93FE DEFB $01,$11,$FC,$9F,$C4,$40 ;
 $9404 DEFB $01,$11,$FD,$1F,$C4,$20 ;
 $940A DEFB $02,$11,$FC,$9F,$C4,$20 ;
 $9410 DEFB $02,$11,$FC,$9F,$C4,$20 ;
 $9416 DEFB $02,$11,$FC,$9F,$C4,$60 ;
 $941C DEFB $02,$11,$F1,$07,$C4,$80 ;
 $9422 DEFB $01,$F1,$F0,$83,$89,$F0 ;
 $9428 DEFB $18,$70,$E0,$41,$07,$F8 ;
 $942E DEFB $07,$E0,$40,$41,$09,$E8 ;
 $9434 DEFB $07,$F0,$40,$81,$14,$54 ;
 $943A DEFB $19,$48,$40,$81,$26,$4A ;
 $9440 DEFB $02,$40,$40,$81,$4E,$28 ;
 $9446 DEFB $04,$80,$F8,$0F,$9C,$24 ;
 $944C DEFB $08,$80,$A3,$E5,$F0,$14 ;
 $9452 DEFB $00,$00,$FC,$1F,$E0,$00 ;
 $9458 DEFB $00,$00,$FF,$FC,$E0,$00 ;
 $945E DEFB $00,$00,$FF,$FE,$C0,$00 ;
 $9464 DEFB $00,$00,$FF,$7E,$C0,$00 ;
 $946A DEFB $00,$00,$FF,$7E,$00,$00 ;
 $9470 DEFB $00,$00,$FF,$7E,$C0,$00 ;
 $9476 DEFB $00,$00,$FF,$7E,$C0,$00 ;
 $947C DEFB $00,$00,$FF,$7E,$C0,$00 ;
 $9482 DEFB $00,$00,$FF,$7E,$C0,$00 ;
 $9488 DEFB $00,$00,$FF,$7E,$00,$00 ;
 $948E DEFB $00,$00,$FF,$7F,$00,$00 ;
 $9494 DEFB $00,$00,$7F,$7F,$00,$00 ;
 $949A DEFB $00,$00,$7F,$7F,$00,$00 ;
 $94A0 DEFB $00,$00,$7F,$3F,$00,$00 ;
 $94A6 DEFB $00,$00,$7E,$3F,$00,$00 ;
 $94AC DEFB $00,$00,$7E,$3F,$00,$00 ;
 $94B2 DEFB $00,$00,$3E,$3F,$00,$00 ;
 $94B8 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $94BE DEFB $00,$00,$3E,$3E,$00,$00 ;
 $94C4 DEFB $00,$00,$7E,$3E,$00,$00 ;
 $94CA DEFB $00,$00,$7E,$3E,$00,$00 ;
 $94D0 DEFB $00,$00,$FE,$3E,$00,$00 ;
 $94D6 DEFB $00,$00,$7E,$3F,$00,$00 ;
 $94DC DEFB $00,$00,$3E,$7F,$00,$00 ;
 $94E2 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $94E8 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $94EE DEFB $00,$00,$3A,$2E,$00,$00 ;
 $94F4 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $94FA DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9500 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9506 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $950C DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9512 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9518 DEFB $00,$00,$3A,$AE,$00,$00 ;
 $951E DEFB $00,$00,$FB,$6E,$40,$00 ;
 $9524 DEFB $00,$0B,$7A,$AC,$A0,$00 ;
 $952A DEFB $00,$1C,$FF,$74,$D4,$00 ;
 $9530 DEFB $00,$B1,$FE,$B8,$6A,$00 ;
 $9536 DEFB $01,$43,$DD,$78,$35,$00 ;
 $953C DEFB $02,$BF,$AA,$AC,$2A,$00 ;
 $9542 DEFB $01,$55,$55,$57,$F5,$00 ;
 $9548 DEFB $02,$AA,$AA,$AA,$AA,$00 ;
 $954E DEFB $01,$55,$55,$55,$50,$00 ;
 $9554 DEFB $00,$00,$00,$00,$00,$00 ;
 $955A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 5 (draw | $16)
@label=CHARACTER_16
 $9560 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-16*)
 $9566 DEFB $00,$00,$00,$00,$00,$00 ;
 $956C DEFB $00,$00,$00,$00,$00,$00 ;
 $9572 DEFB $00,$00,$00,$00,$00,$00 ;
 $9578 DEFB $00,$00,$07,$E0,$00,$00 ;
 $957E DEFB $00,$00,$0F,$F0,$00,$00 ;
 $9584 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $958A DEFB $00,$00,$0F,$F0,$00,$00 ;
 $9590 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $9596 DEFB $00,$07,$D8,$17,$C0,$00 ;
 $959C DEFB $00,$0F,$FF,$FF,$E0,$00 ;
 $95A2 DEFB $00,$0F,$FF,$FF,$F0,$00 ;
 $95A8 DEFB $00,$06,$3F,$FC,$00,$00 ;
 $95AE DEFB $00,$00,$0B,$E8,$00,$00 ;
 $95B4 DEFB $00,$00,$1F,$7C,$00,$00 ;
 $95BA DEFB $00,$00,$1C,$9C,$00,$00 ;
 $95C0 DEFB $00,$00,$08,$08,$00,$00 ;
 $95C6 DEFB $00,$00,$08,$08,$00,$00 ;
 $95CC DEFB $00,$03,$F8,$0E,$00,$00 ;
 $95D2 DEFB $00,$0C,$F8,$0F,$60,$00 ;
 $95D8 DEFB $00,$30,$F9,$CF,$B0,$00 ;
 $95DE DEFB $00,$41,$F8,$0F,$88,$00 ;
 $95E4 DEFB $00,$81,$FC,$1F,$84,$00 ;
 $95EA DEFB $01,$0F,$FB,$EF,$C4,$00 ;
 $95F0 DEFB $01,$09,$FC,$1F,$E2,$00 ;
 $95F6 DEFB $02,$11,$FC,$9F,$E2,$00 ;
 $95FC DEFB $02,$11,$FC,$9F,$E2,$00 ;
 $9602 DEFB $02,$21,$FC,$9F,$E1,$00 ;
 $9608 DEFB $02,$21,$FD,$1F,$E1,$00 ;
 $960E DEFB $04,$21,$FC,$9F,$E1,$00 ;
 $9614 DEFB $04,$41,$FC,$9F,$E1,$00 ;
 $961A DEFB $04,$41,$FC,$1F,$A2,$00 ;
 $9620 DEFB $04,$41,$FC,$9F,$A2,$00 ;
 $9626 DEFB $04,$41,$F8,$0F,$52,$00 ;
 $962C DEFB $04,$41,$F0,$8E,$12,$00 ;
 $9632 DEFB $03,$C0,$F0,$8E,$1A,$00 ;
 $9638 DEFB $01,$80,$60,$82,$1A,$00 ;
 $963E DEFB $7F,$80,$40,$41,$FC,$00 ;
 $9644 DEFB $0F,$C0,$40,$41,$1C,$00 ;
 $964A DEFB $15,$20,$40,$81,$FC,$00 ;
 $9650 DEFB $69,$00,$40,$81,$18,$00 ;
 $9656 DEFB $12,$00,$FE,$3F,$F0,$00 ;
 $965C DEFB $22,$00,$A3,$E5,$E0,$00 ;
 $9662 DEFB $00,$00,$FE,$1F,$E0,$00 ;
 $9668 DEFB $00,$00,$FF,$FC,$E0,$00 ;
 $966E DEFB $00,$00,$FF,$FE,$C0,$00 ;
 $9674 DEFB $00,$00,$FF,$7E,$C0,$00 ;
 $967A DEFB $00,$00,$FF,$7E,$00,$00 ;
 $9680 DEFB $00,$00,$FF,$7E,$C0,$00 ;
 $9686 DEFB $00,$00,$FF,$7E,$C0,$00 ;
 $968C DEFB $00,$00,$FF,$7E,$C0,$00 ;
 $9692 DEFB $00,$00,$FF,$7E,$C0,$00 ;
 $9698 DEFB $00,$00,$FF,$7E,$00,$00 ;
 $969E DEFB $00,$00,$FF,$7F,$00,$00 ;
 $96A4 DEFB $00,$00,$7F,$7F,$00,$00 ;
 $96AA DEFB $00,$00,$7F,$7F,$00,$00 ;
 $96B0 DEFB $00,$00,$7F,$3F,$00,$00 ;
 $96B6 DEFB $00,$00,$7E,$3F,$00,$00 ;
 $96BC DEFB $00,$00,$7E,$3F,$00,$00 ;
 $96C2 DEFB $00,$00,$3E,$3F,$00,$00 ;
 $96C8 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $96CE DEFB $00,$00,$3E,$3E,$00,$00 ;
 $96D4 DEFB $00,$00,$7E,$3E,$00,$00 ;
 $96DA DEFB $00,$00,$7E,$3E,$00,$00 ;
 $96E0 DEFB $00,$00,$FE,$3E,$00,$00 ;
 $96E6 DEFB $00,$00,$7E,$3F,$00,$00 ;
 $96EC DEFB $00,$00,$3E,$7F,$00,$00 ;
 $96F2 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $96F8 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $96FE DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9704 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $970A DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9710 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9716 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $971C DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9722 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9728 DEFB $00,$00,$3A,$AE,$00,$00 ;
 $972E DEFB $00,$00,$FB,$6E,$40,$00 ;
 $9734 DEFB $00,$0B,$7A,$AC,$A0,$00 ;
 $973A DEFB $00,$1C,$FF,$74,$D4,$00 ;
 $9740 DEFB $00,$B1,$FE,$B8,$6A,$00 ;
 $9746 DEFB $01,$43,$DD,$78,$35,$00 ;
 $974C DEFB $02,$BF,$AA,$AC,$2A,$80 ;
 $9752 DEFB $05,$55,$55,$57,$F5,$00 ;
 $9758 DEFB $02,$AA,$AA,$AA,$AA,$00 ;
 $975E DEFB $01,$55,$55,$55,$50,$00 ;
 $9764 DEFB $00,$00,$00,$00,$00,$00 ;
 $976A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 5 (shot | $17)
@label=CHARACTER_17
 $9770 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-17*)
 $9776 DEFB $00,$00,$00,$00,$00,$00 ;
 $977C DEFB $00,$00,$00,$00,$00,$00 ;
 $9782 DEFB $00,$00,$00,$00,$00,$00 ;
 $9788 DEFB $00,$00,$00,$00,$00,$00 ;
 $978E DEFB $00,$00,$00,$00,$00,$00 ;
 $9794 DEFB $00,$00,$00,$00,$00,$00 ;
 $979A DEFB $00,$00,$00,$00,$00,$00 ;
 $97A0 DEFB $00,$00,$00,$00,$00,$00 ;
 $97A6 DEFB $00,$00,$00,$00,$00,$00 ;
 $97AC DEFB $00,$00,$00,$00,$00,$00 ;
 $97B2 DEFB $00,$00,$00,$00,$00,$00 ;
 $97B8 DEFB $00,$00,$00,$00,$00,$00 ;
 $97BE DEFB $00,$00,$00,$00,$00,$00 ;
 $97C4 DEFB $00,$00,$00,$00,$00,$00 ;
 $97CA DEFB $00,$00,$00,$00,$00,$00 ;
 $97D0 DEFB $00,$00,$00,$00,$00,$00 ;
 $97D6 DEFB $00,$00,$00,$00,$00,$00 ;
 $97DC DEFB $00,$00,$00,$00,$00,$00 ;
 $97E2 DEFB $00,$00,$00,$00,$00,$00 ;
 $97E8 DEFB $00,$00,$00,$00,$00,$00 ;
 $97EE DEFB $00,$00,$00,$00,$00,$00 ;
 $97F4 DEFB $00,$00,$00,$00,$00,$00 ;
 $97FA DEFB $00,$00,$00,$7C,$00,$00 ;
 $9800 DEFB $00,$00,$00,$FE,$00,$00 ;
 $9806 DEFB $00,$00,$00,$FE,$00,$00 ;
 $980C DEFB $00,$00,$1C,$FE,$E0,$00 ;
 $9812 DEFB $00,$00,$7F,$87,$FC,$00 ;
 $9818 DEFB $00,$00,$FF,$FF,$FE,$00 ;
 $981E DEFB $00,$00,$00,$FF,$80,$00 ;
 $9824 DEFB $00,$00,$00,$00,$00,$00 ;
 $982A DEFB $00,$00,$00,$00,$00,$80 ;
 $9830 DEFB $00,$03,$80,$00,$01,$00 ;
 $9836 DEFB $00,$04,$40,$3F,$03,$00 ;
 $983C DEFB $00,$07,$00,$7F,$80,$00 ;
 $9842 DEFB $00,$00,$00,$FF,$C0,$60 ;
 $9848 DEFB $00,$00,$00,$FF,$C0,$00 ;
 $984E DEFB $00,$00,$7E,$FF,$DC,$00 ;
 $9854 DEFB $00,$01,$86,$FF,$C3,$00 ;
 $985A DEFB $00,$02,$06,$FF,$C0,$C0 ;
 $9860 DEFB $00,$04,$1F,$FF,$C0,$20 ;
 $9866 DEFB $00,$08,$2F,$7B,$A0,$18 ;
 $986C DEFB $00,$10,$4F,$B5,$B8,$04 ;
 $9872 DEFB $00,$20,$8F,$AE,$FE,$02 ;
 $9878 DEFB $00,$41,$0F,$E0,$FC,$82 ;
 $987E DEFB $00,$42,$0F,$DF,$7C,$64 ;
 $9884 DEFB $00,$84,$0F,$D3,$7C,$19 ;
 $988A DEFB $00,$84,$0F,$CA,$7C,$01 ;
 $9890 DEFB $00,$84,$0F,$C6,$7C,$09 ;
 $9896 DEFB $01,$08,$0F,$C2,$7C,$C5 ;
 $989C DEFB $01,$E8,$0F,$C2,$7C,$35 ;
 $98A2 DEFB $1C,$58,$0F,$82,$3C,$0B ;
 $98A8 DEFB $03,$48,$0C,$02,$0C,$77 ;
 $98AE DEFB $7D,$56,$04,$06,$04,$0D ;
 $98B4 DEFB $02,$B8,$04,$04,$04,$00 ;
 $98BA DEFB $01,$F8,$04,$04,$04,$00 ;
 $98C0 DEFB $00,$B0,$0F,$EC,$7C,$00 ;
 $98C6 DEFB $00,$00,$07,$FF,$FC,$00 ;
 $98CC DEFB $00,$00,$0F,$F1,$FF,$80 ;
 $98D2 DEFB $00,$00,$7F,$FF,$FF,$C0 ;
 $98D8 DEFB $00,$00,$FF,$FF,$FF,$CE ;
 $98DE DEFB $07,$F9,$FF,$FF,$FF,$F1 ;
 $98E4 DEFB $08,$1D,$FF,$FF,$FF,$E1 ;
 $98EA DEFB $08,$0F,$FF,$80,$7F,$C1 ;
 $98F0 DEFB $08,$07,$FF,$F1,$FF,$83 ;
 $98F6 DEFB $06,$03,$FF,$E0,$FF,$C4 ;
 $98FC DEFB $01,$86,$FB,$80,$3F,$68 ;
 $9902 DEFB $00,$6D,$38,$00,$0C,$B0 ;
 $9908 DEFB $00,$02,$10,$00,$08,$40 ;
 $990E DEFB $00,$01,$20,$00,$08,$80 ;
 $9914 DEFB $00,$00,$C0,$00,$05,$00 ;
 $991A DEFB $00,$00,$00,$00,$02,$00 ;
 $9920 DEFB $00,$00,$00,$00,$00,$00 ;
 $9926 DEFB $00,$00,$00,$00,$00,$00 ;
 $992C DEFB $00,$00,$00,$00,$00,$00 ;
 $9932 DEFB $00,$00,$15,$50,$00,$00 ;
 $9938 DEFB $00,$00,$AA,$AA,$00,$00 ;
 $993E DEFB $00,$01,$55,$55,$40,$00 ;
 $9944 DEFB $00,$02,$AA,$AA,$A0,$00 ;
 $994A DEFB $00,$05,$55,$55,$50,$00 ;
 $9950 DEFB $00,$02,$AA,$AA,$A0,$00 ;
 $9956 DEFB $00,$01,$55,$55,$40,$00 ;
 $995C DEFB $00,$00,$AA,$AA,$00,$00 ;
 $9962 DEFB $00,$00,$00,$00,$00,$00 ;
 $9968 DEFB $00,$00,$00,$00,$00,$00 ;
 $996E DEFB $00,$00,$00,$00,$00,$00 ;
 $9974 DEFB $00,$00,$00,$00,$00,$00 ;
 $997A DEFB $00,$00,$00,$00,$00,$00 ; }
; #UDGARRAY*character-15,100;character-16;character-17;character-07;(bandit-5-frames)

; Bandit 6
;
;
; .
;
; Bandit 6 (stand off | $18)
@label=CHARACTER_18
b$9980 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-18*)
 $9986 DEFB $00,$00,$07,$E0,$00,$00 ;
 $998C DEFB $00,$00,$0F,$F0,$00,$00 ;
 $9992 DEFB $00,$01,$EF,$F3,$C0,$00 ;
 $9998 DEFB $00,$0F,$F8,$1F,$E0,$00 ;
 $999E DEFB $00,$1F,$FF,$FF,$F8,$00 ;
 $99A4 DEFB $00,$0F,$FF,$FF,$F0,$00 ;
 $99AA DEFB $00,$03,$F8,$1F,$C0,$00 ;
 $99B0 DEFB $00,$00,$F0,$1E,$00,$00 ;
 $99B6 DEFB $00,$00,$1E,$6E,$00,$00 ;
 $99BC DEFB $00,$00,$11,$0D,$00,$00 ;
 $99C2 DEFB $00,$00,$15,$25,$00,$00 ;
 $99C8 DEFB $00,$00,$11,$06,$00,$00 ;
 $99CE DEFB $00,$00,$12,$04,$00,$00 ;
 $99D4 DEFB $00,$00,$7F,$FC,$00,$00 ;
 $99DA DEFB $00,$01,$FF,$FC,$00,$00 ;
 $99E0 DEFB $00,$0F,$F0,$0B,$00,$00 ;
 $99E6 DEFB $00,$1F,$F0,$0B,$80,$00 ;
 $99EC DEFB $00,$1F,$F8,$17,$E0,$00 ;
 $99F2 DEFB $00,$3F,$FC,$17,$F8,$00 ;
 $99F8 DEFB $00,$3F,$FA,$2F,$F8,$00 ;
 $99FE DEFB $00,$7D,$F9,$CF,$FE,$00 ;
 $9A04 DEFB $00,$7D,$F8,$8F,$FE,$00 ;
 $9A0A DEFB $00,$7D,$F8,$8F,$FE,$00 ;
 $9A10 DEFB $00,$7D,$F8,$8F,$CF,$00 ;
 $9A16 DEFB $00,$FD,$F8,$8F,$CF,$00 ;
 $9A1C DEFB $00,$F9,$F8,$8F,$CF,$80 ;
 $9A22 DEFB $00,$F9,$F8,$8F,$CF,$C0 ;
 $9A28 DEFB $00,$F9,$F8,$8F,$C7,$C0 ;
 $9A2E DEFB $01,$F9,$F8,$8F,$C7,$C0 ;
 $9A34 DEFB $01,$F9,$F8,$8F,$C7,$C0 ;
 $9A3A DEFB $01,$F1,$F8,$8F,$C7,$C0 ;
 $9A40 DEFB $03,$F1,$F8,$8F,$C7,$C0 ;
 $9A46 DEFB $03,$F1,$F8,$4F,$C7,$E0 ;
 $9A4C DEFB $03,$F1,$F8,$4F,$C7,$80 ;
 $9A52 DEFB $03,$F0,$80,$40,$C9,$F0 ;
 $9A58 DEFB $03,$E0,$80,$40,$C7,$F8 ;
 $9A5E DEFB $00,$C0,$40,$40,$49,$E8 ;
 $9A64 DEFB $03,$E0,$40,$C0,$94,$54 ;
 $9A6A DEFB $07,$D0,$40,$81,$A6,$4A ;
 $9A70 DEFB $1F,$C8,$20,$81,$4E,$28 ;
 $9A76 DEFB $22,$80,$FF,$FF,$9C,$24 ;
 $9A7C DEFB $04,$80,$A2,$25,$F0,$14 ;
 $9A82 DEFB $09,$00,$FF,$FF,$E0,$00 ;
 $9A88 DEFB $09,$00,$FF,$FC,$E0,$00 ;
 $9A8E DEFB $00,$00,$FE,$FE,$C0,$00 ;
 $9A94 DEFB $00,$00,$FE,$FA,$C0,$00 ;
 $9A9A DEFB $00,$00,$7E,$FA,$00,$00 ;
 $9AA0 DEFB $00,$00,$7F,$FA,$C0,$00 ;
 $9AA6 DEFB $00,$00,$7F,$FA,$C0,$00 ;
 $9AAC DEFB $00,$00,$3C,$7A,$C0,$00 ;
 $9AB2 DEFB $00,$00,$3E,$3C,$C0,$00 ;
 $9AB8 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $9ABE DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9AC4 DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9ACA DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9AD0 DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9AD6 DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9ADC DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9AE2 DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9AE8 DEFB $00,$00,$38,$2E,$00,$00 ;
 $9AEE DEFB $00,$00,$3E,$3E,$00,$00 ;
 $9AF4 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $9AFA DEFB $00,$00,$3E,$3E,$00,$00 ;
 $9B00 DEFB $00,$00,$3E,$1E,$00,$00 ;
 $9B06 DEFB $00,$00,$38,$3E,$00,$00 ;
 $9B0C DEFB $00,$00,$7E,$3F,$00,$00 ;
 $9B12 DEFB $00,$00,$7A,$3F,$00,$00 ;
 $9B18 DEFB $00,$00,$7A,$3F,$00,$00 ;
 $9B1E DEFB $00,$00,$7A,$3F,$00,$00 ;
 $9B24 DEFB $00,$00,$7A,$1F,$00,$00 ;
 $9B2A DEFB $00,$00,$3A,$2F,$00,$00 ;
 $9B30 DEFB $00,$00,$3A,$3E,$00,$00 ;
 $9B36 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9B3C DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9B42 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9B48 DEFB $00,$00,$3A,$AE,$00,$00 ;
 $9B4E DEFB $00,$00,$FB,$6E,$40,$00 ;
 $9B54 DEFB $00,$0B,$7A,$AF,$A0,$00 ;
 $9B5A DEFB $00,$1D,$FF,$77,$D4,$00 ;
 $9B60 DEFB $00,$B3,$FE,$BF,$EA,$00 ;
 $9B66 DEFB $01,$4F,$DD,$7F,$F5,$00 ;
 $9B6C DEFB $02,$BF,$AA,$AF,$EA,$80 ;
 $9B72 DEFB $05,$55,$55,$57,$F5,$00 ;
 $9B78 DEFB $02,$AA,$AA,$AA,$AA,$00 ;
 $9B7E DEFB $01,$55,$55,$55,$50,$00 ;
 $9B84 DEFB $00,$00,$00,$00,$00,$00 ;
 $9B8A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 6 (draw | $19)
@label=CHARACTER_19
 $9B90 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-19*)
 $9B96 DEFB $00,$00,$00,$00,$00,$00 ;
 $9B9C DEFB $00,$00,$00,$00,$00,$00 ;
 $9BA2 DEFB $00,$00,$07,$E0,$00,$00 ;
 $9BA8 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $9BAE DEFB $00,$00,$0F,$F0,$00,$00 ;
 $9BB4 DEFB $00,$07,$8F,$F1,$C0,$00 ;
 $9BBA DEFB $00,$0F,$F8,$1F,$E0,$00 ;
 $9BC0 DEFB $00,$1F,$FF,$FF,$F0,$00 ;
 $9BC6 DEFB $00,$0F,$FF,$FF,$E0,$00 ;
 $9BCC DEFB $00,$01,$F8,$1F,$80,$00 ;
 $9BD2 DEFB $00,$00,$10,$1E,$00,$00 ;
 $9BD8 DEFB $00,$00,$18,$2E,$00,$00 ;
 $9BDE DEFB $00,$00,$15,$4D,$00,$00 ;
 $9BE4 DEFB $00,$00,$15,$25,$00,$00 ;
 $9BEA DEFB $00,$00,$11,$06,$00,$00 ;
 $9BF0 DEFB $00,$00,$12,$04,$00,$00 ;
 $9BF6 DEFB $00,$00,$1F,$FC,$00,$00 ;
 $9BFC DEFB $00,$1F,$FF,$FC,$00,$00 ;
 $9C02 DEFB $00,$7F,$F0,$0B,$00,$00 ;
 $9C08 DEFB $01,$FF,$F0,$0B,$80,$00 ;
 $9C0E DEFB $03,$FF,$F8,$17,$E0,$00 ;
 $9C14 DEFB $07,$FF,$FC,$17,$F8,$00 ;
 $9C1A DEFB $0F,$FF,$FA,$2F,$F8,$00 ;
 $9C20 DEFB $0F,$E1,$F9,$CF,$FE,$00 ;
 $9C26 DEFB $0F,$C1,$F8,$8F,$FE,$00 ;
 $9C2C DEFB $0F,$81,$F8,$8F,$7E,$00 ;
 $9C32 DEFB $0F,$81,$F8,$8F,$7E,$00 ;
 $9C38 DEFB $0F,$81,$F8,$8F,$7E,$00 ;
 $9C3E DEFB $0F,$81,$F8,$8F,$7E,$00 ;
 $9C44 DEFB $0F,$81,$F8,$8F,$7E,$00 ;
 $9C4A DEFB $1F,$91,$F8,$8F,$7E,$00 ;
 $9C50 DEFB $8F,$A1,$F8,$8F,$BE,$00 ;
 $9C56 DEFB $47,$C1,$F8,$4F,$BC,$00 ;
 $9C5C DEFB $32,$41,$F8,$47,$1C,$00 ;
 $9C62 DEFB $0F,$C0,$80,$42,$AC,$00 ;
 $9C68 DEFB $7F,$C0,$80,$42,$44,$00 ;
 $9C6E DEFB $03,$80,$40,$42,$04,$00 ;
 $9C74 DEFB $00,$00,$40,$C1,$0C,$00 ;
 $9C7A DEFB $00,$00,$40,$81,$9C,$00 ;
 $9C80 DEFB $00,$00,$20,$81,$FC,$00 ;
 $9C86 DEFB $00,$00,$FF,$F9,$8C,$00 ;
 $9C8C DEFB $00,$00,$A2,$24,$F8,$00 ;
 $9C92 DEFB $00,$00,$FF,$FD,$78,$00 ;
 $9C98 DEFB $00,$00,$FF,$FD,$E0,$00 ;
 $9C9E DEFB $00,$00,$FF,$FE,$C0,$00 ;
 $9CA4 DEFB $00,$00,$FF,$7A,$C0,$00 ;
 $9CAA DEFB $00,$00,$7F,$7A,$00,$00 ;
 $9CB0 DEFB $00,$00,$7F,$FA,$C0,$00 ;
 $9CB6 DEFB $00,$00,$7F,$FA,$C0,$00 ;
 $9CBC DEFB $00,$00,$3C,$7A,$C0,$00 ;
 $9CC2 DEFB $00,$00,$3E,$3E,$C0,$00 ;
 $9CC8 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $9CCE DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9CD4 DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9CDA DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9CE0 DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9CE6 DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9CEC DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9CF2 DEFB $00,$00,$3E,$3F,$00,$00 ;
 $9CF8 DEFB $00,$00,$38,$2E,$00,$00 ;
 $9CFE DEFB $00,$00,$3E,$3E,$00,$00 ;
 $9D04 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $9D0A DEFB $00,$00,$3E,$3E,$00,$00 ;
 $9D10 DEFB $00,$00,$3E,$1E,$00,$00 ;
 $9D16 DEFB $00,$00,$38,$3E,$00,$00 ;
 $9D1C DEFB $00,$00,$7E,$3F,$00,$00 ;
 $9D22 DEFB $00,$00,$7A,$3F,$00,$00 ;
 $9D28 DEFB $00,$00,$7A,$3F,$00,$00 ;
 $9D2E DEFB $00,$00,$7A,$3F,$00,$00 ;
 $9D34 DEFB $00,$00,$7A,$1F,$00,$00 ;
 $9D3A DEFB $00,$00,$3A,$2F,$00,$00 ;
 $9D40 DEFB $00,$00,$3A,$3E,$00,$00 ;
 $9D46 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9D4C DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9D52 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $9D58 DEFB $00,$00,$3A,$AE,$00,$00 ;
 $9D5E DEFB $00,$00,$FB,$6E,$40,$00 ;
 $9D64 DEFB $00,$0B,$7A,$AF,$A0,$00 ;
 $9D6A DEFB $00,$1D,$FF,$77,$D4,$00 ;
 $9D70 DEFB $00,$B3,$FE,$BF,$EA,$00 ;
 $9D76 DEFB $01,$4F,$DD,$7F,$F5,$00 ;
 $9D7C DEFB $02,$BF,$AA,$AF,$EA,$80 ;
 $9D82 DEFB $05,$55,$55,$57,$F5,$00 ;
 $9D88 DEFB $02,$AA,$AA,$AA,$AA,$00 ;
 $9D8E DEFB $01,$55,$55,$55,$50,$00 ;
 $9D94 DEFB $00,$00,$00,$00,$00,$00 ;
 $9D9A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 6 (shot | $1A)
@label=CHARACTER_1A
 $9DA0 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-1A*)
 $9DA6 DEFB $00,$00,$00,$00,$00,$00 ;
 $9DAC DEFB $00,$00,$00,$00,$00,$00 ;
 $9DB2 DEFB $00,$00,$00,$00,$00,$00 ;
 $9DB8 DEFB $00,$00,$00,$00,$00,$00 ;
 $9DBE DEFB $00,$00,$00,$00,$00,$00 ;
 $9DC4 DEFB $00,$00,$00,$00,$00,$00 ;
 $9DCA DEFB $00,$00,$00,$00,$00,$00 ;
 $9DD0 DEFB $00,$00,$00,$00,$00,$00 ;
 $9DD6 DEFB $00,$00,$00,$00,$00,$00 ;
 $9DDC DEFB $00,$00,$00,$00,$00,$00 ;
 $9DE2 DEFB $00,$00,$00,$00,$00,$00 ;
 $9DE8 DEFB $00,$00,$00,$00,$00,$00 ;
 $9DEE DEFB $00,$00,$00,$00,$00,$00 ;
 $9DF4 DEFB $00,$00,$00,$00,$00,$00 ;
 $9DFA DEFB $00,$00,$00,$00,$00,$00 ;
 $9E00 DEFB $00,$00,$00,$00,$00,$00 ;
 $9E06 DEFB $00,$00,$00,$00,$00,$00 ;
 $9E0C DEFB $00,$00,$00,$00,$00,$00 ;
 $9E12 DEFB $00,$00,$00,$00,$00,$00 ;
 $9E18 DEFB $00,$00,$00,$00,$00,$00 ;
 $9E1E DEFB $00,$00,$00,$00,$00,$00 ;
 $9E24 DEFB $00,$00,$00,$00,$00,$00 ;
 $9E2A DEFB $00,$00,$00,$7C,$00,$00 ;
 $9E30 DEFB $00,$00,$00,$FE,$00,$00 ;
 $9E36 DEFB $00,$00,$00,$FE,$00,$00 ;
 $9E3C DEFB $00,$00,$1C,$FE,$E0,$00 ;
 $9E42 DEFB $00,$00,$7F,$87,$FC,$00 ;
 $9E48 DEFB $00,$00,$FF,$FF,$FE,$00 ;
 $9E4E DEFB $00,$02,$00,$FF,$80,$00 ;
 $9E54 DEFB $00,$01,$80,$00,$00,$00 ;
 $9E5A DEFB $00,$00,$00,$00,$00,$80 ;
 $9E60 DEFB $00,$00,$00,$00,$01,$00 ;
 $9E66 DEFB $00,$00,$00,$3F,$03,$00 ;
 $9E6C DEFB $00,$0D,$80,$7F,$80,$00 ;
 $9E72 DEFB $00,$06,$00,$FF,$C0,$60 ;
 $9E78 DEFB $00,$00,$00,$FF,$C0,$00 ;
 $9E7E DEFB $00,$00,$7E,$FF,$FE,$00 ;
 $9E84 DEFB $00,$01,$FE,$FF,$FF,$00 ;
 $9E8A DEFB $00,$03,$FE,$FF,$FF,$C0 ;
 $9E90 DEFB $00,$07,$FF,$FF,$FF,$E0 ;
 $9E96 DEFB $00,$0F,$EF,$7B,$BF,$F8 ;
 $9E9C DEFB $00,$1F,$CF,$B5,$BF,$FC ;
 $9EA2 DEFB $00,$3F,$8F,$AE,$FF,$FE ;
 $9EA8 DEFB $00,$7F,$0F,$E0,$FD,$FE ;
 $9EAE DEFB $00,$7E,$0F,$DF,$7C,$7C ;
 $9EB4 DEFB $00,$FC,$0F,$D3,$7C,$19 ;
 $9EBA DEFB $00,$FC,$0F,$CA,$7C,$01 ;
 $9EC0 DEFB $00,$FC,$0F,$C6,$7C,$09 ;
 $9EC6 DEFB $01,$F8,$0F,$C2,$7C,$C5 ;
 $9ECC DEFB $01,$F8,$0F,$C2,$7C,$35 ;
 $9ED2 DEFB $1C,$58,$0F,$82,$3C,$0B ;
 $9ED8 DEFB $03,$48,$0C,$02,$0C,$77 ;
 $9EDE DEFB $7D,$56,$04,$06,$04,$0D ;
 $9EE4 DEFB $02,$B8,$04,$04,$04,$00 ;
 $9EEA DEFB $01,$F8,$04,$04,$04,$00 ;
 $9EF0 DEFB $00,$B0,$0F,$EC,$7C,$00 ;
 $9EF6 DEFB $00,$00,$07,$FF,$FC,$00 ;
 $9EFC DEFB $00,$00,$0F,$F1,$FF,$80 ;
 $9F02 DEFB $00,$00,$7F,$FF,$FF,$C0 ;
 $9F08 DEFB $00,$00,$FF,$FF,$FF,$CE ;
 $9F0E DEFB $07,$F9,$FF,$FF,$FF,$F1 ;
 $9F14 DEFB $08,$1D,$FF,$FF,$FF,$E1 ;
 $9F1A DEFB $08,$0F,$FF,$80,$7F,$C1 ;
 $9F20 DEFB $08,$07,$FF,$F1,$FF,$83 ;
 $9F26 DEFB $06,$03,$FF,$E0,$FF,$C4 ;
 $9F2C DEFB $01,$86,$FB,$80,$3F,$68 ;
 $9F32 DEFB $00,$6D,$38,$00,$0C,$B0 ;
 $9F38 DEFB $00,$02,$10,$00,$08,$40 ;
 $9F3E DEFB $00,$01,$20,$00,$08,$80 ;
 $9F44 DEFB $00,$00,$C0,$00,$05,$00 ;
 $9F4A DEFB $00,$00,$00,$00,$02,$00 ;
 $9F50 DEFB $00,$00,$00,$00,$00,$00 ;
 $9F56 DEFB $00,$00,$00,$00,$00,$00 ;
 $9F5C DEFB $00,$00,$00,$00,$00,$00 ;
 $9F62 DEFB $00,$00,$15,$50,$00,$00 ;
 $9F68 DEFB $00,$00,$AA,$AA,$00,$00 ;
 $9F6E DEFB $00,$01,$55,$55,$40,$00 ;
 $9F74 DEFB $00,$02,$AA,$AA,$A0,$00 ;
 $9F7A DEFB $00,$05,$55,$55,$50,$00 ;
 $9F80 DEFB $00,$02,$AA,$AA,$A0,$00 ;
 $9F86 DEFB $00,$01,$55,$55,$40,$00 ;
 $9F8C DEFB $00,$00,$AA,$AA,$00,$00 ;
 $9F92 DEFB $00,$00,$00,$00,$00,$00 ;
 $9F98 DEFB $00,$00,$00,$00,$00,$00 ;
 $9F9E DEFB $00,$00,$00,$00,$00,$00 ;
 $9FA4 DEFB $00,$00,$00,$00,$00,$00 ;
 $9FAA DEFB $00,$00,$00,$00,$00,$00 ; }
; #UDGARRAY*character-18,100;character-19;character-1A;character-07;(bandit-6-frames)

; Bowie (special)
;
; BOWIE - The dwarf. He is a constant practical joker. Make
;       holes in his hats but take care that the bottom
;       hat doesn't conceal a bomb or you will lose a
;       life.
;
; .
;
; Bowie (7 hats | $1B)
@label=CHARACTER_1B
b$9FB0 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-1B*)
 $9FB6 DEFB $00,$00,$00,$00,$00,$00 ;
 $9FBC DEFB $00,$00,$00,$00,$00,$00 ;
 $9FC2 DEFB $00,$00,$00,$00,$00,$00 ;
 $9FC8 DEFB $00,$00,$00,$00,$00,$00 ;
 $9FCE DEFB $00,$00,$00,$00,$00,$00 ;
 $9FD4 DEFB $00,$00,$03,$C0,$00,$00 ;
 $9FDA DEFB $00,$00,$07,$E0,$00,$00 ;
 $9FE0 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $9FE6 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $9FEC DEFB $00,$00,$0F,$F0,$00,$00 ;
 $9FF2 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $9FF8 DEFB $00,$00,$03,$C0,$00,$00 ;
 $9FFE DEFB $00,$00,$07,$E0,$00,$00 ;
 $A004 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A00A DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A010 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A016 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A01C DEFB $00,$00,$03,$C0,$00,$00 ;
 $A022 DEFB $00,$00,$07,$E0,$00,$00 ;
 $A028 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A02E DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A034 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A03A DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A040 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A046 DEFB $00,$00,$07,$E0,$00,$00 ;
 $A04C DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A052 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A058 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A05E DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A064 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A06A DEFB $00,$00,$07,$E0,$00,$00 ;
 $A070 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A076 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A07C DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A082 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A088 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A08E DEFB $00,$00,$07,$E0,$00,$00 ;
 $A094 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A09A DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A0A0 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A0A6 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A0AC DEFB $00,$00,$03,$C0,$00,$00 ;
 $A0B2 DEFB $00,$00,$07,$E0,$00,$00 ;
 $A0B8 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A0BE DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A0C4 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A0CA DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A0D0 DEFB $00,$00,$30,$0C,$00,$00 ;
 $A0D6 DEFB $00,$00,$32,$2C,$00,$00 ;
 $A0DC DEFB $00,$00,$30,$8C,$00,$00 ;
 $A0E2 DEFB $00,$00,$10,$08,$00,$00 ;
 $A0E8 DEFB $00,$00,$32,$4C,$00,$00 ;
 $A0EE DEFB $00,$00,$F9,$9F,$00,$00 ;
 $A0F4 DEFB $00,$01,$FC,$3F,$80,$00 ;
 $A0FA DEFB $00,$02,$FE,$7F,$40,$00 ;
 $A100 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $A106 DEFB $00,$02,$FF,$7F,$40,$00 ;
 $A10C DEFB $00,$03,$7F,$FE,$A0,$00 ;
 $A112 DEFB $00,$06,$FF,$7F,$60,$00 ;
 $A118 DEFB $00,$05,$7F,$7E,$A0,$00 ;
 $A11E DEFB $00,$02,$FF,$7F,$40,$00 ;
 $A124 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $A12A DEFB $00,$02,$FF,$7F,$80,$00 ;
 $A130 DEFB $00,$01,$7F,$FE,$80,$00 ;
 $A136 DEFB $00,$00,$BF,$7D,$00,$00 ;
 $A13C DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A142 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A148 DEFB $00,$00,$1F,$F0,$00,$00 ;
 $A14E DEFB $00,$00,$1B,$D8,$00,$00 ;
 $A154 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A15A DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A160 DEFB $00,$00,$1F,$FC,$00,$00 ;
 $A166 DEFB $00,$00,$3E,$7C,$00,$00 ;
 $A16C DEFB $00,$00,$3C,$3C,$00,$00 ;
 $A172 DEFB $00,$00,$3C,$3C,$00,$00 ;
 $A178 DEFB $00,$00,$38,$1C,$00,$00 ;
 $A17E DEFB $00,$00,$68,$1A,$00,$00 ;
 $A184 DEFB $00,$00,$78,$1E,$00,$00 ;
 $A18A DEFB $00,$00,$78,$1E,$00,$00 ;
 $A190 DEFB $00,$00,$78,$1E,$00,$00 ;
 $A196 DEFB $00,$01,$FA,$BF,$80,$00 ;
 $A19C DEFB $00,$07,$FD,$5F,$F0,$00 ;
 $A1A2 DEFB $00,$07,$FA,$BF,$F0,$00 ;
 $A1A8 DEFB $00,$05,$55,$55,$50,$00 ;
 $A1AE DEFB $00,$00,$AA,$AA,$80,$00 ;
 $A1B4 DEFB $00,$00,$00,$00,$00,$00 ;
 $A1BA DEFB $00,$00,$00,$00,$00,$00 ; }
; Bowie (6 hats | $1C)
@label=CHARACTER_1C
 $A1C0 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-1C*)
 $A1C6 DEFB $00,$00,$00,$00,$00,$00 ;
 $A1CC DEFB $00,$00,$00,$00,$00,$00 ;
 $A1D2 DEFB $00,$00,$00,$00,$00,$00 ;
 $A1D8 DEFB $00,$00,$00,$00,$00,$00 ;
 $A1DE DEFB $00,$00,$00,$00,$00,$00 ;
 $A1E4 DEFB $00,$00,$00,$00,$00,$00 ;
 $A1EA DEFB $00,$00,$00,$00,$00,$00 ;
 $A1F0 DEFB $00,$00,$00,$00,$00,$00 ;
 $A1F6 DEFB $00,$00,$00,$00,$00,$00 ;
 $A1FC DEFB $00,$00,$00,$00,$00,$00 ;
 $A202 DEFB $00,$00,$00,$00,$00,$00 ;
 $A208 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A20E DEFB $00,$00,$07,$E0,$00,$00 ;
 $A214 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A21A DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A220 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A226 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A22C DEFB $00,$00,$03,$C0,$00,$00 ;
 $A232 DEFB $00,$00,$07,$E0,$00,$00 ;
 $A238 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A23E DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A244 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A24A DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A250 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A256 DEFB $00,$00,$07,$E0,$00,$00 ;
 $A25C DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A262 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A268 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A26E DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A274 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A27A DEFB $00,$00,$07,$E0,$00,$00 ;
 $A280 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A286 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A28C DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A292 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A298 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A29E DEFB $00,$00,$07,$E0,$00,$00 ;
 $A2A4 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A2AA DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A2B0 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A2B6 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A2BC DEFB $00,$00,$03,$C0,$00,$00 ;
 $A2C2 DEFB $00,$00,$07,$E0,$00,$00 ;
 $A2C8 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A2CE DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A2D4 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A2DA DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A2E0 DEFB $00,$00,$30,$0C,$00,$00 ;
 $A2E6 DEFB $00,$00,$32,$2C,$00,$00 ;
 $A2EC DEFB $00,$00,$30,$8C,$00,$00 ;
 $A2F2 DEFB $00,$00,$10,$08,$00,$00 ;
 $A2F8 DEFB $00,$00,$32,$4C,$00,$00 ;
 $A2FE DEFB $00,$00,$F9,$9F,$00,$00 ;
 $A304 DEFB $00,$01,$FC,$3F,$80,$00 ;
 $A30A DEFB $00,$02,$FE,$7F,$40,$00 ;
 $A310 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $A316 DEFB $00,$02,$FF,$7F,$40,$00 ;
 $A31C DEFB $00,$03,$7F,$FE,$A0,$00 ;
 $A322 DEFB $00,$06,$FF,$7F,$60,$00 ;
 $A328 DEFB $00,$05,$7F,$7E,$A0,$00 ;
 $A32E DEFB $00,$02,$FF,$7F,$40,$00 ;
 $A334 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $A33A DEFB $00,$02,$FF,$7F,$80,$00 ;
 $A340 DEFB $00,$01,$7F,$FE,$80,$00 ;
 $A346 DEFB $00,$00,$BF,$7D,$00,$00 ;
 $A34C DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A352 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A358 DEFB $00,$00,$1F,$F0,$00,$00 ;
 $A35E DEFB $00,$00,$1B,$D8,$00,$00 ;
 $A364 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A36A DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A370 DEFB $00,$00,$1F,$FC,$00,$00 ;
 $A376 DEFB $00,$00,$3E,$7C,$00,$00 ;
 $A37C DEFB $00,$00,$3C,$3C,$00,$00 ;
 $A382 DEFB $00,$00,$3C,$3C,$00,$00 ;
 $A388 DEFB $00,$00,$38,$1C,$00,$00 ;
 $A38E DEFB $00,$00,$68,$1A,$00,$00 ;
 $A394 DEFB $00,$00,$78,$1E,$00,$00 ;
 $A39A DEFB $00,$00,$78,$1E,$00,$00 ;
 $A3A0 DEFB $00,$00,$78,$1E,$00,$00 ;
 $A3A6 DEFB $00,$01,$FA,$BF,$80,$00 ;
 $A3AC DEFB $00,$07,$FD,$5F,$F0,$00 ;
 $A3B2 DEFB $00,$07,$FA,$BF,$F0,$00 ;
 $A3B8 DEFB $00,$05,$55,$55,$50,$00 ;
 $A3BE DEFB $00,$00,$AA,$AA,$80,$00 ;
 $A3C4 DEFB $00,$00,$00,$00,$00,$00 ;
 $A3CA DEFB $00,$00,$00,$00,$00,$00 ; }
; Bowie (5 hats | $1D)
@label=CHARACTER_1D
 $A3D0 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-1D*)
 $A3D6 DEFB $00,$00,$00,$00,$00,$00 ;
 $A3DC DEFB $00,$00,$00,$00,$00,$00 ;
 $A3E2 DEFB $00,$00,$00,$00,$00,$00 ;
 $A3E8 DEFB $00,$00,$00,$00,$00,$00 ;
 $A3EE DEFB $00,$00,$00,$00,$00,$00 ;
 $A3F4 DEFB $00,$00,$00,$00,$00,$00 ;
 $A3FA DEFB $00,$00,$00,$00,$00,$00 ;
 $A400 DEFB $00,$00,$00,$00,$00,$00 ;
 $A406 DEFB $00,$00,$00,$00,$00,$00 ;
 $A40C DEFB $00,$00,$00,$00,$00,$00 ;
 $A412 DEFB $00,$00,$00,$00,$00,$00 ;
 $A418 DEFB $00,$00,$00,$00,$00,$00 ;
 $A41E DEFB $00,$00,$00,$00,$00,$00 ;
 $A424 DEFB $00,$00,$00,$00,$00,$00 ;
 $A42A DEFB $00,$00,$00,$00,$00,$00 ;
 $A430 DEFB $00,$00,$00,$00,$00,$00 ;
 $A436 DEFB $00,$00,$00,$00,$00,$00 ;
 $A43C DEFB $00,$00,$03,$C0,$00,$00 ;
 $A442 DEFB $00,$00,$07,$E0,$00,$00 ;
 $A448 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A44E DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A454 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A45A DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A460 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A466 DEFB $00,$00,$07,$E0,$00,$00 ;
 $A46C DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A472 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A478 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A47E DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A484 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A48A DEFB $00,$00,$07,$E0,$00,$00 ;
 $A490 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A496 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A49C DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A4A2 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A4A8 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A4AE DEFB $00,$00,$07,$E0,$00,$00 ;
 $A4B4 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A4BA DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A4C0 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A4C6 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A4CC DEFB $00,$00,$03,$C0,$00,$00 ;
 $A4D2 DEFB $00,$00,$07,$E0,$00,$00 ;
 $A4D8 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A4DE DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A4E4 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A4EA DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A4F0 DEFB $00,$00,$30,$0C,$00,$00 ;
 $A4F6 DEFB $00,$00,$32,$2C,$00,$00 ;
 $A4FC DEFB $00,$00,$30,$8C,$00,$00 ;
 $A502 DEFB $00,$00,$10,$08,$00,$00 ;
 $A508 DEFB $00,$00,$32,$4C,$00,$00 ;
 $A50E DEFB $00,$00,$F9,$9F,$00,$00 ;
 $A514 DEFB $00,$01,$FC,$3F,$80,$00 ;
 $A51A DEFB $00,$02,$FE,$7F,$40,$00 ;
 $A520 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $A526 DEFB $00,$02,$FF,$7F,$40,$00 ;
 $A52C DEFB $00,$03,$7F,$FE,$A0,$00 ;
 $A532 DEFB $00,$06,$FF,$7F,$60,$00 ;
 $A538 DEFB $00,$05,$7F,$7E,$A0,$00 ;
 $A53E DEFB $00,$02,$FF,$7F,$40,$00 ;
 $A544 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $A54A DEFB $00,$02,$FF,$7F,$80,$00 ;
 $A550 DEFB $00,$01,$7F,$FE,$80,$00 ;
 $A556 DEFB $00,$00,$BF,$7D,$00,$00 ;
 $A55C DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A562 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A568 DEFB $00,$00,$1F,$F0,$00,$00 ;
 $A56E DEFB $00,$00,$1B,$D8,$00,$00 ;
 $A574 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A57A DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A580 DEFB $00,$00,$1F,$FC,$00,$00 ;
 $A586 DEFB $00,$00,$3E,$7C,$00,$00 ;
 $A58C DEFB $00,$00,$3C,$3C,$00,$00 ;
 $A592 DEFB $00,$00,$3C,$3C,$00,$00 ;
 $A598 DEFB $00,$00,$38,$1C,$00,$00 ;
 $A59E DEFB $00,$00,$68,$1A,$00,$00 ;
 $A5A4 DEFB $00,$00,$78,$1E,$00,$00 ;
 $A5AA DEFB $00,$00,$78,$1E,$00,$00 ;
 $A5B0 DEFB $00,$00,$78,$1E,$00,$00 ;
 $A5B6 DEFB $00,$01,$FA,$BF,$80,$00 ;
 $A5BC DEFB $00,$07,$FD,$5F,$F0,$00 ;
 $A5C2 DEFB $00,$07,$FA,$BF,$F0,$00 ;
 $A5C8 DEFB $00,$05,$55,$55,$50,$00 ;
 $A5CE DEFB $00,$00,$AA,$AA,$80,$00 ;
 $A5D4 DEFB $00,$00,$00,$00,$00,$00 ;
 $A5DA DEFB $00,$00,$00,$00,$00,$00 ; }
; Bowie (4 hats | $1E)
@label=CHARACTER_1E
 $A5E0 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-1E*)
 $A5E6 DEFB $00,$00,$00,$00,$00,$00 ;
 $A5EC DEFB $00,$00,$00,$00,$00,$00 ;
 $A5F2 DEFB $00,$00,$00,$00,$00,$00 ;
 $A5F8 DEFB $00,$00,$00,$00,$00,$00 ;
 $A5FE DEFB $00,$00,$00,$00,$00,$00 ;
 $A604 DEFB $00,$00,$00,$00,$00,$00 ;
 $A60A DEFB $00,$00,$00,$00,$00,$00 ;
 $A610 DEFB $00,$00,$00,$00,$00,$00 ;
 $A616 DEFB $00,$00,$00,$00,$00,$00 ;
 $A61C DEFB $00,$00,$00,$00,$00,$00 ;
 $A622 DEFB $00,$00,$00,$00,$00,$00 ;
 $A628 DEFB $00,$00,$00,$00,$00,$00 ;
 $A62E DEFB $00,$00,$00,$00,$00,$00 ;
 $A634 DEFB $00,$00,$00,$00,$00,$00 ;
 $A63A DEFB $00,$00,$00,$00,$00,$00 ;
 $A640 DEFB $00,$00,$00,$00,$00,$00 ;
 $A646 DEFB $00,$00,$00,$00,$00,$00 ;
 $A64C DEFB $00,$00,$00,$00,$00,$00 ;
 $A652 DEFB $00,$00,$00,$00,$00,$00 ;
 $A658 DEFB $00,$00,$00,$00,$00,$00 ;
 $A65E DEFB $00,$00,$00,$00,$00,$00 ;
 $A664 DEFB $00,$00,$00,$00,$00,$00 ;
 $A66A DEFB $00,$00,$00,$00,$00,$00 ;
 $A670 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A676 DEFB $00,$00,$07,$E0,$00,$00 ;
 $A67C DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A682 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A688 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A68E DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A694 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A69A DEFB $00,$00,$07,$E0,$00,$00 ;
 $A6A0 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A6A6 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A6AC DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A6B2 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A6B8 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A6BE DEFB $00,$00,$07,$E0,$00,$00 ;
 $A6C4 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A6CA DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A6D0 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A6D6 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A6DC DEFB $00,$00,$03,$C0,$00,$00 ;
 $A6E2 DEFB $00,$00,$07,$E0,$00,$00 ;
 $A6E8 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A6EE DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A6F4 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A6FA DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A700 DEFB $00,$00,$30,$0C,$00,$00 ;
 $A706 DEFB $00,$00,$32,$2C,$00,$00 ;
 $A70C DEFB $00,$00,$30,$8C,$00,$00 ;
 $A712 DEFB $00,$00,$10,$08,$00,$00 ;
 $A718 DEFB $00,$00,$32,$4C,$00,$00 ;
 $A71E DEFB $00,$00,$F9,$9F,$00,$00 ;
 $A724 DEFB $00,$01,$FC,$3F,$80,$00 ;
 $A72A DEFB $00,$02,$FE,$7F,$40,$00 ;
 $A730 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $A736 DEFB $00,$02,$FF,$7F,$40,$00 ;
 $A73C DEFB $00,$03,$7F,$FE,$A0,$00 ;
 $A742 DEFB $00,$06,$FF,$7F,$60,$00 ;
 $A748 DEFB $00,$05,$7F,$7E,$A0,$00 ;
 $A74E DEFB $00,$02,$FF,$7F,$40,$00 ;
 $A754 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $A75A DEFB $00,$02,$FF,$7F,$80,$00 ;
 $A760 DEFB $00,$01,$7F,$FE,$80,$00 ;
 $A766 DEFB $00,$00,$BF,$7D,$00,$00 ;
 $A76C DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A772 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A778 DEFB $00,$00,$1F,$F0,$00,$00 ;
 $A77E DEFB $00,$00,$1B,$D8,$00,$00 ;
 $A784 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A78A DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A790 DEFB $00,$00,$1F,$FC,$00,$00 ;
 $A796 DEFB $00,$00,$3E,$7C,$00,$00 ;
 $A79C DEFB $00,$00,$3C,$3C,$00,$00 ;
 $A7A2 DEFB $00,$00,$3C,$3C,$00,$00 ;
 $A7A8 DEFB $00,$00,$38,$1C,$00,$00 ;
 $A7AE DEFB $00,$00,$68,$1A,$00,$00 ;
 $A7B4 DEFB $00,$00,$78,$1E,$00,$00 ;
 $A7BA DEFB $00,$00,$78,$1E,$00,$00 ;
 $A7C0 DEFB $00,$00,$78,$1E,$00,$00 ;
 $A7C6 DEFB $00,$01,$FA,$BF,$80,$00 ;
 $A7CC DEFB $00,$07,$FD,$5F,$F0,$00 ;
 $A7D2 DEFB $00,$07,$FA,$BF,$F0,$00 ;
 $A7D8 DEFB $00,$05,$55,$55,$50,$00 ;
 $A7DE DEFB $00,$00,$AA,$AA,$80,$00 ;
 $A7E4 DEFB $00,$00,$00,$00,$00,$00 ;
 $A7EA DEFB $00,$00,$00,$00,$00,$00 ; }
; Bowie (3 hats | $1F)
@label=CHARACTER_1F
 $A7F0 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-1F*)
 $A7F6 DEFB $00,$00,$00,$00,$00,$00 ;
 $A7FC DEFB $00,$00,$00,$00,$00,$00 ;
 $A802 DEFB $00,$00,$00,$00,$00,$00 ;
 $A808 DEFB $00,$00,$00,$00,$00,$00 ;
 $A80E DEFB $00,$00,$00,$00,$00,$00 ;
 $A814 DEFB $00,$00,$00,$00,$00,$00 ;
 $A81A DEFB $00,$00,$00,$00,$00,$00 ;
 $A820 DEFB $00,$00,$00,$00,$00,$00 ;
 $A826 DEFB $00,$00,$00,$00,$00,$00 ;
 $A82C DEFB $00,$00,$00,$00,$00,$00 ;
 $A832 DEFB $00,$00,$00,$00,$00,$00 ;
 $A838 DEFB $00,$00,$00,$00,$00,$00 ;
 $A83E DEFB $00,$00,$00,$00,$00,$00 ;
 $A844 DEFB $00,$00,$00,$00,$00,$00 ;
 $A84A DEFB $00,$00,$00,$00,$00,$00 ;
 $A850 DEFB $00,$00,$00,$00,$00,$00 ;
 $A856 DEFB $00,$00,$00,$00,$00,$00 ;
 $A85C DEFB $00,$00,$00,$00,$00,$00 ;
 $A862 DEFB $00,$00,$00,$00,$00,$00 ;
 $A868 DEFB $00,$00,$00,$00,$00,$00 ;
 $A86E DEFB $00,$00,$00,$00,$00,$00 ;
 $A874 DEFB $00,$00,$00,$00,$00,$00 ;
 $A87A DEFB $00,$00,$00,$00,$00,$00 ;
 $A880 DEFB $00,$00,$00,$00,$00,$00 ;
 $A886 DEFB $00,$00,$00,$00,$00,$00 ;
 $A88C DEFB $00,$00,$00,$00,$00,$00 ;
 $A892 DEFB $00,$00,$00,$00,$00,$00 ;
 $A898 DEFB $00,$00,$00,$00,$00,$00 ;
 $A89E DEFB $00,$00,$00,$00,$00,$00 ;
 $A8A4 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A8AA DEFB $00,$00,$07,$E0,$00,$00 ;
 $A8B0 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A8B6 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A8BC DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A8C2 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A8C8 DEFB $00,$00,$03,$C0,$00,$00 ;
 $A8CE DEFB $00,$00,$07,$E0,$00,$00 ;
 $A8D4 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A8DA DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A8E0 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A8E6 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A8EC DEFB $00,$00,$03,$C0,$00,$00 ;
 $A8F2 DEFB $00,$00,$07,$E0,$00,$00 ;
 $A8F8 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A8FE DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A904 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $A90A DEFB $00,$00,$3F,$FC,$00,$00 ;
 $A910 DEFB $00,$00,$30,$0C,$00,$00 ;
 $A916 DEFB $00,$00,$32,$2C,$00,$00 ;
 $A91C DEFB $00,$00,$30,$8C,$00,$00 ;
 $A922 DEFB $00,$00,$10,$08,$00,$00 ;
 $A928 DEFB $00,$00,$32,$4C,$00,$00 ;
 $A92E DEFB $00,$00,$F9,$9F,$00,$00 ;
 $A934 DEFB $00,$01,$FC,$3F,$80,$00 ;
 $A93A DEFB $00,$02,$FE,$7F,$40,$00 ;
 $A940 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $A946 DEFB $00,$02,$FF,$7F,$40,$00 ;
 $A94C DEFB $00,$03,$7F,$FE,$A0,$00 ;
 $A952 DEFB $00,$06,$FF,$7F,$60,$00 ;
 $A958 DEFB $00,$05,$7F,$7E,$A0,$00 ;
 $A95E DEFB $00,$02,$FF,$7F,$40,$00 ;
 $A964 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $A96A DEFB $00,$02,$FF,$7F,$80,$00 ;
 $A970 DEFB $00,$01,$7F,$FE,$80,$00 ;
 $A976 DEFB $00,$00,$BF,$7D,$00,$00 ;
 $A97C DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A982 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A988 DEFB $00,$00,$1F,$F0,$00,$00 ;
 $A98E DEFB $00,$00,$1B,$D8,$00,$00 ;
 $A994 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A99A DEFB $00,$00,$1F,$F8,$00,$00 ;
 $A9A0 DEFB $00,$00,$1F,$FC,$00,$00 ;
 $A9A6 DEFB $00,$00,$3E,$7C,$00,$00 ;
 $A9AC DEFB $00,$00,$3C,$3C,$00,$00 ;
 $A9B2 DEFB $00,$00,$3C,$3C,$00,$00 ;
 $A9B8 DEFB $00,$00,$38,$1C,$00,$00 ;
 $A9BE DEFB $00,$00,$68,$1A,$00,$00 ;
 $A9C4 DEFB $00,$00,$78,$1E,$00,$00 ;
 $A9CA DEFB $00,$00,$78,$1E,$00,$00 ;
 $A9D0 DEFB $00,$00,$78,$1E,$00,$00 ;
 $A9D6 DEFB $00,$01,$FA,$BF,$80,$00 ;
 $A9DC DEFB $00,$07,$FD,$5F,$F0,$00 ;
 $A9E2 DEFB $00,$07,$FA,$BF,$F0,$00 ;
 $A9E8 DEFB $00,$05,$55,$55,$50,$00 ;
 $A9EE DEFB $00,$00,$AA,$AA,$80,$00 ;
 $A9F4 DEFB $00,$00,$00,$00,$00,$00 ;
 $A9FA DEFB $00,$00,$00,$00,$00,$00 ; }
; Bowie (2 hats | $20)
@label=CHARACTER_20
 $AA00 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-20*)
 $AA06 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA0C DEFB $00,$00,$00,$00,$00,$00 ;
 $AA12 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA18 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA1E DEFB $00,$00,$00,$00,$00,$00 ;
 $AA24 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA2A DEFB $00,$00,$00,$00,$00,$00 ;
 $AA30 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA36 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA3C DEFB $00,$00,$00,$00,$00,$00 ;
 $AA42 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA48 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA4E DEFB $00,$00,$00,$00,$00,$00 ;
 $AA54 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA5A DEFB $00,$00,$00,$00,$00,$00 ;
 $AA60 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA66 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA6C DEFB $00,$00,$00,$00,$00,$00 ;
 $AA72 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA78 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA7E DEFB $00,$00,$00,$00,$00,$00 ;
 $AA84 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA8A DEFB $00,$00,$00,$00,$00,$00 ;
 $AA90 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA96 DEFB $00,$00,$00,$00,$00,$00 ;
 $AA9C DEFB $00,$00,$00,$00,$00,$00 ;
 $AAA2 DEFB $00,$00,$00,$00,$00,$00 ;
 $AAA8 DEFB $00,$00,$00,$00,$00,$00 ;
 $AAAE DEFB $00,$00,$00,$00,$00,$00 ;
 $AAB4 DEFB $00,$00,$00,$00,$00,$00 ;
 $AABA DEFB $00,$00,$00,$00,$00,$00 ;
 $AAC0 DEFB $00,$00,$00,$00,$00,$00 ;
 $AAC6 DEFB $00,$00,$00,$00,$00,$00 ;
 $AACC DEFB $00,$00,$00,$00,$00,$00 ;
 $AAD2 DEFB $00,$00,$00,$00,$00,$00 ;
 $AAD8 DEFB $00,$00,$03,$C0,$00,$00 ;
 $AADE DEFB $00,$00,$07,$E0,$00,$00 ;
 $AAE4 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $AAEA DEFB $00,$00,$0F,$F0,$00,$00 ;
 $AAF0 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $AAF6 DEFB $00,$00,$3F,$FC,$00,$00 ;
 $AAFC DEFB $00,$00,$03,$C0,$00,$00 ;
 $AB02 DEFB $00,$00,$07,$E0,$00,$00 ;
 $AB08 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $AB0E DEFB $00,$00,$0F,$F0,$00,$00 ;
 $AB14 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $AB1A DEFB $00,$00,$3F,$FC,$00,$00 ;
 $AB20 DEFB $00,$00,$30,$0C,$00,$00 ;
 $AB26 DEFB $00,$00,$32,$2C,$00,$00 ;
 $AB2C DEFB $00,$00,$30,$8C,$00,$00 ;
 $AB32 DEFB $00,$00,$10,$08,$00,$00 ;
 $AB38 DEFB $00,$00,$32,$4C,$00,$00 ;
 $AB3E DEFB $00,$00,$F9,$9F,$00,$00 ;
 $AB44 DEFB $00,$01,$FC,$3F,$80,$00 ;
 $AB4A DEFB $00,$02,$FE,$7F,$40,$00 ;
 $AB50 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $AB56 DEFB $00,$02,$FF,$7F,$40,$00 ;
 $AB5C DEFB $00,$03,$7F,$FE,$A0,$00 ;
 $AB62 DEFB $00,$06,$FF,$7F,$60,$00 ;
 $AB68 DEFB $00,$05,$7F,$7E,$A0,$00 ;
 $AB6E DEFB $00,$02,$FF,$7F,$40,$00 ;
 $AB74 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $AB7A DEFB $00,$02,$FF,$7F,$80,$00 ;
 $AB80 DEFB $00,$01,$7F,$FE,$80,$00 ;
 $AB86 DEFB $00,$00,$BF,$7D,$00,$00 ;
 $AB8C DEFB $00,$00,$1F,$F8,$00,$00 ;
 $AB92 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $AB98 DEFB $00,$00,$1F,$F0,$00,$00 ;
 $AB9E DEFB $00,$00,$1B,$D8,$00,$00 ;
 $ABA4 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $ABAA DEFB $00,$00,$1F,$F8,$00,$00 ;
 $ABB0 DEFB $00,$00,$1F,$FC,$00,$00 ;
 $ABB6 DEFB $00,$00,$3E,$7C,$00,$00 ;
 $ABBC DEFB $00,$00,$3C,$3C,$00,$00 ;
 $ABC2 DEFB $00,$00,$3C,$3C,$00,$00 ;
 $ABC8 DEFB $00,$00,$38,$1C,$00,$00 ;
 $ABCE DEFB $00,$00,$68,$1A,$00,$00 ;
 $ABD4 DEFB $00,$00,$78,$1E,$00,$00 ;
 $ABDA DEFB $00,$00,$78,$1E,$00,$00 ;
 $ABE0 DEFB $00,$00,$78,$1E,$00,$00 ;
 $ABE6 DEFB $00,$01,$FA,$BF,$80,$00 ;
 $ABEC DEFB $00,$07,$FD,$5F,$F0,$00 ;
 $ABF2 DEFB $00,$07,$FA,$BF,$F0,$00 ;
 $ABF8 DEFB $00,$05,$55,$55,$50,$00 ;
 $ABFE DEFB $00,$00,$AA,$AA,$80,$00 ;
 $AC04 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC0A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bowie (1 hat | $21)
@label=CHARACTER_21
 $AC10 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-21*)
 $AC16 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC1C DEFB $00,$00,$00,$00,$00,$00 ;
 $AC22 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC28 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC2E DEFB $00,$00,$00,$00,$00,$00 ;
 $AC34 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC3A DEFB $00,$00,$00,$00,$00,$00 ;
 $AC40 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC46 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC4C DEFB $00,$00,$00,$00,$00,$00 ;
 $AC52 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC58 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC5E DEFB $00,$00,$00,$00,$00,$00 ;
 $AC64 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC6A DEFB $00,$00,$00,$00,$00,$00 ;
 $AC70 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC76 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC7C DEFB $00,$00,$00,$00,$00,$00 ;
 $AC82 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC88 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC8E DEFB $00,$00,$00,$00,$00,$00 ;
 $AC94 DEFB $00,$00,$00,$00,$00,$00 ;
 $AC9A DEFB $00,$00,$00,$00,$00,$00 ;
 $ACA0 DEFB $00,$00,$00,$00,$00,$00 ;
 $ACA6 DEFB $00,$00,$00,$00,$00,$00 ;
 $ACAC DEFB $00,$00,$00,$00,$00,$00 ;
 $ACB2 DEFB $00,$00,$00,$00,$00,$00 ;
 $ACB8 DEFB $00,$00,$00,$00,$00,$00 ;
 $ACBE DEFB $00,$00,$00,$00,$00,$00 ;
 $ACC4 DEFB $00,$00,$00,$00,$00,$00 ;
 $ACCA DEFB $00,$00,$00,$00,$00,$00 ;
 $ACD0 DEFB $00,$00,$00,$00,$00,$00 ;
 $ACD6 DEFB $00,$00,$00,$00,$00,$00 ;
 $ACDC DEFB $00,$00,$00,$00,$00,$00 ;
 $ACE2 DEFB $00,$00,$00,$00,$00,$00 ;
 $ACE8 DEFB $00,$00,$00,$00,$00,$00 ;
 $ACEE DEFB $00,$00,$00,$00,$00,$00 ;
 $ACF4 DEFB $00,$00,$00,$00,$00,$00 ;
 $ACFA DEFB $00,$00,$00,$00,$00,$00 ;
 $AD00 DEFB $00,$00,$00,$00,$00,$00 ;
 $AD06 DEFB $00,$00,$00,$00,$00,$00 ;
 $AD0C DEFB $00,$00,$03,$C0,$00,$00 ;
 $AD12 DEFB $00,$00,$07,$E0,$00,$00 ;
 $AD18 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $AD1E DEFB $00,$00,$0F,$F0,$00,$00 ;
 $AD24 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $AD2A DEFB $00,$00,$3F,$FC,$00,$00 ;
 $AD30 DEFB $00,$00,$30,$0C,$00,$00 ;
 $AD36 DEFB $00,$00,$32,$2C,$00,$00 ;
 $AD3C DEFB $00,$00,$30,$8C,$00,$00 ;
 $AD42 DEFB $00,$00,$10,$08,$00,$00 ;
 $AD48 DEFB $00,$00,$32,$4C,$00,$00 ;
 $AD4E DEFB $00,$00,$F9,$9F,$00,$00 ;
 $AD54 DEFB $00,$01,$FC,$3F,$80,$00 ;
 $AD5A DEFB $00,$02,$FE,$7F,$40,$00 ;
 $AD60 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $AD66 DEFB $00,$02,$FF,$7F,$40,$00 ;
 $AD6C DEFB $00,$03,$7F,$FE,$A0,$00 ;
 $AD72 DEFB $00,$06,$FF,$7F,$60,$00 ;
 $AD78 DEFB $00,$05,$7F,$7E,$A0,$00 ;
 $AD7E DEFB $00,$02,$FF,$7F,$40,$00 ;
 $AD84 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $AD8A DEFB $00,$02,$FF,$7F,$80,$00 ;
 $AD90 DEFB $00,$01,$7F,$FE,$80,$00 ;
 $AD96 DEFB $00,$00,$BF,$7D,$00,$00 ;
 $AD9C DEFB $00,$00,$1F,$F8,$00,$00 ;
 $ADA2 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $ADA8 DEFB $00,$00,$1F,$F0,$00,$00 ;
 $ADAE DEFB $00,$00,$1B,$D8,$00,$00 ;
 $ADB4 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $ADBA DEFB $00,$00,$1F,$F8,$00,$00 ;
 $ADC0 DEFB $00,$00,$1F,$FC,$00,$00 ;
 $ADC6 DEFB $00,$00,$3E,$7C,$00,$00 ;
 $ADCC DEFB $00,$00,$3C,$3C,$00,$00 ;
 $ADD2 DEFB $00,$00,$3C,$3C,$00,$00 ;
 $ADD8 DEFB $00,$00,$38,$1C,$00,$00 ;
 $ADDE DEFB $00,$00,$68,$1A,$00,$00 ;
 $ADE4 DEFB $00,$00,$78,$1E,$00,$00 ;
 $ADEA DEFB $00,$00,$78,$1E,$00,$00 ;
 $ADF0 DEFB $00,$00,$78,$1E,$00,$00 ;
 $ADF6 DEFB $00,$01,$FA,$BF,$80,$00 ;
 $ADFC DEFB $00,$07,$FD,$5F,$F0,$00 ;
 $AE02 DEFB $00,$07,$FA,$BF,$F0,$00 ;
 $AE08 DEFB $00,$05,$55,$55,$50,$00 ;
 $AE0E DEFB $00,$00,$AA,$AA,$80,$00 ;
 $AE14 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE1A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bowie (bomb | $22)
@label=CHARACTER_22
 $AE20 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-22*)
 $AE26 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE2C DEFB $00,$00,$00,$00,$00,$00 ;
 $AE32 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE38 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE3E DEFB $00,$00,$00,$00,$00,$00 ;
 $AE44 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE4A DEFB $00,$00,$00,$00,$00,$00 ;
 $AE50 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE56 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE5C DEFB $00,$00,$00,$00,$00,$00 ;
 $AE62 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE68 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE6E DEFB $00,$00,$00,$00,$00,$00 ;
 $AE74 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE7A DEFB $00,$00,$00,$00,$00,$00 ;
 $AE80 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE86 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE8C DEFB $00,$00,$00,$00,$00,$00 ;
 $AE92 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE98 DEFB $00,$00,$00,$00,$00,$00 ;
 $AE9E DEFB $00,$00,$00,$00,$00,$00 ;
 $AEA4 DEFB $00,$00,$00,$00,$00,$00 ;
 $AEAA DEFB $00,$00,$00,$00,$00,$00 ;
 $AEB0 DEFB $00,$00,$00,$00,$00,$00 ;
 $AEB6 DEFB $00,$00,$00,$00,$00,$00 ;
 $AEBC DEFB $00,$00,$00,$00,$00,$00 ;
 $AEC2 DEFB $00,$00,$00,$00,$00,$00 ;
 $AEC8 DEFB $00,$00,$00,$00,$00,$00 ;
 $AECE DEFB $00,$00,$00,$00,$00,$00 ;
 $AED4 DEFB $00,$00,$00,$00,$00,$00 ;
 $AEDA DEFB $00,$00,$00,$00,$00,$00 ;
 $AEE0 DEFB $00,$00,$00,$00,$00,$00 ;
 $AEE6 DEFB $00,$00,$00,$00,$00,$00 ;
 $AEEC DEFB $00,$00,$00,$00,$00,$00 ;
 $AEF2 DEFB $00,$00,$00,$40,$00,$00 ;
 $AEF8 DEFB $00,$00,$00,$80,$00,$00 ;
 $AEFE DEFB $00,$00,$00,$80,$00,$00 ;
 $AF04 DEFB $00,$00,$00,$80,$00,$00 ;
 $AF0A DEFB $00,$00,$01,$80,$00,$00 ;
 $AF10 DEFB $00,$00,$03,$C0,$00,$00 ;
 $AF16 DEFB $00,$00,$07,$60,$00,$00 ;
 $AF1C DEFB $00,$00,$0F,$B0,$00,$00 ;
 $AF22 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $AF28 DEFB $00,$00,$0F,$F0,$00,$00 ;
 $AF2E DEFB $00,$00,$0F,$F0,$00,$00 ;
 $AF34 DEFB $00,$00,$1D,$F8,$00,$00 ;
 $AF3A DEFB $00,$00,$3F,$FC,$00,$00 ;
 $AF40 DEFB $00,$00,$30,$0C,$00,$00 ;
 $AF46 DEFB $00,$00,$32,$2C,$00,$00 ;
 $AF4C DEFB $00,$00,$30,$8C,$00,$00 ;
 $AF52 DEFB $00,$00,$10,$08,$00,$00 ;
 $AF58 DEFB $00,$00,$32,$4C,$00,$00 ;
 $AF5E DEFB $00,$00,$F9,$9F,$00,$00 ;
 $AF64 DEFB $00,$01,$FC,$3F,$80,$00 ;
 $AF6A DEFB $00,$02,$FE,$7F,$40,$00 ;
 $AF70 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $AF76 DEFB $00,$02,$FF,$7F,$40,$00 ;
 $AF7C DEFB $00,$03,$7F,$FE,$A0,$00 ;
 $AF82 DEFB $00,$06,$FF,$7F,$60,$00 ;
 $AF88 DEFB $00,$05,$7F,$7E,$A0,$00 ;
 $AF8E DEFB $00,$02,$FF,$7F,$40,$00 ;
 $AF94 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $AF9A DEFB $00,$02,$FF,$7F,$80,$00 ;
 $AFA0 DEFB $00,$01,$7F,$FE,$80,$00 ;
 $AFA6 DEFB $00,$00,$BF,$7D,$00,$00 ;
 $AFAC DEFB $00,$00,$1F,$F8,$00,$00 ;
 $AFB2 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $AFB8 DEFB $00,$00,$1F,$F0,$00,$00 ;
 $AFBE DEFB $00,$00,$1B,$D8,$00,$00 ;
 $AFC4 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $AFCA DEFB $00,$00,$1F,$F8,$00,$00 ;
 $AFD0 DEFB $00,$00,$1F,$FC,$00,$00 ;
 $AFD6 DEFB $00,$00,$3E,$7C,$00,$00 ;
 $AFDC DEFB $00,$00,$3C,$3C,$00,$00 ;
 $AFE2 DEFB $00,$00,$3C,$3C,$00,$00 ;
 $AFE8 DEFB $00,$00,$38,$1C,$00,$00 ;
 $AFEE DEFB $00,$00,$68,$1A,$00,$00 ;
 $AFF4 DEFB $00,$00,$78,$1E,$00,$00 ;
 $AFFA DEFB $00,$00,$78,$1E,$00,$00 ;
 $B000 DEFB $00,$00,$78,$1E,$00,$00 ;
 $B006 DEFB $00,$01,$FA,$BF,$80,$00 ;
 $B00C DEFB $00,$07,$FD,$5F,$F0,$00 ;
 $B012 DEFB $00,$07,$FA,$BF,$F0,$00 ;
 $B018 DEFB $00,$05,$55,$55,$50,$00 ;
 $B01E DEFB $00,$00,$AA,$AA,$80,$00 ;
 $B024 DEFB $00,$00,$00,$00,$00,$00 ;
 $B02A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bowie (cash | $23)
@label=CHARACTER_23
 $B030 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-23*)
 $B036 DEFB $00,$00,$00,$00,$00,$00 ;
 $B03C DEFB $00,$00,$00,$00,$00,$00 ;
 $B042 DEFB $00,$00,$00,$00,$00,$00 ;
 $B048 DEFB $00,$00,$00,$00,$00,$00 ;
 $B04E DEFB $00,$00,$00,$00,$00,$00 ;
 $B054 DEFB $00,$00,$00,$00,$00,$00 ;
 $B05A DEFB $00,$00,$00,$00,$00,$00 ;
 $B060 DEFB $00,$00,$00,$00,$00,$00 ;
 $B066 DEFB $00,$00,$00,$00,$00,$00 ;
 $B06C DEFB $00,$00,$00,$00,$00,$00 ;
 $B072 DEFB $00,$00,$00,$00,$00,$00 ;
 $B078 DEFB $00,$00,$00,$00,$00,$00 ;
 $B07E DEFB $00,$00,$00,$00,$00,$00 ;
 $B084 DEFB $00,$00,$00,$00,$00,$00 ;
 $B08A DEFB $00,$00,$00,$00,$00,$00 ;
 $B090 DEFB $00,$00,$00,$00,$00,$00 ;
 $B096 DEFB $00,$00,$00,$00,$00,$00 ;
 $B09C DEFB $00,$00,$00,$00,$00,$00 ;
 $B0A2 DEFB $00,$00,$00,$00,$00,$00 ;
 $B0A8 DEFB $00,$00,$00,$00,$00,$00 ;
 $B0AE DEFB $00,$00,$00,$00,$00,$00 ;
 $B0B4 DEFB $00,$00,$00,$00,$00,$00 ;
 $B0BA DEFB $00,$00,$00,$00,$00,$00 ;
 $B0C0 DEFB $00,$00,$00,$00,$00,$00 ;
 $B0C6 DEFB $00,$00,$00,$00,$00,$00 ;
 $B0CC DEFB $00,$00,$00,$00,$00,$00 ;
 $B0D2 DEFB $00,$00,$00,$00,$00,$00 ;
 $B0D8 DEFB $00,$00,$00,$00,$00,$00 ;
 $B0DE DEFB $00,$00,$00,$00,$00,$00 ;
 $B0E4 DEFB $00,$00,$00,$00,$00,$00 ;
 $B0EA DEFB $00,$00,$00,$00,$00,$00 ;
 $B0F0 DEFB $00,$00,$00,$00,$00,$00 ;
 $B0F6 DEFB $00,$00,$00,$00,$00,$00 ;
 $B0FC DEFB $00,$00,$00,$00,$00,$00 ;
 $B102 DEFB $00,$00,$00,$60,$00,$00 ;
 $B108 DEFB $00,$00,$08,$A0,$00,$00 ;
 $B10E DEFB $00,$00,$14,$A0,$00,$00 ;
 $B114 DEFB $00,$00,$3F,$C0,$00,$00 ;
 $B11A DEFB $00,$00,$02,$40,$00,$00 ;
 $B120 DEFB $00,$00,$07,$E0,$00,$00 ;
 $B126 DEFB $00,$00,$0A,$10,$00,$00 ;
 $B12C DEFB $00,$00,$0B,$D0,$00,$00 ;
 $B132 DEFB $00,$00,$08,$50,$00,$00 ;
 $B138 DEFB $00,$00,$0B,$D0,$00,$00 ;
 $B13E DEFB $00,$00,$04,$20,$00,$00 ;
 $B144 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $B14A DEFB $00,$00,$3F,$FC,$00,$00 ;
 $B150 DEFB $00,$00,$30,$0C,$00,$00 ;
 $B156 DEFB $00,$00,$32,$2C,$00,$00 ;
 $B15C DEFB $00,$00,$30,$8C,$00,$00 ;
 $B162 DEFB $00,$00,$10,$08,$00,$00 ;
 $B168 DEFB $00,$00,$32,$4C,$00,$00 ;
 $B16E DEFB $00,$00,$F9,$9F,$00,$00 ;
 $B174 DEFB $00,$01,$FC,$3F,$80,$00 ;
 $B17A DEFB $00,$02,$FE,$7F,$40,$00 ;
 $B180 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $B186 DEFB $00,$02,$FF,$7F,$40,$00 ;
 $B18C DEFB $00,$03,$7F,$FE,$A0,$00 ;
 $B192 DEFB $00,$06,$FF,$7F,$60,$00 ;
 $B198 DEFB $00,$05,$7F,$7E,$A0,$00 ;
 $B19E DEFB $00,$02,$FF,$7F,$40,$00 ;
 $B1A4 DEFB $00,$03,$7F,$FE,$C0,$00 ;
 $B1AA DEFB $00,$02,$FF,$7F,$80,$00 ;
 $B1B0 DEFB $00,$01,$7F,$FE,$80,$00 ;
 $B1B6 DEFB $00,$00,$BF,$7D,$00,$00 ;
 $B1BC DEFB $00,$00,$1F,$F8,$00,$00 ;
 $B1C2 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $B1C8 DEFB $00,$00,$1F,$F0,$00,$00 ;
 $B1CE DEFB $00,$00,$1B,$D8,$00,$00 ;
 $B1D4 DEFB $00,$00,$1F,$F8,$00,$00 ;
 $B1DA DEFB $00,$00,$1F,$F8,$00,$00 ;
 $B1E0 DEFB $00,$00,$1F,$FC,$00,$00 ;
 $B1E6 DEFB $00,$00,$3E,$7C,$00,$00 ;
 $B1EC DEFB $00,$00,$3C,$3C,$00,$00 ;
 $B1F2 DEFB $00,$00,$3C,$3C,$00,$00 ;
 $B1F8 DEFB $00,$00,$38,$1C,$00,$00 ;
 $B1FE DEFB $00,$00,$68,$1A,$00,$00 ;
 $B204 DEFB $00,$00,$78,$1E,$00,$00 ;
 $B20A DEFB $00,$00,$78,$1E,$00,$00 ;
 $B210 DEFB $00,$00,$78,$1E,$00,$00 ;
 $B216 DEFB $00,$01,$FA,$BF,$80,$00 ;
 $B21C DEFB $00,$07,$FD,$5F,$F0,$00 ;
 $B222 DEFB $00,$07,$FA,$BF,$F0,$00 ;
 $B228 DEFB $00,$05,$55,$55,$50,$00 ;
 $B22E DEFB $00,$00,$AA,$AA,$80,$00 ;
 $B234 DEFB $00,$00,$00,$00,$00,$00 ;
 $B23A DEFB $00,$00,$00,$00,$00,$00 ; }
; #UDGARRAY*character-1B,50;character-1C;character-1D;character-1E;character-1F;character-20;character-21;character-22(bowie-bomb-frames)
;       #UDGARRAY*character-1B,50;character-1C;character-1D;character-1E;character-1F;character-20;character-21;character-23(bowie-cash-frames)

; Julius (special)
;
; JULIUS - The dandy. He is a box of surprises. He may give
; you a bag of gold or he might shoot you. Take
; things very carefully with this one.
;
; .
;
; Bandit 7 (stand off | $24)
@label=CHARACTER_24
b$B240 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-24*)
 $B246 DEFB $00,$00,$03,$E0,$00,$00 ;
 $B24C DEFB $00,$00,$0F,$EC,$00,$00 ;
 $B252 DEFB $00,$00,$0F,$EC,$00,$00 ;
 $B258 DEFB $00,$00,$1F,$EC,$00,$00 ;
 $B25E DEFB $00,$00,$18,$0C,$00,$00 ;
 $B264 DEFB $00,$00,$1A,$14,$00,$00 ;
 $B26A DEFB $00,$00,$19,$24,$00,$00 ;
 $B270 DEFB $00,$00,$18,$04,$00,$00 ;
 $B276 DEFB $00,$00,$08,$04,$00,$00 ;
 $B27C DEFB $00,$00,$04,$C8,$00,$00 ;
 $B282 DEFB $00,$00,$07,$F8,$00,$00 ;
 $B288 DEFB $00,$00,$04,$08,$00,$00 ;
 $B28E DEFB $00,$00,$04,$08,$00,$00 ;
 $B294 DEFB $00,$00,$12,$0A,$00,$00 ;
 $B29A DEFB $00,$00,$25,$D1,$80,$00 ;
 $B2A0 DEFB $00,$00,$64,$C9,$E0,$00 ;
 $B2A6 DEFB $00,$00,$E4,$C9,$F0,$00 ;
 $B2AC DEFB $00,$01,$E4,$C9,$FC,$00 ;
 $B2B2 DEFB $00,$03,$F8,$A7,$FE,$00 ;
 $B2B8 DEFB $00,$07,$FC,$AF,$FF,$00 ;
 $B2BE DEFB $00,$0F,$ED,$0B,$FF,$80 ;
 $B2C4 DEFB $00,$0F,$CA,$19,$FF,$80 ;
 $B2CA DEFB $00,$1F,$CA,$19,$DF,$80 ;
 $B2D0 DEFB $00,$1F,$CB,$29,$CF,$C0 ;
 $B2D6 DEFB $00,$1F,$CD,$C9,$CF,$C0 ;
 $B2DC DEFB $00,$1F,$CA,$89,$CF,$C0 ;
 $B2E2 DEFB $00,$1F,$CD,$89,$CF,$C0 ;
 $B2E8 DEFB $00,$1F,$EA,$8B,$C7,$C0 ;
 $B2EE DEFB $00,$1F,$ED,$8B,$C7,$C0 ;
 $B2F4 DEFB $00,$FF,$EA,$8B,$C7,$E0 ;
 $B2FA DEFB $00,$5F,$ED,$8B,$C7,$E0 ;
 $B300 DEFB $00,$33,$7A,$8F,$C7,$E0 ;
 $B306 DEFB $00,$1C,$FD,$4F,$C7,$E0 ;
 $B30C DEFB $00,$09,$FA,$CF,$C7,$80 ;
 $B312 DEFB $00,$1F,$FD,$4F,$C9,$F0 ;
 $B318 DEFB $00,$20,$FA,$CF,$C7,$F8 ;
 $B31E DEFB $00,$3F,$FD,$4F,$C9,$E8 ;
 $B324 DEFB $00,$20,$FA,$CF,$94,$54 ;
 $B32A DEFB $00,$3E,$FD,$8F,$A6,$4A ;
 $B330 DEFB $00,$31,$FA,$89,$4E,$28 ;
 $B336 DEFB $00,$43,$FF,$F1,$9C,$24 ;
 $B33C DEFB $00,$88,$FA,$35,$F0,$14 ;
 $B342 DEFB $00,$9E,$FB,$FD,$E0,$00 ;
 $B348 DEFB $01,$18,$7B,$FC,$E0,$00 ;
 $B34E DEFB $01,$1E,$7B,$FE,$C0,$00 ;
 $B354 DEFB $00,$8A,$77,$7E,$C0,$00 ;
 $B35A DEFB $00,$9E,$F7,$7E,$00,$00 ;
 $B360 DEFB $00,$41,$F7,$7E,$C0,$00 ;
 $B366 DEFB $00,$3F,$F7,$7E,$C0,$00 ;
 $B36C DEFB $00,$01,$EF,$7E,$C0,$00 ;
 $B372 DEFB $00,$01,$EF,$7E,$C0,$00 ;
 $B378 DEFB $00,$01,$EF,$7E,$00,$00 ;
 $B37E DEFB $00,$00,$DF,$7F,$00,$00 ;
 $B384 DEFB $00,$00,$7F,$7F,$00,$00 ;
 $B38A DEFB $00,$00,$7F,$7F,$00,$00 ;
 $B390 DEFB $00,$00,$7F,$3F,$00,$00 ;
 $B396 DEFB $00,$00,$7E,$3F,$00,$00 ;
 $B39C DEFB $00,$00,$7E,$3F,$00,$00 ;
 $B3A2 DEFB $00,$00,$3E,$3F,$00,$00 ;
 $B3A8 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B3AE DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B3B4 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B3BA DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B3C0 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B3C6 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B3CC DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B3D2 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B3D8 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B3DE DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B3E4 DEFB $00,$00,$3C,$1E,$00,$00 ;
 $B3EA DEFB $00,$00,$36,$2A,$00,$00 ;
 $B3F0 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B3F6 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $B3FC DEFB $00,$00,$3A,$2E,$00,$00 ;
 $B402 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $B408 DEFB $00,$00,$3A,$AE,$00,$00 ;
 $B40E DEFB $00,$00,$FB,$6E,$40,$00 ;
 $B414 DEFB $00,$0B,$7A,$AC,$A0,$00 ;
 $B41A DEFB $00,$1C,$FF,$74,$D4,$00 ;
 $B420 DEFB $00,$B1,$FE,$B8,$6A,$00 ;
 $B426 DEFB $01,$43,$DD,$78,$35,$00 ;
 $B42C DEFB $02,$BF,$AA,$AC,$2A,$80 ;
 $B432 DEFB $05,$55,$55,$57,$F5,$00 ;
 $B438 DEFB $02,$AA,$AA,$AA,$AA,$00 ;
 $B43E DEFB $01,$55,$55,$55,$50,$00 ;
 $B444 DEFB $00,$00,$00,$00,$00,$00 ;
 $B44A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 7 (draw | $25)
@label=CHARACTER_25
 $B450 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-25*)
 $B456 DEFB $00,$00,$03,$E0,$00,$00 ;
 $B45C DEFB $00,$00,$0F,$EC,$00,$00 ;
 $B462 DEFB $00,$00,$0F,$EC,$00,$00 ;
 $B468 DEFB $00,$00,$1F,$EC,$00,$00 ;
 $B46E DEFB $00,$00,$18,$0C,$00,$00 ;
 $B474 DEFB $00,$00,$1A,$14,$00,$00 ;
 $B47A DEFB $00,$00,$19,$24,$00,$00 ;
 $B480 DEFB $00,$00,$18,$04,$00,$00 ;
 $B486 DEFB $00,$00,$08,$04,$00,$00 ;
 $B48C DEFB $00,$00,$04,$C8,$00,$00 ;
 $B492 DEFB $00,$00,$07,$F8,$00,$00 ;
 $B498 DEFB $00,$00,$04,$08,$00,$00 ;
 $B49E DEFB $00,$00,$04,$08,$00,$00 ;
 $B4A4 DEFB $00,$00,$12,$0A,$00,$00 ;
 $B4AA DEFB $00,$00,$25,$D1,$00,$00 ;
 $B4B0 DEFB $00,$00,$64,$C9,$80,$00 ;
 $B4B6 DEFB $00,$01,$E4,$C9,$C0,$00 ;
 $B4BC DEFB $00,$03,$E4,$C9,$E0,$00 ;
 $B4C2 DEFB $00,$07,$F8,$A7,$F0,$00 ;
 $B4C8 DEFB $00,$0F,$FC,$AF,$F8,$00 ;
 $B4CE DEFB $00,$1F,$ED,$0B,$F8,$00 ;
 $B4D4 DEFB $00,$1F,$CA,$19,$FC,$00 ;
 $B4DA DEFB $00,$1F,$CA,$19,$FC,$00 ;
 $B4E0 DEFB $00,$1F,$CB,$29,$FE,$00 ;
 $B4E6 DEFB $00,$1F,$CD,$C9,$FE,$00 ;
 $B4EC DEFB $00,$1F,$CA,$89,$7E,$00 ;
 $B4F2 DEFB $00,$1F,$CD,$89,$7E,$00 ;
 $B4F8 DEFB $00,$1D,$EA,$8B,$7E,$00 ;
 $B4FE DEFB $00,$1D,$ED,$8B,$7E,$00 ;
 $B504 DEFB $00,$1D,$EA,$8B,$7E,$00 ;
 $B50A DEFB $00,$1D,$ED,$8B,$7E,$00 ;
 $B510 DEFB $00,$1D,$FA,$8F,$BE,$00 ;
 $B516 DEFB $00,$1D,$FD,$4F,$BC,$00 ;
 $B51C DEFB $00,$1D,$FA,$CF,$1C,$00 ;
 $B522 DEFB $00,$1F,$FD,$4E,$AC,$00 ;
 $B528 DEFB $00,$0F,$FA,$CE,$44,$00 ;
 $B52E DEFB $00,$0F,$FD,$4E,$04,$00 ;
 $B534 DEFB $00,$0F,$FA,$CD,$0C,$00 ;
 $B53A DEFB $00,$0F,$FD,$8D,$9C,$00 ;
 $B540 DEFB $00,$07,$FA,$89,$FC,$00 ;
 $B546 DEFB $00,$07,$FF,$F1,$8C,$00 ;
 $B54C DEFB $00,$07,$FA,$34,$F8,$00 ;
 $B552 DEFB $00,$01,$FB,$FD,$78,$00 ;
 $B558 DEFB $00,$01,$FB,$FD,$E0,$00 ;
 $B55E DEFB $00,$01,$FB,$FE,$C0,$00 ;
 $B564 DEFB $00,$01,$F7,$7E,$C0,$00 ;
 $B56A DEFB $00,$01,$F7,$7E,$00,$00 ;
 $B570 DEFB $00,$01,$F7,$7E,$C0,$00 ;
 $B576 DEFB $00,$01,$F7,$7E,$C0,$00 ;
 $B57C DEFB $00,$01,$EF,$7E,$C0,$00 ;
 $B582 DEFB $00,$01,$EF,$7E,$C0,$00 ;
 $B588 DEFB $00,$01,$EF,$7E,$00,$00 ;
 $B58E DEFB $00,$00,$DF,$7F,$00,$00 ;
 $B594 DEFB $00,$00,$7F,$7F,$00,$00 ;
 $B59A DEFB $00,$00,$7F,$7F,$00,$00 ;
 $B5A0 DEFB $00,$00,$7F,$3F,$00,$00 ;
 $B5A6 DEFB $00,$00,$7E,$3F,$00,$00 ;
 $B5AC DEFB $00,$00,$7E,$3F,$00,$00 ;
 $B5B2 DEFB $00,$00,$3E,$3F,$00,$00 ;
 $B5B8 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B5BE DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B5C4 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B5CA DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B5D0 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B5D6 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B5DC DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B5E2 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B5E8 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B5EE DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B5F4 DEFB $00,$00,$3C,$1E,$00,$00 ;
 $B5FA DEFB $00,$00,$36,$2A,$00,$00 ;
 $B600 DEFB $00,$00,$3E,$3E,$00,$00 ;
 $B606 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $B60C DEFB $00,$00,$3A,$2E,$00,$00 ;
 $B612 DEFB $00,$00,$3A,$2E,$00,$00 ;
 $B618 DEFB $00,$00,$3A,$AE,$00,$00 ;
 $B61E DEFB $00,$00,$FB,$6E,$40,$00 ;
 $B624 DEFB $00,$0B,$7A,$AC,$A0,$00 ;
 $B62A DEFB $00,$1C,$FF,$74,$D4,$00 ;
 $B630 DEFB $00,$B1,$FE,$B8,$6A,$00 ;
 $B636 DEFB $01,$43,$DD,$78,$35,$00 ;
 $B63C DEFB $02,$BF,$AA,$AC,$2A,$80 ;
 $B642 DEFB $05,$55,$55,$57,$F5,$00 ;
 $B648 DEFB $02,$AA,$AA,$AA,$AA,$00 ;
 $B64E DEFB $01,$55,$55,$55,$50,$00 ;
 $B654 DEFB $00,$00,$00,$00,$00,$00 ;
 $B65A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 7 (shot | $26)
@label=CHARACTER_26
 $B660 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-26*)
 $B666 DEFB $00,$00,$00,$00,$00,$00 ;
 $B66C DEFB $00,$00,$00,$00,$00,$00 ;
 $B672 DEFB $00,$00,$00,$00,$00,$00 ;
 $B678 DEFB $00,$00,$00,$00,$00,$00 ;
 $B67E DEFB $00,$00,$00,$00,$00,$00 ;
 $B684 DEFB $00,$00,$00,$00,$00,$00 ;
 $B68A DEFB $00,$00,$00,$00,$00,$00 ;
 $B690 DEFB $00,$00,$00,$00,$00,$00 ;
 $B696 DEFB $00,$00,$00,$00,$00,$00 ;
 $B69C DEFB $00,$00,$00,$00,$00,$00 ;
 $B6A2 DEFB $00,$00,$00,$00,$00,$00 ;
 $B6A8 DEFB $00,$00,$00,$00,$00,$00 ;
 $B6AE DEFB $00,$00,$00,$00,$00,$00 ;
 $B6B4 DEFB $00,$00,$00,$00,$00,$00 ;
 $B6BA DEFB $00,$00,$00,$00,$00,$00 ;
 $B6C0 DEFB $00,$00,$00,$00,$00,$00 ;
 $B6C6 DEFB $00,$00,$00,$00,$00,$00 ;
 $B6CC DEFB $00,$00,$00,$00,$00,$00 ;
 $B6D2 DEFB $00,$00,$00,$00,$00,$00 ;
 $B6D8 DEFB $00,$00,$00,$00,$00,$00 ;
 $B6DE DEFB $00,$00,$00,$00,$00,$00 ;
 $B6E4 DEFB $00,$00,$00,$00,$00,$00 ;
 $B6EA DEFB $00,$00,$00,$00,$00,$00 ;
 $B6F0 DEFB $00,$00,$00,$00,$00,$00 ;
 $B6F6 DEFB $00,$00,$00,$00,$00,$00 ;
 $B6FC DEFB $00,$00,$00,$02,$00,$00 ;
 $B702 DEFB $00,$00,$02,$00,$00,$00 ;
 $B708 DEFB $00,$00,$00,$44,$00,$00 ;
 $B70E DEFB $00,$00,$20,$20,$30,$00 ;
 $B714 DEFB $00,$00,$58,$00,$40,$00 ;
 $B71A DEFB $00,$00,$20,$00,$00,$00 ;
 $B720 DEFB $00,$00,$00,$00,$00,$00 ;
 $B726 DEFB $00,$00,$00,$00,$00,$00 ;
 $B72C DEFB $00,$00,$00,$3F,$00,$00 ;
 $B732 DEFB $00,$00,$00,$7F,$40,$00 ;
 $B738 DEFB $00,$00,$00,$FF,$40,$00 ;
 $B73E DEFB $00,$00,$7E,$FF,$5C,$00 ;
 $B744 DEFB $00,$01,$FE,$FF,$5F,$00 ;
 $B74A DEFB $00,$03,$FE,$FF,$5F,$C0 ;
 $B750 DEFB $00,$07,$FE,$FF,$DF,$E0 ;
 $B756 DEFB $00,$0F,$EF,$7F,$BF,$F8 ;
 $B75C DEFB $00,$1F,$CF,$A4,$BF,$FC ;
 $B762 DEFB $00,$3F,$8F,$AE,$FF,$FE ;
 $B768 DEFB $00,$7F,$0F,$E0,$FC,$FE ;
 $B76E DEFB $00,$7E,$0F,$DF,$7C,$7C ;
 $B774 DEFB $00,$FC,$0F,$E4,$7C,$19 ;
 $B77A DEFB $00,$FC,$0F,$D4,$7C,$01 ;
 $B780 DEFB $00,$FC,$0F,$EA,$7C,$09 ;
 $B786 DEFB $01,$F8,$0F,$D6,$7C,$C5 ;
 $B78C DEFB $01,$F8,$0F,$EA,$7C,$35 ;
 $B792 DEFB $1C,$58,$0F,$D6,$7C,$0B ;
 $B798 DEFB $03,$48,$0F,$EA,$7C,$77 ;
 $B79E DEFB $7D,$56,$0F,$D6,$7C,$0D ;
 $B7A4 DEFB $02,$B8,$0F,$EC,$7C,$00 ;
 $B7AA DEFB $01,$F8,$0F,$D4,$7C,$00 ;
 $B7B0 DEFB $00,$B0,$6F,$EC,$7C,$00 ;
 $B7B6 DEFB $00,$00,$FF,$BF,$FC,$00 ;
 $B7BC DEFB $00,$01,$FF,$B1,$FE,$00 ;
 $B7C2 DEFB $00,$1B,$F7,$FF,$FF,$80 ;
 $B7C8 DEFB $00,$3B,$B0,$7F,$FF,$CE ;
 $B7CE DEFB $07,$FF,$FF,$FF,$FF,$F1 ;
 $B7D4 DEFB $08,$19,$FF,$FF,$FF,$E1 ;
 $B7DA DEFB $08,$09,$FF,$80,$7F,$C1 ;
 $B7E0 DEFB $08,$07,$FF,$F1,$FF,$83 ;
 $B7E6 DEFB $06,$03,$FF,$E0,$FF,$C4 ;
 $B7EC DEFB $01,$86,$FB,$80,$3F,$68 ;
 $B7F2 DEFB $00,$6D,$38,$00,$0C,$B0 ;
 $B7F8 DEFB $00,$02,$10,$00,$08,$40 ;
 $B7FE DEFB $00,$01,$20,$00,$08,$80 ;
 $B804 DEFB $00,$00,$C0,$00,$05,$00 ;
 $B80A DEFB $00,$00,$00,$00,$02,$00 ;
 $B810 DEFB $00,$00,$00,$00,$00,$00 ;
 $B816 DEFB $00,$00,$00,$00,$00,$00 ;
 $B81C DEFB $00,$00,$00,$00,$00,$00 ;
 $B822 DEFB $00,$00,$15,$50,$00,$00 ;
 $B828 DEFB $00,$00,$AA,$AA,$00,$00 ;
 $B82E DEFB $00,$01,$55,$55,$40,$00 ;
 $B834 DEFB $00,$02,$AA,$AA,$A0,$00 ;
 $B83A DEFB $00,$05,$55,$55,$50,$00 ;
 $B840 DEFB $00,$02,$AA,$AA,$A0,$00 ;
 $B846 DEFB $00,$01,$55,$55,$40,$00 ;
 $B84C DEFB $00,$00,$AA,$AA,$00,$00 ;
 $B852 DEFB $00,$00,$00,$00,$00,$00 ;
 $B858 DEFB $00,$00,$00,$00,$00,$00 ;
 $B85E DEFB $00,$00,$00,$00,$00,$00 ;
 $B864 DEFB $00,$00,$00,$00,$00,$00 ;
 $B86A DEFB $00,$00,$00,$00,$00,$00 ; }
; Bandit 7 (floor | $27)
@label=CHARACTER_27
 $B870 DEFB $00,$00,$00,$00,$00,$00 ; {#CHARACTERS(character-27*)
 $B876 DEFB $00,$00,$00,$00,$00,$00 ;
 $B87C DEFB $00,$00,$00,$00,$00,$00 ;
 $B882 DEFB $00,$00,$00,$00,$00,$00 ;
 $B888 DEFB $00,$00,$00,$00,$00,$00 ;
 $B88E DEFB $00,$00,$00,$00,$00,$00 ;
 $B894 DEFB $00,$00,$00,$00,$00,$00 ;
 $B89A DEFB $00,$00,$00,$00,$00,$00 ;
 $B8A0 DEFB $00,$00,$00,$00,$00,$00 ;
 $B8A6 DEFB $00,$00,$00,$00,$00,$00 ;
 $B8AC DEFB $00,$00,$00,$00,$00,$00 ;
 $B8B2 DEFB $00,$00,$00,$00,$00,$00 ;
 $B8B8 DEFB $00,$00,$00,$00,$00,$00 ;
 $B8BE DEFB $00,$00,$00,$00,$00,$00 ;
 $B8C4 DEFB $00,$00,$00,$00,$00,$00 ;
 $B8CA DEFB $00,$00,$00,$00,$00,$00 ;
 $B8D0 DEFB $00,$00,$00,$00,$00,$00 ;
 $B8D6 DEFB $00,$00,$00,$00,$00,$00 ;
 $B8DC DEFB $00,$00,$00,$00,$00,$00 ;
 $B8E2 DEFB $00,$00,$00,$00,$00,$00 ;
 $B8E8 DEFB $00,$00,$00,$00,$00,$00 ;
 $B8EE DEFB $00,$00,$00,$00,$00,$00 ;
 $B8F4 DEFB $00,$00,$00,$00,$00,$00 ;
 $B8FA DEFB $00,$00,$00,$00,$00,$00 ;
 $B900 DEFB $00,$00,$00,$00,$00,$00 ;
 $B906 DEFB $00,$00,$00,$00,$00,$00 ;
 $B90C DEFB $00,$00,$00,$00,$00,$00 ;
 $B912 DEFB $00,$00,$00,$00,$00,$00 ;
 $B918 DEFB $00,$00,$00,$00,$00,$00 ;
 $B91E DEFB $00,$00,$00,$00,$00,$00 ;
 $B924 DEFB $00,$00,$00,$00,$00,$00 ;
 $B92A DEFB $00,$00,$00,$00,$00,$00 ;
 $B930 DEFB $00,$00,$00,$00,$00,$00 ;
 $B936 DEFB $00,$00,$00,$00,$00,$00 ;
 $B93C DEFB $00,$00,$00,$00,$00,$00 ;
 $B942 DEFB $00,$00,$00,$00,$00,$00 ;
 $B948 DEFB $00,$00,$00,$00,$00,$00 ;
 $B94E DEFB $00,$00,$00,$00,$00,$00 ;
 $B954 DEFB $00,$00,$00,$00,$00,$00 ;
 $B95A DEFB $00,$00,$00,$00,$00,$00 ;
 $B960 DEFB $00,$00,$00,$00,$00,$00 ;
 $B966 DEFB $00,$00,$00,$00,$00,$00 ;
 $B96C DEFB $00,$00,$00,$00,$00,$00 ;
 $B972 DEFB $00,$00,$00,$00,$00,$00 ;
 $B978 DEFB $00,$00,$00,$00,$00,$00 ;
 $B97E DEFB $00,$00,$00,$00,$00,$00 ;
 $B984 DEFB $00,$00,$00,$00,$00,$00 ;
 $B98A DEFB $00,$00,$00,$00,$00,$00 ;
 $B990 DEFB $00,$00,$00,$00,$00,$00 ;
 $B996 DEFB $00,$00,$00,$00,$00,$00 ;
 $B99C DEFB $00,$00,$00,$00,$00,$00 ;
 $B9A2 DEFB $00,$00,$00,$00,$00,$00 ;
 $B9A8 DEFB $00,$00,$00,$00,$00,$00 ;
 $B9AE DEFB $00,$00,$00,$00,$00,$00 ;
 $B9B4 DEFB $00,$00,$00,$00,$00,$00 ;
 $B9BA DEFB $00,$00,$00,$00,$00,$00 ;
 $B9C0 DEFB $00,$00,$00,$00,$00,$00 ;
 $B9C6 DEFB $00,$00,$00,$00,$00,$00 ;
 $B9CC DEFB $00,$00,$00,$00,$00,$00 ;
 $B9D2 DEFB $00,$00,$00,$00,$00,$00 ;
 $B9D8 DEFB $00,$00,$00,$00,$00,$00 ;
 $B9DE DEFB $00,$00,$00,$00,$00,$00 ;
 $B9E4 DEFB $00,$00,$00,$00,$00,$00 ;
 $B9EA DEFB $00,$00,$00,$00,$00,$00 ;
 $B9F0 DEFB $00,$00,$00,$00,$00,$00 ;
 $B9F6 DEFB $00,$00,$00,$00,$00,$00 ;
 $B9FC DEFB $00,$00,$00,$00,$00,$00 ;
 $BA02 DEFB $00,$00,$00,$FE,$00,$00 ;
 $BA08 DEFB $00,$00,$01,$FB,$00,$00 ;
 $BA0E DEFB $00,$00,$07,$FB,$E0,$00 ;
 $BA14 DEFB $00,$00,$0F,$13,$F0,$00 ;
 $BA1A DEFB $00,$00,$3F,$D7,$F8,$06 ;
 $BA20 DEFB $00,$00,$7F,$FF,$FC,$19 ;
 $BA26 DEFB $07,$E0,$FC,$CC,$3E,$31 ;
 $BA2C DEFB $08,$19,$FF,$FF,$FF,$61 ;
 $BA32 DEFB $08,$0F,$FF,$EF,$FF,$C1 ;
 $BA38 DEFB $08,$07,$FF,$EF,$FF,$81 ;
 $BA3E DEFB $06,$03,$FF,$FF,$FE,$C2 ;
 $BA44 DEFB $01,$86,$FE,$00,$FD,$6C ;
 $BA4A DEFB $02,$ED,$3F,$FF,$F8,$B8 ;
 $BA50 DEFB $01,$52,$15,$FF,$78,$50 ;
 $BA56 DEFB $00,$AC,$2A,$FE,$B8,$A8 ;
 $BA5C DEFB $00,$56,$75,$55,$5D,$50 ;
 $BA62 DEFB $00,$2B,$EA,$02,$AE,$A0 ;
 $BA68 DEFB $00,$15,$50,$00,$55,$40 ;
 $BA6E DEFB $00,$00,$00,$00,$00,$00 ;
 $BA74 DEFB $00,$00,$00,$00,$00,$00 ;
 $BA7A DEFB $00,$00,$00,$00,$00,$00 ; }
; #UDGARRAY*character-24,100;character-25;character-26;character-27(julius-frames)

; Door Frame 1
;
; The door is shut.
@label=DOOR_FRAME_1
b$BA80 DEFB $00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY7,attr=48,scale=4,step=7;(#PC)-(#PC+$236)-$01-$38(door-1)
 $BA87 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $BA8E DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $BA95 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $BA9C DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $BAA3 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $BAAA DEFB $00,$3F,$FF,$FF,$FF,$FC,$00 ;
 $BAB1 DEFB $00,$20,$00,$00,$00,$0C,$00 ;
 $BAB8 DEFB $00,$10,$00,$00,$00,$14,$00 ;
 $BABF DEFB $00,$28,$00,$00,$00,$24,$00 ;
 $BAC6 DEFB $00,$14,$00,$00,$00,$44,$00 ;
 $BACD DEFB $00,$2A,$07,$FF,$FF,$84,$00 ;
 $BAD4 DEFB $00,$15,$00,$00,$00,$84,$00 ;
 $BADB DEFB $00,$2A,$00,$00,$00,$84,$00 ;
 $BAE2 DEFB $00,$15,$00,$00,$00,$84,$00 ;
 $BAE9 DEFB $00,$2A,$00,$00,$00,$84,$0F ;
 $BAF0 DEFB $00,$15,$00,$00,$00,$84,$08 ;
 $BAF7 DEFB $00,$2A,$00,$00,$00,$84,$0A ;
 $BAFE DEFB $00,$15,$00,$00,$00,$84,$0A ;
 $BB05 DEFB $00,$2A,$00,$00,$00,$84,$08 ;
 $BB0C DEFB $00,$15,$00,$00,$00,$04,$08 ;
 $BB13 DEFB $00,$2A,$00,$00,$00,$04,$08 ;
 $BB1A DEFB $00,$15,$FF,$FF,$FF,$C4,$08 ;
 $BB21 DEFB $00,$2B,$FF,$FF,$FF,$E4,$0A ;
 $BB28 DEFB $00,$17,$FF,$FF,$FF,$F4,$0A ;
 $BB2F DEFB $00,$2F,$FF,$FF,$FF,$FC,$08 ;
 $BB36 DEFB $00,$3F,$FF,$FF,$FF,$FC,$0F ;
 $BB3D DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $BB44 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $BB4B DEFB $00,$3F,$FF,$FF,$FF,$F8,$00 ;
 $BB52 DEFB $00,$10,$00,$00,$00,$18,$00 ;
 $BB59 DEFB $00,$28,$00,$00,$00,$28,$00 ;
 $BB60 DEFB $00,$14,$00,$00,$00,$48,$00 ;
 $BB67 DEFB $00,$2A,$00,$00,$00,$88,$00 ;
 $BB6E DEFB $00,$15,$1F,$FF,$FF,$08,$00 ;
 $BB75 DEFB $00,$2A,$00,$00,$01,$08,$00 ;
 $BB7C DEFB $00,$15,$00,$00,$01,$08,$00 ;
 $BB83 DEFB $00,$2A,$00,$00,$01,$08,$00 ;
 $BB8A DEFB $00,$15,$00,$00,$01,$08,$00 ;
 $BB91 DEFB $00,$2A,$00,$00,$01,$08,$00 ;
 $BB98 DEFB $7F,$95,$00,$00,$01,$08,$00 ;
 $BB9F DEFB $40,$AA,$00,$00,$01,$08,$00 ;
 $BBA6 DEFB $40,$95,$00,$00,$01,$08,$00 ;
 $BBAD DEFB $4C,$AA,$00,$00,$01,$08,$00 ;
 $BBB4 DEFB $52,$95,$00,$00,$00,$08,$00 ;
 $BBBB DEFB $52,$AB,$FF,$FF,$FF,$08,$00 ;
 $BBC2 DEFB $52,$97,$FF,$FF,$FF,$88,$00 ;
 $BBC9 DEFB $4C,$AF,$FF,$FF,$FF,$C8,$00 ;
 $BBD0 DEFB $40,$9F,$FF,$FF,$FF,$E8,$00 ;
 $BBD7 DEFB $4C,$BF,$FF,$FF,$FF,$F8,$00 ;
 $BBDE DEFB $4C,$80,$00,$00,$00,$00,$00 ;
 $BBE5 DEFB $44,$80,$00,$00,$00,$00,$00 ;
 $BBEC DEFB $44,$80,$00,$00,$00,$00,$00 ;
 $BBF3 DEFB $40,$80,$00,$00,$00,$00,$00 ;
 $BBFA DEFB $40,$80,$00,$00,$00,$00,$00 ;
 $BC01 DEFB $7F,$80,$00,$00,$00,$00,$00 ;
 $BC08 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $BC0F DEFB $05,$FF,$FF,$FF,$FF,$FF,$80 ;
 $BC16 DEFB $02,$00,$00,$00,$00,$01,$80 ;
 $BC1D DEFB $05,$00,$00,$00,$00,$02,$80 ;
 $BC24 DEFB $02,$80,$00,$00,$00,$04,$80 ;
 $BC2B DEFB $05,$43,$FF,$FF,$FF,$F8,$80 ;
 $BC32 DEFB $02,$80,$00,$00,$00,$10,$80 ;
 $BC39 DEFB $05,$40,$00,$00,$00,$10,$80 ;
 $BC40 DEFB $02,$80,$00,$00,$00,$10,$8F ;
 $BC47 DEFB $05,$40,$00,$00,$00,$10,$88 ;
 $BC4E DEFB $02,$80,$00,$00,$00,$10,$8A ;
 $BC55 DEFB $05,$40,$00,$00,$00,$10,$8A ;
 $BC5C DEFB $02,$80,$00,$00,$00,$10,$88 ;
 $BC63 DEFB $05,$40,$00,$00,$00,$10,$88 ;
 $BC6A DEFB $02,$80,$00,$00,$00,$10,$88 ;
 $BC71 DEFB $05,$40,$00,$00,$00,$10,$88 ;
 $BC78 DEFB $02,$80,$00,$00,$00,$10,$8A ;
 $BC7F DEFB $05,$40,$00,$00,$00,$10,$8A ;
 $BC86 DEFB $02,$80,$00,$00,$00,$10,$88 ;
 $BC8D DEFB $05,$40,$00,$00,$00,$10,$8F ;
 $BC94 DEFB $02,$80,$00,$00,$00,$00,$80 ;
 $BC9B DEFB $05,$40,$00,$00,$00,$00,$80 ;
 $BCA2 DEFB $02,$80,$00,$00,$00,$00,$80 ;
 $BCA9 DEFB $05,$7F,$FF,$FF,$FF,$F0,$80 ;
 $BCB0 DEFB $02,$FF,$FF,$FF,$FF,$F8,$80 ;
 $BCB7 DEFB $05,$FF,$FF,$FF,$FF,$FC,$80 ;
 $BCBE DEFB $03,$FF,$FF,$FF,$FF,$FE,$80 ;
 $BCC5 DEFB $05,$FF,$FF,$FF,$FF,$FF,$80 ;
 $BCCC DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $BCD3 DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $BCDA DEFB $00,$00,$00,$00,$00,$00,$00 ;
 $BCE1 DEFB $00,$00,$00,$00,$00,$00,$00 ; }

; Door Frame 2
;
; The door is only slightly open.
@label=DOOR_FRAME_2
b$BCE8 DEFB $FF,$FF,$FF,$FF,$FF ; {#UDGARRAY5,attr=48,scale=4,step=5;(#PC)-(#PC+$194)-$01-$28(door-2)
 $BCED DEFB $88,$0F,$FF,$FF,$FF ;
 $BCF2 DEFB $88,$00,$0F,$FF,$FF ;
 $BCF7 DEFB $88,$00,$00,$07,$FF ;
 $BCFC DEFB $88,$00,$00,$00,$07 ;
 $BD01 DEFB $88,$00,$00,$00,$00 ;
 $BD06 DEFB $88,$00,$00,$00,$00 ;
 $BD0B DEFB $88,$01,$F8,$00,$00 ;
 $BD10 DEFB $88,$02,$87,$F8,$00 ;
 $BD15 DEFB $88,$01,$40,$06,$00 ;
 $BD1A DEFB $88,$02,$A0,$0A,$00 ;
 $BD1F DEFB $88,$01,$51,$FA,$00 ;
 $BD24 DEFB $88,$02,$A0,$0A,$00 ;
 $BD29 DEFB $88,$01,$50,$0A,$00 ;
 $BD2E DEFB $88,$02,$A0,$0A,$00 ;
 $BD33 DEFB $88,$01,$50,$0A,$00 ;
 $BD38 DEFB $88,$02,$A0,$0A,$07 ;
 $BD3D DEFB $88,$01,$50,$0A,$04 ;
 $BD42 DEFB $88,$02,$A0,$0A,$05 ;
 $BD47 DEFB $88,$01,$50,$0A,$05 ;
 $BD4C DEFB $88,$02,$A0,$0A,$04 ;
 $BD51 DEFB $88,$01,$50,$0A,$04 ;
 $BD56 DEFB $88,$02,$AF,$E2,$04 ;
 $BD5B DEFB $88,$01,$7F,$F2,$05 ;
 $BD60 DEFB $88,$02,$FF,$FA,$05 ;
 $BD65 DEFB $88,$01,$FF,$FE,$05 ;
 $BD6A DEFB $88,$00,$00,$00,$06 ;
 $BD6F DEFB $88,$00,$00,$00,$00 ;
 $BD74 DEFB $88,$00,$00,$00,$00 ;
 $BD79 DEFB $88,$03,$FF,$FE,$00 ;
 $BD7E DEFB $88,$01,$00,$06,$00 ;
 $BD83 DEFB $88,$02,$80,$0A,$00 ;
 $BD88 DEFB $88,$01,$53,$E2,$00 ;
 $BD8D DEFB $88,$02,$A0,$0A,$00 ;
 $BD92 DEFB $88,$01,$50,$0A,$00 ;
 $BD97 DEFB $88,$02,$A0,$0A,$00 ;
 $BD9C DEFB $88,$01,$50,$0A,$00 ;
 $BDA1 DEFB $88,$02,$A0,$0A,$00 ;
 $BDA6 DEFB $88,$01,$50,$0A,$00 ;
 $BDAB DEFB $88,$02,$A0,$0A,$00 ;
 $BDB0 DEFB $8B,$F1,$50,$0A,$00 ;
 $BDB5 DEFB $8A,$12,$A0,$0A,$00 ;
 $BDBA DEFB $8A,$71,$50,$0A,$00 ;
 $BDBF DEFB $8A,$92,$A0,$0A,$00 ;
 $BDC4 DEFB $8A,$91,$50,$0A,$00 ;
 $BDC9 DEFB $8A,$92,$A1,$E2,$00 ;
 $BDCE DEFB $8A,$91,$7F,$F2,$00 ;
 $BDD3 DEFB $8A,$72,$BF,$FA,$00 ;
 $BDD8 DEFB $8A,$11,$7F,$FE,$00 ;
 $BDDD DEFB $8A,$D2,$FE,$00,$00 ;
 $BDE2 DEFB $8A,$D0,$00,$00,$00 ;
 $BDE7 DEFB $8A,$50,$00,$00,$00 ;
 $BDEC DEFB $8A,$50,$00,$00,$00 ;
 $BDF1 DEFB $8A,$10,$00,$00,$00 ;
 $BDF6 DEFB $8A,$70,$00,$00,$00 ;
 $BDFB DEFB $8B,$80,$00,$00,$00 ;
 $BE00 DEFB $88,$00,$00,$00,$00 ;
 $BE05 DEFB $88,$00,$00,$00,$00 ;
 $BE0A DEFB $88,$00,$03,$FF,$C0 ;
 $BE0F DEFB $88,$01,$FE,$00,$40 ;
 $BE14 DEFB $88,$3F,$00,$01,$40 ;
 $BE19 DEFB $88,$40,$00,$02,$40 ;
 $BE1E DEFB $88,$20,$00,$FD,$40 ;
 $BE23 DEFB $88,$50,$1F,$01,$41 ;
 $BE28 DEFB $88,$2A,$E0,$01,$44 ;
 $BE2D DEFB $88,$55,$00,$01,$45 ;
 $BE32 DEFB $88,$2A,$00,$01,$45 ;
 $BE37 DEFB $88,$55,$00,$01,$44 ;
 $BE3C DEFB $88,$2A,$00,$01,$44 ;
 $BE41 DEFB $88,$55,$00,$01,$44 ;
 $BE46 DEFB $88,$2A,$00,$01,$44 ;
 $BE4B DEFB $88,$55,$00,$01,$45 ;
 $BE50 DEFB $88,$2A,$00,$01,$45 ;
 $BE55 DEFB $88,$55,$00,$01,$46 ;
 $BE5A DEFB $88,$2A,$00,$01,$44 ;
 $BE5F DEFB $88,$55,$00,$00,$40 ;
 $BE64 DEFB $88,$2A,$00,$00,$40 ;
 $BE69 DEFB $88,$55,$00,$0F,$40 ;
 $BE6E DEFB $88,$2A,$01,$FF,$C0 ;
 $BE73 DEFB $88,$55,$3F,$FF,$C0 ;
 $BE78 DEFB $88,$2F,$FF,$E0,$00 ;
 $BE7D DEFB $88,$5F,$FC,$00,$00 ;
 $BE82 DEFB $88,$3F,$00,$00,$00 ;
 $BE87 DEFB $88,$5C,$00,$00,$07 ;
 $BE8C DEFB $88,$00,$00,$00,$FF ;
 $BE91 DEFB $88,$00,$00,$3F,$FF ;
 $BE96 DEFB $88,$00,$3F,$FF,$FF ;
 $BE9B DEFB $FF,$FF,$FF,$FF,$FF ; }

; Door Frame 3
;
; The door is nearly fully open.
@label=DOOR_FRAME_3
b$BEA0 DEFB $FF,$FF,$FF ; {#UDGARRAY3,attr=48,scale=4,step=3;(#PC)-(#PC+$F2)-$01-$18(door-3)
 $BEA3 DEFB $84,$7F,$FF ;
 $BEA6 DEFB $84,$03,$FF ;
 $BEA9 DEFB $84,$00,$7F ;
 $BEAC DEFB $84,$00,$0F ;
 $BEAF DEFB $84,$08,$01 ;
 $BEB2 DEFB $84,$0E,$00 ;
 $BEB5 DEFB $84,$15,$80 ;
 $BEB8 DEFB $84,$0A,$60 ;
 $BEBB DEFB $84,$15,$10 ;
 $BEBE DEFB $84,$0A,$50 ;
 $BEC1 DEFB $84,$15,$30 ;
 $BEC4 DEFB $84,$0A,$10 ;
 $BEC7 DEFB $84,$15,$10 ;
 $BECA DEFB $84,$0A,$10 ;
 $BECD DEFB $84,$15,$10 ;
 $BED0 DEFB $84,$0A,$11 ;
 $BED3 DEFB $84,$15,$11 ;
 $BED6 DEFB $84,$0A,$11 ;
 $BED9 DEFB $84,$15,$11 ;
 $BEDC DEFB $84,$0A,$11 ;
 $BEDF DEFB $84,$15,$11 ;
 $BEE2 DEFB $84,$0A,$11 ;
 $BEE5 DEFB $84,$15,$F1 ;
 $BEE8 DEFB $84,$0B,$F1 ;
 $BEEB DEFB $84,$17,$F1 ;
 $BEEE DEFB $84,$00,$00 ;
 $BEF1 DEFB $84,$00,$00 ;
 $BEF4 DEFB $84,$00,$00 ;
 $BEF7 DEFB $84,$0B,$F0 ;
 $BEFA DEFB $84,$14,$10 ;
 $BEFD DEFB $84,$0A,$10 ;
 $BF00 DEFB $84,$15,$70 ;
 $BF03 DEFB $84,$0A,$10 ;
 $BF06 DEFB $84,$15,$10 ;
 $BF09 DEFB $84,$0A,$10 ;
 $BF0C DEFB $84,$15,$10 ;
 $BF0F DEFB $84,$0A,$10 ;
 $BF12 DEFB $84,$15,$10 ;
 $BF15 DEFB $84,$0A,$10 ;
 $BF18 DEFB $85,$D5,$10 ;
 $BF1B DEFB $85,$4A,$10 ;
 $BF1E DEFB $85,$D5,$10 ;
 $BF21 DEFB $85,$2A,$10 ;
 $BF24 DEFB $85,$35,$10 ;
 $BF27 DEFB $85,$2A,$F0 ;
 $BF2A DEFB $85,$35,$F0 ;
 $BF2D DEFB $85,$2B,$F0 ;
 $BF30 DEFB $85,$57,$F0 ;
 $BF33 DEFB $85,$CF,$80 ;
 $BF36 DEFB $85,$40,$00 ;
 $BF39 DEFB $85,$40,$00 ;
 $BF3C DEFB $85,$40,$00 ;
 $BF3F DEFB $85,$40,$00 ;
 $BF42 DEFB $85,$40,$00 ;
 $BF45 DEFB $85,$40,$00 ;
 $BF48 DEFB $85,$80,$00 ;
 $BF4B DEFB $84,$00,$00 ;
 $BF4E DEFB $84,$00,$00 ;
 $BF51 DEFB $84,$01,$E0 ;
 $BF54 DEFB $84,$5E,$10 ;
 $BF57 DEFB $84,$20,$10 ;
 $BF5A DEFB $84,$50,$08 ;
 $BF5D DEFB $84,$28,$1C ;
 $BF60 DEFB $84,$54,$65 ;
 $BF63 DEFB $84,$2A,$85 ;
 $BF66 DEFB $84,$55,$05 ;
 $BF69 DEFB $84,$2A,$05 ;
 $BF6C DEFB $84,$55,$05 ;
 $BF6F DEFB $84,$2A,$05 ;
 $BF72 DEFB $84,$55,$05 ;
 $BF75 DEFB $84,$2A,$05 ;
 $BF78 DEFB $84,$55,$05 ;
 $BF7B DEFB $84,$2A,$05 ;
 $BF7E DEFB $84,$55,$04 ;
 $BF81 DEFB $84,$2A,$04 ;
 $BF84 DEFB $84,$55,$04 ;
 $BF87 DEFB $84,$2A,$04 ;
 $BF8A DEFB $84,$55,$1C ;
 $BF8D DEFB $84,$2A,$FC ;
 $BF90 DEFB $84,$57,$E0 ;
 $BF93 DEFB $84,$2F,$00 ;
 $BF96 DEFB $84,$78,$00 ;
 $BF99 DEFB $84,$00,$0F ;
 $BF9C DEFB $84,$00,$7F ;
 $BF9F DEFB $84,$03,$FF ;
 $BFA2 DEFB $84,$3F,$FF ;
 $BFA5 DEFB $FF,$FF,$FF ; }

; Door Frame 4
;
; The door is fully open.
@label=DOOR_FRAME_4
b$BFA8 DEFB $7E      ; {#UDGARRAY1,attr=48,scale=4,step=1;(#PC)-(#PC+$50)-$01-$08(door-4)
 $BFA9 DEFB $40      ;
 $BFAA DEFB $40      ;
 $BFAB DEFB $40      ;
 $BFAC DEFB $40      ;
 $BFAD DEFB $40      ;
 $BFAE DEFB $40      ;
 $BFAF DEFB $40      ;
 $BFB0 DEFB $40      ;
 $BFB1 DEFB $40      ;
 $BFB2 DEFB $40      ;
 $BFB3 DEFB $40      ;
 $BFB4 DEFB $40      ;
 $BFB5 DEFB $40      ;
 $BFB6 DEFB $40      ;
 $BFB7 DEFB $40      ;
 $BFB8 DEFB $40      ;
 $BFB9 DEFB $40      ;
 $BFBA DEFB $40      ;
 $BFBB DEFB $40      ;
 $BFBC DEFB $40      ;
 $BFBD DEFB $40      ;
 $BFBE DEFB $40      ;
 $BFBF DEFB $40      ;
 $BFC0 DEFB $40      ;
 $BFC1 DEFB $40      ;
 $BFC2 DEFB $40      ;
 $BFC3 DEFB $40      ;
 $BFC4 DEFB $40      ;
 $BFC5 DEFB $40      ;
 $BFC6 DEFB $40      ;
 $BFC7 DEFB $40      ;
 $BFC8 DEFB $40      ;
 $BFC9 DEFB $40      ;
 $BFCA DEFB $40      ;
 $BFCB DEFB $40      ;
 $BFCC DEFB $40      ;
 $BFCD DEFB $40      ;
 $BFCE DEFB $40      ;
 $BFCF DEFB $40      ;
 $BFD0 DEFB $40      ;
 $BFD1 DEFB $40      ;
 $BFD2 DEFB $40      ;
 $BFD3 DEFB $40      ;
 $BFD4 DEFB $40      ;
 $BFD5 DEFB $40      ;
 $BFD6 DEFB $40      ;
 $BFD7 DEFB $40      ;
 $BFD8 DEFB $40      ;
 $BFD9 DEFB $40      ;
 $BFDA DEFB $40      ;
 $BFDB DEFB $40      ;
 $BFDC DEFB $40      ;
 $BFDD DEFB $40      ;
 $BFDE DEFB $40      ;
 $BFDF DEFB $40      ;
 $BFE0 DEFB $40      ;
 $BFE1 DEFB $40      ;
 $BFE2 DEFB $40      ;
 $BFE3 DEFB $40      ;
 $BFE4 DEFB $40      ;
 $BFE5 DEFB $40      ;
 $BFE6 DEFB $40      ;
 $BFE7 DEFB $40      ;
 $BFE8 DEFB $40      ;
 $BFE9 DEFB $40      ;
 $BFEA DEFB $40      ;
 $BFEB DEFB $40      ;
 $BFEC DEFB $40      ;
 $BFED DEFB $40      ;
 $BFEE DEFB $40      ;
 $BFEF DEFB $40      ;
 $BFF0 DEFB $40      ;
 $BFF1 DEFB $40      ;
 $BFF2 DEFB $40      ;
 $BFF3 DEFB $40      ;
 $BFF4 DEFB $40      ;
 $BFF5 DEFB $40      ;
 $BFF6 DEFB $40      ;
 $BFF7 DEFB $40      ;
 $BFF8 DEFB $40      ;
 $BFF9 DEFB $40      ;
 $BFFA DEFB $40      ;
 $BFFB DEFB $40      ;
 $BFFC DEFB $40      ;
 $BFFD DEFB $40      ;
 $BFFE DEFB $40      ;
 $BFFF DEFB $7F      ; }

; BANG!
;
; Used by the routines at #R$C687 and #R$CD47.
@label=BANG
c$C000 CALL $C046                           ; Clear the screen.
 $C003 LD B,$03                             ; {Pass #R$F000 to #R$C061.
 $C005 LD HL,$F000                          ;
 $C008 CALL $C061                           ; }
 $C00B LD B,$03                             ; {Pass #R$F100 to #R$C061.
 $C00D LD HL,$F100                          ;
 $C010 CALL $C061                           ; }
 $C013 LD B,$03                             ; {Pass #R$F200 to #R$C061.
 $C015 LD HL,$F200                          ;
 $C018 CALL $C061                           ; }
 $C01B CALL $6502                           ; {Calls $6502 twice.
 $C01E CALL $6502                           ; }
 $C021 LD B,$06                             ; {Pass #R$F300 to #R$C061.
 $C023 LD HL,$F300                          ;
 $C026 CALL $C061                           ; }
 $C029 LD B,$05                             ; {Pass #R$F400 to #R$C061.
 $C02B LD HL,$F400                          ;
 $C02E CALL $C061                           ; }
 $C031 LD B,$05                             ; {Pass #R$F500 to #R$C061.
 $C033 LD HL,$F500                          ;
 $C036 CALL $C061                           ; }
 $C039 LD B,$08                             ; {Blanks the display by passing a
 $C03B LD HL,$5000                          ; "clear" part of the screen buffer
 $C03E CALL $C061                           ; to #R$C061.}
 $C041 LD B,$40                             ; {Jump to #R$C06D.
 $C043 JP $C06D                             ; }
@label=PREP_BANG
*$C046 LD HL,$4000                          ; {Writes $00 to all 6144 bytes of
 $C049 LD DE,$4001                          ; the screen buffer (i.e. "blanks
 $C04C LD BC,$17FF                          ; it").
 $C04F LD (HL),$00                          ;
 $C051 LDIR                                 ; }
 $C053 LD HL,$5800                          ; {Continues into the attributes buffer, and writes $02 (red ink) to every location.
 $C056 LD DE,$5801                          ; #TABLE(default,centre)
 $C059 LD BC,$02FF                          ; { =h Value | =h Ink | =h Paper | =h Bright }
 $C05C LD (HL),$02                          ; { $02 | $00 | $00 | $00 }
 $C05E LDIR                                 ; TABLE#}
 $C060 RET                                  ; Returns.
@label=BANG_COPY
*$C061 PUSH BC                              ; {Sets the screen location and the
 $C062 LD BC,$2008                          ; bang image frame sizing, then
 $C065 LD DE,$480C                          ; calls #R$C071, issues a short
 $C068 EX DE,HL                             ; pause and ...
 $C069 CALL $C071                           ;
 $C06C POP BC                               ;
@label=BANG_HALT_LOOP
*$C06D HALT                                 ;
 $C06E DJNZ $C06D                           ; }
 $C070 RET                                  ; ...returns.
@label=BANG_PRINT
*$C071 PUSH BC                              ; {Copy the bang image frame to the
 $C072 PUSH HL                              ; screen buffer.
 $C073 LD B,$00                             ;
 $C075 EX DE,HL                             ;
 $C076 LDIR                                 ;
 $C078 EX DE,HL                             ;
 $C079 POP HL                               ;
 $C07A INC H                                ;
 $C07B LD A,H                               ;
 $C07C AND $07                              ;
 $C07E CALL Z,$C085                         ;
 $C081 POP BC                               ;
 $C082 DJNZ $C071                           ; }
 $C084 RET                                  ; Return.
@label=BANG_NEXT_LINE
*$C085 LD A,H                               ; {Handles working out the next
 $C086 SUB $08                              ; line progressively in the screen
 $C088 LD H,A                               ; buffer.
 $C089 LD A,L                               ;
 $C08A ADD A,$20                            ;
 $C08C LD L,A                               ;
 $C08D RET NC                               ;
 $C08E LD A,H                               ;
 $C08F ADD A,$08                            ;
 $C091 LD H,A                               ; }
 $C092 RET                                  ; Return.
 $C093 DEFB $C3,$90,$EA,$04,$33,$49,$44,$46 ;
 $C09B DEFB $47,$B1,$D2,$04,$32             ;

; Character Set
;
; All characters are 8x16.
;
; .
;
; Lettering.
@label=CHAR_A
b$C0A0 DEFB $00,$00,$28,$6C,$AA,$C6,$82,$44 ; {#CHARACTERSET,7(char-A) Letter
 $C0A8 DEFB $FE,$FE,$C6,$EE,$AA,$EE,$00,$00 ; "A".}
@label=CHAR_B
 $C0B0 DEFB $00,$00,$E8,$AC,$EA,$E6,$62,$6C ; {#CHARACTERSET,7(char-B) Letter
 $C0B8 DEFB $6C,$62,$E6,$EA,$AC,$E8,$00,$00 ; "B".}
@label=CHAR_C
 $C0C0 DEFB $00,$00,$28,$6C,$AA,$E6,$E2,$E0 ; {#CHARACTERSET,7(char-C) Letter
 $C0C8 DEFB $E0,$E2,$E6,$AA,$6C,$28,$00,$00 ; "C".}
@label=CHAR_D
 $C0D0 DEFB $00,$00,$E8,$AC,$EA,$E6,$66,$66 ; {#CHARACTERSET,7(char-D) Letter
 $C0D8 DEFB $66,$66,$E6,$EA,$AC,$E8,$00,$00 ; "D".}
@label=CHAR_E
 $C0E0 DEFB $00,$00,$EC,$AA,$E6,$E2,$60,$6C ; {#CHARACTERSET,7(char-E) Letter
 $C0E8 DEFB $6C,$60,$E2,$E6,$AA,$EC,$00,$00 ; "E".}
@label=CHAR_F
 $C0F0 DEFB $00,$00,$EC,$AA,$E6,$E2,$60,$60 ; {#CHARACTERSET,7(char-F) Letter
 $C0F8 DEFB $6C,$6C,$E0,$E0,$A0,$E0,$00,$00 ; "F".}
@label=CHAR_G
 $C100 DEFB $00,$00,$28,$6C,$AA,$E6,$E2,$E0 ; {#CHARACTERSET,7(char-G) Letter
 $C108 DEFB $EE,$E6,$E6,$AA,$6C,$28,$00,$00 ; "G".}
@label=CHAR_H
 $C110 DEFB $00,$00,$EE,$AA,$EE,$EE,$6C,$7C ; {#CHARACTERSET,7(char-H) Letter
 $C118 DEFB $7C,$6C,$EE,$EE,$AA,$EE,$00,$00 ; "H".}
@label=CHAR_I
 $C120 DEFB $00,$00,$38,$28,$38,$38,$10,$10 ; {#CHARACTERSET,7(char-I) Letter
 $C128 DEFB $10,$10,$38,$38,$28,$38,$00,$00 ; "I".}
@label=CHAR_J
 $C130 DEFB $00,$00,$0E,$0A,$0E,$0E,$04,$04 ; {#CHARACTERSET,7(char-J) Letter
 $C138 DEFB $04,$8E,$CE,$AA,$6C,$28,$00,$00 ; "J".}
@label=CHAR_K
 $C140 DEFB $00,$00,$E2,$A6,$EA,$EC,$68,$60 ; {#CHARACTERSET,7(char-K) Letter
 $C148 DEFB $60,$68,$EC,$EA,$A6,$E2,$00,$00 ; "K".}
@label=CHAR_L
 $C150 DEFB $00,$00,$E0,$A0,$E0,$E0,$40,$40 ; {#CHARACTERSET,7(char-L) Letter
 $C158 DEFB $40,$40,$E6,$E6,$BE,$FE,$00,$00 ; "L".}
@label=CHAR_M
 $C160 DEFB $00,$00,$C6,$EE,$BA,$FE,$54,$54 ; {#CHARACTERSET,7(char-M) Letter
 $C168 DEFB $44,$44,$EE,$EE,$AA,$EE,$00,$00 ; "M".}
@label=CHAR_N
 $C170 DEFB $00,$00,$EE,$AA,$EE,$EE,$64,$74 ; {#CHARACTERSET,7(char-N) Letter
 $C178 DEFB $5C,$4C,$EE,$EE,$AA,$EE,$00,$00 ; "N".}
@label=CHAR_O
 $C180 DEFB $00,$00,$28,$6C,$AA,$C6,$C6,$C6 ; {#CHARACTERSET,7(char-O) Letter
 $C188 DEFB $C6,$C6,$C6,$AA,$6C,$28,$00,$00 ; "O".}
@label=CHAR_P
 $C190 DEFB $00,$00,$E8,$AC,$EA,$E6,$46,$4E ; {#CHARACTERSET,7(char-P) Letter
 $C198 DEFB $54,$58,$E0,$E0,$A0,$E0,$00,$00 ; "P".}
@label=CHAR_Q
 $C1A0 DEFB $00,$00,$28,$6C,$AA,$C6,$C6,$C6 ; {#CHARACTERSET,7(char-Q) Letter
 $C1A8 DEFB $D6,$DA,$CA,$AC,$66,$2A,$00,$00 ; "Q".}
@label=CHAR_R
 $C1B0 DEFB $00,$00,$E8,$AC,$EA,$E6,$46,$4E ; {#CHARACTERSET,7(char-R) Letter
 $C1B8 DEFB $54,$58,$E4,$EA,$A6,$E2,$00,$00 ; "R".}
@label=CHAR_S
 $C1C0 DEFB $00,$00,$2E,$6E,$AA,$CE,$C0,$FC ; {#CHARACTERSET,7(char-S) Letter
 $C1C8 DEFB $7A,$06,$E6,$A6,$EC,$E8,$00,$00 ; "S".}
@label=CHAR_T
 $C1D0 DEFB $00,$00,$FE,$BA,$FE,$D6,$10,$10 ; {#CHARACTERSET,7(char-T) Letter
 $C1D8 DEFB $10,$10,$38,$38,$28,$38,$00,$00 ; "T".}
@label=CHAR_U
 $C1E0 DEFB $00,$00,$EE,$AA,$EE,$C6,$C6,$C6 ; {#CHARACTERSET,7(char-U) Letter
 $C1E8 DEFB $44,$82,$C6,$AA,$6C,$28,$00,$00 ; "U".}
@label=CHAR_V
 $C1F0 DEFB $00,$00,$EE,$AA,$EE,$C6,$C6,$44 ; {#CHARACTERSET,7(char-V) Letter
 $C1F8 DEFB $82,$C6,$6C,$6C,$38,$10,$00,$00 ; "V".}
@label=CHAR_W
 $C200 DEFB $00,$00,$EE,$AA,$EE,$EE,$44,$44 ; {#CHARACTERSET,7(char-W) Letter
 $C208 DEFB $44,$54,$D6,$FE,$EE,$C6,$00,$00 ; "W".}
@label=CHAR_X
 $C210 DEFB $00,$00,$82,$C6,$AA,$6C,$38,$10 ; {#CHARACTERSET,7(char-X) Letter
 $C218 DEFB $10,$38,$6C,$AA,$C6,$82,$00,$00 ; "X".}
@label=CHAR_Y
 $C220 DEFB $00,$00,$0E,$8A,$CE,$AE,$74,$34 ; {#CHARACTERSET,7(char-Y) Letter
 $C228 DEFB $04,$0C,$94,$F8,$50,$20,$00,$00 ; "Y".}
@label=CHAR_Z
 $C230 DEFB $00,$00,$EE,$BA,$FE,$00,$0E,$1C ; {#CHARACTERSET,7(char-Z) Letter
 $C238 DEFB $28,$70,$00,$EE,$BA,$EE,$00,$00 ; "Z".}
; Numbering.
@label=CHAR_1
 $C240 DEFB $00,$00,$0E,$0A,$1E,$2E,$34,$24 ; {#CHARACTERSET,7(char-1) Number
 $C248 DEFB $04,$04,$0E,$0E,$0A,$0E,$00,$00 ; "1".}
@label=CHAR_2
 $C250 DEFB $00,$00,$3C,$5A,$E6,$0E,$1C,$38 ; {#CHARACTERSET,7(char-2) Number
 $C258 DEFB $70,$A0,$CE,$CA,$FE,$FE,$00,$00 ; "2".}
@label=CHAR_3
 $C260 DEFB $00,$00,$FE,$BE,$E6,$0A,$1C,$38 ; {#CHARACTERSET,7(char-3) Number
 $C268 DEFB $3C,$0A,$E6,$A6,$FC,$78,$00,$00 ; "3".}
@label=CHAR_4
 $C270 DEFB $00,$00,$0E,$1A,$3E,$5E,$EE,$CE ; {#CHARACTERSET,7(char-4) Number
 $C278 DEFB $BE,$FE,$04,$0E,$0A,$0E,$00,$00 ; "4".}
@label=CHAR_5
 $C280 DEFB $00,$00,$FE,$FA,$CE,$C0,$C0,$B8 ; {#CHARACTERSET,7(char-5) Number
 $C288 DEFB $7C,$06,$C6,$EE,$74,$38,$00,$00 ; "5".}
@label=CHAR_6
 $C290 DEFB $00,$00,$7C,$FE,$EA,$C6,$C0,$F8 ; {#CHARACTERSET,7(char-6) Number
 $C298 DEFB $F4,$CE,$C6,$AA,$7C,$38,$00,$00 ; "6".}
@label=CHAR_7
 $C2A0 DEFB $00,$00,$FE,$FE,$A6,$E6,$0E,$14 ; {#CHARACTERSET,7(char-7) Number
 $C2A8 DEFB $18,$30,$30,$30,$30,$30,$00,$00 ; "7".}
@label=CHAR_8
 $C2B0 DEFB $00,$00,$38,$7C,$AA,$C6,$6C,$38 ; {#CHARACTERSET,7(char-8) Number
 $C2B8 DEFB $38,$6C,$C6,$AA,$7C,$38,$00,$00 ; "8".}
@label=CHAR_9
 $C2C0 DEFB $00,$00,$38,$74,$AE,$C6,$E6,$5E ; {#CHARACTERSET,7(char-9) Number
 $C2C8 DEFB $3E,$06,$C6,$EE,$BE,$7C,$00,$00 ; "9".}
@label=CHAR_0
 $C2D0 DEFB $00,$00,$38,$7C,$AA,$C6,$C6,$C6 ; {#CHARACTERSET,7(char-0) Number
 $C2D8 DEFB $C6,$C6,$C6,$AA,$7C,$38,$00,$00 ; "0".}

; Routine at C2E0
c$C2E0 NOP           ;
 $C2E1 NOP           ;
 $C2E2 NOP           ;
 $C2E3 NOP           ;
 $C2E4 NOP           ;
 $C2E5 NOP           ;
 $C2E6 NOP           ;
 $C2E7 NOP           ;
 $C2E8 NOP           ;
 $C2E9 NOP           ;
 $C2EA NOP           ;
 $C2EB NOP           ;
 $C2EC NOP           ;
 $C2ED NOP           ;
 $C2EE LD A,($C8FD)  ;
 $C2F1 LD L,A        ;
 $C2F2 LD H,$00      ;
 $C2F4 LD DE,$C2DF   ;
 $C2F7 ADD HL,DE     ;
 $C2F8 LD IX,$C6A8   ;
 $C2FC LD A,(IX+$08) ;
 $C2FF OR (HL)       ;

; Draw Playfield
;
; Used by the routine at #R$CC3A.
@label=DRAW_PLAYFIELD
c$C300 LD L,(IX+$00) ; {Set #R$D5E6 as the destination address at #R$C3B7.
 $C303 LD H,(IX+$01) ;
 $C306 LD ($C3B8),HL ; }
 $C309 LD HL,$4000   ; {Clears the screen buffer by writing $00 to all 6912
 $C30C LD DE,$4001   ; memory locations.
 $C30F LD BC,$1AFF   ;
 $C312 LD (HL),$00   ;
 $C314 LDIR          ; }
; Draws the numbering of the deposit boxes on the left and right of the screen.
 $C316 LD HL,$4001   ; {Points #REGhl to $4001 (screen buffer) and #REGde to
 $C319 LD DE,$DFA0   ; #R$DFA0, then calls the routine at #R$C3B7.
 $C31C LD BC,$080C   ;
 $C31F CALL $C3B7    ; }
 $C322 LD HL,$4013   ; {Points #REGhl to $4013 (screen buffer) and #REGde to
 $C325 LD DE,$E000   ; #R$E000, then calls the routine at #R$C3B7.
 $C328 LD BC,$080C   ;
 $C32B CALL $C3B7    ; }
; Draws the centrepiece "till" image.
 $C32E LD HL,$400E   ; {Points #REGhl to $400E (screen buffer) and #REGde to
 $C331 LD DE,$E060   ; #R$E060, then calls the routine at #R$C3B7.
 $C334 LD B,$18      ;
 $C336 LD C,$04      ;
 $C338 CALL $C3B7    ; }
; Draws the game play area (doors and wall sections).
 $C33B LD HL,$4060   ; {Points #REGhl to $4060 (screen buffer) and #REGde to
 $C33E LD DE,$E0C0   ; #R$E0C0, then calls the routine at #R$C3B7.
 $C341 LD BC,$0820   ;
 $C344 CALL $C3B7    ; }
 $C347 LD HL,$4080   ; {Points #REGhl to $4080 (screen buffer) and #REGde to
 $C34A LD DE,$E1C0   ; #R$E1C0, then calls the routine at #R$C3B7.
 $C34D LD B,$58      ;
 $C34F LD C,$02      ;
 $C351 CALL $C3B7    ; }
 $C354 LD HL,$4089   ; {Points #REGhl to $4089 (screen buffer) and #REGde to
 $C357 LD DE,$E270   ; #R$E270, then calls the routine at #R$C3B7.
 $C35A LD B,$58      ;
 $C35C LD C,$04      ;
 $C35E CALL $C3B7    ; }
 $C361 LD HL,$4094   ; {Points #REGhl to $4094 (screen buffer) and #REGde to
 $C364 LD DE,$E270   ; #R$E270, then calls the routine at #R$C3B7.
 $C367 LD B,$58      ;
 $C369 LD C,$04      ;
 $C36B CALL $C3B7    ; }
 $C36E LD HL,$409F   ; {Points #REGhl to $409F (screen buffer) and #REGde to
 $C371 LD DE,$E3D0   ; #R$E3D0, then calls the routine at #R$C3B7.
 $C374 LD B,$58      ;
 $C376 LD C,$01      ;
 $C378 CALL $C3B7    ; }
 $C37B LD HL,$48E0   ; {Points #REGhl to $48E0 (screen buffer) and #REGde to
 $C37E LD DE,$E428   ; #R$E428, then calls the routine at #R$C3B7.
 $C381 LD BC,$0820   ;
 $C384 CALL $C3B7    ; }
; Draws the Bank Teller desks.
 $C387 LD HL,$5020   ; {Points #REGhl to $5020 (screen buffer) and #REGde to
 $C38A LD DE,$E528   ; #R$E528, then calls the routine at #R$C3B7.
 $C38D LD BC,$2020   ;
 $C390 CALL $C3B7    ; }
; Writes the "SCORE" and "LIVES" labels (these aren't text, they're images).
 $C393 LD HL,$50C1   ; {Points #REGhl to $50C1 (screen buffer) and #REGde to
 $C396 LD DE,$E928   ; #R$E928, then calls the routine at #R$C3B7.
 $C399 LD BC,$1006   ;
 $C39C CALL $C3B7    ; }
 $C39F LD HL,$50B0   ; {Points #REGhl to $50B0 (screen buffer) and #REGde to
 $C3A2 LD DE,$E988   ; #R$E988, then calls the routine at #R$C3B7.
 $C3A5 LD BC,$1606   ;
 $C3A8 CALL $C3B7    ; }
; Copies attribute data to the screen.
 $C3AB LD HL,$ED00   ; {Copies $300 bytes of attribute data from #R$ED00 to
 $C3AE LD DE,$5800   ; $5800.
 $C3B1 LD BC,$0300   ;
 $C3B4 LDIR          ; }
 $C3B6 RET           ; Return.
@label=ALIAS_COPY_ROUTINE
*$C3B7 CALL $D5E6    ; Draws the image pointed to in #REGde to the screen
                     ; location in #REGhl using the dimensions in #REGbc.
 $C3BA RET           ; Return.
 $C3BB JP $EA90      ; {Unused.
 $C3BE NOP           ;
 $C3BF NOP           ; }

; Routine at C3C0
;
; Used by the routine at #R$C7C0.
c$C3C0 CALL $C3DD    ; Call #R$C3DD.
 $C3C3 LD A,($C421)  ; Grab #R$C421.
 $C3C6 JR NC,$C3C9   ;
 $C3C8 INC A         ;
@label=REBUILD
*$C3C9 LD B,$20      ; {Interrupt driven HALT loop ($20 cycles).
@label=REBUILD_HALT_LOOP
*$C3CB HALT          ;
 $C3CC DJNZ $C3CB    ; }
 $C3CE LD E,A        ;
 $C3CF LD HL,($5B86) ; {Is #R$CC59 more than $06?
 $C3D2 LD A,(HL)     ;
 $C3D3 CP $06        ; }
 $C3D5 JR C,$C3D8    ; If so, jump to #R$C3D8.
 $C3D7 NOP           ;
*$C3D8 AND A         ; {If #R$CC59 is zero then return.
 $C3D9 LD A,E        ;
 $C3DA RET NZ        ; }
 $C3DB SCF           ; {Set the carry flag and return.
 $C3DC RET           ; }
; Kicks off the duelling bonus round.
@label=INIT_DUEL
*$C3DD PUSH BC       ; {Stashes #REGbc and #REGde.
 $C3DE PUSH DE       ; }
 $C3DF LD DE,$5B80   ; {Copies $1B of data from #REGhl to #R$5B80.
 $C3E2 LD BC,$001B   ;
 $C3E5 LDIR          ; }
 $C3E7 JP $C422      ; Jump to #R$C422.

; Duel Bonus Round Data.
;
; .
;
; .
;
; Dueller 1 data.
@label=DUEL_DATA
c$C3EA DEFB $00             ; Dueller state ("0" is complete).
 $C3EB DEFB $80             ; Dueller timer.
 $C3EC DEFB $12             ;
 $C3ED DEFB $01             ; Dueller position (1).
 $C3EE DEFB $C5,$40         ; Screen position above dueller to display "EXTRA"
                            ; or points.
 $C3F0 DEFB $00             ;
 $C3F1 DEFB $00             ; Bonus points (x100, e.g. "9" == "900").
 $C3F2 DEFB $01             ;
 $C3F3 DEFB $01             ; Current frame?
 $C3F4 DEFB $12,$13,$14     ; Dueller 1 frames.
 $C3F7 DEFB $00,$08,$08,$0A ;
; Dueller 2 data.
 $C3FB DEFB $00             ; Dueller state ("0" is complete).
 $C3FC DEFB $80             ; Dueller timer.
 $C3FD DEFB $12             ;
 $C3FE DEFB $02             ; Dueller position (2).
 $C3FF DEFB $CD,$40         ; Screen position above dueller to display "EXTRA"
                            ; or points.
 $C401 DEFB $00             ;
 $C402 DEFB $00             ; Bonus points (x100, e.g. "9" == "900").
 $C403 DEFB $01             ;
 $C404 DEFB $01             ; Current frame?
 $C405 DEFB $15,$16,$17     ; Dueller 2 frames.
 $C408 DEFB $00,$08,$08,$0A ;
; Dueller 3 data.
 $C40C DEFB $00             ; Dueller state ("0" is complete).
 $C40D DEFB $80             ; Dueller timer.
 $C40E DEFB $12             ;
 $C40F DEFB $03             ; Dueller position (3).
 $C410 DEFB $D5,$40         ; Screen position above dueller to display "EXTRA"
                            ; or points.
 $C412 DEFB $00             ;
 $C413 DEFB $00             ; Bonus points (x100, e.g. "9" == "900").
 $C414 DEFB $01             ;
 $C415 DEFB $01             ; Current frame?
 $C416 DEFB $18,$19,$1A     ; Dueller 3 frames.
 $C419 DEFB $00,$08,$08,$0A ;
; Buffer holding bonus text.
@label=DUEL_BONUS_TEXT
 $C41D DEFM "900",$FF       ; Bonus text.
; Not sure ... it is used though @todo.
 $C421 DEFB $00             ;

; Duel Bonus Round.
;
; Used by the routine at #R$C3C0.
@label=DUEL_PREP
c$C422 LD HL,$C3EA     ; {Copies $33 bytes of data from #R$C3EA to #R$5BC0 (and
 $C425 LD DE,$5BC0     ; across all three duellists).
 $C428 LD BC,$0033     ;
 $C42B LDIR            ; }
 $C42D POP DE          ;
 $C42E POP BC          ;
 $C42F LD A,B          ;
 $C430 LD IX,$5BC0     ; {Calls #R$C67F with #R$5BC0.
 $C434 CALL $C67F      ; }
 $C437 LD A,C          ;
 $C438 LD IX,$5BD1     ; {Calls #R$C67F with #R$5BD1.
 $C43C CALL $C67F      ; }
 $C43F LD A,D          ;
 $C440 LD IX,$5BE2     ; {Calls #R$C67F with #R$5BE2.
 $C444 CALL $C67F      ; }
 $C447 XOR A           ; {Reset the flags (writes $00 to #R$C6E2, #R$C6E3 and
 $C448 LD HL,$C6E2     ; #R$C6E4).
 $C44B LD (HL),A       ;
 $C44C INC HL          ;
 $C44D LD (HL),A       ;
 $C44E INC HL          ;
 $C44F LD (HL),A       ; }
 $C450 LD A,($C421)    ; #R$C421.
 $C453 OR $01          ;
 $C455 CP $20          ;
 $C457 LD DE,$0001     ;
 $C45A JR NC,$C463     ;
 $C45C LD B,A          ;
 $C45D LD DE,$0020     ;
@label=DUEL_PREP_LOOP
*$C460 DEC DE          ;
 $C461 DJNZ $C460      ;
@label=DUEL_CLEAR_SCREEN
*$C463 LD ($C52E),DE   ; ....
; Clears down the screen buffer.
 $C467 LD HL,$4000     ; {Writes $00 to all 6144 bytes of the screen buffer
 $C46A LD DE,$4001     ; (i.e. "blanks it").
 $C46D LD BC,$1AFF     ;
 $C470 XOR A           ;
 $C471 LD (HL),A       ;
 $C472 LDIR            ; }
; Writes the attributes for the playfield (sky, grass, footer).
 $C474 LD HL,$5880     ; {Writes $28 to $5880 in the attribute buffer $180 times...
 $C477 LD DE,$5881     ; #TABLE(default,centre,centre,centre,centre)
 $C47A LD BC,$0180     ; { =h Value | =h Ink | =h Paper | =h Bright }
 $C47D LD (HL),$28     ; { $00 | $05 | $00 | $00 }
 $C47F LDIR            ; TABLE#}
 $C481 LD (HL),$20     ; {...continuing, writes $20 $80 times...
 $C483 LD BC,$0080     ; #TABLE(default,centre,centre,centre,centre)
 $C486 LDIR            ; { =h Value | =h Ink | =h Paper | =h Bright }
                       ; { $00 | $04 | $00 | $00 }
                       ; TABLE#}
 $C488 LD (HL),$07     ; {...and finally, writes $07 $7F times.
 $C48A LD BC,$007F     ; #TABLE(default,centre,centre,centre,centre)
 $C48D LDIR            ; { =h Value | =h Ink | =h Paper | =h Bright }
                       ; { $07 | $00 | $00 | $00 }
                       ; TABLE#}
; Creates the footer.
 $C48F LD HL,$C655     ; {Point to #R$C655 and print using #R$C6A7.
 $C492 CALL $C6A7      ; }
 $C495 CALL $5B83      ;
 $C498 LD HL,$C64D     ; {Point to #R$C64D and prints using #R$5B80.
 $C49B LD DE,$50C0     ; #TABLE(default,centre,centre,centre,centre)
 $C49E LD BC,$0703     ; { =h Value | =h Ink | =h Paper | =h Bright }
 $C4A1 CALL $5B80      ; { $07 | $07 | $00 | $00 }
                       ; { $03 | $03 | $00 | $00 }
                       ; TABLE#}
 $C4A4 CALL $5B98      ; Writes the players score.
; Initialise duellers.
 $C4A7 LD IX,$5BC0     ; {Initialise #R$5BC0 (draws frame 1).
 $C4AB LD A,(IX+$0A)   ;
 $C4AE CALL $C661      ; }
 $C4B1 LD IX,$5BD1     ; {Initialise #R$5BD1 (draws frame 1).
 $C4B5 LD A,(IX+$0A)   ;
 $C4B8 CALL $C661      ; }
 $C4BB LD IX,$5BE2     ; {Initialise #R$5BE2 (draws frame 1).
 $C4BF LD A,(IX+$0A)   ;
 $C4C2 CALL $C661      ; }
; Count down 5-4-3-2-1...0!
@label=COUNTDOWN_INITIALISE
 $C4C5 LD A,$35        ; {Initialise countdown to "5" seconds ($35 in ASCII),
@label=COUNTDOWN_LOOP
*$C4C7 PUSH AF         ; hold this at #R$C6E0.
 $C4C8 LD ($C6E0),A    ; }
 $C4CB CALL $C6D3      ;
 $C4CE LD B,$31        ; {Short halt loop (1 second pause).
@label=COUNTDOWN_HALT_LOOP
*$C4D0 HALT            ;
 $C4D1 DJNZ $C4D0      ; }
 $C4D3 POP AF          ; {Keep looping back to #R$C4C7 until the countdown is
 $C4D4 DEC A           ; "0" ($30 in ASCII).
 $C4D5 CP $30          ;
 $C4D7 JR NZ,$C4C7     ; }
 $C4D9 LD A,$20        ; {Blank the countdown timer by printing a "SPACE" ($20
 $C4DB LD ($C6E0),A    ; in ASCII) over the top of it.
 $C4DE CALL $C6D3      ; }
 $C4E1 JR $C4F9        ; Jump to #R$C4F9 and start the duel!
@label=DUEL_LOOP
*$C4E3 LD IX,$5BC0     ; {Calls #R$C530 with #R$5BC0.
 $C4E7 CALL $C530      ; }
 $C4EA LD IX,$5BD1     ; {Calls #R$C530 with #R$5BD1.
 $C4EE CALL $C530      ; }
 $C4F1 LD IX,$5BE2     ; {Calls #R$C530 with #R$5BE2.
 $C4F5 CALL $C530      ; }
 $C4F8 RET             ; Return.
; DRAW!
@label=DUEL_START
*$C4F9 LD DE,($C52E)   ; {#REGde=#R$C52E and push it on the stack.
@label=DUEL_START_LOOP
*$C4FD PUSH DE         ; }
 $C4FE CALL $C4E3      ;
 $C501 POP DE          ;
 $C502 DEC DE          ;
 $C503 LD A,D          ;
 $C504 OR E            ;
 $C505 JR NZ,$C4FD     ;
 $C507 LD IX,$5BC0     ;
 $C50B CALL $C58B      ;
 $C50E LD IX,$5BD1     ;
 $C512 CALL $C58B      ;
 $C515 LD IX,$5BE2     ;
 $C519 CALL $C58B      ;
 $C51C LD IX,$5BC0     ;
 $C520 LD A,(IX+$08)   ;
 $C523 OR (IX+$19)     ;
 $C526 OR (IX+$2A)     ;
 $C529 JP Z,$C690      ;
 $C52C JR $C4F9        ;
 $C52E DEFW $001F      ;
@label=DUEL_ACTIONS
*$C530 CALL $C543      ;
 $C533 CALL $C56B      ;
 $C536 CALL $C550      ;
 $C539 CALL $C56B      ;
 $C53C CALL $C55D      ;
 $C53F CALL $C56B      ;
 $C542 RET             ; Return.
@label=DUEL_ACTION_1
*$C543 CALL $5B88      ; Calls #R$5B88.
 $C546 BIT 4,A         ; {Return if bit 4 of #REGa is zero.
 $C548 RET Z           ; }
 $C549 BIT 0,A         ; {If bit 0 is not zero then return setting #REGa to
 $C54B LD A,$03        ; $03.
 $C54D RET NZ          ; }
 $C54E XOR A           ; {Set #REGa to zero and return.
 $C54F RET             ; }
@label=DUEL_ACTION_2
*$C550 CALL $5B88      ; Calls #R$5B88.
 $C553 BIT 4,A         ; {Return if bit 4 of #REGa is zero.
 $C555 RET Z           ; }
 $C556 BIT 1,A         ; {If bit 1 is not zero then return setting #REGa to
 $C558 LD A,$01        ; $01.
 $C55A RET NZ          ; }
 $C55B XOR A           ; {Set #REGa to zero and return.
 $C55C RET             ; }
@label=DUEL_ACTION_3
*$C55D CALL $5B88      ;
 $C560 BIT 4,A         ;
 $C562 RET Z           ;
 $C563 AND $03         ;
 $C565 LD A,$00        ;
 $C567 RET NZ          ;
 $C568 LD A,$02        ;
 $C56A RET             ; Return.
@label=DUEL_ACTION_4
*$C56B CP (IX+$03)     ; {If the dueller position has been changed to zero then
 $C56E JR Z,$C575      ; jump to #R$C575.}
 $C570 LD (IX+$0D),$00 ;
 $C574 RET             ; Return.
@label=DUEL_DUNNO
*$C575 LD A,(IX+$0D)   ;
 $C578 AND A           ;
 $C579 RET NZ          ;
 $C57A LD A,$01        ;
 $C57C LD (IX+$0D),A   ;
 $C57F LD (IX+$00),A   ; Set dueller state to $01.
 $C582 RET             ; Return.
; This entry point is used by the routines at #R$C607 and #R$C6E5.
*$C583 PUSH IX         ;
 $C585 CALL $6500      ;
 $C588 POP IX          ;
 $C58A RET             ;
*$C58B LD A,(IX+$08)   ; {If IX+$08 is zero then return.
 $C58E AND A           ;
 $C58F RET Z           ; }
 $C590 LD A,(IX+$09)   ; {If dueller frame index is $01 then jump to #R$C5A1.
 $C593 DEC A           ;
 $C594 JR Z,$C5A1      ; }
 $C596 DEC A           ; {If dueller frame index is $02 then jump to #R$C5B5.
 $C597 JR Z,$C5B5      ; }
 $C599 DEC A           ; {If dueller frame index is $03 then jump to #R$C5BD.
 $C59A JR Z,$C5BD      ; }
 $C59C DEC A           ; {If dueller frame index is $04 then jump to #R$C5CF.
 $C59D JR Z,$C5CF      ; }
 $C59F JR $C5DD        ; Jump to #R$C5DD.
*$C5A1 LD HL,$C6E5     ; #R$C6E5.
 $C5A4 CALL $C5EB      ;
 $C5A7 DEC (IX+$01)    ;
 $C5AA RET NZ          ;
 $C5AB INC (IX+$09)    ;
 $C5AE LD A,(IX+$0B)   ;
 $C5B1 CALL $C661      ;
 $C5B4 RET             ;
*$C5B5 DEC (IX+$10)    ;
 $C5B8 RET NZ          ;
 $C5B9 INC (IX+$09)    ;
 $C5BC RET             ;
*$C5BD LD HL,$C5F6     ;
 $C5C0 CALL $C5EB      ;
 $C5C3 DEC (IX+$02)    ;
 $C5C6 RET NZ          ;
 $C5C7 LD (IX+$08),A   ;
 $C5CA INC A           ;
 $C5CB LD ($C6E2),A    ;
 $C5CE RET             ;
*$C5CF DEC (IX+$0E)    ;
 $C5D2 RET NZ          ;
 $C5D3 INC (IX+$09)    ;
 $C5D6 LD A,(IX+$0C)   ;
 $C5D9 CALL $C661      ;
 $C5DC RET             ;
*$C5DD DEC (IX+$0F)    ;
 $C5E0 RET NZ          ;
 $C5E1 LD A,$02        ;
 $C5E3 CALL $C661      ;
 $C5E6 LD (IX+$08),$00 ;
 $C5EA RET             ;

; Routine at C5EB
;
; Used by the routine at #R$C422.
@label=DUELLER_DOWN
c$C5EB LD A,(IX+$00) ; {Check if the current duellers state is zero (complete),
 $C5EE AND A         ; return if so.
 $C5EF RET Z         ; }
 $C5F0 XOR A         ; {Mark the current dueller as complete.
 $C5F1 LD (IX+$00),A ; }
 $C5F4 POP AF        ; {Restore #REGa and jump to whatever address is held by
 $C5F5 JP (HL)       ; #REGhl.}
; Not related?
 $C5F6 LD A,(IX+$02) ;
 $C5F9 SRL A         ;
 $C5FB CP $09        ;
 $C5FD LD E,(IX+$04) ;
 $C600 LD D,(IX+$05) ;
 $C603 JR NC,$C628   ;
 $C605 OR $01        ;

; Displays The Bonus Score Text.
;
; Used by the routine at #R$C628.
@label=PRINT_BONUS_SCORE
c$C607 LD (IX+$07),A ; {Stores the ASCII representation of the number at #R$C41D (it adds ASCII "0") so for example 1 ends up being
 $C60A LD HL,$C41D   ;           1 + $30 = $31 (e.g. "1" in ASCII).
 $C60D ADD A,$30     ;
 $C60F LD (HL),A     ; }
 $C610 LD BC,$2928   ; {Print using #R$5B80.
 $C613 CALL $5B80    ; #TABLE(default,centre,centre,centre,centre)
                     ; { =h Value | =h Ink | =h Paper | =h Bright }
                     ; { $29 | $01 | $05 | $00 }
                     ; { $28 | $00 | $05 | $00 }
                     ; TABLE#}
 $C616 CALL $5B8C    ;
 $C619 CALL $5B98    ;
 $C61C INC (IX+$09)  ;
 $C61F JP $C583      ; Jump to #R$C583.

; "Extra" text.
@label=EXTRA_TEXT_COPY
t$C622 DEFM "EXTRA",$FF

; Displays "Extra" and Bonus Score text.
;
; Handles whether to display points or "EXTRA" above each downed Bandit.
@label=DUEL_POINTS
c$C628 LD A,($C6E4)  ; {If #R$C6E4 is NOT zero then award 9(00) bonus points.
 $C62B AND A         ;
 $C62C LD A,$09      ;
 $C62E JR NZ,$C607   ; }
 $C630 LD HL,($5B86) ; {Fetch a 16 bit address from #R$5B86 (#R$CC59), if it is
 $C633 LD A,(HL)     ; higher than $05 then award 9(00) bonus points.
 $C634 CP $05        ;
 $C636 LD A,$09      ;
 $C638 JR NC,$C607   ; }
 $C63A LD HL,$C622   ; {Points to #R$C622 and sends it to #R$5B80.
 $C63D DEC DE        ; #TABLE(default,centre)
 $C63E LD BC,$2A29   ; { =h Value | =h Ink | =h Paper | =h Bright }
 $C641 CALL $5B80    ; { $2A | $02 | $05 | $00 }
                     ; { $29 | $01 | $05 | $00 }
                     ; TABLE#}
 $C644 LD A,$01      ; {Writes $01 to #R$C6E4.
 $C646 LD ($C6E4),A  ; }
 $C649 INC (IX+$09)  ; Move onto the next frame.
 $C64C RET           ; Return.

; Playfield Text
@label=PLAYFIELD_SCORE
t$C64D DEFM " SCORE ",$FF
@label=PLAYFIELD_LIVES
 $C655 DEFM "LIVES",$FF
@label=PLAYFIELD_WHITESPACE
 $C65B DEFM "     ",$FF

; Draw Duel Bandit
;
; Used by the routine at #R$C422.
@label=DUEL_DRAW_BANDIT_PREP
c$C661 CALL $5B8F    ; Fetch the address of the character from the given index
                     ; in #REGa.
 $C664 EX DE,HL      ;
 $C665 LD A,(IX+$03) ; Retrieve the character position.
 $C668 LD HL,$4804   ; {If this character is in position "1" then point to the
 $C66B DEC A         ; screen buffer at $4804 and jump to #R$C677.
 $C66C JR Z,$C677    ; }
 $C66E LD HL,$480C   ; {If this character is in position "2" then point to the
 $C671 DEC A         ; screen buffer at $480C and jump to #R$C677.
 $C672 JR Z,$C677    ; }
 $C674 LD HL,$4814   ; Else this character is in position "3" so point to the
                     ; screen buffer at $4814.
@label=DUEL_DRAW_BANDIT
*$C677 LD B,$58      ; {Call the draw routine with the image dimensions.
 $C679 LD C,$06      ;
 $C67B CALL $5B92    ; }
 $C67E RET           ; Return.

; Routine at C67F
;
; Used by the routine at #R$C422.
@label=DUEL_UPDATE_TIMER
c$C67F AND $3F       ; {Updates dueller timer.
 $C681 OR $40        ;
 $C683 LD (IX+$01),A ; }
 $C686 RET           ; Return.

; Lose A Life
;
; Used by the routine at #R$C690.
@label=LOSE_LIFE
c$C687 CALL $C000    ; Calls the subroutine to display the "BANG" animation.
 $C68A LD HL,($5B86) ; {Decrease the lives counter by one (#R$CC59), set the
 $C68D DEC (HL)      ; zero flag if all lives are lost.
 $C68E AND A         ; }
 $C68F RET           ; Return.

; Is The Duel Finished?
;
; Used by the routine at #R$C422.
@label=DUEL_COMPLETE
c$C690 LD A,($C6E3)  ; {Jump to #R$C6F0 if #R$C6E3 is not zero.
 $C693 AND A         ;
 $C694 JP NZ,$C6F0   ; }
 $C697 LD A,($C6E2)  ; {Jump to #R$C687 if #R$C6E2 is not zero.
 $C69A AND A         ;
 $C69B JP NZ,$C687   ; }
 $C69E LD A,($C6E4)  ; {Jump to #R$C6B1 if #R$C6E4 is not zero.
 $C6A1 AND A         ;
 $C6A2 JP NZ,$C6B1   ; }
 $C6A5 SCF           ; {Set the carry flag and return.
 $C6A6 RET           ; }

; Write "Lives" text.
;
; Used by the routines at #R$C422 and #R$C6B1.
@label=DUEL_PRINT_LIVES
c$C6A7 LD DE,$50D0   ; {Helper routine called from #R$C463 used for writing #R$C655 to the screen using the colours held in #REGbc;
 $C6AA LD BC,$0702   ; #TABLE(default,centre)
 $C6AD CALL $5B80    ; { =h Value | =h Ink | =h Paper | =h Bright }
                     ; { $07 | $07 | $00 | $00 }
                     ; { $02 | $02 | $00 | $00 }
                     ; TABLE#}
 $C6B0 RET           ; Return.

; Duel: Gain Extra Life.
;
; Used by the routine at #R$C690.
@label=DUEL_FLASH_TEXT
c$C6B1 LD B,$08      ; {Alternates displaying #R$C65B and #R$C655 to "flash"
@label=DUEL_FLASH_TEXT_LOOP
*$C6B3 PUSH BC       ; the lives indicator.
 $C6B4 LD HL,$C65B   ;
 $C6B7 CALL $C6A7    ;
 $C6BA LD B,$10      ;
@label=DUEL_FLASH_HALT_LOOP_1
*$C6BC HALT          ;
 $C6BD DJNZ $C6BC    ;
 $C6BF LD HL,$C655   ;
 $C6C2 CALL $C6A7    ;
 $C6C5 LD B,$10      ;
@label=DUEL_FLASH_HALT_LOOP_2
*$C6C7 HALT          ;
 $C6C8 DJNZ $C6C7    ;
 $C6CA POP BC        ;
 $C6CB DJNZ $C6B3    ; }
 $C6CD LD HL,($5B86) ; {Increase the lives counter by one (#R$CC59).
 $C6D0 INC (HL)      ; }
 $C6D1 SCF           ; {Sets the carry flag and returns.
 $C6D2 RET           ; }

; Write "Countdown" text.
;
; Used by the routine at #R$C422.
@label=DUEL_PRINT_COUNTDOWN
c$C6D3 LD HL,$C6E0   ; {Helper routine used for writing #R$C6E0 to the screen using the colours held in #REGbc;
 $C6D6 LD DE,$404F   ; #TABLE(default,centre)
 $C6D9 LD BC,$0703   ; { =h Value | =h Ink | =h Paper | =h Bright }
 $C6DC CALL $5B80    ; { $07 | $07 | $00 | $00 }
                     ; { $03 | $03 | $00 | $00 }
                     ; TABLE#}
 $C6DF RET           ; Return.

; Duel Countdown Timer
@label=DUEL_TIMER
g$C6E0 DEFB $20
 $C6E1 DEFB $FF

; Duel Shot Flag.
;
; See #R$C690 for the clearest example of usage.
@label=DUEL_BANG_FLAG
g$C6E2 DEFB $00      ; Holds $00/ $01 to indicate player has been shot.

; Duel Lost Life Flag.
;
; See #R$C690 for the clearest example of usage.
@label=DUEL_LOSE_LIFE
g$C6E3 DEFB $00      ; Holds $00/ $01 to indicate player should lose a life (as
                     ; they shot too quickly).

; Duel Extra Life Flag.
;
; See #R$C690 for the clearest example of usage.
@label=DUEL_EXTRA_LIFE
g$C6E4 DEFB $00      ; Holds $00/ $01 to indicate player has gained an extra
                     ; life.

; Process Dueller Shot.
@label=DUELLER_SHOT
c$C6E5 LD A,$04      ; {Writes $04 to #R$C6E3.
 $C6E7 LD ($C6E3),A  ; }
 $C6EA LD (IX+$09),A ; Sets the dueller frame index to $04.
 $C6ED JP $C583      ; Jump to #R$C583.

; Flash Life Image.
;
; This routine flashes the last life image eight times, and returns with lives being one less and the carry flag
;       being set.
@label=FLASH_LIFE_IMAGE
c$C6F0 LD HL,($5B86) ; {Decrease #R$CC59 by one.
 $C6F3 DEC (HL)      ; }
 $C6F4 LD B,$08      ; Sets #REGb (the counter) to loop $08 times.
@label=FLASH_LIFE_IMAGE_LOOP
*$C6F6 PUSH BC       ;
 $C6F7 PUSH HL       ;
 $C6F8 INC (HL)      ; {Increase #R$CC59 by one and call #R$5B83.
 $C6F9 CALL $5B83    ; }
 $C6FC LD B,$10      ; {Interrupt driven halt loop.
@label=FLASH_LIFE_IMAGE_HALT_LOOP_1
*$C6FE HALT          ;
 $C6FF DJNZ $C6FE    ; }
 $C701 POP HL        ;
 $C702 PUSH HL       ;
 $C703 DEC (HL)      ; {Decrease #R$CC59 by one and call #R$5B83.
 $C704 CALL $5B83    ; }
 $C707 POP HL        ;
 $C708 LD B,$10      ; {Interrupt driven halt loop.
@label=FLASH_LIFE_IMAGE_HALT_LOOP_2
*$C70A HALT          ;
 $C70B DJNZ $C70A    ; }
 $C70D POP BC        ; {Retrieves #REGb (the counter) from the stack and loop
 $C70E DJNZ $C6F6    ; back until finished.}
 $C710 SCF           ; {Set the carry flag and return.
 $C711 RET           ; }

i$C712

; Data block at C71E
b$C71E DEFB $22,$FB

; Sheriff's Star Page
;
; Used by the routine at #R$C7C0.
@label=SHERIFF_STAR
b$C720 LD HL,$4000   ; {Writes $00 to all 6144 bytes of the screen buffer (i.e.
 $C723 LD DE,$4001   ; "blanks it").
 $C726 LD BC,$1800   ;
 $C729 LD (HL),$00   ;
 $C72B LDIR          ; }
 $C72D LD BC,$02FF   ; {Continues into the attributes buffer, and writes $06 to every location.
 $C730 LD (HL),$06   ; #TABLE(default,centre,centre,centre,centre)
 $C732 LDIR          ; { =h Value | =h Ink | =h Paper | =h Bright }
                     ; { $06 | $06 | $00 | $00 }
                     ; TABLE#}
 $C734 LD HL,$408B   ; {Points to #R$F600 and prints it to the screen using
 $C737 LD DE,$F600   ; #R$5B92.
 $C73A LD BC,$5008   ;
 $C73D CALL $5B92    ; }
 $C740 LD HL,$C765   ; {Points to #R$C765 and prints it to the screen using #R$5B80.
 $C743 LD DE,$5001   ; #TABLE(default,centre,centre,centre,centre)
 $C746 LD BC,$0702   ; { =h Value | =h Ink | =h Paper | =h Bright }
 $C749 CALL $5B80    ; { $07 | $07 | $00 | $00 }
                     ; { $02 | $02 | $00 | $00 }
                     ; TABLE#}
 $C74C LD HL,$C784   ; {Points to #R$C784 and prints it to the screen using #R$5B80.
 $C74F LD DE,$5041   ; #TABLE(default,centre,centre,centre,centre)
 $C752 LD BC,$0702   ; { =h Value | =h Ink | =h Paper | =h Bright }
 $C755 CALL $5B80    ; { $07 | $07 | $00 | $00 }
                     ; { $02 | $02 | $00 | $00 }
                     ; TABLE#}
 $C758 LD HL,$C7A3   ; {Points to #R$C7A3 and prints it to the screen using #R$5B80.
 $C75B LD DE,$5083   ; #TABLE(default,centre,centre,centre,centre)
 $C75E LD BC,$0702   ; { =h Value | =h Ink | =h Paper | =h Bright }
 $C761 CALL $5B80    ; { $07 | $07 | $00 | $00 }
                     ; { $02 | $02 | $00 | $00 }
                     ; TABLE#}
 $C764 RET           ; Return.

; Sheriff's Star Page Text
@label=HEADER_1
t$C765 DEFM "      THIS IS YOUR STAR       ",$FF
@label=HEADER_2
 $C784 DEFM "YOU ARE THE SOFT CITY SHERIFF ",$FF
@label=HEADER_3
 $C7A3 DEFM "    NOW DO YOUR WORK     ",$FF

; Unused
u$C7BD DEFB $C3,$90,$00

; New Game
@label=NEW_GAME
c$C7C0 LD HL,($5C78)                        ; #HTML(Fetch <a
                                            ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>
                                            ; as a random number seed.)
 $C7C3 LD ($D8AC),HL                        ; Write it to #R$D8AC.
 $C7C6 CALL $C7E5                           ; Call #R$C7E5.
 $C7C9 LD HL,$4000                          ; {Clears the screen buffer by
 $C7CC LD DE,$4001                          ; writing $00 to all 6912 memory
 $C7CF LD BC,$1AFF                          ; locations.
 $C7D2 LD (HL),$00                          ;
 $C7D4 LDIR                                 ; }
 $C7D6 LD B,$80                             ; {Calls #R$CD64 with the counter
 $C7D8 CALL $CD64                           ; $80.}
 $C7DB LD HL,$CBB4                          ; {Jump to #R$FA00 with
 $C7DE LD IX,$CD86                          ; #REGhl=#R$CBB4 and
 $C7E2 JP $FA00                             ; #REGix=#R$CD86.}
; Displays the title screen and on return, sets the control method and
; initiates variables for a new game.
@label=INIT_TITLE_SCREEN
*$C7E5 LD HL,$CBB4                          ; {Calls #R$FE00 with
 $C7E8 CALL $FE00                           ; #REGhl=#R$CBB4.}
 $C7EB LD B,$00                             ; Unused.
 $C7ED LD A,($5CB0)                         ; {Grab the value stored at #R$5CB0
 $C7F0 LD HL,$D39B                          ; and if it is $01 then jump ahead
 $C7F3 DEC A                                ; to #R$C7F9 which writes #R$D39B
 $C7F4 JR Z,$C7F9                           ; to #R$CE12.}
 $C7F6 LD HL,$D392                          ; {Write #R$D392 to #R$CE12.
@label=SET_CONTROL_ALIAS
*$C7F9 LD ($CE12),HL                        ; }
; Resets all game variables/ states ready for a new game.
 $C7FC LD HL,$CD86                          ; {Clears the score (writes $00
 $C7FF LD DE,$CD87                          ; over seven bytes from #R$CD86).
 $C802 LD (HL),$00                          ;
 $C804 LD BC,$0006                          ;
 $C807 LDIR                                 ; }
@label=STARTING_LIVES
 $C809 LD A,$03                             ; {Initialise #R$CC59 to $03.
 $C80B LD ($CC59),A                         ; }
 $C80E LD HL,$0101                          ; {Initialise #R$D45C to $0101.
 $C811 LD ($D45C),HL                        ; }
 $C814 LD HL,$0000                          ; {Clears #R$CE14, #R$CE16 and
 $C817 LD ($CE14),HL                        ; #R$CE18 (sets them to $0000).
 $C81A LD ($CE16),HL                        ;
 $C81D LD ($CE18),HL                        ; }
 $C820 LD HL,$2020                          ; {Clear #R$CA58 and #R$CA5A to
 $C823 LD ($CA58),HL                        ; $2020 (ASCII space-space).
 $C826 LD ($CA5A),HL                        ; }
 $C829 LD HL,$CC8D                          ; {Clear down the deposit flags
 $C82C LD DE,$CC8E                          ; (copies $00 to each from
 $C82F LD BC,$000D                          ; #R$CC8D).
 $C832 LD (HL),$00                          ;
 $C834 LDIR                                 ; }
 $C836 XOR A                                ; {Set the border to black.
 $C837 OUT ($FE),A                          ; }
 $C839 INC A                                ; {Write $01 to #R$CBCF.
 $C83A LD ($CBCF),A                         ; }
 $C83D CALL $CA6C                           ;
 $C840 CALL $C959                           ;
 $C843 CALL $CA64                           ;
 $C846 LD A,$03                             ; {Writes $03 to #R$CE1B.
 $C848 LD ($CE1B),A                         ; }
 $C84B LD HL,$0500                          ; {Writes $0500 to #R$CE1C.
 $C84E LD ($CE1C),HL                        ; }
 $C851 LD A,$01                             ; {Writes $01 to #R$D191.
 $C853 LD ($D191),A                         ; }
 $C856 LD A,($5CB1)                         ; {Grabs the #R$5CB1, if it's level
 $C859 LD HL,$CA4A                          ; 1 then jump to #R$C878 with
 $C85C DEC A                                ; #REGhl=#R$CA4A.
 $C85D JR Z,$C878                           ; }
 $C85F CALL $C941                           ;
 $C862 INC (HL)                             ;
 $C863 CALL $C941                           ;
 $C866 INC (HL)                             ;
 $C867 DEC A                                ;
 $C868 JR Z,$C88F                           ;
 $C86A CALL $C941                           ;
 $C86D INC (HL)                             ;
 $C86E CALL $C941                           ;
 $C871 INC (HL)                             ;
 $C872 CALL $C941                           ;
 $C875 INC (HL)                             ;
 $C876 JR $C8B6                             ;
@label=LEVEL_1
*$C878 LD HL,$CE42                          ; {Writes #R$CE42 to #R$CE1F.
 $C87B LD ($CE1F),HL                        ; }
 $C87E CALL $CA81                           ;
 $C881 RET C                                ;
 $C882 LD HL,$CE6F                          ; {Writes #R$CE6F to #R$CE1F.
 $C885 LD ($CE1F),HL                        ; }
 $C888 CALL $C941                           ;
 $C88B CALL $CA81                           ;
 $C88E RET C                                ;
*$C88F LD HL,$CE5F                          ; {Writes #R$CE5F to #R$CE1F.
 $C892 LD ($CE1F),HL                        ; }
 $C895 CALL $C941                           ;
 $C898 CALL $CA81                           ;
 $C89B RET C                                ;
 $C89C LD HL,$CE55                          ; {Writes #R$CE55 to #R$CE1F.
 $C89F LD ($CE1F),HL                        ; }
 $C8A2 CALL $C941                           ;
 $C8A5 CALL $CA81                           ;
 $C8A8 RET C                                ;
 $C8A9 LD HL,$CE7E                          ; {Writes #R$CE7E to #R$CE1F.
 $C8AC LD ($CE1F),HL                        ; }
 $C8AF CALL $C941                           ;
 $C8B2 CALL $CA81                           ;
 $C8B5 RET C                                ;
*$C8B6 LD HL,$CE8D                          ; {Writes #R$CE8D to #R$CE1F.
 $C8B9 LD ($CE1F),HL                        ; }
 $C8BC CALL $C941                           ;
 $C8BF CALL $CA81                           ;
 $C8C2 RET C                                ;
 $C8C3 LD HL,$CE9C                          ; {Writes #R$CE9C to #R$CE1F.
 $C8C6 LD ($CE1F),HL                        ; }
 $C8C9 CALL $C941                           ;
 $C8CC CALL $CA81                           ;
 $C8CF RET C                                ;
 $C8D0 LD HL,$CE9C                          ; {Writes #R$CE9C to #R$CE1F.
 $C8D3 LD ($CE1F),HL                        ; }
 $C8D6 CALL $C941                           ;
 $C8D9 CALL $C95E                           ;
 $C8DC CALL $CA81                           ;
 $C8DF RET C                                ;
 $C8E0 LD HL,$CE9C                          ; {Writes #R$CE9C to #R$CE1F.
 $C8E3 LD ($CE1F),HL                        ; }
 $C8E6 CALL $C941                           ;
 $C8E9 CALL $C963                           ;
 $C8EC CALL $CA81                           ;
 $C8EF RET C                                ;
*$C8F0 CALL $C959                           ;
 $C8F3 CALL $CA64                           ;
 $C8F6 LD B,$07                             ;
*$C8F8 PUSH BC                              ;
 $C8F9 CALL $CA81                           ;
 $C8FC POP BC                               ;
 $C8FD RET C                                ;
 $C8FE PUSH BC                              ;
 $C8FF CALL $C941                           ;
 $C902 POP BC                               ;
 $C903 DJNZ $C8F8                           ;
 $C905 CALL $C95E                           ;
 $C908 CALL $CA81                           ;
 $C90B RET C                                ;
 $C90C CALL $C963                           ;
 $C90F CALL $CA81                           ;
 $C912 RET C                                ;
 $C913 LD HL,$D191                          ;
 $C916 LD A,(HL)                            ;
 $C917 LD (HL),$00                          ;
 $C919 AND A                                ;
 $C91A JR Z,$C8F0                           ;
 $C91C LD HL,$CBB4                          ;
 $C91F LD DE,$5B80                          ;
 $C922 LD BC,$0040                          ;
 $C925 LDIR                                 ;
 $C927 CALL $C720                           ; Call #R$C720.
 $C92A CALL $CD64                           ;
 $C92D CALL $CD64                           ;
 $C930 CALL $CD64                           ;
 $C933 CALL $CD64                           ;
*$C936 XOR A                                ;
 $C937 IN A,($FE)                           ;
 $C939 OR $E0                               ;
 $C93B INC A                                ;
 $C93C JR Z,$C936                           ;
 $C93E NOP                                  ;
 $C93F JR $C8F0                             ;
*$C941 PUSH AF                              ;
 $C942 PUSH HL                              ;
 $C943 LD HL,($CE1C)                        ;
 $C946 LD BC,$0040                          ;
 $C949 AND A                                ;
 $C94A SBC HL,BC                            ;
 $C94C LD A,H                               ;
 $C94D OR L                                 ;
 $C94E JR NZ,$C953                          ;
 $C950 LD HL,$0040                          ;
*$C953 LD ($CE1C),HL                        ;
 $C956 POP HL                               ;
 $C957 POP AF                               ;
 $C958 RET                                  ;
; Sets the door attributes for the "time of day".
@label=SET_DAY_ATTR
*$C959 LD HL,$C96F                          ; {Call #R$C966 using #R$C96F.
 $C95C JR $C966                             ; }
@label=SET_DUSK_ATTR
*$C95E LD HL,$C987                          ; {Call #R$C966 using #R$C987.
 $C961 JR $C966                             ; }
@label=SET_NIGHT_ATTR
*$C963 LD HL,$C99F                          ; Call #R$C966 using #R$C99F.
; Note this is for the opened door background hence it starts from frame 2 (as
; frame 1 is a closed door).
@label=SET_DOOR_ATTR
*$C966 LD DE,$D6B9                          ; {Copies $18 bytes of data to
 $C969 LD BC,$0018                          ; #R$D6B9, then return.
 $C96C LDIR                                 ;
 $C96E RET                                  ; }
; Door frame attribute data for each day phase.
@label=DOOR_ATTR_DAY
 $C96F DEFB $28,$28,$30,$30,$30,$30,$30,$30 ;
 $C977 DEFB $28,$28,$28,$28,$30,$30,$30,$30 ;
 $C97F DEFB $28,$28,$28,$28,$28,$28,$30,$28 ;
@label=DOOR_ATTR_DUSK
 $C987 DEFB $0D,$0D,$30,$30,$30,$30,$30,$30 ;
 $C98F DEFB $0D,$0D,$0D,$0D,$30,$30,$30,$30 ;
 $C997 DEFB $0D,$0D,$0D,$0D,$0D,$0D,$30,$0D ;
@label=DOOR_ATTR_NIGHT
 $C99F DEFB $05,$05,$30,$30,$30,$30,$30,$30 ;
 $C9A7 DEFB $05,$05,$05,$05,$30,$30,$30,$30 ;
 $C9AF DEFB $05,$05,$05,$05,$05,$05,$30,$05 ;
; Clears the cashbox flags, clears the screen and displays the phase number.
@label=PREP_DISPLAY_PHASE
*$C9B7 LD HL,$0101                          ; {Writes $0101 to #R$D45C.
 $C9BA LD ($D45C),HL                        ; }
 $C9BD LD HL,$CC8D                          ; {Clear down the deposit flags
 $C9C0 LD DE,$CC8E                          ; (copies $00 to each from
 $C9C3 LD BC,$000D                          ; #R$CC8D).
 $C9C6 LD (HL),$00                          ;
 $C9C8 LDIR                                 ; }
 $C9CA XOR A                                ; {Call #R$C9D0 (using $00).
 $C9CB CALL $C9D0                           ; }
 $C9CE JR $C9DD                             ; Jump to #R$C9DD.
; This routine has the ability to write any value across the screen buffer, however it's only ever called with
;       #REGa=$00 (clear screen).
@label=CLEAR_SCREEN
*$C9D0 LD HL,$4000                          ; {Clears the screen buffer by
 $C9D3 LD DE,$4001                          ; writing $00 to all 6912 memory
 $C9D6 LD BC,$1AFF                          ; locations.
 $C9D9 LD (HL),A                            ;
 $C9DA LDIR                                 ;
 $C9DC RET                                  ; }
; Displays the current "phase".
@label=DISPLAY_PHASE
*$C9DD LD HL,$CA4E                          ; {Copies #R$CA4E into #R$CA5C ($05
 $C9E0 LD DE,$CA5C                          ; bytes of text data).
 $C9E3 LD BC,$0005                          ;
 $C9E6 LDIR                                 ; }
 $C9E8 LD HL,($CA5A)                        ; {Writes #R$CA5A to #R$CA5C (at
 $C9EB LD ($CA61),HL                        ; $CA61 - just overwriting the
                                            ; numeric part).}
 $C9EE LD HL,$CA4A                          ; {Call #R$CA19 with #R$CA4A.
 $C9F1 CALL $CA19                           ; }
 $C9F4 LD HL,($CA61)                        ; {Writes $CA61 back to #R$CA5A.
 $C9F7 LD ($CA5A),HL                        ; }
 $C9FA RET                                  ; Return.
; Displays the current "day".
@label=DISPLAY_DAY
*$C9FB LD HL,$CA53                          ; {Copies #R$CA53 into #R$CA5C ($05
 $C9FE LD DE,$CA5C                          ; bytes of text data).
 $CA01 LD BC,$0005                          ;
 $CA04 LDIR                                 ; }
 $CA06 LD HL,($CA58)                        ; {Writes #R$CA58 to #R$CA5C (at
 $CA09 LD ($CA61),HL                        ; $CA61 - just overwriting the
                                            ; numeric part).}
 $CA0C LD HL,$CA4C                          ; {Call #R$CA19 with #R$CA4C.
 $CA0F CALL $CA19                           ; }
 $CA12 LD HL,($CA61)                        ; {Writes $CA61 back to #R$CA58.
 $CA15 LD ($CA58),HL                        ; }
 $CA18 RET                                  ; Return.
; This routine is for converting progress numbers into ASCII. On entry #REGhl
; will be either #R$CA4A or #R$CA4C.
@label=PROGRESS_BASE_10
*$CA19 LD A,(HL)                            ; {If the passed number is not more
 $CA1A INC A                                ; than 10 jump to #R$CA27.
 $CA1B CP $0A                               ;
 $CA1D JR NC,$CA27                          ; }
 $CA1F LD (HL),A                            ; {Stores the ASCII representation of the number at $CA62 (for #R$CA5C). It adds ASCII "0" so for example 1
 $CA20 ADD A,$30                            ;           ends up being 1 + $30 = $31 (e.g. "1" in ASCII).
 $CA22 LD ($CA62),A                         ; }
 $CA25 JR $CA38                             ; Jump to #R$CA38.
; Ensures the progress digit remains 0-9. On entry #REGhl will be either
; #R$CA4A or #R$CA4C.
@label=PROGRESS_DIVISIBLE_10
*$CA27 LD (HL),$00                          ; Reset the current progress digit
                                            ; to $00.
 $CA29 INC HL                               ; Use the secondary digit of the
                                            ; currently focused progress.
; Note this doesn't account for a third digit and so leads to eventual corruption. Once past day/ phase "99", this
;       will display "00" and past "09" the first ASCII digit doesn't point to any usable image data. Note however, this
;       occurs after ~4 hours of game play so isn't especially an issue.
 $CA2A INC (HL)                             ; Increase this second digit by
                                            ; one.
 $CA2B LD A,(HL)                            ; {Add ASCII "0" so for example 1 ends up being 1 + $30 = $31 (e.g. "1" in ASCII). Write this number to $CA61
 $CA2C ADD A,$30                            ;           (for #R$CA5C).
 $CA2E LD ($CA61),A                         ; }
 $CA31 DEC HL                               ; Move back to point to the
                                            ; original location of #REGhl.
 $CA32 LD A,(HL)                            ; {Again, add ASCII "0" for this
 $CA33 ADD A,$30                            ; digit too. Write this number to
 $CA35 LD ($CA62),A                         ; $CA62 (for #R$CA5C).}
; Prints the current progress buffer message to the screen.
@label=PRINT_PROGRESS
*$CA38 LD HL,$CA5C                          ; {Prints #R$CA5C to the screen buffer at $486C using #R$CBD2.
 $CA3B LD DE,$486C                          ; #TABLE(default,centre,centre,centre,centre)
 $CA3E LD BC,$0703                          ; { =h Value | =h Ink | =h Paper | =h Bright }
 $CA41 CALL $CBD2                           ; { $07 | $07 | $00 | $00 }
                                            ; { $03 | $03 | $00 | $00 }
                                            ; TABLE#}
 $CA44 LD B,$50                             ; {Interrupt driven HALT loop ($50
@label=PROGRESS_HALT_LOOP
*$CA46 HALT                                 ; cycles).
 $CA47 DJNZ $CA46                           ; }
 $CA49 RET                                  ; Return.
@label=PHASE
 $CA4A DEFW $0006                           ;
@label=DAY
 $CA4C DEFW $0001                           ;
@label=PHASE_COPY
 $CA4E DEFM "PHASE"                         ;
@label=DAY_COPY
 $CA53 DEFM " DAY "                         ;
@label=DAY_ASCII
 $CA58 DEFM " 1"                            ;
@label=PHASE_ASCII
 $CA5A DEFM " 6"                            ;
@label=PROGRESS_BUFFER
 $CA5C DEFM "PHASE 6",$FF                   ;
; Clears the screen and displays the day number.
@label=PREP_DISPLAY_DAY
*$CA64 XOR A                                ; {Clears the screen by passing $00
 $CA65 CALL $C9D0                           ; to #R$C9D0.}
 $CA68 CALL $C9FB                           ; Call #R$C9FB.
 $CA6B RET                                  ; Return.
; Clear down the day/ progress states.
@label=INIT_PROGRESS
*$CA6C LD HL,$0000                          ; {Clears #R$CA4A and #R$CA4C
 $CA6F LD ($CA4A),HL                        ; (writes $0000 to them).
 $CA72 LD ($CA4C),HL                        ; }
 $CA75 LD A,$20                             ; {Writes ASCII space ($20) to $CA61 and ASCII "0" ($30) to $CA62 (i.e. writes " 0" to the numeric portion of
 $CA77 LD HL,$CA61                          ;           #R$CA5C).
 $CA7A LD (HL),A                            ;
 $CA7B INC HL                               ;
 $CA7C LD A,$30                             ;
 $CA7E LD (HL),A                            ; }
 $CA7F RET                                  ; Return.
@label=CASHBOXES_COMPLETED_FLAG
 $CA80 DEFB $00                             ;
@label=CASHBOXES_COMPLETED
*$CA81 CALL $CAC8                           ;
 $CA84 RET C                                ;
 $CA85 LD B,$10                             ;
@label=CASHBOXES_FLASH_LOOP
*$CA87 PUSH BC                              ;
 $CA88 LD A,B                               ;
 $CA89 AND $01                              ;
 $CA8B CALL $CAB9                           ;
 $CA8E LD B,$10                             ;
 $CA90 CALL $CD64                           ;
 $CA93 POP BC                               ;
 $CA94 DJNZ $CA87                           ;
 $CA96 LD B,$30                             ;
 $CA98 CALL $CD64                           ;
 $CA9B LD A,B                               ;
 $CA9C CALL $CAB9                           ;
 $CA9F CALL $D8B0                           ;
 $CAA2 LD B,A                               ;
 $CAA3 LD A,R                               ;
 $CAA5 LD C,A                               ;
 $CAA6 ADD A,B                              ;
 $CAA7 LD D,A                               ;
 $CAA8 LD A,($CBCF)                         ;
 $CAAB LD HL,$CBB4                          ;
 $CAAE CALL $C3C0                           ;
 $CAB1 LD ($CBCF),A                         ;
 $CAB4 LD B,$00                             ;
 $CAB6 JP $CD64                             ;
@label=DEPOSIT_FLASH_PREP
*$CAB9 LD HL,$CC8D                          ; {Writes #REGa across all the
 $CABC LD DE,$CC8E                          ; deposit flags (copies to each
 $CABF LD BC,$000D                          ; from #R$CC8D).
 $CAC2 LD (HL),A                            ;
 $CAC3 LDIR                                 ; }
 $CAC5 JP $CC9B                             ; Jump to #R$CC9B.
*$CAC8 CALL $C9B7                           ;
; This entry point is used by the routines at #R$CD1B and #R$CD47.
*$CACB XOR A                                ; {Writes $00 to #R$D2FE.
 $CACC LD ($D2FE),A                         ; }
 $CACF CALL $CAD4                           ;
 $CAD2 JR $CAE7                             ;
*$CAD4 CALL $CD68                           ;
 $CAD7 CALL $CC3A                           ;
 $CADA CALL $CC5A                           ;
 $CADD CALL $CC9B                           ;
 $CAE0 CALL $CD90                           ;
 $CAE3 CALL $D45E                           ;
 $CAE6 RET                                  ;
*$CAE7 LD A,$7F                             ; {Read keys SPACE, FULL-STOP, M,
 $CAE9 IN A,($FE)                           ; N, & B.}
 $CAEB RRA                                  ;
 $CAEC JR C,$CAFB                           ;
 $CAEE LD A,$FE                             ; {Read keys SHIFT, Z, X, C, & V.
 $CAF0 IN A,($FE)                           ; }
 $CAF2 RRA                                  ;
 $CAF3 JR C,$CAFB                           ;
 $CAF5 LD HL,$CBB4                          ;
 $CAF8 CALL $FD80                           ;
*$CAFB LD A,$FE                             ; {Read keys SHIFT, Z, X, C, & V.
 $CAFD IN A,($FE)                           ; }
 $CAFF BIT 1,A                              ;
 $CB01 JR NZ,$CB0B                          ;
*$CB03 LD A,$FE                             ; {Read keys SHIFT, Z, X, C, & V.
 $CB05 IN A,($FE)                           ; }
 $CB07 BIT 2,A                              ;
 $CB09 JR NZ,$CB03                          ;
*$CB0B CALL $D2CF                           ;
 $CB0E LD BC,($CE1C)                        ;
*$CB12 DEC BC                               ;
 $CB13 LD A,B                               ;
 $CB14 OR C                                 ;
 $CB15 JR NZ,$CB12                          ;
 $CB17 CALL $D411                           ;
 $CB1A CALL $CBA6                           ;
 $CB1D LD IX,$D165                          ;
 $CB21 LD (IX+$08),$00                      ;
 $CB25 LD HL,$CE14                          ;
 $CB28 LD A,(HL)                            ;
 $CB29 INC HL                               ;
 $CB2A OR (HL)                              ;
 $CB2B PUSH AF                              ;
 $CB2C CALL Z,$CE21                         ;
 $CB2F POP AF                               ;
 $CB30 JR Z,$CB3F                           ;
 $CB32 LD HL,($CE14)                        ;
 $CB35 LD DE,$CB3F                          ;
 $CB38 PUSH DE                              ;
 $CB39 LD A,$01                             ;
 $CB3B LD ($CE1A),A                         ;
 $CB3E JP (HL)                              ;
*$CB3F LD IX,$D173                          ;
 $CB43 LD (IX+$08),$00                      ;
 $CB47 LD HL,$CE16                          ;
 $CB4A LD A,(HL)                            ;
 $CB4B INC HL                               ;
 $CB4C OR (HL)                              ;
 $CB4D PUSH AF                              ;
 $CB4E CALL Z,$CE21                         ;
 $CB51 POP AF                               ;
 $CB52 JR Z,$CB61                           ;
 $CB54 LD HL,($CE16)                        ;
 $CB57 LD DE,$CB61                          ;
 $CB5A PUSH DE                              ;
 $CB5B LD A,$02                             ;
 $CB5D LD ($CE1A),A                         ;
 $CB60 JP (HL)                              ;
*$CB61 LD IX,$D181                          ;
 $CB65 LD (IX+$08),$00                      ;
 $CB69 LD HL,$CE18                          ;
 $CB6C LD A,(HL)                            ;
 $CB6D INC HL                               ;
 $CB6E OR (HL)                              ;
 $CB6F PUSH AF                              ;
 $CB70 CALL Z,$CE21                         ;
 $CB73 POP AF                               ;
 $CB74 JR Z,$CB83                           ;
 $CB76 LD HL,($CE18)                        ;
 $CB79 LD DE,$CB83                          ;
 $CB7C PUSH DE                              ;
 $CB7D LD A,$03                             ;
 $CB7F LD ($CE1A),A                         ;
 $CB82 JP (HL)                              ;
*$CB83 LD A,($D2FE)                         ; {If bit 0 of #R$D2FE is not zero
 $CB86 BIT 0,A                              ; then jump to #R$CD47.
 $CB88 JP NZ,$CD47                          ; }
 $CB8B BIT 1,A                              ; {Else if bit 1 is not zero, jump
 $CB8D JP NZ,$CD1B                          ; to #R$CD1B.}
 $CB90 CALL $CDC3                           ; Call #R$CDC3.
 $CB93 LD HL,$D190                          ; {If #R$D190 is not zero then call
 $CB96 LD A,(HL)                            ; #R$CBA0 (also, writes $00 to
 $CB97 AND A                                ; #R$D190 to clear it).
 $CB98 LD (HL),$00                          ;
 $CB9A CALL NZ,$CBA0                        ; }
 $CB9D JP $CAE7                             ;
*$CBA0 CALL $F960                           ;
 $CBA3 JP $CC9B                             ;
*$CBA6 LD HL,$5B00                          ; {Blanks $FF bytes from #R$5B00
 $CBA9 LD DE,$5B01                          ; onwards, then returns.
 $CBAC LD BC,$00FF                          ;
 $CBAF LD (HL),$00                          ;
 $CBB1 LDIR                                 ;
 $CBB3 RET                                  ; }
@label=COPIED_5B80
 $CBB4 DEFB $C3,$D2,$CB,$C3,$5A,$CC,$59,$CC ; {Copied to $5B80.
 $CBBC DEFB $2A,$12,$CE,$E9,$C3,$DC,$CD,$C3 ;
 $CBC4 DEFB $B0,$D5,$C3,$E6,$D5,$C3,$FA,$D5 ;
 $CBCC DEFB $C3,$90,$CD                     ; }
 $CBCF DEFB $01                             ;

; Draw Text.
@label=TWO_TONE_ATTRIBUTES_BUFFER
c$CBD0 DEFW $0705    ; Stores the attributes; top attribute/ bottom attribute.
; This entry point is used by the routines at #R$5B80 and #R$C7C0.
@label=PRINT_TWO_TONE_TEXT
*$CBD2 LD ($CBD0),BC ; Stash the attributes at #R$CBD0.
@label=PRINT_TWO_TONE_TEXT_LOOP
*$CBD6 LD A,(HL)     ; {Grab the next character in the string, if it's $FF then
 $CBD7 CP $FF        ; return.
 $CBD9 RET Z         ; }
 $CBDA CP $30        ;
 $CBDC JR NZ,$CBE0   ;
 $CBDE LD A,$3A      ;
*$CBE0 PUSH HL       ;
 $CBE1 PUSH DE       ;
 $CBE2 CALL $CBFC    ;
 $CBE5 POP DE        ;
 $CBE6 POP HL        ;
 $CBE7 INC HL        ;
 $CBE8 INC E         ;
 $CBE9 LD A,E        ;
 $CBEA AND $1F       ;
 $CBEC JR NZ,$CBD6   ;
 $CBEE LD A,E        ;
 $CBEF ADD A,$20     ;
 $CBF1 LD E,A        ;
 $CBF2 AND $E0       ;
 $CBF4 JR NZ,$CBD6   ;
 $CBF6 LD A,D        ;
 $CBF7 ADD A,$08     ;
 $CBF9 LD D,A        ;
 $CBFA JR $CBD6      ;
; This entry point is used by the routine at #R$5B9B.
@label=PRINT_TT_TEXT_SPACE_CHECK
*$CBFC CP $20        ; {If the character is a space then jump forward to
 $CBFE JR NZ,$CC0E   ; #R$CC0E.}
 $CC00 LD HL,$5B00   ;
 $CC03 LD BC,$1001   ;
 $CC06 EX DE,HL      ;
 $CC07 PUSH HL       ;
 $CC08 CALL $D5E6    ;
 $CC0B POP HL        ;
 $CC0C JR $CC1D      ;
*$CC0E CP $41        ;
 $CC10 JR NC,$CC14   ;
 $CC12 ADD A,$2A     ;
*$CC14 SUB $41       ;
 $CC16 ADD A,$0A     ;
 $CC18 PUSH DE       ;
 $CC19 CALL $CDAE    ;
 $CC1C POP HL        ;
*$CC1D CALL $CC2B    ;
 $CC20 LD BC,($CBD0) ; {Load the stored top/ bottom attribute bytes back into
 $CC24 LD (HL),B     ; #REGbc and write them to the screen.
 $CC25 LD DE,$0020   ;
 $CC28 ADD HL,DE     ;
 $CC29 LD (HL),C     ; }
 $CC2A RET           ; Return.

; Routine at CC2B
;
; Used by the routine at #R$CBD0.
c$CC2B LD A,H        ;
 $CC2C AND $18       ;
 $CC2E SRA A         ;
 $CC30 SRA A         ;
 $CC32 SRA A         ;
 $CC34 ADD A,$58     ;
 $CC36 LD H,A        ;
 $CC37 RET           ; Return.

; Buffer for holding #R$D5E6 address.
@label=BUFFER_COPY_ROUTINE
g$CC38 DEFW $D5E6

; Main Playfield Initialisation.
;
; Used by the routine at #R$C7C0.
;
; .
;
; Draws Main Playfield with all three doors closed.
@label=DRAW_PLAY_WITH_DOORS
c$CC3A LD IX,$CC38   ; {Draw the main game playfield.
 $CC3E CALL $C300    ; }
 $CC41 LD A,$01      ; {Calls #R$D664 with #R$CE1A set to $01.
 $CC43 LD ($CE1A),A  ;
 $CC46 CALL $D664    ; }
 $CC49 LD A,$02      ; {Calls #R$D664 with #R$CE1A set to $02.
 $CC4B LD ($CE1A),A  ;
 $CC4E CALL $D664    ; }
 $CC51 LD A,$03      ; {Jump to #R$D664 with #R$CE1A set to $03.
 $CC53 LD ($CE1A),A  ;
 $CC56 JP $D664      ; }

; Number of lives remaining
@label=LIVES
g$CC59 DEFB $00

; Display The "Life" Images.
;
; Used by the routines at #R$5B83, #R$C7C0 and #R$CD1B.
@label=LIFE_IMAGES
c$CC5A LD B,$05      ; {Set up counter=$05 screen buffer=$50B6.
 $CC5C LD HL,$50B6   ; }
@label=LIFE_IMAGES_LOOP
*$CC5F PUSH BC       ; {jjjss
 $CC60 LD DE,$5B00   ;
 $CC63 CALL $CC84    ;
 $CC66 INC HL        ;
 $CC67 INC HL        ;
 $CC68 POP BC        ;
 $CC69 DJNZ $CC5F    ; }
 $CC6B LD A,($CC59)  ; {If #R$CC59 are zero then return.
 $CC6E AND A         ;
 $CC6F RET Z         ; }
 $CC70 CP $06        ; {If #R$CC59 is more than or equal to "6" then return.
 $CC72 RET NC        ; }
 $CC73 LD B,A        ;
 $CC74 LD HL,$50B6   ;
@label=DRAW_LIFE_IMAGES_LOOP
*$CC77 PUSH BC       ;
 $CC78 CALL $CC81    ;
 $CC7B INC HL        ;
 $CC7C INC HL        ;
 $CC7D POP BC        ;
 $CC7E DJNZ $CC77    ;
 $CC80 RET           ; Return.
@label=DRAW_LIFE_IMAGES
*$CC81 LD DE,$FFB8   ; {Point at the #R$FFB8 and call #R$D5E6.
@label=COPY_ROUTINE_LOOP
*$CC84 PUSH HL       ;
 $CC85 LD BC,$1802   ;
 $CC88 CALL $D5E6    ; }
 $CC8B POP HL        ;
 $CC8C RET           ; Return.

; Deposit Flags.
;
; Stores whether a deposit has been made for each door.
@label=DOOR_DEPOSITED_01
g$CC8D DEFB $00
@label=DOOR_DEPOSITED_02
 $CC8E DEFB $00
@label=DOOR_DEPOSITED_03
 $CC8F DEFB $00
@label=DOOR_DEPOSITED_04
 $CC90 DEFB $00
@label=DOOR_DEPOSITED_05
 $CC91 DEFB $00
@label=DOOR_DEPOSITED_06
 $CC92 DEFB $00
@label=DOOR_DEPOSITED_07
 $CC93 DEFB $00
@label=DOOR_DEPOSITED_08
 $CC94 DEFB $00
@label=DOOR_DEPOSITED_09
 $CC95 DEFB $00
@label=DOOR_DEPOSITED_10
 $CC96 DEFB $00
@label=DOOR_DEPOSITED_11
 $CC97 DEFB $00
@label=DOOR_DEPOSITED_12
 $CC98 DEFB $00

; Probably represents each block of six deposit flags.
@label=DOOR_DEPOSITED_01_06
g$CC99 DEFB $00
@label=DOOR_DEPOSITED_07_12
 $CC9A DEFB $00

; Draws Deposit Cashboxes.
;
; Used by the routine at #R$C7C0.
c$CC9B LD A,($D45C)  ; {Converts #R$D45C into cash deposit box flag address
 $CC9E LD L,A        ; (e.g. "1" becomes #R$CC8D and so on).
 $CC9F LD H,$00      ;
 $CCA1 LD DE,$CC8C   ;
 $CCA4 ADD HL,DE     ; }
 $CCA5 LD IX,$D165   ; {#REGa=#R$D16D.
 $CCA9 LD A,(IX+$08) ; }
 $CCAC OR (HL)       ;
 $CCAD LD (HL),A     ;
 $CCAE INC HL        ;
 $CCAF LD IX,$D173   ; {#REGa=#R$D17B.
 $CCB3 LD A,(IX+$08) ; }
 $CCB6 OR (HL)       ;
 $CCB7 LD (HL),A     ;
 $CCB8 INC HL        ;
 $CCB9 LD IX,$D181   ; {#REGa=#R$D189.
 $CCBD LD A,(IX+$08) ; }
 $CCC0 OR (HL)       ;
 $CCC1 LD (HL),A     ;
 $CCC2 LD DE,$CC99   ; #REGde=#R$CC99.
 $CCC5 LD HL,$CC8D   ; #REGhl=#R$CC8D.
 $CCC8 LD A,(DE)     ; Fetch the flag for #R$CC99.
 $CCC9 OR (HL)       ; Run a logical OR against the contents of #REGhl.
 $CCCA LD (HL),A     ; Writes this back into #REGhl (setting the flag).
 $CCCB INC HL        ;
 $CCCC INC DE        ; Move onto #R$CC9A.
 $CCCD LD A,(DE)     ; Fetch the flag for #R$CC9A.
 $CCCE OR (HL)       ; Run a logical OR against the contents of #REGhl.
 $CCCF LD (HL),A     ; Writes this back into #REGhl (setting the flag).
 $CCD0 CALL $CCFB    ;
@label=CASHBOXES_COMPLETE
 $CCD3 LD DE,$CC8D   ; Points to the cashbox flags (beginning at #R$CC8D).
 $CCD6 LD HL,$CA80   ; {Write $00 to #R$CA80.
 $CCD9 LD (HL),$00   ; }
 $CCDB LD B,$0C      ; Testing against all 12 cashboxes.
@label=CASHBOXES_COMPLETE_LOOP
*$CCDD LD A,(DE)     ; {Fetch the cashbox flag, return if its zero.
 $CCDE AND A         ;
 $CCDF RET Z         ; }
 $CCE0 INC DE        ; {Move onto the next cashbox (loop back to #R$CCDD) or
 $CCE1 DJNZ $CCDD    ; continue once all 12 are checked.}
 $CCE3 LD (HL),A     ; {Write #REGa ($01) to #R$CA80.
 $CCE4 RET           ; }
@label=DRAW_GAME_CASHBOX
*$CCE5 ADD A,A       ; {Determines whether to send #R$FF78 or #R$FF98 to
 $CCE6 ADD A,L       ; #R$D5E6.
 $CCE7 LD L,A        ;
 $CCE8 LD DE,$FF78   ;
 $CCEB LD A,(IX+$00) ;
 $CCEE AND A         ;
 $CCEF JR Z,$CCF4    ;
 $CCF1 LD DE,$FF98   ;
*$CCF4 LD BC,$1002   ;
 $CCF7 CALL $D5E6    ; }
 $CCFA RET           ; Return.
; Draws all the cashboxes in two blocks of 6.
@label=GAME_CASHBOXES
*$CCFB LD IX,$CC8D   ; {The statuses for the cashboxes begin at #R$CC8D. This routine processes them in two blocks of 6 (as they
 $CCFF LD HL,$401F   ;           appear. The first block is displayed at $401F, after processing the subroutine returns and continues for the
 $CD02 LD A,$01      ;           next six blocks, just altering the screen location to $4025.
 $CD04 CALL $CD0A    ;
 $CD07 LD HL,$4025   ;
@label=GAME_CASHBOXES_SKIP
*$CD0A LD B,$06      ;
@label=GAME_CASHBOXES_LOOP
*$CD0C PUSH BC       ;
 $CD0D PUSH HL       ;
 $CD0E PUSH AF       ;
 $CD0F CALL $CCE5    ;
 $CD12 POP AF        ;
 $CD13 POP HL        ;
 $CD14 POP BC        ;
 $CD15 INC IX        ;
 $CD17 INC A         ;
 $CD18 DJNZ $CD0C    ; }
 $CD1A RET           ; Return.

; Flash Lives/ Lose Life.
;
; Used by the routine at #R$C7C0.
@label=FLASH_LIVES
c$CD1B LD B,$0A      ; {Short pause.
 $CD1D CALL $CD64    ; }
 $CD20 LD HL,$CC59   ; {Point to #R$CC59. Set a counter for $05 times and stash
 $CD23 LD B,$05      ; it.
@label=FLASH_LIVES_LOOP
*$CD25 PUSH BC       ; }
 $CD26 DEC (HL)      ; {Decrease the number of lives by one, stash the lives
 $CD27 PUSH HL       ; memory location and draw the decreased life images.
 $CD28 CALL $CC5A    ; }
 $CD2B LD B,$10      ; {Short pause.
 $CD2D CALL $CD64    ; }
 $CD30 POP HL        ; {Grab the lives memory location, increase it by one, stash the location again and draw the now increased life
 $CD31 INC (HL)      ;           images (i.e. what they were on entry to the routine).
 $CD32 PUSH HL       ;
 $CD33 CALL $CC5A    ; }
 $CD36 LD B,$10      ; {Short pause.
 $CD38 CALL $CD64    ; }
 $CD3B POP HL        ;
 $CD3C POP BC        ; {Loop back until the counter is zero.
 $CD3D DJNZ $CD25    ; }
 $CD3F LD A,(HL)     ; {Finally decrease lives by one and if they are not zero
 $CD40 DEC A         ; jump to #R$CACB.
 $CD41 LD (HL),A     ;
 $CD42 JP NZ,$CACB   ; }
 $CD45 SCF           ; {Set the carry flag and return.
 $CD46 RET           ; }

; Routine at CD47
;
; Used by the routine at #R$C7C0.
c$CD47 LD A,($D2FE)  ; {If bit 2 of #R$D2FE is zero then jump to #R$CD53.
 $CD4A BIT 2,A       ;
 $CD4C JR Z,$CD53    ; }
 $CD4E CALL $F880    ;
 $CD51 JR $CD56      ;
*$CD53 CALL $C000    ;
*$CD56 CALL $CD68    ;
 $CD59 LD HL,$CC59   ;
 $CD5C LD A,(HL)     ;
 $CD5D DEC A         ;
 $CD5E LD (HL),A     ;
 $CD5F JP NZ,$CACB   ;
 $CD62 SCF           ;
 $CD63 RET           ;

; Configurable "pause".
;
; Used by the routines at #R$C7C0 and #R$CD1B.
;
; .
;
; Loops back on itself using #REGb as a counter.
@label=HALT_LOOP
c$CD64 HALT          ; {Short interrupt driven pause, and return.
 $CD65 DJNZ $CD64    ;
 $CD67 RET           ; }

; Initialise Door Flags.
;
; Used by the routines at #R$C7C0 and #R$CD47.
;
; .
;
; Populates the state flags for each door.
@label=POPULATE_DOOR_BUFFER
c$CD68 LD IX,$D165   ; {Call #R$D8A1 using #REGix=#R$D165.
 $CD6C CALL $D8A1    ; }
 $CD6F LD IX,$D173   ; {Call #R$D8A1 using #REGix=#R$D173.
 $CD73 CALL $D8A1    ; }
 $CD76 LD IX,$D181   ; {Call #R$D8A1 using #REGix=#R$D181.
 $CD7A CALL $D8A1    ; }
 $CD7D RET           ; Return.

; Debugger
;
; As the game uses its own character set, it's unlikely this routine was/ is used for the actual game (it doesn't
;       seem to be called from anywhere).
;       At a guess, it was probably used for "testing" text messages and outputs during development.
@label=DEBUGGER
c$CD7E LD A,(HL)     ; {Grab a byte from #REGhl return if it's $FF (our
 $CD7F CP $FF        ; termination character).
 $CD81 RET Z         ; }
 $CD82 RST $10       ; #HTML(Print to screen (see <a
                     ; href="https://skoolkid.github.io/rom/asm/0010.html">PRINT_A_1</a>).)
 $CD83 INC HL        ; {Increase #REGhl by one and loop back to #R$CD7E.
 $CD84 JR $CD7E      ; }

; Score (6 bytes)
@label=SCORE_DIGIT_6
g$CD86 DEFB $00
@label=SCORE_DIGIT_5
 $CD87 DEFB $00
@label=SCORE_DIGIT_4
 $CD88 DEFB $00
@label=SCORE_DIGIT_3
 $CD89 DEFB $00
@label=SCORE_DIGIT_2
 $CD8A DEFB $00
@label=SCORE_DIGIT_1
 $CD8B DEFB $00

; Game status buffer entry at CD8C
g$CD8C DEFB $00

; Game status buffer entry at CD8D
g$CD8D DEFB $07,$4F,$52 ; ???

; Draw Score To The Screen
;
; Used by the routines at #R$5B98, #R$C7C0 and #R$CDC3.
@label=DRAW_SCORE
c$CD90 LD HL,$CD8B   ; {Starting values; #TABLE(default,centre,centre,centre,centre)
 $CD93 LD DE,$50C8   ; { =h Source | =h Screen Buffer | =h Counter }
 $CD96 LD B,$06      ; { #R$CD8B | $50C8 | $06 }
                     ; TABLE#}
@label=SCORE_DIGIT_LOOP
*$CD98 PUSH BC       ; {Stash the lot.
 $CD99 PUSH DE       ;
 $CD9A PUSH HL       ; }
 $CD9B LD A,(HL)     ; {Grab the number at the source memory location;
 $CD9C AND A         ; #LIST
 $CD9D JR NZ,$CDA1   ; { If it's zero then add $0A (as the numbers are stored 1-2-3-4-5-6-7-8-9-0 whereas ASCII uses 0-1-2-3-4-5-6-7-8-9) }
 $CD9F ADD A,$0A     ; { add $23 (so for example "2" will be "$25" - see #R$CDAE) }
@label=SCORE_DIGIT_NON_ZERO
*$CDA1 ADD A,$23     ; { Call #R$CDAE }
 $CDA3 CALL $CDAE    ; LIST#}
 $CDA6 POP HL        ; {Retrieve our current source, destination and counter
 $CDA7 POP DE        ; from the stack.
 $CDA8 POP BC        ; }
 $CDA9 INC DE        ; {Increase the screen buffer memory location by one, decrease the source memory location and loop round to
 $CDAA DEC HL        ;           #R$CD98 until it is zero.
 $CDAB DJNZ $CD98    ; }
 $CDAD RET           ; Return.

; Draw Numbering from Character Set Index.
;
; Used by the routines at #R$CBD0 and #R$CD90.
@label=DRAW_NUMBER
c$CDAE PUSH DE       ; {Using $C000 as a base address, this works out the character set memory address from a given index passed
 $CDAF LD H,$00      ;           in #REGa. To give an example using "2" ($25 - see #R$CD90);
 $CDB1 LD L,A        ; #LIST
 $CDB2 ADD HL,HL     ; { #HTML(Loads <strong>$25</strong> as the low-order byte; #REGhl=$0025) }
 $CDB3 ADD HL,HL     ; { #HTML(Times by <strong>$10</strong>; #REGhl=$250) }
 $CDB4 ADD HL,HL     ; { #HTML(Add <strong>$C000</strong>=#R$C250) }
 $CDB5 ADD HL,HL     ; LIST#
 $CDB6 LD DE,$C000   ; This is then passed to #R$D5E6.
 $CDB9 ADD HL,DE     ;
 $CDBA EX DE,HL      ;
 $CDBB POP HL        ;
 $CDBC LD BC,$1001   ;
 $CDBF CALL $D5E6    ; }
 $CDC2 RET           ; Return.

; Apply Scoring
;
; Used by the routine at #R$C7C0.
@label=SCORING
c$CDC3 LD IX,$D165     ; {Calls #R$CDDC three times with #REGix containing;
 $CDC7 CALL $CDDC      ; #LIST
 $CDCA LD IX,$D173     ; { #R$D165 }
 $CDCE CALL $CDDC      ; { #R$D173 }
 $CDD1 LD IX,$D181     ; { #R$D181 }
 $CDD5 CALL $CDDC      ; LIST#}
 $CDD8 CALL $CD90      ; Call #R$CD90.
 $CDDB RET             ; Return.
; Passes the higher and lower score values to #R$CDF7 for the current door.
@label=SCORING_PREP
*$CDDC LD HL,$CD87     ; References #R$CD87.
 $CDDF LD B,(IX+$06)   ; Retrieves #REGix+$06, stores it in #REGb then reset it
                       ; to zero.
 $CDE2 LD (IX+$06),$00 ;
 $CDE6 CALL $CDF7      ; Call #R$CDF7.
 $CDE9 LD HL,$CD88     ; References #R$CD88.
 $CDEC LD B,(IX+$07)   ; Retrieves #REGix+$07, stores it in #REGb then reset it
                       ; to zero.
 $CDEF LD (IX+$07),$00 ;
 $CDF3 CALL $CDF7      ; Call #R$CDF7.
 $CDF6 RET             ; Return.
; Applies the door scores into the player score.
@label=SCORING_APPLY
*$CDF7 LD A,(HL)       ; {Pass the current score digit to #R$CE08 and overwrite
 $CDF8 CALL $CE08      ; the digit with the result.
 $CDFB LD (HL),A       ; }
 $CDFC LD E,$05        ; Sets a counter to $05 (5 more digits in the score).
@label=SCORING_APPLY_LOOP
*$CDFE INC HL          ; Move onto the next scoring digit.
 $CDFF LD A,(HL)       ; {Pass the current score digit to #R$CE08 and overwrite
 $CE00 CALL $CE08      ; the digit with the result.
 $CE03 LD (HL),A       ; }
 $CE04 DEC E           ; {Loop back to #R$CDFE until the counter is zero (and
 $CE05 JR NZ,$CDFE     ; all scoring digits are accounted for).}
 $CE07 RET             ; Return.
; Ensures the current scoring digit remains 0-9 (if $0A then it's reset and the
; carry digit is forwarded on).
@label=SCORING_BASE_10
*$CE08 ADD A,B         ; Adds current score digit with passed score.
 $CE09 LD B,$00        ; Reset passed score to zero.
 $CE0B CP $0A          ; {Return if result is less than $0A (base 10).
 $CE0D RET C           ; }
 $CE0E SUB $0A         ; Subtract $0A to keep this digit in base 10 (e.g. "11"
                       ; becomes "1", "12" becomes "2", and so on).
 $CE10 INC B           ; {Add one onto the passed score (which carries onto the
 $CE11 RET             ; next digit as it goes lowest to highest) and return.}

; Control Method Routine Alias.
;
; Points to either #R$D392 or #R$D39B depending on the chosen control method.
@label=CONTROL_ROUTINE_ALIAS
g$CE12 DEFB $9B,$D3  ; 16 bit memory location of either the keyboard or
                     ; joystick control routines.

; Door Routine Buffer.
;
; These buffers point to the routines for character/ door actions for each door that are currently "in-play".
;       Some example routines would be;
; #TABLE(default,centre,centre)
; { =h Routine | =h Door }
; { #R$D192 | "Normal" Bandit }
; { #R$D1DC | Bowie }
; { #R$D201 | Customer }
; { #R$D241 | Julius }
; { #R$D289 | "Drawing" Bandit }
; TABLE#
;       And will also hold the door closing routines as well.
@label=DOOR_1_ROUTINE
g$CE14 DEFW $0000    ; Door 1 character/ door routine in-play.
@label=DOOR_2_ROUTINE
 $CE16 DEFW $0000    ; Door 2 character/ door routine in-play.
@label=DOOR_3_ROUTINE
 $CE18 DEFW $0000    ; Door 3 character/ door routine in-play.

; Door Frame Reference
;
; Only one door is "active" at a time, this status buffer points to the
; "currently in-focus door".
@label=DOOR_FRAME_REF
g$CE1A DEFB $03      ; #TABLE(default,centre,centre)
                     ; { =h Value | =h Which One }
                     ; { $01 | Door 1 }
                     ; { $02 | Door 2 }
                     ; { $03 | Door 3 }
                     ; TABLE#

; Game status buffer entry at CE1B
g$CE1B DEFB $03
 $CE1C DEFW $0380
 $CE1E DEFB $03
; Defines the entry point for the choosing routines. Note, this isn't for one choice - they chain into each other
;       this simply points to where the chain starts.
@label=CHOOSER_ROUTINE_BUFFER
 $CE1F DEFW $CE8D

; Choose Door Character.
;
; Used by the routine at #R$C7C0.
;
; .
;
; The characters available on a particular level are determined by #R$CE1F.
; #TABLE(default,centre,centre)
; { =h Initialisation Routine | =h Door }
; { #R$CE42 | Door 1 }
; { #R$CE8D | Door 2 }
; { #R$D18A | Door 3 }
; TABLE#
@label=CHARACTER_CHOOSER
c$CE21 LD HL,$CE1E   ; {Decrease #R$CE1E by one.
 $CE24 LD A,(HL)     ;
 $CE25 DEC A         ;
 $CE26 LD (HL),A     ; }
 $CE27 RET NZ        ; Return if not zero.
 $CE28 LD A,($CE1B)  ; {Copies #R$CE1B into #R$CE1E.
 $CE2B LD (HL),A     ; }
 $CE2C LD A,(IX+$09) ; {Decrease ????? by one.
 $CE2F DEC A         ; #TABLE(default,centre,centre)
 $CE30 LD (IX+$09),A ; { =h Address | =h Door }
                     ; { #R$D16E | Door 1 }
                     ; { #R$D17C | Door 2 }
                     ; { #R$D18A | Door 3 }
                     ; TABLE#}
 $CE33 RET NZ        ; Return if not zero.
; f
@label=CHOOSER
 $CE34 CALL $D8B0    ; Call #R$D8B0.
 $CE37 AND $1F       ; Keep bits 0-4 (so 0-31).
 $CE39 OR $08        ; {Set bit 3 and write the resulting value to;
 $CE3B LD (IX+$09),A ; #TABLE(default,centre,centre)
                     ; { =h Address | =h Door }
                     ; { #R$D16E | Door 1 }
                     ; { #R$D17C | Door 2 }
                     ; { #R$D18A | Door 3 }
                     ; TABLE#}
 $CE3E LD HL,($CE1F) ; {Jump to the memory address contained at #R$CE1F.
 $CE41 JP (HL)       ; }
; Handles choosing one of the initial "default" characters. A
;       character is always chosen here, so this is the end of the
;       choosing routine.
@label=CHOOSE_DEFAULT_SET
*$CE42 CALL $DAEF    ; Call #R$DAEF.
 $CE45 AND $03       ; Keep only bits 0 and 1 (which determine the type of
                     ; character).
 $CE47 JR Z,$CEB8    ; {Determines which character initialisation to run;
 $CE49 DEC A         ; #TABLE(default,centre,centre)
 $CE4A JP Z,$CEFC    ; { =h #REGa | =h Initialisation Routine }
 $CE4D DEC A         ; { $00 | #R$CEB8 }
 $CE4E JP Z,$CF5E    ; { $01 | #R$CEFC }
 $CE51 DEC A         ; { $02 | #R$CF5E }
 $CE52 JP $CF2B      ; { $03 | #R$CF2B }
                     ; TABLE#}
; Handles whether or not to choose Julius.
@label=CHOOSE_JULIUS
*$CE55 CALL $D8B0    ; Call #R$D8B0.
 $CE58 AND $0C       ; {Keep only bits 2 and 3. Jump to the next character "test" if
 $CE5A JR NZ,$CE5F   ; this is a non-zero number at #R$CE5F.}
 $CE5C JP $CFB7      ; Jump to #R$CFB7.
; Handles whether or not to choose Bandit 2.
@label=CHOOSE_BANDIT_2
*$CE5F CALL $D8B0    ; Call #R$D8B0.
 $CE62 AND $98       ; {Keep only bits 3, 4 and 7. Jump to the next character "test" if
 $CE64 JR NZ,$CE6F   ; this is a non-zero number at #R$CE6F.}
 $CE66 LD HL,$D119   ; Set source character data to #R$D119.
 $CE69 LD DE,$D124   ; Set target character buffer to #R$D124.
 $CE6C JP $CEA9      ; Jump to #R$CEA9.
; Handles whether or not to choose Bandit 3.
@label=CHOOSE_BANDIT_3
*$CE6F CALL $D8B0    ; Call #R$D8B0.
 $CE72 AND $31       ; {Keep only bits 0, 4 and 5. Jump to the next character "test" if
 $CE74 JR NZ,$CE42   ;           this is a non-zero number then jump back to the #R$CE42.
                     ; }
 $CE76 LD HL,$D0C1   ; Set source character data to #R$D0C1.
 $CE79 LD DE,$D0CC   ; Set target character buffer to #R$D0CC.
 $CE7C JR $CEA9      ; Jump to #R$CEA9.
; Handles whether or not to choose Bandit 4.
@label=CHOOSE_BANDIT_4
*$CE7E CALL $D8B0    ; Call #R$D8B0.
 $CE81 AND $83       ; {Keep only bits 0, 1 and 7. Jump to the next character "test" if
 $CE83 JR NZ,$CE55   ; this is a non-zero number #R$CE55.}
 $CE85 LD HL,$D0D7   ; Set source character data to #R$D0D7.
 $CE88 LD DE,$D0E2   ; Set target character buffer to #R$D0E2.
 $CE8B JR $CEA9      ; Jump to #R$CEA9.
; Handles whether or not to choose Bandit 5.
@label=CHOOSE_BANDIT_5
*$CE8D CALL $D8B0    ; Call #R$D8B0.
 $CE90 AND $58       ; {Keep only bits 3, 4 and 6. Jump to the next character "test" if
 $CE92 JR NZ,$CE7E   ; this is a non-zero number #R$CE7E.}
 $CE94 LD HL,$D0ED   ; Set source character data to #R$D0ED.
 $CE97 LD DE,$D0F8   ; Set target character buffer to #R$D0F8.
 $CE9A JR $CEA9      ; Jump to #R$CEA9.
; Handles whether or not to choose Bandit 6.
@label=CHOOSE_BANDIT_6
 $CE9C CALL $D8B0    ; Call #R$D8B0.
 $CE9F AND $71       ; {Keep only bits 0, 4, 5 and 6. Jump to the next character "test" if
 $CEA1 JR NZ,$CE8D   ; this is a non-zero number #R$CE8D.}
 $CEA3 LD HL,$D103   ; Set source character data to #R$D103.
 $CEA6 LD DE,$D10E   ; Set target character buffer to #R$D10E.
; Stashes the chosen character source/ buffer to the door state buffer.
@label=CHOOSE_ACTION
*$CEA9 LD (IX+$0C),L ; {Writes the character source memory address to one of the following (depending on which door is currently
 $CEAC LD (IX+$0D),H ;           being actioned);
                     ; #TABLE(default,centre,centre)
                     ; { =h Address | =h Door }
                     ; { #R$D171 | Door 1 }
                     ; { #R$D17F | Door 2 }
                     ; { #R$D18D | Door 3 }
                     ; TABLE#}
 $CEAF LD (IX+$0A),E ; {Writes the character target/ buffer memory address to one of the following (depending on which door is
 $CEB2 LD (IX+$0B),D ;           currently being actioned);
                     ; #TABLE(default,centre,centre)
                     ; { =h Address | =h Door }
                     ; { #R$D16F | Door 1 }
                     ; { #R$D17D | Door 2 }
                     ; { #R$D18B | Door 3 }
                     ; TABLE#}
 $CEB5 JP $D019      ; Jump to #R$D019.

; Character Initialisations.
;
; Used by the routines at #R$CE21 and #R$D48F.
;
; .
;
; Writes a "bandit opening the door" to the door flags/ cache.
@label=INIT_BANDIT_OPEN
c$CEB8 LD DE,$D192     ; {Writes #R$D192 to the address contained
 $CEBB LD L,(IX+$00)   ;           at (depending on which door is currently being actioned);
 $CEBE LD H,(IX+$01)   ; #TABLE(default,centre,centre,centre)
 $CEC1 LD (HL),E       ; { =h Address | =h Door | =h Target }
 $CEC2 INC HL          ; { #R$D165 | Door 1 | #R$CE14 }
 $CEC3 LD (HL),D       ; { #R$D173 | Door 2 | #R$CE16 }
                       ; { #R$D181 | Door 3 | #R$CE18 }
                       ; TABLE#}
 $CEC4 LD HL,$D076     ; {Handles copying $0007 bytes of data from the address contained
 $CEC7 LD E,(IX+$02)   ;           at (depending on which door is currently being actioned);
 $CECA LD D,(IX+$03)   ; #TABLE(default,centre,centre)
 $CECD LD BC,$0007     ; { =h Address | =h Door }
 $CED0 LDIR            ; { #R$D167 | Door 1 }
                       ; { #R$D175 | Door 2 }
                       ; { #R$D183 | Door 3 }
                       ; TABLE#
                       ; to #R$D076.}
 $CED2 LD A,$01        ; {Writes $01 to #R$D18F and return.
 $CED4 LD ($D18F),A    ;
 $CED7 RET             ; }
; Writes a "bandit closing the door" to the door flags/ cache.
@label=INIT_BANDIT_CLOSE
 $CED8 LD DE,$D1B7     ; {Writes #R$D1B7 to the address contained
 $CEDB LD L,(IX+$00)   ;           at (depending on which door is currently being actioned);
 $CEDE LD H,(IX+$01)   ; #TABLE(default,centre,centre,centre)
 $CEE1 LD (HL),E       ; { =h Address | =h Door | =h Target }
 $CEE2 INC HL          ; { #R$D165 | Door 1 | #R$CE14 }
 $CEE3 LD (HL),D       ; { #R$D173 | Door 2 | #R$CE16 }
                       ; { #R$D181 | Door 3 | #R$CE18 }
                       ; TABLE#}
 $CEE4 LD HL,$D07D     ; {Handles copying $0007 bytes of data from the address contained
 $CEE7 LD E,(IX+$02)   ;           at (depending on which door is currently being actioned);
 $CEEA LD D,(IX+$03)   ; #TABLE(default,centre,centre)
 $CEED LD BC,$0007     ; { =h Address | =h Door }
 $CEF0 LDIR            ; { #R$D167 | Door 1 }
                       ; { #R$D175 | Door 2 }
                       ; { #R$D183 | Door 3 }
                       ; TABLE#
                       ; to #R$D07D.}
 $CEF2 LD A,$01        ; {Writes $01 to #R$D18F.
 $CEF4 LD ($D18F),A    ; }
 $CEF7 LD (IX+$07),$01 ;
 $CEFB RET             ;
; Writes "Bowie" to the door flags/ cache.
@label=INIT_BOWIE
*$CEFC LD DE,$D1DC     ; {Writes #R$D1DC to the address contained
 $CEFF LD L,(IX+$00)   ;           at (depending on which door is currently being actioned);
 $CF02 LD H,(IX+$01)   ; #TABLE(default,centre,centre,centre)
 $CF05 LD (HL),E       ; { =h Address | =h Door | =h Target }
 $CF06 INC HL          ; { #R$D165 | Door 1 | #R$CE14 }
 $CF07 LD (HL),D       ; { #R$D173 | Door 2 | #R$CE16 }
                       ; { #R$D181 | Door 3 | #R$CE18 }
                       ; TABLE#}
 $CF08 CALL $D8B0      ;
 $CF0B AND $08         ;
 $CF0D LD HL,$D084     ;
 $CF10 LD (HL),$00     ;
 $CF12 JR Z,$CF16      ;
 $CF14 LD (HL),$01     ;
@label=INIT_BOWIE_SET_FLAG
*$CF16 LD E,(IX+$02)   ;
 $CF19 LD D,(IX+$03)   ;
 $CF1C LD BC,$0009     ;
 $CF1F LDIR            ;
 $CF21 LD DE,$D863     ;
 $CF24 LD (IX+$04),E   ;
 $CF27 LD (IX+$05),D   ;
 $CF2A RET             ;
; Writes a "customer opening the door" to the door flags/ cache.
@label=INIT_CUSTOMER_OPEN
*$CF2B LD L,(IX+$00)   ; {Writes #R$D201 to the address contained
 $CF2E LD H,(IX+$01)   ;           at (depending on which door is currently being actioned);
 $CF31 LD DE,$D201     ; #TABLE(default,centre,centre,centre)
 $CF34 LD (HL),E       ; { =h Address | =h Door | =h Target }
 $CF35 INC HL          ; { #R$D165 | Door 1 | #R$CE14 }
 $CF36 LD (HL),D       ; { #R$D173 | Door 2 | #R$CE16 }
                       ; { #R$D181 | Door 3 | #R$CE18 }
                       ; TABLE#}
 $CF37 CALL $D8B0      ;
 $CF3A AND $82         ;
 $CF3C LD HL,$D0A1     ;
 $CF3F LD (HL),$00     ;
 $CF41 JR NZ,$CF45     ;
 $CF43 LD (HL),$01     ;
@label=INIT_CUST_OPEN_SET_FLAG
*$CF45 LD HL,$D09C     ;
 $CF48 LD E,(IX+$02)   ;
 $CF4B LD D,(IX+$03)   ;
 $CF4E LD BC,$000F     ;
 $CF51 LD A,($D18F)    ;
 $CF54 AND A           ;
 $CF55 LD A,$00        ;
 $CF57 LD ($D18F),A    ;
 $CF5A RET NZ          ;
 $CF5B LDIR            ;
 $CF5D RET             ;
; Writes a "customer closing the door" to the door flags/ cache.
@label=INIT_CUSTOMER_CLOSE
*$CF5E LD L,(IX+$00)   ; {Writes #R$D201 to the address contained
 $CF61 LD H,(IX+$01)   ;           at (depending on which door is currently being actioned);
 $CF64 LD DE,$D201     ; #TABLE(default,centre,centre,centre)
 $CF67 LD (HL),E       ; { =h Address | =h Door | =h Target }
 $CF68 INC HL          ; { #R$D165 | Door 1 | #R$CE14 }
 $CF69 LD (HL),D       ; { #R$D173 | Door 2 | #R$CE16 }
                       ; { #R$D181 | Door 3 | #R$CE18 }
                       ; TABLE#}
 $CF6A CALL $D8B0      ;
 $CF6D AND $41         ;
 $CF6F LD HL,$D092     ;
 $CF72 LD (HL),$00     ;
 $CF74 JR NZ,$CF78     ;
 $CF76 LD (HL),$01     ;
@label=INIT_CUST_CLOSE_SET_FLAG
*$CF78 LD HL,$D08D     ;
 $CF7B LD E,(IX+$02)   ;
 $CF7E LD D,(IX+$03)   ;
 $CF81 LD BC,$000F     ;
 $CF84 LD A,($D18F)    ;
 $CF87 AND A           ;
 $CF88 LD A,$00        ;
 $CF8A LD ($D18F),A    ;
 $CF8D RET NZ          ;
 $CF8E LDIR            ;
 $CF90 RET             ;
; Writes a "customer being shot" to the door flags/ cache.
@label=INIT_CUSTOMER_SHOT
 $CF91 LD DE,$D226     ; {Writes #R$D226 to the address contained
 $CF94 LD L,(IX+$00)   ;           at (depending on which door is currently being actioned);
 $CF97 LD H,(IX+$01)   ; #TABLE(default,centre,centre,centre)
 $CF9A LD (HL),E       ; { =h Address | =h Door | =h Target }
 $CF9B INC HL          ; { #R$D165 | Door 1 | #R$CE14 }
 $CF9C LD (HL),D       ; { #R$D173 | Door 2 | #R$CE16 }
                       ; { #R$D181 | Door 3 | #R$CE18 }
                       ; TABLE#}
 $CF9D LD E,(IX+$02)   ; {Loads e.g. #R$D167 (depending on which door is currently
 $CFA0 LD D,(IX+$03)   ; being actioned) into #REGde.}
 $CFA3 LD HL,$D0AB     ; #REGhl=#R$D0AB.
 $CFA6 INC DE          ; {Increase #REGde by $06.
 $CFA7 INC DE          ;
 $CFA8 INC DE          ;
 $CFA9 INC DE          ;
 $CFAA INC DE          ;
 $CFAB INC DE          ; }
 $CFAC LD BC,$0003     ; {Copies three sequential bytes of data from #REGhl to
 $CFAF LDIR            ; #REGde.}
 $CFB1 LD HL,$D18F     ; {Writes $01 to #R$D18F and return.
 $CFB4 LD (HL),$01     ;
 $CFB6 RET             ; }
; Writes "Julius opening the door" to the door flags/ cache.
@label=INIT_JULIUS_OPEN
*$CFB7 LD DE,$D241     ; {Writes #R$D241 to the address contained
 $CFBA LD L,(IX+$00)   ;           at (depending on which door is currently being actioned);
 $CFBD LD H,(IX+$01)   ; #TABLE(default,centre,centre,centre)
 $CFC0 LD (HL),E       ; { =h Address | =h Door | =h Target }
 $CFC1 INC HL          ; { #R$D165 | Door 1 | #R$CE14 }
 $CFC2 LD (HL),D       ; { #R$D173 | Door 2 | #R$CE16 }
                       ; { #R$D181 | Door 3 | #R$CE18 }
                       ; TABLE#}
 $CFC3 LD HL,$D0AE     ;
 $CFC6 LD (HL),$00     ;
 $CFC8 CALL $D8B0      ;
 $CFCB AND $20         ;
 $CFCD JR NZ,$CFD1     ;
 $CFCF LD (HL),$01     ;
@label=INIT_JULIUS_OPEN_SET_FLAG
*$CFD1 LD E,(IX+$02)   ;
 $CFD4 LD D,(IX+$03)   ;
 $CFD7 LD BC,$000A     ;
 $CFDA LDIR            ;
 $CFDC RET             ;
; Writes "Julius closing the door" to the door flags/ cache.
@label=INIT_JULIUS_CLOSE
 $CFDD LD A,$01        ; {Writes $01 to #R$D0B8.
 $CFDF LD ($D0B8),A    ; }
 $CFE2 LD DE,$D265     ; {Writes #R$D265 to the address contained
 $CFE5 LD L,(IX+$00)   ;           at (depending on which door is currently being actioned);
 $CFE8 LD H,(IX+$01)   ; #TABLE(default,centre,centre,centre)
 $CFEB LD (HL),E       ; { =h Address | =h Door | =h Target }
 $CFEC INC HL          ; { #R$D165 | Door 1 | #R$CE14 }
 $CFED LD (HL),D       ; { #R$D173 | Door 2 | #R$CE16 }
                       ; { #R$D181 | Door 3 | #R$CE18 }
                       ; TABLE#}
 $CFEE LD HL,$D0B8     ; {Handles copying $0009 bytes of data from the address (plus 1) contained
 $CFF1 LD E,(IX+$02)   ;           at (depending on which door is currently being actioned);
 $CFF4 LD D,(IX+$03)   ; #TABLE(default,centre,centre)
 $CFF7 INC DE          ; { =h Address | =h Door }
 $CFF8 LD BC,$0009     ; { #R$D167 | Door 1 }
 $CFFB LDIR            ; { #R$D175 | Door 2 }
                       ; { #R$D183 | Door 3 }
                       ; TABLE#
                       ; to #R$D0B8.}
 $CFFD LD A,$01        ;
 $CFFF LD ($D18F),A    ;
 $D002 LD HL,$D0B8     ;
 $D005 LD A,(HL)       ;
 $D006 LD (IX+$07),$02 ;
 $D00A LD (IX+$06),$05 ;
 $D00E AND A           ;
 $D00F RET Z           ;
 $D010 XOR A           ;
 $D011 LD (IX+$07),A   ;
 $D014 LD (IX+$06),A   ;
 $D017 LD (HL),A       ;
 $D018 RET             ;

; Routine at D019
;
; Used by the routine at #R$CE21.
c$D019 LD DE,$D289   ; {Writes #R$D289 to the address contained
 $D01C LD L,(IX+$00) ;           at (depending on which door is currently being actioned);
 $D01F LD H,(IX+$01) ; #TABLE(default,centre,centre,centre)
 $D022 LD (HL),E     ; { =h Address | =h Door | =h Target }
 $D023 INC HL        ; { #R$D165 | Door 1 | #R$CE14 }
 $D024 LD (HL),D     ; { #R$D173 | Door 2 | #R$CE16 }
                     ; { #R$D181 | Door 3 | #R$CE18 }
                     ; TABLE#}
 $D025 LD L,(IX+$0C) ; {Copies $000B bytes of data from (depending on which door is currently being actioned);
 $D028 LD H,(IX+$0D) ; #TABLE(default,centre,centre)
 $D02B LD E,(IX+$02) ; { =h Source | =h Destination | =h Door }
 $D02E LD D,(IX+$03) ; { #R$D171 | #R$D167 | Door 1 }
 $D031 LD BC,$000B   ; { #R$D17F | #R$D175 | Door 2 }
 $D034 LDIR          ; { #R$D18D | #R$D183 | Door 3 }
                     ; TABLE#}
 $D036 RET           ; Return.

; Routine at D037
@label=TODO_DOOR_RESET
c$D037 LD A,$01        ; {Writes $01 to the address contained
 $D039 LD L,(IX+$0A)   ;           at (depending on which door is currently being actioned);
 $D03C LD H,(IX+$0B)   ; #TABLE(default,centre,centre)
 $D03F LD (HL),A       ; { =h Address | =h Door }
                       ; { #R$D16F | Door 1 }
                       ; { #R$D17D | Door 2 }
                       ; { #R$D18B | Door 3 }
                       ; TABLE#
                       ; This is the first byte of character state data.}
 $D040 LD DE,$D2AD     ; {Writes #R$D2AD to the address contained
 $D043 LD L,(IX+$00)   ;           at (depending on which door is currently being actioned);
 $D046 LD H,(IX+$01)   ; #TABLE(default,centre,centre,centre)
 $D049 LD (HL),E       ; { =h Address | =h Door | =h Target }
 $D04A INC HL          ; { #R$D165 | Door 1 | #R$CE14 }
 $D04B LD (HL),D       ; { #R$D173 | Door 2 | #R$CE16 }
                       ; { #R$D181 | Door 3 | #R$CE18 }
                       ; TABLE#
                       ; This is copying the actual source data into the cache where it can be manipulated by the game events.
                       ; }
 $D04C LD L,(IX+$0A)   ; {Copies $000B bytes of data from (depending on which door is currently being actioned);
 $D04F LD H,(IX+$0B)   ; #TABLE(default,centre,centre)
 $D052 LD E,(IX+$02)   ; { =h Source | =h Destination | =h Door }
 $D055 LD D,(IX+$03)   ; { #R$D16F | #R$D167 | Door 1 }
 $D058 LD BC,$000B     ; { #R$D17D | #R$D175 | Door 2 }
 $D05B LDIR            ; { #R$D18B | #R$D183 | Door 3 }
                       ; TABLE#}
 $D05D LD A,$01        ; {Initialise #R$D18F (writes $01 to it).
 $D05F LD ($D18F),A    ; }
 $D062 LD L,(IX+$0A)   ; {Loads #REGa with the flag from the address contained
 $D065 LD H,(IX+$0B)   ;           at (depending on which door is currently being actioned);
 $D068 LD A,(HL)       ; #TABLE(default,centre,centre)
                       ; { =h Address | =h Door }
                       ; { #R$D16F | Door 1 }
                       ; { #R$D17D | Door 2 }
                       ; { #R$D18B | Door 3 }
                       ; TABLE#
                       ; As per #R$D037, this should be $01.}
 $D069 LD (IX+$07),$02 ;
 $D06D AND A           ;
 $D06E RET Z           ;
 $D06F LD (IX+$07),$00 ;
 $D073 LD (HL),$00     ;
 $D075 RET             ; Return.

; Data block at D076
b$D076 DEFB $01,$08,$08,$08,$60,$08,$08

; Data block at D07D
b$D07D DEFB $01,$0B,$0B,$0B,$0B,$0B,$0B,$01
 $D085 DEFB $1B,$01,$08,$08,$08,$80,$08,$08
 $D08D DEFB $0A,$0B,$0C,$0D,$0E,$00,$01,$08
 $D095 DEFB $08,$08,$40,$10,$08,$08,$08,$03
 $D09D DEFB $04,$05,$06,$07,$01,$01,$08,$08
 $D0A5 DEFB $08,$38,$0C,$06,$08,$08
 $D0AB DEFB $01,$0B,$0B                     ; Source
 $D0AE DEFB $00,$00,$01,$08,$08,$08,$50,$08
 $D0B6 DEFB $08,$80
 $D0B8 DEFB $00,$01,$0B,$0B,$0B,$0B,$0B,$0B ; {??
 $D0C0 DEFB $0B                             ; }
; Bandit 3.
 $D0C1 DEFB $00,$10,$0F,$11,$02,$01,$08,$08 ; {Bandit 3 source data.
 $D0C9 DEFB $08,$40,$40                     ; }
 $D0CC DEFB $00,$10,$0F,$11,$02,$01,$0B,$0B ; {Bandit 3 buffer.
 $D0D4 DEFB $0B,$0B,$0B                     ; }
; Bandit 4.
 $D0D7 DEFB $00,$12,$13,$14,$02,$01,$08,$08 ; {Bandit 4 source data.
 $D0DF DEFB $08,$30,$40                     ; }
 $D0E2 DEFB $00,$12,$13,$14,$02,$01,$0B,$0B ; {Bandit 4 buffer.
 $D0EA DEFB $0B,$0B,$0B                     ; }
; Bandit 5.
 $D0ED DEFB $00,$15,$16,$17,$02,$01,$08,$08 ; {Bandit 5 source data.
 $D0F5 DEFB $08,$20,$38                     ; }
 $D0F8 DEFB $00,$15,$16,$17,$02,$01,$0B,$0B ; {Bandit 5 buffer.
 $D100 DEFB $0B,$0B,$0B                     ; }
; Bandit 6.
 $D103 DEFB $00,$18,$19,$1A,$02,$01,$08,$08 ; {Bandit 6 source data.
 $D10B DEFB $08,$10,$38                     ; }
 $D10E DEFB $00,$18,$19,$1A,$02,$01,$0B,$0B ; {Bandit 6 buffer.
 $D116 DEFB $0B,$0B,$0B                     ; }
; Bandit 2.
 $D119 DEFB $00,$08,$08,$09,$07,$01,$08,$08 ; {Bandit 2 source data.
 $D121 DEFB $08,$01,$30                     ; }
 $D124 DEFB $00,$08,$08,$09,$07,$01,$0B,$0B ; {Bandit 2 buffer.
 $D12C DEFB $0B,$0B,$0B                     ; }
 $D12F DEFB $00,$10,$0F,$11,$02,$04,$00,$00
 $D137 DEFB $00,$0D,$40,$10,$08,$00,$00,$20
 $D13F DEFB $20,$20
 $D141 DEFB $00,$08,$08,$09,$07,$05,$00,$00
 $D149 DEFB $00,$00,$00
 $D14C DEFB $10,$08,$00,$00,$20,$20,$20
 $D153 DEFB $03,$04,$05,$06,$07,$01,$02,$0B ; {Target
 $D15B DEFB $00,$00,$1E                     ; }
 $D15E DEFB $0C,$06,$08,$08,$20,$20,$20

; Door 1 Flags.
@label=DOOR_1_FLAGS
g$D165 DEFW $CE14
@label=DOOR_1_SOURCE
 $D167 DEFW $D12F
@label=DOOR_1_BOWIE_ACTION
 $D169 DEFW $D85D
@label=DOOR_1_SCORING
 $D16B DEFW $0000
@label=DOOR_1_CASH_ACTION
 $D16D DEFB $00
 $D16E DEFB $08
@label=DOOR_1_CHAR_BUFFER
 $D16F DEFW $D0CC
@label=DOOR_1_CHAR_SOURCE
 $D171 DEFW $D0C1

; Door 2 Flags.
@label=DOOR_2_FLAGS
g$D173 DEFW $CE16
@label=DOOR_2_SOURCE
 $D175 DEFW $D141
@label=DOOR_2_BOWIE_ACTION
 $D177 DEFW $D85D
@label=DOOR_2_SCORING
 $D179 DEFW $0000
@label=DOOR_2_CASH_ACTION
 $D17B DEFB $00
 $D17C DEFB $06
@label=DOOR_2_CHAR_BUFFER
 $D17D DEFW $D124
@label=DOOR_2_CHAR_SOURCE
 $D17F DEFW $D119

; Door 3 Flags.
@label=DOOR_3_FLAGS
g$D181 DEFW $CE18
@label=DOOR_3_SOURCE
 $D183 DEFW $D153
@label=DOOR_3_BOWIE_ACTION
 $D185 DEFW $D85D
@label=DOOR_3_SCORING
 $D187 DEFW $0000
@label=DOOR_3_CASH_ACTION
 $D189 DEFB $00
 $D18A DEFB $1D
@label=DOOR_3_CHAR_BUFFER
 $D18B DEFW $D0CC
@label=DOOR_3_CHAR_SOURCE
 $D18D DEFW $D0C1

; Game status buffer entry at D18F
g$D18F DEFB $00

; Game status buffer entry at D190
g$D190 DEFB $00

; Game status buffer entry at D191
g$D191 DEFB $01

; Copy Source Character Data To Character State Data.
;
; .
;
; .
;
; Handles copying a "normal" bandit into the bandit state cache at #R$D71E.
@label=PREP_BANDIT_OPEN
c$D192 LD L,(IX+$02) ; {Handles copying $0007 bytes of data from the address contained
 $D195 LD H,(IX+$03) ;           at (depending on which door is currently being actioned);
 $D198 LD DE,$D71E   ; #TABLE(default,centre,centre)
 $D19B LD BC,$0007   ; { =h Address | =h Door }
 $D19E PUSH HL       ; { #R$D167 | Door 1 }
 $D19F PUSH DE       ; { #R$D175 | Door 2 }
 $D1A0 PUSH BC       ; { #R$D183 | Door 3 }
 $D1A1 LDIR          ; TABLE#
                     ; to #R$D71E.}
 $D1A3 CALL $D725    ; Call #R$D725 to begin this characters actions.
 $D1A6 POP BC        ; {Restore the source, target and counter from above.
 $D1A7 POP DE        ;
 $D1A8 POP HL        ; }
 $D1A9 EX DE,HL      ; Swap the source and target.
 $D1AA LD A,($D18F)  ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
 $D1AD AND A         ;           then return.
 $D1AE LD A,$00      ;
 $D1B0 LD ($D18F),A  ;
 $D1B3 RET NZ        ; }
 $D1B4 LDIR          ; {Else copy the (swapped) source back to the new target
 $D1B6 RET           ; and return.}
; And copying a successful bandit encounter to close the door.
@label=PREP_BANDIT_CLOSE
 $D1B7 LD L,(IX+$02) ; {Handles copying $0007 bytes of data from the address contained
 $D1BA LD H,(IX+$03) ;           at (depending on which door is currently being actioned);
 $D1BD LD DE,$D71E   ; #TABLE(default,centre,centre)
 $D1C0 LD BC,$0007   ; { =h Address | =h Door }
 $D1C3 PUSH HL       ; { #R$D167 | Door 1 }
 $D1C4 PUSH DE       ; { #R$D175 | Door 2 }
 $D1C5 PUSH BC       ; { #R$D183 | Door 3 }
 $D1C6 LDIR          ; TABLE#
                     ; to #R$D71E.}
 $D1C8 CALL $D771    ; Call #R$D771 to begin this characters actions.
 $D1CB POP BC        ; {Restore the source, target and counter from above.
 $D1CC POP DE        ;
 $D1CD POP HL        ; }
 $D1CE EX DE,HL      ; Swap the source and target.
 $D1CF LD A,($D18F)  ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
 $D1D2 AND A         ;           then return.
 $D1D3 LD A,$00      ;
 $D1D5 LD ($D18F),A  ;
 $D1D8 RET NZ        ; }
 $D1D9 LDIR          ; {Else copy the (swapped) source back to the new target
 $D1DB RET           ; and return.}
; Handles copying Bowie state data into the state cache at #R$D7C5.
@label=PREP_BOWIE
 $D1DC LD L,(IX+$02) ; {Handles copying $0009 bytes of data from the address contained
 $D1DF LD H,(IX+$03) ;           at (depending on which door is currently being actioned);
 $D1E2 LD DE,$D7C5   ; #TABLE(default,centre,centre)
 $D1E5 LD BC,$0009   ; { =h Address | =h Door }
 $D1E8 PUSH HL       ; { #R$D167 | Door 1 }
 $D1E9 PUSH DE       ; { #R$D175 | Door 2 }
 $D1EA PUSH BC       ; { #R$D183 | Door 3 }
 $D1EB LDIR          ; TABLE#
                     ; to #R$D7C5.}
 $D1ED CALL $D7CE    ; Call #R$D7CE to begin this characters actions.
 $D1F0 POP BC        ; {Restore the source, target and counter from above.
 $D1F1 POP DE        ;
 $D1F2 POP HL        ; }
 $D1F3 EX DE,HL      ; Swap the source and target.
 $D1F4 LD A,($D18F)  ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
 $D1F7 AND A         ;           then return.
 $D1F8 LD A,$00      ;
 $D1FA LD ($D18F),A  ;
 $D1FD RET NZ        ; }
 $D1FE LDIR          ; {Else copy the (swapped) source back to the new target
 $D200 RET           ; and return.}
; Handles copying customer state data into the state cache at #R$D48F.
@label=PREP_CUSTOMER
 $D201 LD L,(IX+$02) ; {Handles copying $000F bytes of data from the address contained
 $D204 LD H,(IX+$03) ;           at (depending on which door is currently being actioned);
 $D207 LD DE,$D48F   ; #TABLE(default,centre,centre)
 $D20A LD BC,$000F   ; { =h Address | =h Door }
 $D20D PUSH HL       ; { #R$D167 | Door 1 }
 $D20E PUSH DE       ; { #R$D175 | Door 2 }
 $D20F PUSH BC       ; { #R$D183 | Door 3 }
 $D210 LDIR          ; TABLE#
                     ; to #R$D48F.}
 $D212 CALL $D49E    ; Call #R$D49E to begin this characters actions.
 $D215 POP BC        ; {Restore the source, target and counter from above.
 $D216 POP DE        ;
 $D217 POP HL        ; }
 $D218 EX DE,HL      ; Swap the source and target.
 $D219 LD A,($D18F)  ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
 $D21C AND A         ;           then return.
 $D21D LD A,$00      ;
 $D21F LD ($D18F),A  ;
 $D222 RET NZ        ; }
 $D223 LDIR          ; {Else copy the (swapped) source back to the new target
 $D225 RET           ; and return.}
; Handles copying customer "is shot" state data into the state cache at
; #R$D48F.
@label=PREP_CUSTOMER_SHOT
 $D226 LD L,(IX+$02) ; {Handles copying $000F bytes of data from the address contained
 $D229 LD H,(IX+$03) ;           at (depending on which door is currently being actioned);
 $D22C LD DE,$D48F   ; #TABLE(default,centre,centre)
 $D22F LD BC,$000F   ; { =h Address | =h Door }
 $D232 PUSH HL       ; { #R$D167 | Door 1 }
 $D233 PUSH DE       ; { #R$D175 | Door 2 }
 $D234 PUSH BC       ; { #R$D183 | Door 3 }
 $D235 LDIR          ; TABLE#
                     ; to #R$D48F.}
 $D237 CALL $D57B    ; Call #R$D57B.
 $D23A POP BC        ; {Restore the source, target and counter from above.
 $D23B POP DE        ;
 $D23C POP HL        ; }
 $D23D EX DE,HL      ; Swap the source and target.
 $D23E LDIR          ; {Copy the (swapped) source back to the new target and
 $D240 RET           ; return.}
; Handles copying Julius state data into the state cache at #R$D8E5.
@label=PREP_JULIUS_OPEN
 $D241 LD L,(IX+$02) ; {Handles copying $000A bytes of data from the address contained
 $D244 LD H,(IX+$03) ;           at (depending on which door is currently being actioned);
 $D247 LD DE,$D8E5   ; #TABLE(default,centre,centre)
 $D24A LD BC,$000A   ; { =h Address | =h Door }
 $D24D PUSH HL       ; { #R$D167 | Door 1 }
 $D24E PUSH DE       ; { #R$D175 | Door 2 }
 $D24F PUSH BC       ; { #R$D183 | Door 3 }
 $D250 LDIR          ; TABLE#
                     ; to #R$D8E5.}
 $D252 CALL $D8EF    ; Call #R$D8EF.
 $D255 POP BC        ; {Restore the source, target and counter from above.
 $D256 POP HL        ;
 $D257 POP DE        ; }
 $D258 LD A,($D18F)  ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
 $D25B AND A         ;           then return.
 $D25C LD A,$00      ;
 $D25E LD ($D18F),A  ;
 $D261 RET NZ        ; }
 $D262 LDIR          ; {Copy the source to the target again and return.
 $D264 RET           ; }
; And copying a successful Julius encounter to close the door.
@label=PREP_JULIUS_CLOSE
 $D265 LD L,(IX+$02) ; {Handles copying $000A bytes of data from the address contained
 $D268 LD H,(IX+$03) ;           at (depending on which door is currently being actioned);
 $D26B LD DE,$D8E5   ; #TABLE(default,centre,centre)
 $D26E LD BC,$000A   ; { =h Address | =h Door }
 $D271 PUSH HL       ; { #R$D167 | Door 1 }
 $D272 PUSH DE       ; { #R$D175 | Door 2 }
 $D273 PUSH BC       ; { #R$D183 | Door 3 }
 $D274 LDIR          ; TABLE#
                     ; to #R$D8E5.}
 $D276 CALL $D997    ; Call #R$D997.
 $D279 POP BC        ; {Restore the source, target and counter from above.
 $D27A POP HL        ;
 $D27B POP DE        ; }
 $D27C LD A,($D18F)  ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
 $D27F AND A         ;           then return.
 $D280 LD A,$00      ;
 $D282 LD ($D18F),A  ;
 $D285 RET NZ        ; }
 $D286 LDIR          ; {Copy the source to the target again and return.
 $D288 RET           ; }
; Handles copying a "drawing bandit" into the bandit state cache at #R$DA0C.
@label=PREP_BANDIT_DRAW_OPEN
 $D289 LD L,(IX+$02) ; {Handles copying $000B bytes of data from the address contained
 $D28C LD H,(IX+$03) ;           at (depending on which door is currently being actioned);
 $D28F LD DE,$DA0C   ; #TABLE(default,centre,centre)
 $D292 LD BC,$000B   ; { =h Address | =h Door }
 $D295 PUSH HL       ; { #R$D167 | Door 1 }
 $D296 PUSH DE       ; { #R$D175 | Door 2 }
 $D297 PUSH BC       ; { #R$D183 | Door 3 }
 $D298 LDIR          ; TABLE#
                     ; to #R$DA0C.}
 $D29A CALL $DA17    ; Call #R$DA17.
 $D29D POP BC        ; {Restore the source, target and counter from above.
 $D29E POP HL        ;
 $D29F POP DE        ; }
 $D2A0 LD A,($D18F)  ; {Check if #R$D18F is zero. Write $00 to it. If it wasn't zero
 $D2A3 AND A         ;           then return.
 $D2A4 LD A,$00      ;
 $D2A6 LD ($D18F),A  ;
 $D2A9 RET NZ        ; }
 $D2AA LDIR          ; {Copy the source to the target again and return.
 $D2AC RET           ; }
; And copying a successful "drawing bandit" encounter to close the door.
@label=PREP_BANDIT_DRAW_CLOSE
 $D2AD LD L,(IX+$02) ; {Handles copying $000B bytes of data from the address contained
 $D2B0 LD H,(IX+$03) ;           at (depending on which door is currently being actioned);
 $D2B3 LD DE,$DA0C   ; #TABLE(default,centre,centre)
 $D2B6 LD BC,$000B   ; { =h Address | =h Door }
 $D2B9 PUSH HL       ; { #R$D167 | Door 1 }
 $D2BA PUSH DE       ; { #R$D175 | Door 2 }
 $D2BB PUSH BC       ; { #R$D183 | Door 3 }
 $D2BC LDIR          ; TABLE#
                     ; to #R$DA0C.}
 $D2BE CALL $DA85    ; Call #R$DA85.
 $D2C1 POP BC        ; {Restore the source, target and counter from above.
 $D2C2 POP HL        ;
 $D2C3 POP DE        ; }
 $D2C4 LD A,($D18F)  ; {Check if #R$D18F is zero. If it wasn't zero then
 $D2C7 AND A         ; return.
 $D2C8 LD ($D18F),A  ;
 $D2CB RET NZ        ; }
 $D2CC LDIR          ; {Copy the source to the target again and return.
 $D2CE RET           ; }

; Routine at D2CF
;
; Used by the routines at #R$C7C0 and #R$D3EA.
c$D2CF LD HL,($CE12) ; #R$CE12
 $D2D2 LD DE,$D2D7   ;
 $D2D5 PUSH DE       ;
 $D2D6 JP (HL)       ;
 $D2D7 LD C,A        ;
 $D2D8 XOR A         ;
 $D2D9 LD HL,$D2FF   ;
 $D2DC LD (HL),A     ;
 $D2DD INC HL        ;
 $D2DE LD (HL),A     ;
 $D2DF INC HL        ;
 $D2E0 LD (HL),A     ;
 $D2E1 INC HL        ;
 $D2E2 LD (HL),A     ;
 $D2E3 LD A,C        ;
 $D2E4 BIT 4,A       ;
 $D2E6 JR NZ,$D307   ;
 $D2E8 LD HL,$D303   ;
 $D2EB LD (HL),$00   ;
 $D2ED INC HL        ;
 $D2EE LD (HL),$00   ;
 $D2F0 INC HL        ;
 $D2F1 LD (HL),$00   ;
 $D2F3 BIT 0,A       ;
 $D2F5 JP NZ,$D386   ;
 $D2F8 BIT 1,A       ;
 $D2FA JP NZ,$D38C   ;
 $D2FD RET           ;
 $D2FE DEFB $02      ;
 $D2FF DEFB $00      ;

; Player Shot.
@label=HIT
g$D300 DEFB $00      ; #TABLE(default,centre,centre)
                     ; { =h Value | =h What }
                     ; { $00 | No shot/ inactive }
                     ; { $01 | Door 1 }
                     ; { $02 | Door 2 }
                     ; { $03 | Door 3 }
                     ; TABLE#

; Player Left/ Right.
;
; .
;
; .
;
; These flags don't control left/ right movement they just indicate whether
; keys are being pressed/ joystick used.
@label=RIGHT
g$D301 DEFB $00      ; Defaults to $00, holds $01 when the player is pressing
                     ; "right".
@label=LEFT
 $D302 DEFB $00      ; Defaults to $00, holds $01 when the player is pressing
                     ; "left".

; Player Shooting.
@label=TWO
g$D303 DEFB $00      ; Defaults to $00, holds $01 when the player is pressing
                     ; "2".
@label=THREE
 $D304 DEFB $00      ; Defaults to $00, holds $01 when the player is pressing
                     ; "3".
@label=ONE
 $D305 DEFB $00      ; Defaults to $00, holds $01 when the player is pressing
                     ; "1".
@label=CONTROLS_BYTE
 $D306 DEFB $11      ; Holds the controls in one byte.
                     ; #TABLE(default,centre,centre,centre)
                     ; { =h Value | =h Bits | Door }
                     ; { $10 | #EVAL($10, 2, 8) | Door 2 }
                     ; { $11 | #EVAL($11, 2, 8) | Door 3 }
                     ; { $12 | #EVAL($12, 2, 8) | Door 1 }
                     ; TABLE#

; Action Controls.
;
; Used by the routine at #R$D2CF.
;
; .
;
; On entry #REGa will contain one of;
; #TABLE(default,centre,centre,centre)
; { =h Value | =h Bits | Door }
; { $10 | #EVAL($10, 2, 8) | Door 2 }
; { $11 | #EVAL($11, 2, 8) | Door 3 }
; { $12 | #EVAL($12, 2, 8) | Door 1 }
; TABLE#
; This is written to #R$D306, and then decoded into writing a $01, $02 or $03 to #R$D300 to represent which door has
; been shot at.  This routine also writes $01 to #R$D305, #R$D303 and #R$D304 to represent the same thing.
; Before returning, #REGhl is set to the screen location for displaying the shot mask/ shot image in the centre of the
; door.
@label=CONTROLS
c$D307 LD HL,$D306   ; {Writes #REGa to #R$D306 and sets #REGhl=#R$D300.
 $D30A LD (HL),A     ;
 $D30B LD HL,$D300   ; }
 $D30E LD A,C        ;
 $D30F BIT 0,A       ; {If "3" was pressed then jump to #R$D33B (a check for if
 $D311 JR NZ,$D33B   ; bit 0 is set).}
 $D313 BIT 1,A       ; {If "1" was pressed then jump to #R$D360 (a check for if
 $D315 JR NZ,$D360   ; bit 1 is set).}
; Handles settings flags and shot drawing location for door 2.
@label=SHOT_TWO
 $D317 LD A,($D303)  ; {If #R$D303 is not zero then return.
 $D31A AND A         ;
 $D31B RET NZ        ; }
 $D31C LD ($D304),A  ; {Sets the other two door flags to zero (#R$D304 and
 $D31F LD ($D305),A  ; #R$D305).}
 $D322 INC A         ; {Indicate the the middle door is being shot at (write
 $D323 LD ($D303),A  ; $01 to #R$D303 and $02 to #R$D300).
 $D326 LD A,$02      ;
 $D328 LD (HL),A     ; }
 $D329 LD HL,$D8AC   ; {Increase #R$D8AC by one.
 $D32C INC (HL)      ; }
 $D32D LD HL,$482F   ; {Sets the screen location for this shot to $482F and
 $D330 PUSH HL       ; stash it.}
 $D331 CALL $D3B4    ; Draw the shot mask.
 $D334 POP HL        ; {Grab the screen location again, and now draw the shot.
 $D335 CALL $D3CB    ; }
 $D338 JP $6500      ; Jump to #R$6500.
; Handles settings flags and shot drawing location for door 3.
@label=SHOT_THREE
*$D33B LD A,($D304)  ; {If #R$D304 is not zero then return.
 $D33E AND A         ;
 $D33F RET NZ        ; }
 $D340 LD ($D303),A  ; {Sets the other two door flags to zero (#R$D303 and
 $D343 LD ($D305),A  ; #R$D305).}
 $D346 INC A         ; {Indicate the the right door is being shot at (write $01
 $D347 LD ($D304),A  ; to #R$D304 and $03 to #R$D300).
 $D34A LD A,$03      ;
 $D34C LD (HL),A     ; }
 $D34D LD HL,$D8AC   ; {Shifts the value at #R$D8AC to the left with bit 7
 $D350 SLA (HL)      ; moved to the carry flag and bit 0 reset (zeroed).}
 $D352 LD HL,$483A   ; {Sets the screen location for this shot to $483A and
 $D355 PUSH HL       ; stash it.}
 $D356 CALL $D3B4    ; Draw the shot mask.
 $D359 POP HL        ; {Grab the screen location again, and now draw the shot.
 $D35A CALL $D3CB    ; }
 $D35D JP $6502      ; Jump to #R$6502.
; Handles settings flags and shot drawing location for door 1.
@label=SHOT_ONE
*$D360 LD A,($D305)  ; {If #R$D305 is not zero then return.
 $D363 AND A         ;
 $D364 RET NZ        ; }
 $D365 LD ($D303),A  ; {Sets the other two door flags to zero (#R$D303 and
 $D368 LD ($D304),A  ; #R$D304).}
 $D36B INC A         ; {Indicate the the left door is being shot at (write $01
 $D36C LD ($D305),A  ; to #R$D305 and $01 to #R$D300).
 $D36F LD A,$01      ;
 $D371 LD (HL),A     ; }
 $D372 LD HL,$D8AC   ; {Shifts the value at #R$D8AC to the left with bit 7
 $D375 SLA (HL)      ; moved to the carry flag and bit 0 reset (zeroed).}
 $D377 LD HL,$4824   ; {Sets the screen location for this shot to $4824 and
 $D37A PUSH HL       ; stash it.}
 $D37B CALL $D3B4    ; Draw the shot mask.
 $D37E POP HL        ; {Grab the screen location again, and now draw the shot.
 $D37F CALL $D3CB    ; }
 $D382 CALL $6504    ; Jump to #R$6504.
 $D385 RET           ; Return.
; Sets the flag for indicating "right" has been pressed by the player.
@label=SET_RIGHT
*$D386 LD HL,$D301   ; {Write $01 to #R$D301 and return.
 $D389 LD (HL),$01   ;
 $D38B RET           ; }
; Sets the flag for indicating "left" has been pressed by the player.
@label=SET_LEFT
*$D38C LD HL,$D302   ; {Write $01 to #R$D302 and return.
 $D38F LD (HL),$01   ;
 $D391 RET           ; }

; Reads In-Game Joystick Controls.
@label=CONTROLS_JOYSTICK
c$D392 LD BC,$00DF   ;
 $D395 IN A,($0C)    ; #HTML(Reads input from the Kempston joystick (see <a
                     ; href="../reference/pokes.html">POKES</a>)).
 $D397 AND A         ; {If there's nothing to read fall back to #R$D39B anyway.
 $D398 JR Z,$D39B    ; }
 $D39A RET           ; Return.

; Reads In-Game Keyboard Controls (1-2-3).
;
; Used by the routine at #R$D392.
@label=CONTROLS_KEYBOARD
c$D39B LD A,$F7      ; {Read keys 1-2-3-4-5.
 $D39D IN A,($FE)    ; }
@label=CONTROLS_INPUT_1
 $D39F BIT 0,A       ; {If "1" isn't being pressed then jump to #R$D3A6.
 $D3A1 JR NZ,$D3A6   ; }
 $D3A3 LD A,$12      ; {Set #REGa=$12 and return.
 $D3A5 RET           ; }
@label=CONTROLS_INPUT_2
*$D3A6 BIT 1,A       ; {If "2" isn't being pressed then jump to #R$D3AD.
 $D3A8 JR NZ,$D3AD   ; }
 $D3AA LD A,$10      ; {Set #REGa=$10 and return.
 $D3AC RET           ; }
@label=CONTROLS_INPUT_3
*$D3AD BIT 2,A       ; {If "3" isn't being pressed then jump to #R$D3E2.
 $D3AF JR NZ,$D3E2   ; }
 $D3B1 LD A,$11      ; {Set #REGa=$11 and return.
 $D3B3 RET           ; }

; Draw Gun Shot Mask.
;
; Used by the routine at #R$D307.
@label=DRAW_SHOT_MASK
c$D3B4 LD DE,$FF58   ; {Point to #R$FF58 and set the image dimensions.
 $D3B7 LD BC,$0802   ; }
 $D3BA PUSH HL       ; Stash the screen location.
 $D3BB CALL $D5FA    ; Calls #R$D5FA.
 $D3BE HALT          ; {Very short pause.
 $D3BF HALT          ; }
 $D3C0 POP HL        ; Grab the screen location.
 $D3C1 LD DE,$FF58   ; {Point to #R$FF58 and set the image dimensions.
 $D3C4 LD BC,$0802   ; }
 $D3C7 CALL $D5FA    ; Calls #R$D5FA.
 $D3CA RET           ; Return.

; Draw Gun Shot.
;
; Used by the routine at #R$D307.
@label=DRAW_GUN_SHOT
c$D3CB LD DE,$FF68   ; {Point to #R$FF68 and set the image dimensions.
 $D3CE LD BC,$0802   ; }
 $D3D1 PUSH HL       ; Stash the screen location.
 $D3D2 CALL $D5FA    ; Calls #R$D5FA.
 $D3D5 HALT          ; {Very short pause.
 $D3D6 HALT          ; }
 $D3D7 POP HL        ; Grab the screen location.
 $D3D8 LD DE,$FF68   ; {Point to #R$FF68 and set the image dimensions.
 $D3DB LD BC,$0802   ; }
 $D3DE CALL $D5FA    ; Calls #R$D5FA.
 $D3E1 RET           ; Return.

; Reads In-Game Controls (Left + Right).
;
; Used by the routine at #R$D39B.
@label=CONTROLS_INPUT_O_P
c$D3E2 LD A,$DF      ; {Read keys P-O-I-U-Y.
 $D3E4 IN A,($FE)    ; }
 $D3E6 CPL           ; Invert all the bits of #REGa.
 $D3E7 AND $03       ; Keep only bits 0 and 1 (i.e. we only care about "P" and
                     ; "O" for left and right).
 $D3E9 RET           ; Return.

; Routine at D3EA
@label=DOOR_1_PREP
c$D3EA LD HL,$CE14   ; #R$CE14
 $D3ED XOR A         ; {Sets #REGa=0 and #REGb=$06 (counter).
 $D3EE LD B,$06      ; }
*$D3F0 OR (HL)       ;
 $D3F1 INC HL        ;
 $D3F2 DJNZ $D3F0    ;
 $D3F4 AND A         ;
 $D3F5 POP BC        ;
 $D3F6 RET NZ        ;
 $D3F7 PUSH BC       ;
 $D3F8 LD HL,$D8AC   ;
 $D3FB INC (HL)      ;
 $D3FC LD DE,$0400   ;
 $D3FF CALL $D407    ;
 $D402 RET NC        ;
 $D403 POP AF        ;
 $D404 POP AF        ;
 $D405 AND A         ;
 $D406 RET           ;
*$D407 LD HL,$CA80   ;
 $D40A LD A,(HL)     ;
 $D40B AND A         ;
 $D40C RET Z         ;
 $D40D LD (HL),$00   ;
 $D40F SCF           ;
 $D410 RET           ;
; This entry point is used by the routine at #R$C7C0.
*$D411 CALL $D3EA    ;
*$D414 PUSH DE       ;
 $D415 CALL $D2CF    ;
 $D418 LD A,($D301)  ;
 $D41B AND A         ;
 $D41C CALL NZ,$D42D ;
 $D41F LD A,($D302)  ;
 $D422 AND A         ;
 $D423 CALL NZ,$D449 ;
 $D426 POP DE        ;
 $D427 DEC DE        ;
 $D428 LD A,D        ;
 $D429 OR E          ;
 $D42A RET Z         ;
 $D42B JR $D414      ;
*$D42D CALL $6600    ;
 $D430 LD DE,$0400   ;
 $D433 LD HL,$D45D   ;
 $D436 LD A,(HL)     ;
 $D437 INC A         ;
 $D438 LD (HL),A     ;
 $D439 CP $0D        ;
 $D43B JR C,$D43F    ;
 $D43D LD (HL),$01   ;
*$D43F CALL $D45E    ;
 $D442 LD A,($D45D)  ;
 $D445 LD ($D45C),A  ;
 $D448 RET           ;
*$D449 CALL $6700    ;
 $D44C LD DE,$0400   ;
 $D44F LD HL,$D45D   ;
 $D452 LD A,(HL)     ;
 $D453 DEC A         ;
 $D454 LD (HL),A     ;
 $D455 AND A         ;
 $D456 JR NZ,$D43F   ;
 $D458 LD (HL),$0C   ;
 $D45A JR $D43F      ;

; Cash Deposit Box Reference.
@label=CASHBOX_REF
g$D45C DEFB $01      ; Holds 01-12 which refer to the deposit cash boxes
                     ; (#R$CC8D onwards).
 $D45D DEFB $01      ; Holds 01-12 which refer to the deposit cash boxes
                     ; (#R$CC8D onwards).

; Routine at D45E
;
; Used by the routines at #R$C7C0 and #R$D3EA.
c$D45E LD A,($D45C)  ;
 $D461 LD C,$38      ;
 $D463 CALL $D46B    ;
 $D466 LD A,($D45D)  ;
 $D469 LD C,$3A      ;
*$D46B LD B,$03      ;
*$D46D PUSH AF       ;
 $D46E CALL $D47E    ;
 $D471 POP AF        ;
 $D472 INC A         ;
 $D473 CP $0D        ;
 $D475 CALL NC,$D47B ;
 $D478 DJNZ $D46D    ;
 $D47A RET           ;
*$D47B LD A,$01      ;
 $D47D RET           ;
*$D47E CP $07        ;
 $D480 LD HL,$5805   ;
 $D483 JR NC,$D488   ;
 $D485 LD HL,$58FF   ;
*$D488 ADD A,A       ;
 $D489 ADD A,L       ;
 $D48A LD L,A        ;
 $D48B LD (HL),C     ;
 $D48C INC HL        ;
 $D48D LD (HL),C     ;
 $D48E RET           ;

; Customer Logic.
;
; .
;
; .
;
; Character state variables/ flags.
@label=CUSTOMER_FRAME_1
c$D48F DEFB $03        ; Character frame index 1.
@label=CUSTOMER_FRAME_2
 $D490 DEFB $04        ; Character frame index 2.
@label=CUSTOMER_FRAME_3
 $D491 DEFB $05        ; Character frame index 3.
@label=CUSTOMER_FRAME_4
 $D492 DEFB $06        ; Character frame index 4.
@label=CUSTOMER_FRAME_5
 $D493 DEFB $07        ; Character frame index 5.
@label=CUSTOMER_FLAG_UNCOVER
 $D494 DEFB $01        ; Represents whether the customer will move to uncover a bandit
                       ;           ($00 "normal" / $01 "uncover" action).
@label=CUSTOMER_STATE_REF
 $D495 DEFB $02        ; The current character state.
@label=CUSTOMER_1_TIMER
 $D496 DEFB $0B        ; Character timer 1.
@label=CUSTOMER_2_TIMER
 $D497 DEFB $00        ; Character timer 2.
@label=CUSTOMER_3_TIMER
 $D498 DEFB $00        ; Character timer 3.
@label=CUSTOMER_4_TIMER
 $D499 DEFB $1E        ; Character timer 4.
@label=CUSTOMER_5_TIMER
 $D49A DEFB $0C        ; Character timer 5.
@label=CUSTOMER_6_TIMER
 $D49B DEFB $06        ; Character timer 6.
@label=CUSTOMER_7_TIMER
 $D49C DEFB $08        ; Character timer 7.
@label=CUSTOMER_8_TIMER
 $D49D DEFB $08        ; Character timer 8.
; This routine looks at the current character state and routes to the correct
; subroutine.
@label=CUSTOMER_ROUTING
*$D49E LD HL,$D495     ; {#REGa=#R$D495.
 $D4A1 LD A,(HL)       ; }
 $D4A2 DEC A           ; {Work out which routine to use based on the current state.
 $D4A3 JR Z,$D4BD      ; #TABLE(default,centre,centre)
 $D4A5 DEC A           ; { =h #REGa | =h Routine }
 $D4A6 JR Z,$D4CD      ; { $01 | #R$D4BD }
 $D4A8 DEC A           ; { $02 | #R$D4CD }
 $D4A9 JR Z,$D4DD      ; { $03 | #R$D4DD }
 $D4AB DEC A           ; { $04 | #R$D4ED }
 $D4AC JR Z,$D4ED      ; { $05 | #R$D524 }
 $D4AE DEC A           ; { $06 | #R$D540 }
 $D4AF JP Z,$D524      ; { $07 | #R$D559 }
 $D4B2 DEC A           ; { $08 | #R$D56C }
 $D4B3 JP Z,$D540      ; TABLE#
 $D4B6 DEC A           ;
 $D4B7 JP Z,$D559      ;
 $D4BA JP $D56C        ; }
; Handle door frame 1 countdown/ transition to door frame 2.
@label=CUSTOMER_OPEN_1
*$D4BD LD A,($D496)    ; {Decrease #R$D496 by one, return if result is not
 $D4C0 DEC A           ; zero.
 $D4C1 LD ($D496),A    ;
 $D4C4 RET NZ          ; }
 $D4C5 INC (HL)        ; Move onto next character state.
 $D4C6 LD A,($D48F)    ; Grab the character frame index from #R$D48F.
 $D4C9 CALL $D6D1      ; {Call #R$D6D1 and return.
 $D4CC RET             ; }
; Handle door frame 2 countdown/ transition to door frame 3.
@label=CUSTOMER_OPEN_2
*$D4CD LD A,($D497)    ; {Decrease #R$D497 by one, return if result is not
 $D4D0 DEC A           ; zero.
 $D4D1 LD ($D497),A    ;
 $D4D4 RET NZ          ; }
 $D4D5 INC (HL)        ; Move onto next character state.
 $D4D6 LD A,($D48F)    ; Grab the character frame index from #R$D48F.
 $D4D9 CALL $D6DF      ; {Call #R$D6DF and return.
 $D4DC RET             ; }
; Handle door frame 3 countdown/ transition to door frame 4.
@label=CUSTOMER_OPEN_3
*$D4DD LD A,($D498)    ; {Decrease #R$D498 by one, return if result is not
 $D4E0 DEC A           ; zero.
 $D4E1 LD ($D498),A    ;
 $D4E4 RET NZ          ; }
 $D4E5 INC (HL)        ; Move onto next character state.
 $D4E6 LD A,($D48F)    ; Grab the character frame index from #R$D48F.
 $D4E9 CALL $D6ED      ; {Call #R$D6ED and return.
 $D4EC RET             ; }
; Handle door frame 4 timer...
@label=CUSTOMER_OPEN_4
*$D4ED LD DE,$CF91     ; {Calls #R$D5A3 with #REGde=#R$CF91.
 $D4F0 CALL $D5A3      ; }
 $D4F3 LD A,($D499)    ; {Decrease #R$D499 by one, return if result is not
 $D4F6 DEC A           ; zero.
 $D4F7 LD ($D499),A    ;
 $D4FA RET NZ          ; }
 $D4FB LD A,($D494)    ; {Jump to #R$D516 if #R$D494 is not zero.
 $D4FE AND A           ;
 $D4FF JR NZ,$D516     ; }
 $D501 LD (HL),$07     ; Set #R$D495 to use state $07 (#R$D559 on the next call
                       ; to #R$D49E).
 $D503 LD A,($D48F)    ; {Call #R$D6DF using the character frame index from
 $D506 CALL $D6DF      ; #R$D48F.}
 $D509 LD (IX+$06),$05 ; Issue 500 points (by writing $05 to the high order
                       ; byte of, e.g. #R$D16B).
 $D50D LD A,$01        ; {Register this as a deposit (by writing $01 to e.g.
 $D50F LD (IX+$08),A   ; #R$D16D).}
 $D512 LD ($D190),A    ; Writes $01 to #R$D190.
 $D515 RET             ; Return.
; Handle customer putting their hands up.
@label=CUSTOMER_HANDS_UP
*$D516 LD A,($D495)    ; {Increase #R$D495 by one.
 $D519 INC A           ;
 $D51A LD ($D495),A    ; }
 $D51D LD A,($D490)    ; Grab the character frame index from #R$D490.
 $D520 CALL $D6ED      ; {Call #R$D6ED and return.
 $D523 RET             ; }
; Handles customer uncovering a "hidden" bandit action.
@label=CUSTOMER_UNCOVER
*$D524 LD DE,$CF91     ; {Calls #R$D5A3 with #REGde=#R$CF91.
 $D527 CALL $D5A3      ; }
 $D52A LD A,($D49A)    ; {Decrease #R$D49A by one, return if result is not
 $D52D DEC A           ; zero.
 $D52E LD ($D49A),A    ;
 $D531 RET NZ          ; }
 $D532 LD A,($D495)    ; {Increase #R$D495 by one.
 $D535 INC A           ;
 $D536 LD ($D495),A    ; }
 $D539 LD A,($D491)    ; Grab the character frame index from #R$D491.
 $D53C CALL $D6ED      ; {Call #R$D6ED and return.
 $D53F RET             ; }
; Handle door frame 4 countdown/ transition to door frame 3.
@label=CUSTOMER_CLOSE_3
*$D540 LD A,($D49B)    ; {Decrease #R$D49B by one, return if result is not
 $D543 DEC A           ; zero.
 $D544 LD ($D49B),A    ;
 $D547 RET NZ          ; }
 $D548 CALL $CEB8      ; Call #R$CEB8.
 $D54B LD L,(IX+$02)   ; {Load, e.g. #R$D167 (bandit source data) into #REGhl, and
 $D54E LD H,(IX+$03)   ;           write $03 to the address contained in it.
 $D551 LD (HL),$03     ; }
 $D553 INC HL          ; {Increase the pointer to the bandit source data by 3 and
 $D554 INC HL          ;           write $04 to this byte.
 $D555 INC HL          ;
 $D556 LD (HL),$04     ; }
 $D558 RET             ; Return.
; Handle door frame 3 countdown/ transition to door frame 2.
@label=CUSTOMER_CLOSE_2
*$D559 LD A,($D49C)    ; {Decrease #R$D49C by one, return if result is not
 $D55C DEC A           ; zero.
 $D55D LD ($D49C),A    ;
 $D560 RET NZ          ; }
 $D561 LD HL,$D495     ; {Increase #R$D495 by one.
 $D564 INC (HL)        ; }
 $D565 LD A,($D48F)    ; Grab the character frame index from #R$D48F.
 $D568 CALL $D6D1      ; {Call #R$D6D1 and return.
 $D56B RET             ; }
; Handle door frame 2 countdown/ transition to door frame 1.
@label=CUSTOMER_CLOSE_1
*$D56C LD A,($D49D)    ; {Decrease #R$D49D by one, return if result is not
 $D56F DEC A           ; zero.
 $D570 LD ($D49D),A    ;
 $D573 RET NZ          ; }
 $D574 CALL $D664      ; Call #R$D664 (i.e. no character/ door is shut).
 $D577 CALL $D8A1      ; {Call #R$D8A1 and return.
 $D57A RET             ; }
; Handles customer being shot.
@label=CUSTOMER_SHOT
*$D57B LD HL,$D495     ; {If #R$D495 is zero then jump to #R$D584 else jump to
 $D57E LD A,(HL)       ; #R$D58C.
 $D57F DEC A           ;
 $D580 JR Z,$D584      ;
 $D582 JR $D58C        ; }
@label=CUSTOMER_SHOT_MIDAIR
*$D584 INC (HL)        ; Move onto next character state.
 $D585 LD A,($D492)    ; Grab the character frame index from #R$D492.
 $D588 CALL $D6ED      ; {Call #R$D6ED and return.
 $D58B RET             ; }
@label=CUSTOMER_SHOT_FLOOR
*$D58C LD A,($D497)    ; {Decrease #R$D497 by one, return if result is not
 $D58F DEC A           ; zero.
 $D590 LD ($D497),A    ;
 $D593 RET NZ          ; }
 $D594 LD A,($D493)    ; Grab the character frame index from #R$D493.
 $D597 CALL $D6ED      ; Call #R$D6ED.
 $D59A LD A,$02        ; {Writes $02 to #R$D2FE.
 $D59C LD ($D2FE),A    ; }
 $D59F CALL $D8A1      ; {Call #R$D8A1 and return.
 $D5A2 RET             ; }

; Hit Detection.
;
; Compares the #R$CE1A against the user input for a shot.
;       If there isn't a shot to account for then we simply return,
;       else we action a jump to the address held in #REGde on entry.
@label=HIT_DETECTION
c$D5A3 PUSH HL       ; Store #REGhl on the stack for later.
 $D5A4 LD A,($D300)  ; {Does a comparison of #R$D300 against #R$CE1A.
 $D5A7 LD HL,$CE1A   ;
 $D5AA CP (HL)       ; }
 $D5AB POP HL        ; {#HTML(Retrieve #REGhl off the stack and return if the
 $D5AC RET NZ        ; numbers compared were <em>NOT</em> the same.)}
 $D5AD POP AF        ; Restores the character state to #REGa.
 $D5AE EX DE,HL      ; {Jumps to the address held in #REGde on entry (with
 $D5AF JP (HL)       ; #REGde now containing the original #REGhl address).}

; Character Index.
;
; Returns the 16 bit memory location of a character from a given character
; index in #REGa.
@label=CHARACTER_ADDR
c$D5B0 LD H,$00      ; {Using #R$6800 as a base address (which is the first character), this works out the character frame from a
 $D5B2 LD L,A        ;           given index passed in #REGa. To give an example with $1A;
 $D5B3 ADD HL,HL     ; #LIST
 $D5B4 ADD HL,HL     ; { #HTML(Loads <strong>$1A</strong> as the low-order byte; #REGhl=$001A) }
 $D5B5 ADD HL,HL     ; { #HTML(Times by <strong>$200</strong>; store this in #REGde=$3400) }
 $D5B6 ADD HL,HL     ; { #HTML(Loads <strong>$1A</strong> as the low-order byte; #REGhl=$001A) }
 $D5B7 ADD HL,HL     ; { #HTML(Times by <strong>$10</strong>; #REGhl=$1A0) }
 $D5B8 ADD HL,HL     ; { #REGhl+#REGde=$35A0 }
 $D5B9 ADD HL,HL     ; { #HTML(Add <strong>$6800</strong>=#R$9DA0) }
 $D5BA ADD HL,HL     ; LIST#
 $D5BB ADD HL,HL     ;
 $D5BC EX DE,HL      ;
 $D5BD LD H,$00      ;
 $D5BF LD L,A        ;
 $D5C0 ADD HL,HL     ;
 $D5C1 ADD HL,HL     ;
 $D5C2 ADD HL,HL     ;
 $D5C3 ADD HL,HL     ;
 $D5C4 ADD HL,DE     ;
 $D5C5 LD DE,$6800   ;
 $D5C8 ADD HL,DE     ; }
 $D5C9 RET           ; Returns the address in #REGhl.

; Draw Character In Doorway.
;
; Draws the character frame at the location of one of the three (open) doors. This is direct function, hence is
;       only used when the door is open (it doesn't utilise the door buffer).
@label=DRAW_CHARACTER_IN_DOORWAY
c$D5CA CALL $D5B0    ; Retrieve the memory location for the character frame
                     ; from the passed index in #REGa.
 $D5CD EX DE,HL      ;
 $D5CE LD B,$58      ; {Sets the height and width.
 $D5D0 LD C,$06      ; }
 $D5D2 LD A,($CE1A)  ; Retrieves the currently in-focus door from #R$CE1A.
 $D5D5 LD HL,$4082   ; {Work out which screen position to use for the currently focused door;
 $D5D8 DEC A         ; #TABLE(default,centre)
 $D5D9 JR Z,$D5E6    ; { =h #REGa | =h Screen Address }
 $D5DB DEC A         ; { $01 | $4082 }
 $D5DC LD HL,$408D   ; { $02 | $408D }
 $D5DF JR Z,$D5E6    ; { $03 | $4098 }
 $D5E1 LD HL,$4098   ; TABLE#
 $D5E4 JR $D5E6      ; Jump to #R$D5E6 to draw the character and handle the return.
                     ; }

; Copy Routine.
;
; Used by the routines at #R$5B92, #R$C300, #R$CBD0, #R$CC5A, #R$CC9B, #R$CDAE,
; #R$D5CA and #R$D664.
;
; .
;
; This routine copies bytes from #REGde TO #REGhl and uses the #REGbc register to track the number of bytes
;       and the number of lines.
@label=COPY_ROUTINE
c$D5E6 PUSH BC       ; {Copies bytes from #REGde TO #REGhl x #REGc number of
 $D5E7 PUSH HL       ; times.
 $D5E8 LD B,$00      ;
 $D5EA EX DE,HL      ;
 $D5EB LDIR          ; }
 $D5ED EX DE,HL      ; {Restores #REGhl with the original screen buffer
 $D5EE POP HL        ; location.}
 $D5EF INC H         ; {ggg
 $D5F0 LD A,H        ;
 $D5F1 AND $07       ;
 $D5F3 CALL Z,$D610  ; }
 $D5F6 POP BC        ; {Grabs #REGb and decreases it by one. Loop back round to
 $D5F7 DJNZ $D5E6    ; #R$D5E6 if #REGb is not zero.}
 $D5F9 RET           ; Return.

; Merge Gun Shot Onto Background.
;
; Used by the routines at #R$5B95, #R$D3B4 and #R$D3CB.
@label=MERGE_SHOT
c$D5FA PUSH BC       ; {Store #REGbc and #REGhl for later.
 $D5FB PUSH HL       ; }
@label=MERGE_SHOT_LOOP
*$D5FC LD A,(DE)     ; Loads the contents of the source address held in #REGde.
 $D5FD XOR (HL)      ; Performs a bit-by-bit XOR comparison against the contents of the destination address held by #REGhl.
                     ; #TABLE(default,centre,centre,centre)
                     ; { =h #REGa register bit | =h Comparison bit | =h #REGa bit set to }
                     ; { 0 | 0 | 0 }
                     ; { 0 | 1 | 1 }
                     ; { 1 | 0 | 1 }
                     ; { 1 | 1 | 0 }
                     ; TABLE#
 $D5FE LD (HL),A     ; Stores the result at the destination address.
 $D5FF INC HL        ; {Increase the source and destination addresses by one, decrease the counter by one. Loop back to #R$D5FC
 $D600 INC DE        ;           until the #REGc counter is zero.
 $D601 DEC C         ;
 $D602 JR NZ,$D5FC   ; }
 $D604 POP HL        ; Restore #REGhl with the original destination address.
 $D605 INC H         ; {Increase the high-order byte of #REGhl by one, if this
 $D606 LD A,H        ; is on a screen third boundary (@todo what's the term for
 $D607 AND $07       ; this?) then call #R$D610.
 $D609 CALL Z,$D610  ; }
 $D60C POP BC        ; {Decrease the #REGb counter by one and loop back to
 $D60D DJNZ $D5FA    ; #R$D5FA until it is zero.}
 $D60F RET           ; Return.

; Routine at D610
;
; Used by the routines at #R$D5E6 and #R$D5FA.
;
; .
;
; On entry #REGhl points to an address in the screen attribute buffer.
@label=CALC_ATTR
c$D610 LD A,H        ; {Let's use $58C8 as an example;
 $D611 SUB $08       ; #LIST
 $D613 LD H,A        ; { #REGa=$58 }
 $D614 LD A,L        ; { Subtract $08 = #REGa=$50 }
 $D615 ADD A,$20     ; { Write it into #REGhl=$50C8 }
 $D617 LD L,A        ; { #REGa=$C8 }
 $D618 RET NC        ; { Add $20 = #REGa=$E8 }
 $D619 LD A,H        ; { Write it into #REGhl=$50E8 }
 $D61A ADD A,$08     ; LIST#
 $D61C LD H,A        ; }
 $D61D RET           ; Return.

; Write Character And Door To Buffer.
;
; Door frames 2 and 3 both contain a "section" of a game character. This is copied into a buffer by first drawing
;       the game character fully to #R$EA90. Then the door frame is drawn over the top (in the correct position).
;
; .
;
; Draws the game character together with door frame 2.
@label=CHARACTER_DOOR_FRAME_2
c$D61E CALL $D5B0    ; {On entry #REGa points to a character index. The call to #R$D5B0 translates this to the memory location of
 $D621 CALL $D654    ;           the character frame data (held in #REGhl) and then calls #R$D654.
                     ; }
@label=DOOR_FRAME_2_COPY
 $D624 LD HL,$BCE8   ; {Copies #R$BCE8 into the #R$EA90 (+2 bytes ~ $EA92).
 $D627 LD DE,$EA92   ;
 $D62A LD B,$58      ;
@label=DOOR_FRAME_2_COPY_LOOP
*$D62C PUSH BC       ;
 $D62D LD BC,$0005   ;
 $D630 LDIR          ;
 $D632 INC DE        ;
 $D633 INC DE        ;
 $D634 POP BC        ;
 $D635 DJNZ $D62C    ; }
 $D637 RET           ; Return.
; Draws the game character together with door frame 3.
@label=CHARACTER_DOOR_FRAME_3
*$D638 CALL $D5B0    ; {On entry #REGa points to a character index. The call to #R$D5B0 translates this to the memory location of
 $D63B CALL $D654    ;           the character frame data (held in #REGhl) and then calls #R$D654.
                     ; }
@label=DOOR_FRAME_3_COPY
 $D63E LD HL,$BEA0   ; {Copies #R$BEA0 into the #R$EA90 (+4 bytes ~ $EA94).
 $D641 LD DE,$EA94   ;
 $D644 LD B,$58      ;
@label=DOOR_FRAME_3_COPY_LOOP
*$D646 PUSH BC       ;
 $D647 LD BC,$0003   ;
 $D64A LDIR          ;
 $D64C INC DE        ;
 $D64D INC DE        ;
 $D64E INC DE        ;
 $D64F INC DE        ;
 $D650 POP BC        ;
 $D651 DJNZ $D646    ; }
 $D653 RET           ; Return.
; Draws the game character alone to the door frame buffer.
@label=DOOR_BUFFER_COPY
*$D654 LD DE,$EA90   ; {Draws a character into the #R$EA90.
 $D657 LD B,$58      ;
@label=DOOR_BUFFER_COPY_LOOP
*$D659 PUSH BC       ;
 $D65A LD BC,$0006   ;
 $D65D LDIR          ;
 $D65F INC DE        ;
 $D660 POP BC        ;
 $D661 DJNZ $D659    ;
 $D663 RET           ; }

; Draw Doors.
;
; Used by the routines at #R$CC3A, #R$D48F, #R$D71E, #R$D7C5, #R$D8E5 and
; #R$DA0C.
;
; .
;
; Preps door frame 1.
@label=DRAW_DOOR_FRAME_1
c$D664 LD HL,$D6B1                          ; {Calls #R$D684 using #R$D6B1.
 $D667 CALL $D684                           ; }
 $D66A LD DE,$BA80                          ; #REGde=#R$BA80.
; Referencing the door frame index, work out the screen position and send it to
; the #R$D717 routine.
@label=PREP_DOOR_FRAME
*$D66D LD A,($CE1A)                         ; #REGa=#R$CE1A.
 $D670 LD HL,$4082                          ; {Determines which screen address to use for the door reference index currently held in #REGa.
 $D673 DEC A                                ; #TABLE(default,centre,centre)
 $D674 JP Z,$D717                           ; { =h #REGa | =h Screen Address }
 $D677 LD HL,$408D                          ; { $01 | $4082 }
 $D67A DEC A                                ; { $02 | $408D }
 $D67B JP Z,$D717                           ; { $03 | $4098 }
 $D67E LD HL,$4098                          ; TABLE#
 $D681 JP $D717                             ; Jump to #R$D717.}
; Copies attributes for the current door frame index.
@label=DOOR_ATTRIBUTES
*$D684 PUSH AF                              ; Stash the accumulator for later.
 $D685 LD A,($CE1A)                         ; #REGa=#R$CE1A.
 $D688 LD DE,$5882                          ; {#TABLE(default,centre,centre)
 $D68B DEC A                                ; { =h #REGa | =h Screen Address }
 $D68C JR Z,$D697                           ; { $01 | $5882 }
 $D68E LD DE,$588D                          ; { $02 | $588D }
 $D691 DEC A                                ; { $03 | $5898 }
 $D692 JR Z,$D697                           ; TABLE#
 $D694 LD DE,$5898                          ; ...continue from #R$D697.}
@label=DOOR_ATTRIBUTES_SKIP
*$D697 LD B,$0B                             ; Sets the height of the door
                                            ; image.
@label=DOOR_ATTRIBUTES_LOOP
*$D699 PUSH BC                              ; {Stash the references for later
 $D69A PUSH HL                              ; and call #R$D6AB.
 $D69B PUSH DE                              ;
 $D69C CALL $D6AB                           ; }
 $D69F POP DE                               ; {Moves the screen attribute
 $D6A0 LD HL,$0020                          ; address down to the next
 $D6A3 ADD HL,DE                            ; attribute row.
 $D6A4 EX DE,HL                             ; }
 $D6A5 POP HL                               ; {Restore the counter and loop
 $D6A6 POP BC                               ; back to #R$D699 until complete.
 $D6A7 DJNZ $D699                           ; }
 $D6A9 POP AF                               ; {Restore the accumulator and
 $D6AA RET                                  ; return.}
; Simple helper copy routine for sending attribute data to the screen attribute
; buffer.
@label=DOOR_ATTRIBUTES_COPY
*$D6AB LD BC,$0007                          ; {Set the door width, copy the
 $D6AE LDIR                                 ; attribute data to the screen and
 $D6B0 RET                                  ; return.}
; Door frame attribute data.
@label=DOOR_1_ATTRIBUTES
 $D6B1 DEFB $30,$30,$30,$30,$30,$30,$30,$30 ; Attribute data for door frame 1.
@label=DOOR_2_ATTRIBUTES
 $D6B9 DEFB $28,$28,$30,$30,$30,$30,$30,$30 ; Attribute data for door frame 2.
@label=DOOR_3_ATTRIBUTES
 $D6C1 DEFB $28,$28,$28,$28,$30,$30,$30,$30 ; Attribute data for door frame 3.
@label=DOOR_4_ATTRIBUTES
 $D6C9 DEFB $28,$28,$28,$28,$28,$28,$30,$28 ; Attribute data for door frame 4.
; Preps door frame 2.
@label=DRAW_DOOR_FRAME_2
*$D6D1 LD HL,$D6B9                          ; {Calls #R$D684 using #R$D6B9.
 $D6D4 CALL $D684                           ; }
 $D6D7 CALL $D61E                           ; {Prepare the character/ door image by calling #R$D61E. Then pass #R$EA90 to #R$D66D which will draw it to the
 $D6DA LD DE,$EA90                          ;           screen.
 $D6DD JR $D66D                             ; }
; Preps door frame 3.
@label=DRAW_DOOR_FRAME_3
*$D6DF LD HL,$D6C1                          ; {Calls #R$D684 using #R$D6C1.
 $D6E2 CALL $D684                           ; }
 $D6E5 CALL $D638                           ; {Prepare the character/ door image by calling #R$D638. Then pass #R$EA90 to #R$D66D which will draw it to the
 $D6E8 LD DE,$EA90                          ;           screen.
 $D6EB JR $D66D                             ; }
; Preps door frame 4.
@label=DRAW_DOOR_FRAME_4
*$D6ED LD HL,$D6C9                          ; {Calls #R$D684 using #R$D6C9.
 $D6F0 CALL $D684                           ; }
 $D6F3 CALL $D5CA                           ; The door is fully open so draw
                                            ; the whole character in the
                                            ; doorway directly.
 $D6F6 LD B,$58                             ; {Reference #R$BFA8 and the
 $D6F8 LD C,$01                             ; dimensions for the copy routine.
 $D6FA LD DE,$BFA8                          ; }
 $D6FD LD A,($CE1A)                         ; #REGa=#R$CE1A.
 $D700 LD HL,$4088                          ; {Determines which screen address to use for the door reference index currently held in #REGa.
 $D703 DEC A                                ; #TABLE(default,centre,centre)
 $D704 JP Z,$D5E6                           ; { =h #REGa | =h Screen Address }
 $D707 LD HL,$4093                          ; { $01 | $4088 }
 $D70A DEC A                                ; { $02 | $4093 }
 $D70B JP Z,$D5E6                           ; { $03 | $409E }
 $D70E LD HL,$409E                          ; TABLE#
 $D711 JP $D5E6                             ; Jump to #R$D5E6.}
 $D714 LD DE,$EA90                          ; #REGde=#R$EA90.
@label=DRAW_DOOR_FRAME
*$D717 LD B,$58                             ; {Draws the image pointed at by
 $D719 LD C,$07                             ; #REGde to the screen address in
 $D71B JP $D5E6                             ; #REGhl using #R$D5E6.}

; Generic Bandit in Door Frame Logic.
;
; .
;
; .
;
; Character state variables/ flags.
@label=BANDIT_STATE_REF
c$D71E DEFB $04      ; The current character state.
@label=BANDIT_1_TIMER
 $D71F DEFB $08      ; Character timer 1.
@label=BANDIT_2_TIMER
 $D720 DEFB $08      ; Character timer 2.
@label=BANDIT_3_TIMER
 $D721 DEFB $00      ; Character timer 3.
@label=BANDIT_4_TIMER
 $D722 DEFB $55      ; Character timer 4.
 $D723 DEFB $08      ;
 $D724 DEFB $08      ;
; This routine looks at the current character state and routes to the correct
; subroutine.
@label=BANDIT_OPEN_ROUTING
*$D725 LD HL,$D71E   ; {#REGa=#R$D71E.
 $D728 LD A,(HL)     ; }
 $D729 DEC A         ; {Work out which routine to use based on the current state.
 $D72A JR Z,$D734    ; #TABLE(default,centre,centre)
 $D72C DEC A         ; { =h #REGa | =h Routine }
 $D72D JR Z,$D741    ; { $01 | #R$D734 }
 $D72F DEC A         ; { $02 | #R$D741 }
 $D730 JR Z,$D74E    ; { $03 | #R$D74E }
 $D732 JR $D75B      ; { $04 | #R$D75B }
                     ; TABLE#}
; Handle door frame 1 countdown/ transition to door frame 2.
@label=BANDIT_OPEN_1
*$D734 LD A,($D71F)  ; {Decrease #R$D71F by one, return if result is not zero.
 $D737 DEC A         ;
 $D738 LD ($D71F),A  ;
 $D73B RET NZ        ; }
 $D73C INC (HL)      ; Move onto next character state.
 $D73D CALL $D6D1    ; {Pass character frame index (#R$6800(draw | $00)) to
 $D740 RET           ; #R$D6D1 and return.}
; Handle door frame 2 countdown/ transition to door frame 3.
@label=BANDIT_OPEN_2
*$D741 LD A,($D720)  ; {Decrease #R$D720 by one, return if result is not zero.
 $D744 DEC A         ;
 $D745 LD ($D720),A  ;
 $D748 RET NZ        ; }
 $D749 INC (HL)      ; Move onto next character state.
 $D74A CALL $D6DF    ; {Pass character frame index (#R$6800(draw | $00)) to
 $D74D RET           ; #R$D6DF and return.}
; Handle door frame 3 countdown/ transition to door frame 4.
@label=BANDIT_OPEN_3
*$D74E LD A,($D721)  ; {Decrease #R$D721 by one, return if result is not zero.
 $D751 DEC A         ;
 $D752 LD ($D721),A  ;
 $D755 RET NZ        ; }
 $D756 INC (HL)      ; Move onto next character state.
 $D757 CALL $D6ED    ; {Pass character frame index (#R$6800(draw | $00)) to
 $D75A RET           ; #R$D6ED and return.}
; Handle door frame 4 timer...
@label=BANDIT_OPEN_4
*$D75B LD DE,$CED8   ; {Calls #R$D5A3 with #REGde=$CED8.
 $D75E CALL $D5A3    ; }
 $D761 LD A,($D722)  ; {Decrease #R$D722 by one, return if result is not zero.
 $D764 DEC A         ;
 $D765 LD ($D722),A  ;
 $D768 RET NZ        ; }
 $D769 INC A         ; {Writes $01 to #R$D2FE.
 $D76A LD ($D2FE),A  ; }
 $D76D CALL $D8A1    ; Call #R$D8A1.
 $D770 RET           ; Return.
; This routine looks at the current character state and routes to the correct
; subroutine.
@label=BANDIT_CLOSE_ROUTING
*$D771 LD HL,$D71E   ; {#REGa=#R$D71E.
 $D774 LD A,(HL)     ; }
 $D775 DEC A         ; {Work out which routine to use based on the current state.
 $D776 JR Z,$D783    ; #TABLE(default,centre,centre)
 $D778 DEC A         ; { =h #REGa | =h Routine }
 $D779 JR Z,$D789    ; { $01 | #R$D783 }
 $D77B DEC A         ; { $02 | #R$D789 }
 $D77C JR Z,$D798    ; { $03 | #R$D798 }
 $D77E DEC A         ; { $04 | #R$D7A7 }
 $D77F JR Z,$D7A7    ; { $05 | #R$D7B6 }
 $D781 JR $D7B6      ; TABLE#}
; Handles the transition to the (#R$6A10(shot | $01)) frame in the open
; doorway.
@label=BANDIT_SHOT_ACTION
*$D783 INC (HL)      ; Move onto next character state.
 $D784 INC A         ; Move onto next character frame (i.e. #R$6A10(shot |
                     ; $01)).
 $D785 CALL $D6ED    ; {Call #R$D6ED and return.
 $D788 RET           ; }
; Handle "floor frame in open doorway" countdown.
@label=BANDIT_CLOSE_4
*$D789 LD A,($D71F)  ; {Decrease #R$D71F by one, return if result is not zero.
 $D78C DEC A         ;
 $D78D LD ($D71F),A  ;
 $D790 RET NZ        ; }
 $D791 INC (HL)      ; Move onto next character state.
 $D792 LD A,$02      ; {Pass character frame index (#R$6C20(floor | $02)) to
 $D794 CALL $D6ED    ; #R$D6ED and return.
 $D797 RET           ; }
; Handle door frame 4 countdown/ transition to door frame 3.
@label=BANDIT_CLOSE_3
*$D798 LD A,($D720)  ; {Decrease #R$D720 by one, return if result is not zero.
 $D79B DEC A         ;
 $D79C LD ($D720),A  ;
 $D79F RET NZ        ; }
 $D7A0 INC (HL)      ; Move onto next character state.
 $D7A1 LD A,$02      ; {Pass character frame index (#R$6C20(floor | $02)), pass
 $D7A3 CALL $D6DF    ; it to #R$D6DF and return.
 $D7A6 RET           ; }
; Handle door frame 3 countdown/ transition to door frame 2.
@label=BANDIT_CLOSE_2
*$D7A7 LD A,($D721)  ; {Decrease #R$D721 by one, return if result is not zero.
 $D7AA DEC A         ;
 $D7AB LD ($D721),A  ;
 $D7AE RET NZ        ; }
 $D7AF INC (HL)      ; Move onto next character state.
 $D7B0 LD A,$02      ; {Pass character frame index (#R$6C20(floor | $02)), pass
 $D7B2 CALL $D6D1    ; it to #R$D6D1 and return.
 $D7B5 RET           ; }
; Handle door frame 2 countdown/ transition to door frame 1.
@label=BANDIT_CLOSE_1
*$D7B6 LD A,($D722)  ; {Decrease #R$D722 by one, return if result is not zero.
 $D7B9 DEC A         ;
 $D7BA LD ($D722),A  ;
 $D7BD RET NZ        ; }
 $D7BE CALL $D664    ; Call #R$D664 (i.e. no character/ door is shut).
 $D7C1 CALL $D8A1    ; Call #R$D8A1.
 $D7C4 RET           ; Return.

; Bowie logic.
;
; Handles all the logic around drawing Bowie and handling his "special" logic.
;
; .
;
; Bowie state variables/ flags.
@label=BOWIE_GOOD_BAD
c$D7C5 DEFB $01        ; If this is $00 then Bowie is "good". If this is $01
                       ; then he is "bad" (i.e. there's a bomb under his hat).
@label=BOWIE_FRAME_REF
 $D7C6 DEFB $22        ; The current character frame index reference.
@label=BOWIE_STATE_REF
 $D7C7 DEFB $06        ; The current character state.
@label=BOWIE_1_TIMER
 $D7C8 DEFB $00        ; Character timer 1.
@label=BOWIE_2_TIMER
 $D7C9 DEFB $00        ; Character timer 2.
@label=BOWIE_3_TIMER
 $D7CA DEFB $00        ; Character timer 3.
@label=BOWIE_4_TIMER
 $D7CB DEFB $00        ; Character timer 4.
@label=BOWIE_5_TIMER
 $D7CC DEFB $00        ; Character timer 5.
@label=BOWIE_6_TIMER
 $D7CD DEFB $00        ; Character timer 6.
; This routine looks at the current character state and routes to the correct
; subroutine.
@label=BOWIE_ROUTING
*$D7CE LD HL,$D7C7     ; {#REGa=#R$D7C7.
 $D7D1 LD A,(HL)       ; }
 $D7D2 DEC A           ; {Work out which routine to jump to based on the current state.
 $D7D3 JR Z,$D7E3      ; #TABLE(default,centre,centre)
 $D7D5 DEC A           ; { =h #REGa | =h Routine }
 $D7D6 JR Z,$D7F2      ; { $01 | #R$D7E3 }
 $D7D8 DEC A           ; { $02 | #R$D7F2 }
 $D7D9 JR Z,$D801      ; { $03 | #R$D801 }
 $D7DB DEC A           ; { $04 | #R$D810 }
 $D7DC JR Z,$D810      ; { $05 | #R$D82C }
 $D7DE DEC A           ; { $06 | #R$D83C }
 $D7DF JR Z,$D82C      ; TABLE#
 $D7E1 JR $D83C        ; }
; Handle door frame 1 countdown/ transition to door frame 2.
@label=BOWIE_OPEN_1
*$D7E3 LD A,($D7C8)    ; {Decrease #R$D7C8 by one, return if result is not
 $D7E6 DEC A           ; zero.
 $D7E7 LD ($D7C8),A    ;
 $D7EA RET NZ          ; }
 $D7EB INC (HL)        ; Move onto next character state.
 $D7EC LD A,$1B        ; {Pass character index #R$9FB0($1B) to #R$D6D1 and
 $D7EE CALL $D6D1      ; return.
 $D7F1 RET             ; }
; Handle door frame 2 countdown/ transition to door frame 3.
@label=BOWIE_OPEN_2
*$D7F2 LD A,($D7C9)    ; {Decrease #R$D7C9 by one, return if result is not
 $D7F5 DEC A           ; zero.
 $D7F6 LD ($D7C9),A    ;
 $D7F9 RET NZ          ; }
 $D7FA INC (HL)        ; Move onto next character state.
 $D7FB LD A,$1B        ; {Pass character index #R$9FB0($1B) to #R$D6DF and
 $D7FD CALL $D6DF      ; return.
 $D800 RET             ; }
; Handle door frame 3 countdown/ transition to door frame 4.
@label=BOWIE_OPEN_3
*$D801 LD A,($D7CA)    ; {Decrease #R$D7CA by one, return if result is not
 $D804 DEC A           ; zero.
 $D805 LD ($D7CA),A    ;
 $D808 RET NZ          ; }
 $D809 INC (HL)        ; Move onto next character state.
 $D80A LD A,$1B        ; {Pass character frame index #R$9FB0($1B) to #R$D6ED
 $D80C CALL $D6ED      ; and return.
 $D80F RET             ; }
; Handle door frame 4 countdown/ transition to door frame 3.
@label=BOWIE_OPEN_4
*$D810 LD E,(IX+$04)   ; {Call #R$D5A3 with a callback to either #R$D84B or
 $D813 LD D,(IX+$05)   ; #R$D85D.
 $D816 CALL $D5A3      ; }
 $D819 LD A,($D7CB)    ; {Decrease #R$D7CB by one, return if result is not
 $D81C DEC A           ; zero.
 $D81D LD ($D7CB),A    ;
 $D820 RET NZ          ; }
@label=BOWIE_CLOSE_3
*$D821 LD HL,$D7C7     ; {Move onto next character state (#R$D7C7).
 $D824 INC (HL)        ; }
 $D825 LD A,($D7C6)    ; {Load the character frame index from #R$D7C6, pass it
 $D828 CALL $D6DF      ; to #R$D6DF and return.
 $D82B RET             ; }
; Handle door frame 3 countdown/ transition to door frame 2.
@label=BOWIE_CLOSE_2
*$D82C LD A,($D7CC)    ; {Decrease #R$D7CC by one, return if result is not
 $D82F DEC A           ; zero.
 $D830 LD ($D7CC),A    ;
 $D833 RET NZ          ; }
 $D834 INC (HL)        ; Move onto next character state.
 $D835 LD A,($D7C6)    ; {Load the character frame index from #R$D7C6, pass it
 $D838 CALL $D6D1      ; to #R$D6D1 and return.
 $D83B RET             ; }
; Handle door frame 2 countdown/ transition to door frame 1.
@label=BOWIE_CLOSE_1
*$D83C LD A,($D7CD)    ; {Decrease #R$D7CD by one, return if result is not
 $D83F DEC A           ; zero.
 $D840 LD ($D7CD),A    ;
 $D843 RET NZ          ; }
 $D844 CALL $D664      ; Call #R$D664 (i.e. no character/ door is shut).
 $D847 CALL $D8A1      ; Call #R$D8A1.
 $D84A RET             ; Return.
; Handles marking this as something shootable.
@label=BOWIE_CASH_ACTION
 $D84B LD (IX+$06),$05 ; {Writes $05 to #REGix+$06 and $01 to #REGix+$07.
 $D84F LD (IX+$07),$01 ; }
 $D853 LD A,$01        ; {Writes $01 to #REGix+$08 and #R$D190.
 $D855 LD (IX+$08),A   ;
 $D858 LD ($D190),A    ; }
 $D85B JR $D821        ; Jump to #R$D821.
; Handles marking this as something unshootable.
@label=BOWIE_BOMB_ACTION
 $D85D LD A,$05        ; {Writes $05 to #R$D2FE and return.
 $D85F LD ($D2FE),A    ;
 $D862 RET             ; }
; Handles both shooting the hats off Bowie's head, and checking/ routing on the
; last frame for the "surprise".
@label=BOWIE_SHOT_ACTION
 $D863 LD HL,$D7C6     ; {#REGa=#R$D7C6.
 $D866 LD A,(HL)       ; }
 $D867 CP $21          ; Is it character frame reference (#R$AC10(1 hat |
                       ; $21))?
 $D869 LD (IX+$06),$01 ; Writes $01 to #REGix+$06.
 $D86D JR NC,$D875     ; If Bowie is on the last frame then jump forward to
                       ; #R$D875.
 $D86F INC A           ; {Else update #R$D7C6 to point at the next frame, call
 $D870 LD (HL),A       ; #R$D6ED and return.
 $D871 CALL $D6ED      ;
 $D874 RET             ; }
; Checks the "good/ bad" flag and routes the gameplay accordingly.
@label=BOWIE_CHECK
*$D875 LD A,($D7C5)    ; {If #R$D7C5 is zero jump to #R$D87D.
 $D878 AND A           ;
 $D879 JR Z,$D87D      ; }
 $D87B JR $D88F        ; Jump to #R$D88F.
; Handle displaying cash character frame.
@label=BOWIE_STATE_CASH
*$D87D LD A,$23        ; {Writes character frame reference #R$B030(cash | $23)
 $D87F LD ($D7C6),A    ; to #R$D7C6, and pass it to #R$D6ED.
 $D882 CALL $D6ED      ; }
 $D885 LD HL,$D84B     ; {Writes #R$D84B to the current door flags (e.g.
 $D888 LD (IX+$04),L   ; #R$D169, #R$D177 or #R$D185).
 $D88B LD (IX+$05),H   ; }
 $D88E RET             ; Return.
; Handle displaying bomb character frame.
@label=BOWIE_STATE_BOMB
*$D88F LD A,$22        ; {Writes character frame reference #R$AE20(bomb | $22)
 $D891 LD ($D7C6),A    ; to #R$D7C6, and pass it to #R$D6ED.
 $D894 CALL $D6ED      ; }
 $D897 LD HL,$D85D     ; {Writes #R$D85D to the current door flags (e.g.
 $D89A LD (IX+$04),L   ; #R$D169, #R$D177 or #R$D185).
 $D89D LD (IX+$05),H   ; }
 $D8A0 RET             ; Return.

; Routine at D8A1
;
; Used by the routines at #R$CD68, #R$D48F, #R$D71E, #R$D7C5, #R$D8E5 and
; #R$DA0C.
@label=RESET___
c$D8A1 LD L,(IX+$00) ; {Blanks the 16 bit address pointed to by one of the
 $D8A4 LD H,(IX+$01) ; passed door flags (i.e. writes $0000 to one of #R$CE14,
 $D8A7 XOR A         ; #R$CE16, #R$CE18).
 $D8A8 LD (HL),A     ;
 $D8A9 INC HL        ;
 $D8AA LD (HL),A     ; }
 $D8AB RET           ; Return.

; Game status buffer entry at D8AC
g$D8AC DEFW $92EE

; Game status buffer entry at D8AE
g$D8AE DEFW $E51B

; Routine at D8B0
;
; Used by the routines at #R$C7C0, #R$CE21, #R$CEB8 and #R$DAEF.
;
; .
;
; f
@label=RANDOM_NUMBER
c$D8B0 PUSH BC       ; {Stashes #REGbc and #REGhl for later.
 $D8B1 PUSH HL       ; }
 $D8B2 LD A,($D8AE)  ; {Decrease #R$D8AE by one.
 $D8B5 DEC A         ;
 $D8B6 LD ($D8AE),A  ; }
 $D8B9 JR NZ,$D8C8   ; If the result is not zero jump to #R$D8C8.
 $D8BB LD HL,($D8AC) ;
 $D8BE INC HL        ;
 $D8BF PUSH HL       ;
 $D8C0 POP BC        ;
 $D8C1 ADD HL,HL     ;
 $D8C2 ADD HL,BC     ;
 $D8C3 ADD HL,BC     ;
 $D8C4 ADD HL,BC     ;
 $D8C5 ADD HL,BC     ;
 $D8C6 JR $D8D7      ;
@label=RANDOM_NUMBER_1
*$D8C8 LD HL,($D8AC) ;
 $D8CB INC HL        ;
 $D8CC PUSH HL       ;
 $D8CD POP BC        ;
 $D8CE ADD HL,HL     ;
 $D8CF ADD HL,BC     ;
 $D8D0 ADD HL,BC     ;
 $D8D1 ADD HL,BC     ;
 $D8D2 ADD HL,BC     ;
 $D8D3 ADD HL,BC     ;
 $D8D4 PUSH HL       ;
 $D8D5 POP BC        ;
 $D8D6 ADD HL,HL     ;
@label=RANDOM_NUMBER_2
*$D8D7 ADD HL,BC     ;
 $D8D8 DEC HL        ;
 $D8D9 LD ($D8AC),HL ;
 $D8DC LD A,L        ;
 $D8DD LD HL,$D8AF   ;
 $D8E0 INC (HL)      ;
 $D8E1 ADD A,(HL)    ;
 $D8E2 POP HL        ;
 $D8E3 POP BC        ;
 $D8E4 RET           ;

; Julius logic.
;
; .
;
; .
;
; Handles all the logic around drawing Julius and handling his "special" logic.
@label=JULIUS_GOOD_BAD
c$D8E5 DEFB $00        ; If this is $00 then Julius is "good". If this is $01
                       ; then he is "bad" (i.e. will draw on you).
 $D8E6 DEFB $00        ;
@label=JULIUS_STATE_REF
 $D8E7 DEFB $04        ; The current character state.
@label=JULIUS_1_TIMER
 $D8E8 DEFB $00        ; Character timer 1.
@label=JULIUS_2_TIMER
 $D8E9 DEFB $00        ; Character timer 2.
@label=JULIUS_3_TIMER
 $D8EA DEFB $00        ; Character timer 3.
@label=JULIUS_4_TIMER
 $D8EB DEFB $1B        ; Character timer 4.
@label=JULIUS_5_TIMER
 $D8EC DEFB $08        ; Character timer 5.
@label=JULIUS_6_TIMER
 $D8ED DEFB $08        ; Character timer 6.
@label=JULIUS_7_TIMER
 $D8EE DEFB $80        ; Character timer 7.
; This routine looks at the current character state and routes to the correct
; subroutine.
@label=JULIUS_OPEN_ROUTING
*$D8EF LD HL,$D8E7     ; {#REGa=#R$D8E7.
 $D8F2 LD A,(HL)       ; }
 $D8F3 DEC A           ; {Work out which routine to use based on the current state.
 $D8F4 JR Z,$D907      ; #TABLE(default,centre,centre)
 $D8F6 DEC A           ; { =h #REGa | =h Routine }
 $D8F7 JR Z,$D916      ; { $01 | #R$D907 }
 $D8F9 DEC A           ; { $02 | #R$D916 }
 $D8FA JR Z,$D925      ; { $03 | #R$D925 }
 $D8FC DEC A           ; { $04 | #R$D934 }
 $D8FD JR Z,$D934      ; { $05 | #R$D963 }
 $D8FF DEC A           ; { $06 | #R$D972 }
 $D900 JR Z,$D963      ; { $07 | #R$D981 }
 $D902 DEC A           ; TABLE#
 $D903 JR Z,$D972      ;
 $D905 JR $D981        ; }
; Handle door frame 1 countdown/ transition to door frame 2.
@label=JULIUS_OPEN_1
*$D907 LD A,($D8E8)    ; {Decrease #R$D8E8 by one, return if result is not
 $D90A DEC A           ; zero.
 $D90B LD ($D8E8),A    ;
 $D90E RET NZ          ; }
 $D90F INC (HL)        ; Move onto next character state.
 $D910 LD A,$24        ; {Pass character index (#R$B240(stand off | $24)) to
 $D912 CALL $D6D1      ; #R$D6D1 and return.
 $D915 RET             ; }
; Handle door frame 2 countdown/ transition to door frame 3.
@label=JULIUS_OPEN_2
*$D916 LD A,($D8E9)    ; {Decrease #R$D8E9 by one, return if result is not
 $D919 DEC A           ; zero.
 $D91A LD ($D8E9),A    ;
 $D91D RET NZ          ; }
 $D91E INC (HL)        ; Move onto next character state.
 $D91F LD A,$24        ; {Pass character index (#R$B240(stand off | $24)) to
 $D921 CALL $D6DF      ; #R$D6DF and return.
 $D924 RET             ; }
; Handle door frame 3 countdown/ transition to door frame 4.
@label=JULIUS_OPEN_3
*$D925 LD A,($D8EA)    ; {Decrease #R$D8EA by one, return if result is not
 $D928 DEC A           ; zero.
 $D929 LD ($D8EA),A    ;
 $D92C RET NZ          ; }
 $D92D INC (HL)        ; Move onto next character state.
 $D92E LD A,$24        ; {Pass character index (#R$B240(stand off | $24)) to
 $D930 CALL $D6ED      ; #R$D6ED and return.
 $D933 RET             ; }
; Handle door frame 4 countdown.
@label=JULIUS_OPEN_4
*$D934 LD DE,$CFDD     ; {Call #R$D5A3 with a callback to #R$CFDD.
 $D937 CALL $D5A3      ; }
 $D93A LD A,($D8EB)    ; {Decrease #R$D8EB by one, return if result is not
 $D93D DEC A           ; zero.
 $D93E LD ($D8EB),A    ;
 $D941 RET NZ          ; }
 $D942 INC (HL)        ; Move onto next character state.
 $D943 LD A,($D8E5)    ; {Jump to #R$D951 if #R$D8E5 is zero (Julius is
 $D946 AND A           ; "good").
 $D947 JR Z,$D951      ; }
; Changes the frame to show Julius drawing his pistol.
 $D949 LD (HL),$07     ; Writes "07" to #R$D8E7.
 $D94B LD A,$25        ; {Pass character index (#R$B450(draw | $25)) to #R$D6ED
 $D94D CALL $D6ED      ; and return.
 $D950 RET             ; }
; Set up (and begin) closing the door.
@label=JULIUS_STATE_4_CLOSE
*$D951 LD A,$24        ; {Pass character index (#R$B240(stand off | $24)) to
 $D953 CALL $D6DF      ; #R$D6DF.}
 $D956 LD A,$01        ; {Writes $01 to #R$D190 and #REGix+8. Writes $05 to
 $D958 LD ($D190),A    ; #REGix+6 and return.
 $D95B LD (IX+$08),A   ;
 $D95E LD (IX+$06),$05 ;
 $D962 RET             ; }
; Handle door frame 3 countdown/ transition to door frame 2.
@label=JULIUS_OPEN_5
*$D963 LD A,($D8EC)    ; {Decrease #R$D8EC by one, return if result is not
 $D966 DEC A           ; zero.
 $D967 LD ($D8EC),A    ;
 $D96A RET NZ          ; }
 $D96B INC (HL)        ; Move onto next character state.
 $D96C LD A,$24        ; {Pass character index (#R$B240(stand off | $24)) to
 $D96E CALL $D6D1      ; #R$D6D1 and return.
 $D971 RET             ; }
; Handle door frame 2 countdown/ transition to door frame 1.
@label=JULIUS_OPEN_6
*$D972 LD A,($D8ED)    ; {Decrease #R$D8ED by one, return if result is not
 $D975 DEC A           ; zero.
 $D976 LD ($D8ED),A    ;
 $D979 RET NZ          ; }
 $D97A CALL $D664      ; Call #R$D664 (i.e. no character/ door is shut).
 $D97D CALL $D8A1      ; Call #R$D8A1.
 $D980 RET             ; Return.
; ???
@label=JULIUS_OPEN_7
*$D981 LD DE,$CFE2     ; {Call #R$D5A3 with a callback to #R$CFE2.
 $D984 CALL $D5A3      ; }
 $D987 LD A,($D8EE)    ; {Decrease #R$D8EE by one, return if result is not
 $D98A DEC A           ; zero.
 $D98B LD ($D8EE),A    ;
 $D98E RET NZ          ; }
 $D98F INC A           ; Move onto next character state.
 $D990 LD ($D2FE),A    ; Write $01 to #R$D2FE.
 $D993 CALL $D8A1      ; Call #R$D8A1.
 $D996 RET             ; Return.
; This routine looks at the current character state and routes to the correct
; subroutine.
@label=JULIUS_CLOSE_ROUTING
*$D997 LD HL,$D8E7     ; {#REGa=#R$D8E7.
 $D99A LD A,(HL)       ; }
 $D99B DEC A           ; {Work out which routine to use based on the current state.
 $D99C JR Z,$D9A9      ; #TABLE(default,centre,centre)
 $D99E DEC A           ; { =h #REGa | =h Routine }
 $D99F JR Z,$D9B8      ; { $01 | #R$D9A9 }
 $D9A1 DEC A           ; { $02 | #R$D9B8 }
 $D9A2 JR Z,$D9D3      ; { $03 | #R$D9D3 }
 $D9A4 DEC A           ; { $04 | #R$D9E2 }
 $D9A5 JR Z,$D9E2      ; { $05 | #R$D9F1 }
 $D9A7 JR $D9F1        ; TABLE#}
; Handles state countdown/ transition to character frame #R$B660($26).
@label=JULIUS_CLOSE_1
*$D9A9 LD A,($D8E8)    ; {Decrease #R$D8E8 by one, return if result is not
 $D9AC DEC A           ; zero.
 $D9AD LD ($D8E8),A    ;
 $D9B0 RET NZ          ; }
 $D9B1 INC (HL)        ; Move onto next character state.
 $D9B2 LD A,$26        ; {Pass character index #R$B660(shot | $26) to #R$D6ED
 $D9B4 CALL $D6ED      ; and return.
 $D9B7 RET             ; }
; Handles state countdown/ transition to character frame #R$B870($27).
@label=JULIUS_CLOSE_2
*$D9B8 LD A,($D8E9)    ; {Decrease #R$D8E9 by one, return if result is not
 $D9BB DEC A           ; zero.
 $D9BC LD ($D8E9),A    ;
 $D9BF RET NZ          ; }
 $D9C0 INC (HL)        ; Move onto next character state.
 $D9C1 LD A,$27        ; {Pass character index #R$B870(floor | $27) to #R$D6ED.
 $D9C3 CALL $D6ED      ; }
 $D9C6 LD A,($D8E6)    ; {Return if #R$D8E6 is zero.
 $D9C9 AND A           ;
 $D9CA RET Z           ; }
 $D9CB INC A           ; {Else write #R$D8E6+1 to #R$D2FE, call #R$D8A1 and
 $D9CC LD ($D2FE),A    ; return.
 $D9CF CALL $D8A1      ;
 $D9D2 RET             ; }
; Handle door frame 4 countdown/ transition to door frame 3.
@label=JULIUS_CLOSE_3
*$D9D3 LD A,($D8EA)    ; {Decrease #R$D8EA by one, return if result is not
 $D9D6 DEC A           ; zero.
 $D9D7 LD ($D8EA),A    ;
 $D9DA RET NZ          ; }
 $D9DB INC (HL)        ; Move onto next character state.
 $D9DC LD A,$27        ; {Pass character index #R$B870(floor | $27) to #R$D6DF
 $D9DE CALL $D6DF      ; and return.
 $D9E1 RET             ; }
; Handle door frame 3 countdown/ transition to door frame 2.
@label=JULIUS_CLOSE_4
*$D9E2 LD A,($D8EB)    ; {Decrease #R$D8EB by one, return if result is not
 $D9E5 DEC A           ; zero.
 $D9E6 LD ($D8EB),A    ;
 $D9E9 RET NZ          ; }
 $D9EA INC (HL)        ; Move onto next character state.
 $D9EB LD A,$27        ; {Pass character index #R$B870(floor | $27) to #R$D6D1
 $D9ED CALL $D6D1      ; and return.
 $D9F0 RET             ; }
; Handle door frame 2 countdown/ transition to door frame 1.
@label=JULIUS_CLOSE_5
*$D9F1 LD A,($D8EC)    ; {Decrease #R$D8EC by one, return if result is not
 $D9F4 DEC A           ; zero.
 $D9F5 LD ($D8EC),A    ;
 $D9F8 RET NZ          ; }
 $D9F9 CALL $D664      ; Call #R$D664 (i.e. no character/ door is shut).
 $D9FC CALL $D8A1      ; Call #R$D8A1.
 $D9FF LD A,$01        ; {Writes $01 to #R$D190 and #REGix+8. Writes $05 to
 $DA01 LD ($D190),A    ; #REGix+6 and return.
 $DA04 LD (IX+$08),A   ;
 $DA07 LD (IX+$06),$05 ;
 $DA0B RET             ; }

; Drawing Bandit Logic.
;
; .
;
; .
;
; Character state variables/ flags.
@label=BANDIT_DRAW
c$DA0C DEFB $00      ;
@label=BANDIT_DRAW_FRAME_1
 $DA0D DEFB $08      ; Character frame index 1.
@label=BANDIT_DRAW_FRAME_2
 $DA0E DEFB $08      ; Character frame index 2.
@label=BANDIT_DRAW_FRAME_3
 $DA0F DEFB $09      ; Character frame index 3.
@label=BANDIT_DRAW_FRAME_4
 $DA10 DEFB $07      ; Character frame index 4.
@label=BANDIT_DRAW_STATE_REF
 $DA11 DEFB $05      ; The current character state.
@label=BANDIT_DRAW_1_TIMER
 $DA12 DEFB $00      ; Character timer 1.
@label=BANDIT_DRAW_2_TIMER
 $DA13 DEFB $00      ; Character timer 2.
@label=BANDIT_DRAW_3_TIMER
 $DA14 DEFB $00      ; Character timer 3.
@label=BANDIT_DRAW_4_TIMER
 $DA15 DEFB $00      ; Character timer 4.
@label=BANDIT_DRAW_5_TIMER
 $DA16 DEFB $00      ; Character timer 5.
; This routine looks at the current character state and routes to the correct
; subroutine.
@label=BANDIT_DRAW_OPEN_ROUTING
*$DA17 LD HL,$DA11   ; {#REGa=#R$DA11.
 $DA1A LD A,(HL)     ; }
 $DA1B DEC A         ; {Work out which routine to use based on the current state.
 $DA1C JR Z,$DA29    ; #TABLE(default,centre,centre)
 $DA1E DEC A         ; { =h #REGa | =h Routine }
 $DA1F JR Z,$DA39    ; { $01 | #R$DA29 }
 $DA21 DEC A         ; { $02 | #R$DA39 }
 $DA22 JR Z,$DA49    ; { $03 | #R$DA49 }
 $DA24 DEC A         ; { $04 | #R$DA59 }
 $DA25 JR Z,$DA59    ; { $05 | #R$DA6F }
 $DA27 JR $DA6F      ; TABLE#}
; Handle door frame 1 countdown/ transition to door frame 2.
@label=BANDIT_DRAW_OPEN_1
*$DA29 LD A,($DA12)  ; {Decrease #R$DA12 by one, return if result is not zero.
 $DA2C DEC A         ;
 $DA2D LD ($DA12),A  ;
 $DA30 RET NZ        ; }
 $DA31 INC (HL)      ; Move onto next character state.
 $DA32 LD A,($DA0D)  ; Grab the character frame index from #R$DA0D.
 $DA35 CALL $D6D1    ; {Call #R$D6D1 and return.
 $DA38 RET           ; }
; Handle door frame 2 countdown/ transition to door frame 3.
@label=BANDIT_DRAW_OPEN_2
*$DA39 LD A,($DA13)  ; {Decrease #R$DA13 by one, return if result is not zero.
 $DA3C DEC A         ;
 $DA3D LD ($DA13),A  ;
 $DA40 RET NZ        ; }
 $DA41 INC (HL)      ; Move onto next character state.
 $DA42 LD A,($DA0D)  ; Grab the character frame index from #R$DA0D.
 $DA45 CALL $D6DF    ; {Call #R$D6DF and return.
 $DA48 RET           ; }
; Handle door frame 3 countdown/ transition to door frame 4.
@label=BANDIT_DRAW_OPEN_3
*$DA49 LD A,($DA14)  ; {Decrease #R$DA14 by one, return if result is not zero.
 $DA4C DEC A         ;
 $DA4D LD ($DA14),A  ;
 $DA50 RET NZ        ; }
 $DA51 INC (HL)      ; Move onto next character state.
 $DA52 LD A,($DA0D)  ; Grab the character frame index from #R$DA0D.
 $DA55 CALL $D6ED    ; {Call #R$D6ED and return.
 $DA58 RET           ; }
; Handles state countdown.
@label=BANDIT_DRAW_OPEN_4
*$DA59 LD DE,$D037   ; {Call #R$D5A3 with a callback to #R$D037.
 $DA5C CALL $D5A3    ; }
 $DA5F LD A,($DA15)  ; {Decrease #R$DA15 by one, return if result is not zero.
 $DA62 DEC A         ;
 $DA63 LD ($DA15),A  ;
 $DA66 RET NZ        ; }
 $DA67 INC (HL)      ; Move onto next character state.
 $DA68 LD A,($DA0E)  ; Grab the character frame index from #R$DA0E.
 $DA6B CALL $D6ED    ; {Call #R$D6ED and return.
 $DA6E RET           ; }
; Handles state countdown.
@label=BANDIT_DRAW_OPEN_5
*$DA6F LD DE,$D040   ; {Call #R$D5A3 with a callback to #R$D040.
 $DA72 CALL $D5A3    ; }
 $DA75 LD A,($DA16)  ; {Decrease #R$DA16 by one, return if result is not zero.
 $DA78 DEC A         ;
 $DA79 LD ($DA16),A  ;
 $DA7C RET NZ        ; }
 $DA7D INC A         ; {Else write $01 to #R$D2FE, call #R$D8A1 and return.
 $DA7E LD ($D2FE),A  ;
 $DA81 CALL $D8A1    ;
 $DA84 RET           ; }
; This routine looks at the current character state and routes to the correct
; subroutine.
@label=BANDIT_DRAW_CLOSE_ROUTING
*$DA85 LD HL,$DA11   ; {#REGa=#R$DA11.
 $DA88 LD A,(HL)     ; }
 $DA89 DEC A         ; {Work out which routine to use based on the current state.
 $DA8A JR Z,$DA97    ; #TABLE(default,centre,centre)
 $DA8C DEC A         ; { =h #REGa | =h Routine }
 $DA8D JR Z,$DAA7    ; { $01 | #R$DA97 }
 $DA8F DEC A         ; { $02 | #R$DAA7 }
 $DA90 JR Z,$DAC0    ; { $03 | #R$DAC0 }
 $DA92 DEC A         ; { $04 | #R$DAD0 }
 $DA93 JR Z,$DAD0    ; { $05 | #R$DAE0 }
 $DA95 JR $DAE0      ; TABLE#}
; Handles state countdown.
@label=BANDIT_DRAW_CLOSE_1
*$DA97 LD A,($DA12)  ; {Decrease #R$DA12 by one, return if result is not zero.
 $DA9A DEC A         ;
 $DA9B LD ($DA12),A  ;
 $DA9E RET NZ        ; }
 $DA9F INC (HL)      ; Move onto next character state.
 $DAA0 LD A,($DA0F)  ; Grab the character frame index from #R$DA0F.
 $DAA3 CALL $D6ED    ; {Call #R$D6ED and return.
 $DAA6 RET           ; }
; Handles state countdown.
@label=BANDIT_DRAW_CLOSE_2
*$DAA7 LD A,($DA13)  ; {Decrease #R$DA13 by one, return if result is not zero.
 $DAAA DEC A         ;
 $DAAB LD ($DA13),A  ;
 $DAAE RET NZ        ; }
 $DAAF INC (HL)      ; Move onto next character state.
 $DAB0 LD A,($DA10)  ; Grab the character frame index from #R$DA10.
 $DAB3 CALL $D6ED    ; Call #R$D6ED.
 $DAB6 LD A,($DA0C)  ; {Return if #R$DA0C is zero.
 $DAB9 AND A         ;
 $DABA RET Z         ; }
 $DABB INC A         ; {Else write $01 to #R$D2FE and return.
 $DABC LD ($D2FE),A  ;
 $DABF RET           ; }
; Handle door frame 4 countdown/ transition to door frame 3.
@label=BANDIT_DRAW_CLOSE_3
*$DAC0 LD A,($DA14)  ; {Decrease #R$DA14 by one, return if result is not zero.
 $DAC3 DEC A         ;
 $DAC4 LD ($DA14),A  ;
 $DAC7 RET NZ        ; }
 $DAC8 INC (HL)      ; Move onto next character state.
 $DAC9 LD A,($DA10)  ; Grab the character frame index from #R$DA10.
 $DACC CALL $D6DF    ; {Call #R$D6DF and return.
 $DACF RET           ; }
; Handle door frame 3 countdown/ transition to door frame 2.
@label=BANDIT_DRAW_CLOSE_4
*$DAD0 LD A,($DA15)  ; {Decrease #R$DA15 by one, return if result is not zero.
 $DAD3 DEC A         ;
 $DAD4 LD ($DA15),A  ;
 $DAD7 RET NZ        ; }
 $DAD8 INC (HL)      ; Move onto next character state.
 $DAD9 LD A,($DA10)  ; Grab the character frame index from #R$DA10.
 $DADC CALL $D6D1    ; {Call #R$D6D1 and return.
 $DADF RET           ; }
; Handle door frame 2 countdown/ transition to door frame 1.
@label=BANDIT_DRAW_CLOSE_5
*$DAE0 LD A,($DA16)  ; {Decrease #R$DA16 by one, return if result is not zero.
 $DAE3 DEC A         ;
 $DAE4 LD ($DA16),A  ;
 $DAE7 RET NZ        ; }
 $DAE8 CALL $D664    ; Call #R$D664 (i.e. no character/ door is shut).
 $DAEB CALL $D8A1    ; {Call #R$D8A1 and return.
 $DAEE RET           ; }

; Routine at DAEF
;
; Used by the routine at #R$CE21.
c$DAEF CALL $D8B0    ;
 $DAF2 LD C,A        ;
 $DAF3 LD A,($5C78)  ;
 $DAF6 RR C          ;
 $DAF8 RR C          ;
 $DAFA RR C          ;
 $DAFC ADD A,C       ;
 $DAFD RET           ;

; Data block at DAFE
b$DAFE DEFB $00,$3E,$C3,$00,$00,$00,$00,$00
 $DB06 DEFB $31,$FF,$5F,$21,$82,$FD,$E5,$DD
 $DB0E DEFB $21,$00,$40,$11,$00,$C0,$3E,$FF
 $DB16 DEFB $37,$CD,$1D,$DB,$C3,$00,$00,$21
 $DB1E DEFB $80,$1F,$CB,$7F,$28,$03,$21,$98
 $DB26 DEFB $0C,$08,$13,$DD,$2B,$F3,$3E,$02
 $DB2E DEFB $47,$10,$FE,$D3,$FE,$EE,$0F,$06
 $DB36 DEFB $A4,$2D,$20,$F5,$05,$25,$F2,$2F
 $DB3E DEFB $DB,$06,$2F,$10,$FE,$D3,$FE,$3E
 $DB46 DEFB $0D,$06,$37,$10,$FE,$D3,$FE,$01
 $DB4E DEFB $0E,$1D,$08,$6F,$C3,$5E,$DB,$7A
 $DB56 DEFB $B3,$28,$0C,$DD,$6E,$00,$7C,$AD
 $DB5E DEFB $67,$3E,$01,$37,$C3,$7C,$DB,$6C
 $DB66 DEFB $18,$F4,$79,$CB,$78,$10,$FE,$30
 $DB6E DEFB $04,$06,$24,$10,$FE,$D3,$FE,$06
 $DB76 DEFB $20,$20,$EF,$05,$AF,$3C,$CB,$15
 $DB7E DEFB $C2,$6B,$DB,$1B,$DD,$23,$06,$13
 $DB86 DEFB $3E,$7F,$DB,$FE,$1F,$D0,$7A,$3C
 $DB8E DEFB $C2,$55,$DB,$06,$3B,$10,$FE,$C9
 $DB96 DEFB $F5,$3A,$48,$5C,$E6,$38,$0F,$0F
 $DB9E DEFB $0F,$D3,$FE,$3E,$7F,$DB,$FE,$1F
 $DBA6 DEFB $FB,$38,$02,$CF,$0C,$F1,$C9,$00
 $DBAE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBB6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBBE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBC6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBCE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBD6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBDE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBE6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBEE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBF6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DBFE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC06 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC0E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC16 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC1E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC26 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DC2E DEFB $00,$00,$00,$00,$31,$FF,$5F,$21
 $DC36 DEFB $00,$40,$11,$01,$40,$01,$FF,$1A
 $DC3E DEFB $36,$00,$ED,$B0,$AF,$32,$3D,$5C
 $DC46 DEFB $31,$FF,$5F,$DD,$21,$00,$40,$11
 $DC4E DEFB $00,$C0,$3E,$FF,$37,$CD,$59,$DC
 $DC56 DEFB $C3,$00,$00,$14,$08,$15,$F3,$3E
 $DC5E DEFB $0F,$D3,$FE,$DB,$FE,$1F,$E6,$20
 $DC66 DEFB $F6,$02,$4F,$BF,$C0,$CD,$E7,$05
 $DC6E DEFB $30,$FA,$21,$15,$04,$10,$FE,$2B
 $DC76 DEFB $7C,$B5,$20,$F9,$CD,$E3,$05,$30
 $DC7E DEFB $EB,$06,$9C,$CD,$E3,$05,$30,$E4
 $DC86 DEFB $3E,$C6,$B8,$30,$E0,$24,$20,$F1
 $DC8E DEFB $06,$C9,$CD,$E7,$05,$30,$D5,$78
 $DC96 DEFB $FE,$D4,$30,$F4,$CD,$E7,$05,$D0
 $DC9E DEFB $79,$EE,$02,$4F,$26,$00,$06,$D8
 $DCA6 DEFB $18,$1F,$08,$20,$07,$30,$0F,$DD
 $DCAE DEFB $75,$00,$18,$0F,$CB,$11,$AD,$C0
 $DCB6 DEFB $79,$1F,$4F,$13,$18,$07,$DD,$7E
 $DCBE DEFB $00,$AD,$C0,$DD,$23,$1B,$08,$06
 $DCC6 DEFB $DA,$2E,$01,$CD,$E2,$DC,$D0,$3E
 $DCCE DEFB $E5,$B8,$CB,$15,$06,$D8,$D2,$C9
 $DCD6 DEFB $DC,$7C,$AD,$67,$7A,$B3,$20,$CA
 $DCDE DEFB $AF,$D3,$FE,$C9,$CD,$E6,$DC,$D0
 $DCE6 DEFB $00,$00,$00,$3A,$3D,$5C,$B7,$C2
 $DCEE DEFB $00,$00,$3E,$0A,$3D,$20,$FD,$A7
 $DCF6 DEFB $04,$C8,$3E,$7F,$DB,$FE,$1F,$D0
 $DCFE DEFB $A9,$E6,$20,$28,$F3,$79,$2F,$4F
 $DD06 DEFB $E6,$07,$F6,$08,$D3,$FE,$37,$C9
 $DD0E DEFB $50,$69,$73,$73,$20,$6F,$66,$66
 $DD16 DEFB $20,$79,$6F,$75,$20,$44,$61,$79
 $DD1E DEFB $67,$6F,$20,$54,$77,$61,$74,$73
 $DD26 DEFB $21,$00,$00,$00,$00,$00,$00,$00
 $DD2E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD36 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD3E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD46 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD4E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD56 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD5E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD66 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD6E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD76 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD7E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD86 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD8E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD96 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DD9E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDA6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDAE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDB6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDBE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDC6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDCE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDD6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDDE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDE6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDEE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDF6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DDFE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE06 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE0E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE16 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE1E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE26 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE2E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE36 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE3E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE46 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE4E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE56 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE5E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE66 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE6E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE76 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE7E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE86 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE8E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE96 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DE9E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEA6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEAE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEB6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEBE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEC6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DECE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DED6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEDE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEE6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEEE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEF6 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DEFE DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF06 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF0E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF16 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF1E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF26 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF2E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF36 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF3E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF46 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF4E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF56 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF5E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF66 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF6E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF76 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF7E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF86 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF8E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF96 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $DF9E DEFB $00,$00

; Slot Numbering
@label=SLOT_NUMBERS_LEFT
b$DFA0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; {#UDGARRAY12,attr=56,scale=4,step=12;(#PC)-(#PC+$20)-$01-$60(numbering-01-06)
 $DFAC DEFB $FF,$3F,$FC,$3F,$F8,$7F,$FE,$7F,$F8,$1F,$FC,$3F ;
 $DFB8 DEFB $FE,$3F,$FB,$9F,$FF,$BF,$FD,$7F,$FB,$FF,$FB,$FF ;
 $DFC4 DEFB $FF,$3F,$FF,$3F,$FE,$3F,$FB,$7F,$FC,$3F,$F8,$3F ;
 $DFD0 DEFB $FF,$3F,$FE,$7F,$FF,$BF,$F8,$1F,$FF,$9F,$F9,$DF ;
 $DFDC DEFB $FF,$3F,$FC,$FF,$FB,$BF,$FE,$7F,$FB,$9F,$F9,$DF ;
 $DFE8 DEFB $FC,$1F,$F8,$1F,$FC,$7F,$FE,$7F,$FC,$3F,$FC,$3F ;
 $DFF4 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; }
@label=SLOT_NUMBERS_RIGHT
 $E000 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; {#UDGARRAY12,attr=56,scale=4,step=12;(#PC)-(#PC+$20)-$01-$60(numbering-07-12)
 $E00C DEFB $F8,$3F,$FC,$3F,$FC,$3F,$FB,$8F,$FB,$EF,$FB,$C7 ;
 $E018 DEFB $FF,$BF,$FB,$DF,$FB,$DF,$F3,$77,$F3,$CF,$F3,$BB ;
 $E024 DEFB $FF,$BF,$FC,$3F,$FC,$1F,$FB,$77,$FB,$EF,$FB,$F7 ;
 $E030 DEFB $FE,$7F,$FB,$DF,$FF,$DF,$FB,$77,$FB,$EF,$FB,$CF ;
 $E03C DEFB $FF,$7F,$FB,$DF,$FF,$DF,$FB,$77,$FB,$EF,$FB,$BF ;
 $E048 DEFB $FF,$7F,$FC,$3F,$FC,$3F,$F1,$8F,$F1,$C7,$F1,$83 ;
 $E054 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF ; }

; Centrepiece
@label=CENTREPIECE
b$E060 DEFB $E1,$00,$00,$07 ; {#UDGARRAY#(4,scale=4,step=4#FOR0,$40,$20||n|;(#PC+n)-(#PC+n)-$01-$08,#PEEK(#EVAL($ED0E+n*2));(#PC+n+$01)-(#PC+n+$02)-$01-$10,#PEEK(#EVAL($ED0F+n*2));(#PC+n+$03)-(#PC+n+$03)-$01-$08,#PEEK(#EVAL($ED11+n*2))||)(centrepiece)
 $E064 DEFB $E1,$03,$C0,$07 ;
 $E068 DEFB $E0,$07,$E1,$07 ;
 $E06C DEFB $E0,$8F,$F3,$07 ;
 $E070 DEFB $E0,$FF,$FF,$07 ;
 $E074 DEFB $E0,$FF,$FF,$07 ;
 $E078 DEFB $E0,$FF,$FF,$07 ;
 $E07C DEFB $E1,$00,$00,$87 ;
 $E080 DEFB $E1,$00,$00,$87 ;
 $E084 DEFB $E1,$00,$00,$87 ;
 $E088 DEFB $E1,$00,$00,$87 ;
 $E08C DEFB $E1,$00,$00,$87 ;
 $E090 DEFB $E1,$00,$00,$87 ;
 $E094 DEFB $E1,$00,$00,$87 ;
 $E098 DEFB $E1,$00,$00,$87 ;
 $E09C DEFB $E1,$00,$00,$87 ;
 $E0A0 DEFB $E1,$00,$00,$87 ;
 $E0A4 DEFB $E1,$00,$00,$87 ;
 $E0A8 DEFB $E1,$00,$00,$87 ;
 $E0AC DEFB $E1,$00,$00,$87 ;
 $E0B0 DEFB $E1,$00,$00,$87 ;
 $E0B4 DEFB $E1,$00,$00,$87 ;
 $E0B8 DEFB $E1,$00,$00,$87 ;
 $E0BC DEFB $E1,$00,$00,$87 ; }

; Top Door Frames
;
; #UDGARRAY32,attr=4,scale=4,step=32;(#PC)-(#PC)-$01-$100;(#PC+$01)-(#PC+$09)-$01-$100,attr=24;(#PC+$0A)-(#PC+$0B)-$01-$100;(#PC+$0C)-(#PC+$14)-$01-$100,attr=24;(#PC+$15)-(#PC+$16)-$01-$100;(#PC+$17)-(#PC+$1F)-$01-$100,attr=24(doors-top)
@label=DOORS_TOP
b$E0C0 DEFB $00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$00,$00,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $E0E0 DEFB $63,$F0,$00,$00,$00,$00,$00,$00,$00,$07,$63,$C3,$F0,$00,$00,$00,$00,$00,$00,$00,$07,$63,$C3,$F0,$00,$00,$00,$00,$00,$00,$00,$07
 $E100 DEFB $36,$F8,$00,$00,$00,$00,$00,$00,$00,$0F,$36,$66,$F8,$00,$00,$00,$00,$00,$00,$00,$0F,$36,$66,$F8,$00,$00,$00,$00,$00,$00,$00,$0F
 $E120 DEFB $1C,$DC,$00,$00,$00,$00,$00,$00,$00,$1F,$1C,$3C,$DC,$00,$00,$00,$00,$00,$00,$00,$1F,$1C,$3C,$DC,$00,$00,$00,$00,$00,$00,$00,$1F
 $E140 DEFB $1C,$CE,$00,$00,$00,$00,$00,$00,$00,$3B,$1C,$18,$CE,$00,$00,$00,$00,$00,$00,$00,$3B,$1C,$18,$CE,$00,$00,$00,$00,$00,$00,$00,$3B
 $E160 DEFB $36,$C7,$00,$00,$00,$00,$00,$00,$00,$73,$36,$3C,$C7,$00,$00,$00,$00,$00,$00,$00,$73,$36,$3C,$C7,$00,$00,$00,$00,$00,$00,$00,$73
 $E180 DEFB $63,$C3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E3,$63,$66,$C3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E3,$63,$66,$C3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E3
 $E1A0 DEFB $C1,$C3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C3,$C1,$C3,$C3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C3,$C1,$C3,$C3,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$C3

; Left Side Wall
@label=WALL_LEFT
b$E1C0 DEFB $C1,$C3  ; {#UDGARRAY#(2,scale=4,step=2#FOR0,$A0,$10||n|;(#PC+n)-(#PC+n)-$01-$08,#PEEK(#EVAL($ED80+n*2));(#PC+n+$01)-(#PC+n+$01)-$08-$10,#PEEK(#EVAL($ED81+n*2))||)(wall-left)
 $E1C2 DEFB $63,$C3  ;
 $E1C4 DEFB $36,$C3  ;
 $E1C6 DEFB $1C,$C3  ;
 $E1C8 DEFB $1C,$C3  ;
 $E1CA DEFB $36,$C3  ;
 $E1CC DEFB $63,$C3  ;
 $E1CE DEFB $C1,$C3  ;
 $E1D0 DEFB $C1,$C3  ;
 $E1D2 DEFB $63,$C3  ;
 $E1D4 DEFB $36,$C3  ;
 $E1D6 DEFB $1C,$C3  ;
 $E1D8 DEFB $1C,$C3  ;
 $E1DA DEFB $36,$C3  ;
 $E1DC DEFB $63,$C3  ;
 $E1DE DEFB $C1,$C3  ;
 $E1E0 DEFB $C1,$C3  ;
 $E1E2 DEFB $63,$C3  ;
 $E1E4 DEFB $36,$C3  ;
 $E1E6 DEFB $1C,$C3  ;
 $E1E8 DEFB $1C,$C3  ;
 $E1EA DEFB $36,$C3  ;
 $E1EC DEFB $63,$C3  ;
 $E1EE DEFB $C1,$C3  ;
 $E1F0 DEFB $C1,$C3  ;
 $E1F2 DEFB $63,$C3  ;
 $E1F4 DEFB $36,$C3  ;
 $E1F6 DEFB $1C,$C3  ;
 $E1F8 DEFB $1C,$C3  ;
 $E1FA DEFB $36,$C3  ;
 $E1FC DEFB $63,$C3  ;
 $E1FE DEFB $C1,$C3  ;
 $E200 DEFB $C1,$C3  ;
 $E202 DEFB $63,$C3  ;
 $E204 DEFB $36,$C3  ;
 $E206 DEFB $1C,$C3  ;
 $E208 DEFB $1C,$C3  ;
 $E20A DEFB $36,$C3  ;
 $E20C DEFB $63,$C3  ;
 $E20E DEFB $C1,$C3  ;
 $E210 DEFB $C1,$C3  ;
 $E212 DEFB $63,$C3  ;
 $E214 DEFB $36,$C3  ;
 $E216 DEFB $1C,$C3  ;
 $E218 DEFB $1C,$C3  ;
 $E21A DEFB $36,$C3  ;
 $E21C DEFB $63,$C3  ;
 $E21E DEFB $C1,$C3  ;
 $E220 DEFB $C1,$C3  ;
 $E222 DEFB $63,$C3  ;
 $E224 DEFB $36,$C3  ;
 $E226 DEFB $1C,$C3  ;
 $E228 DEFB $1C,$C3  ;
 $E22A DEFB $36,$C3  ;
 $E22C DEFB $63,$C3  ;
 $E22E DEFB $C1,$C3  ;
 $E230 DEFB $FF,$C3  ;
 $E232 DEFB $FF,$C3  ;
 $E234 DEFB $18,$C3  ;
 $E236 DEFB $18,$C3  ;
 $E238 DEFB $18,$C3  ;
 $E23A DEFB $18,$C3  ;
 $E23C DEFB $18,$C3  ;
 $E23E DEFB $18,$C3  ;
 $E240 DEFB $18,$C3  ;
 $E242 DEFB $18,$C3  ;
 $E244 DEFB $18,$C3  ;
 $E246 DEFB $18,$C3  ;
 $E248 DEFB $18,$C3  ;
 $E24A DEFB $18,$C3  ;
 $E24C DEFB $18,$C3  ;
 $E24E DEFB $18,$C3  ;
 $E250 DEFB $18,$C3  ;
 $E252 DEFB $18,$C3  ;
 $E254 DEFB $18,$C3  ;
 $E256 DEFB $18,$C3  ;
 $E258 DEFB $18,$C3  ;
 $E25A DEFB $18,$C3  ;
 $E25C DEFB $18,$C3  ;
 $E25E DEFB $18,$C3  ;
 $E260 DEFB $18,$C3  ;
 $E262 DEFB $18,$C3  ;
 $E264 DEFB $18,$C3  ;
 $E266 DEFB $18,$C3  ;
 $E268 DEFB $18,$C3  ;
 $E26A DEFB $18,$C3  ;
 $E26C DEFB $18,$C3  ;
 $E26E DEFB $18,$C3  ; }

; Middle Wall Section
@label=WALL_MIDDLE
b$E270 DEFB $C3,$C1,$C3,$C3 ; {#UDGARRAY#(4,attr=7,scale=4,step=4#FOR#(#PC),$E330,$20||n|;n-n-$01-$20,attr=24;(n+$01)-(n+$02)-$01-$20,attr=4;(n+$03)-(n+$03)-$01-$20,attr=24||#FOR$E350,$E3B0,$20||n|;n-n-$01-$20,attr=24;(n+$01)-(n+$02)-$01-$20,attr=16;(n+$03)-(n+$03)-$01-$20,attr=24||(wall-middle))
 $E274 DEFB $C3,$63,$66,$C3 ;
 $E278 DEFB $C3,$36,$3C,$C3 ;
 $E27C DEFB $C3,$1C,$18,$C3 ;
 $E280 DEFB $C3,$1C,$3C,$C3 ;
 $E284 DEFB $C3,$36,$66,$C3 ;
 $E288 DEFB $C3,$63,$C3,$C3 ;
 $E28C DEFB $C3,$C1,$81,$C3 ;
 $E290 DEFB $C3,$C1,$C3,$C3 ;
 $E294 DEFB $C3,$63,$66,$C3 ;
 $E298 DEFB $C3,$36,$3C,$C3 ;
 $E29C DEFB $C3,$1C,$18,$C3 ;
 $E2A0 DEFB $C3,$1C,$3C,$C3 ;
 $E2A4 DEFB $C3,$36,$66,$C3 ;
 $E2A8 DEFB $C3,$63,$C3,$C3 ;
 $E2AC DEFB $C3,$C1,$81,$C3 ;
 $E2B0 DEFB $C3,$C1,$C3,$C3 ;
 $E2B4 DEFB $C3,$63,$66,$C3 ;
 $E2B8 DEFB $C3,$36,$3C,$C3 ;
 $E2BC DEFB $C3,$1C,$18,$C3 ;
 $E2C0 DEFB $C3,$1C,$3C,$C3 ;
 $E2C4 DEFB $C3,$36,$66,$C3 ;
 $E2C8 DEFB $C3,$63,$C3,$C3 ;
 $E2CC DEFB $C3,$C1,$81,$C3 ;
 $E2D0 DEFB $C3,$C1,$C3,$C3 ;
 $E2D4 DEFB $C3,$63,$66,$C3 ;
 $E2D8 DEFB $C3,$36,$3C,$C3 ;
 $E2DC DEFB $C3,$1C,$18,$C3 ;
 $E2E0 DEFB $C3,$1C,$3C,$C3 ;
 $E2E4 DEFB $C3,$36,$66,$C3 ;
 $E2E8 DEFB $C3,$63,$C3,$C3 ;
 $E2EC DEFB $C3,$C1,$81,$C3 ;
 $E2F0 DEFB $C3,$C1,$C3,$C3 ;
 $E2F4 DEFB $C3,$63,$66,$C3 ;
 $E2F8 DEFB $C3,$36,$3C,$C3 ;
 $E2FC DEFB $C3,$1C,$18,$C3 ;
 $E300 DEFB $C3,$1C,$3C,$C3 ;
 $E304 DEFB $C3,$36,$66,$C3 ;
 $E308 DEFB $C3,$63,$C3,$C3 ;
 $E30C DEFB $C3,$C1,$81,$C3 ;
 $E310 DEFB $C3,$C1,$C3,$C3 ;
 $E314 DEFB $C3,$63,$66,$C3 ;
 $E318 DEFB $C3,$36,$3C,$C3 ;
 $E31C DEFB $C3,$1C,$18,$C3 ;
 $E320 DEFB $C3,$1C,$3C,$C3 ;
 $E324 DEFB $C3,$36,$66,$C3 ;
 $E328 DEFB $C3,$63,$C3,$C3 ;
 $E32C DEFB $C3,$C1,$81,$C3 ;
 $E330 DEFB $C3,$C1,$C3,$C3 ;
 $E334 DEFB $C3,$63,$66,$C3 ;
 $E338 DEFB $C3,$36,$3C,$C3 ;
 $E33C DEFB $C3,$1C,$18,$C3 ;
 $E340 DEFB $C3,$1C,$3C,$C3 ;
 $E344 DEFB $C3,$36,$66,$C3 ;
 $E348 DEFB $C3,$63,$C3,$C3 ;
 $E34C DEFB $C3,$C1,$81,$C3 ;
 $E350 DEFB $C3,$FF,$FF,$C3 ;
 $E354 DEFB $C3,$FF,$FF,$C3 ;
 $E358 DEFB $C3,$18,$18,$C3 ;
 $E35C DEFB $C3,$18,$18,$C3 ;
 $E360 DEFB $C3,$18,$18,$C3 ;
 $E364 DEFB $C3,$18,$18,$C3 ;
 $E368 DEFB $C3,$18,$18,$C3 ;
 $E36C DEFB $C3,$18,$18,$C3 ;
 $E370 DEFB $C3,$18,$18,$C3 ;
 $E374 DEFB $C3,$18,$18,$C3 ;
 $E378 DEFB $C3,$18,$18,$C3 ;
 $E37C DEFB $C3,$18,$18,$C3 ;
 $E380 DEFB $C3,$18,$18,$C3 ;
 $E384 DEFB $C3,$18,$18,$C3 ;
 $E388 DEFB $C3,$18,$18,$C3 ;
 $E38C DEFB $C3,$18,$18,$C3 ;
 $E390 DEFB $C3,$18,$18,$C3 ;
 $E394 DEFB $C3,$18,$18,$C3 ;
 $E398 DEFB $C3,$18,$18,$C3 ;
 $E39C DEFB $C3,$18,$18,$C3 ;
 $E3A0 DEFB $C3,$18,$18,$C3 ;
 $E3A4 DEFB $C3,$18,$18,$C3 ;
 $E3A8 DEFB $C3,$18,$18,$C3 ;
 $E3AC DEFB $C3,$18,$18,$C3 ;
 $E3B0 DEFB $C3,$18,$18,$C3 ;
 $E3B4 DEFB $C3,$18,$18,$C3 ;
 $E3B8 DEFB $C3,$18,$18,$C3 ;
 $E3BC DEFB $C3,$18,$18,$C3 ;
 $E3C0 DEFB $C3,$18,$18,$C3 ;
 $E3C4 DEFB $C3,$18,$18,$C3 ;
 $E3C8 DEFB $C3,$18,$18,$C3 ;
 $E3CC DEFB $C3,$18,$18,$C3 ; }

; Door Frame Right Side
@label=DOOR_FRAME_SIDE
b$E3D0 DEFB $C3      ; {#UDGARRAY1,attr=24,scale=4,step=1;(#PC)-(#PC+$50)-$01-$08(door-side)
 $E3D1 DEFB $C3      ;
 $E3D2 DEFB $C3      ;
 $E3D3 DEFB $C3      ;
 $E3D4 DEFB $C3      ;
 $E3D5 DEFB $C3      ;
 $E3D6 DEFB $C3      ;
 $E3D7 DEFB $C3      ;
 $E3D8 DEFB $C3      ;
 $E3D9 DEFB $C3      ;
 $E3DA DEFB $C3      ;
 $E3DB DEFB $C3      ;
 $E3DC DEFB $C3      ;
 $E3DD DEFB $C3      ;
 $E3DE DEFB $C3      ;
 $E3DF DEFB $C3      ;
 $E3E0 DEFB $C3      ;
 $E3E1 DEFB $C3      ;
 $E3E2 DEFB $C3      ;
 $E3E3 DEFB $C3      ;
 $E3E4 DEFB $C3      ;
 $E3E5 DEFB $C3      ;
 $E3E6 DEFB $C3      ;
 $E3E7 DEFB $C3      ;
 $E3E8 DEFB $C3      ;
 $E3E9 DEFB $C3      ;
 $E3EA DEFB $C3      ;
 $E3EB DEFB $C3      ;
 $E3EC DEFB $C3      ;
 $E3ED DEFB $C3      ;
 $E3EE DEFB $C3      ;
 $E3EF DEFB $C3      ;
 $E3F0 DEFB $C3      ;
 $E3F1 DEFB $C3      ;
 $E3F2 DEFB $C3      ;
 $E3F3 DEFB $C3      ;
 $E3F4 DEFB $C3      ;
 $E3F5 DEFB $C3      ;
 $E3F6 DEFB $C3      ;
 $E3F7 DEFB $C3      ;
 $E3F8 DEFB $C3      ;
 $E3F9 DEFB $C3      ;
 $E3FA DEFB $C3      ;
 $E3FB DEFB $C3      ;
 $E3FC DEFB $C3      ;
 $E3FD DEFB $C3      ;
 $E3FE DEFB $C3      ;
 $E3FF DEFB $C3      ;
 $E400 DEFB $C3      ;
 $E401 DEFB $C3      ;
 $E402 DEFB $C3      ;
 $E403 DEFB $C3      ;
 $E404 DEFB $C3      ;
 $E405 DEFB $C3      ;
 $E406 DEFB $C3      ;
 $E407 DEFB $C3      ;
 $E408 DEFB $C3      ;
 $E409 DEFB $C3      ;
 $E40A DEFB $C3      ;
 $E40B DEFB $C3      ;
 $E40C DEFB $C3      ;
 $E40D DEFB $C3      ;
 $E40E DEFB $C3      ;
 $E40F DEFB $C3      ;
 $E410 DEFB $C3      ;
 $E411 DEFB $C3      ;
 $E412 DEFB $C3      ;
 $E413 DEFB $C3      ;
 $E414 DEFB $C3      ;
 $E415 DEFB $C3      ;
 $E416 DEFB $C3      ;
 $E417 DEFB $C3      ;
 $E418 DEFB $C3      ;
 $E419 DEFB $C3      ;
 $E41A DEFB $C3      ;
 $E41B DEFB $C3      ;
 $E41C DEFB $C3      ;
 $E41D DEFB $C3      ;
 $E41E DEFB $C3      ;
 $E41F DEFB $C3      ;
 $E420 DEFB $C3      ;
 $E421 DEFB $C3      ;
 $E422 DEFB $C3      ;
 $E423 DEFB $C3      ;
 $E424 DEFB $C3      ;
 $E425 DEFB $C3      ;
 $E426 DEFB $C3      ;
 $E427 DEFB $C3      ; }

; Bottom Door Frames
;
; #UDGARRAY32,attr=56,scale=4,step=32;(#PC)-(#PC)-$01-$100,attr=16;(#PC+$01)-(#PC+$09)-$01-$100;(#PC+$0A)-(#PC+$0B)-$01-$100,attr=16;(#PC+$0C)-(#PC+$14)-$01-$100;(#PC+$15)-(#PC+$16)-$01-$100,attr=16;(#PC+$17)-(#PC+$1F)-$01-$100(doors-bottom)
@label=DOOR_BOTTOM
b$E428 DEFB $18,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$18,$18,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$18,$18,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $E448 DEFB $18,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$18,$18,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$18,$18,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $E468 DEFB $18,$FC,$00,$00,$00,$00,$00,$00,$00,$3F,$18,$18,$FC,$00,$00,$00,$00,$00,$00,$00,$3F,$18,$18,$FC,$00,$00,$00,$00,$00,$00,$00,$3F
 $E488 DEFB $18,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$18,$18,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$18,$18,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $E4A8 DEFB $18,$F0,$00,$00,$00,$00,$00,$00,$00,$0F,$18,$18,$F0,$00,$00,$00,$00,$00,$00,$00,$0F,$18,$18,$F0,$00,$00,$00,$00,$00,$00,$00,$0F
 $E4C8 DEFB $18,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$18,$18,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$18,$18,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $E4E8 DEFB $FF,$C0,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00,$03
 $E508 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF

; Tellers
;
; #UDGARRAY32,attr=48,scale=4,step=32;(#PC)-(#PC+$78)-$01-$100,attr=6;(#PC+$100)-(#PC+$280)-$01-$100;(#PC+$300)-(#PC+$380)-$01-$100,attr=40(tellers)
@label=TELLERS
b$E528 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $E548 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $E568 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $E588 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $E5A8 DEFB $F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $E5C8 DEFB $F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $E5E8 DEFB $F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $E608 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $E628 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $E648 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $E668 DEFB $FD,$EF,$7B,$DE,$F7,$BF,$FE,$F7,$BD,$EF,$7B,$FD,$EF,$7B,$DE,$F7,$BF,$FE,$F7,$BD,$EF,$7B,$FD,$EF,$7B,$DE,$F7,$BF,$FE,$F7,$BD,$EF
 $E688 DEFB $FD,$EF,$7B,$DE,$F7,$FE,$3F,$F7,$BD,$EF,$7B,$FD,$EF,$7B,$DE,$F7,$FE,$3F,$F7,$BD,$EF,$7B,$FD,$EF,$7B,$DE,$F7,$FE,$3F,$F7,$BD,$EF
 $E6A8 DEFB $FD,$EF,$7B,$DE,$F7,$F8,$0F,$F7,$BD,$EF,$7B,$FD,$EF,$7B,$DE,$F7,$F8,$0F,$F7,$BD,$EF,$7B,$FD,$EF,$7B,$DE,$F7,$F8,$0F,$F7,$BD,$EF
 $E6C8 DEFB $FD,$EF,$7B,$DE,$F7,$C0,$01,$F7,$BD,$EF,$7B,$FD,$EF,$7B,$DE,$F7,$C0,$01,$F7,$BD,$EF,$7B,$FD,$EF,$7B,$DE,$F7,$C0,$01,$F7,$BD,$EF
 $E6E8 DEFB $FD,$EF,$7B,$DE,$FF,$00,$00,$7F,$BD,$EF,$7B,$FD,$EF,$7B,$DE,$FF,$00,$00,$7F,$BD,$EF,$7B,$FD,$EF,$7B,$DE,$FF,$00,$00,$7F,$BD,$EF
 $E708 DEFB $FD,$EF,$7B,$DE,$FE,$00,$00,$3F,$BD,$EF,$7B,$FD,$EF,$7B,$DE,$FE,$00,$00,$3F,$BD,$EF,$7B,$FD,$EF,$7B,$DE,$FE,$00,$1F,$BF,$BD,$EF
 $E728 DEFB $FD,$EF,$63,$D3,$10,$00,$00,$1F,$C9,$EF,$7B,$FD,$EF,$7B,$D3,$10,$00,$00,$1F,$C9,$EF,$7B,$FD,$EF,$63,$DE,$FC,$00,$2F,$1F,$C9,$EF
 $E748 DEFB $FD,$F3,$6B,$D4,$C4,$00,$00,$1F,$A5,$F7,$7B,$FD,$EF,$7B,$D4,$C4,$00,$00,$1F,$A5,$F7,$7B,$FD,$F3,$6B,$DE,$FC,$00,$56,$1F,$A5,$F7
 $E768 DEFB $FD,$EE,$4B,$D9,$2A,$00,$00,$0F,$B5,$BB,$7B,$FD,$EF,$7B,$D9,$2A,$00,$00,$0F,$B5,$BB,$7B,$FD,$EE,$4B,$DE,$F8,$00,$A4,$0F,$B5,$BB
 $E788 DEFB $FD,$C1,$9B,$DE,$5F,$00,$00,$07,$BD,$21,$7B,$FD,$EF,$7B,$DE,$5F,$00,$00,$07,$BD,$21,$7B,$FD,$C1,$9B,$DE,$F0,$00,$A8,$07,$BD,$21
 $E7A8 DEFB $FD,$FE,$DB,$DD,$B0,$00,$00,$07,$B2,$4F,$7B,$FD,$C0,$0B,$DD,$B0,$00,$00,$07,$B2,$4F,$7B,$FD,$FE,$DB,$DE,$F0,$01,$68,$07,$B2,$4F
 $E7C8 DEFB $FD,$FD,$3B,$DA,$08,$00,$00,$07,$A0,$2F,$7B,$FD,$80,$03,$DA,$08,$00,$00,$07,$A0,$2F,$7B,$FD,$FD,$3B,$DE,$F0,$01,$50,$07,$A0,$2F
 $E7E8 DEFB $FD,$FE,$1B,$DC,$44,$00,$00,$07,$AF,$AF,$7B,$FD,$00,$01,$DC,$44,$00,$00,$07,$AF,$AF,$7B,$FD,$FE,$1B,$DE,$F0,$00,$A0,$07,$AF,$AF
 $E808 DEFB $FF,$E8,$8F,$FD,$E7,$FF,$FF,$FF,$CA,$1F,$FF,$FF,$FF,$FF,$FD,$E7,$FF,$FF,$FF,$CA,$1F,$FF,$FF,$E8,$8F,$FF,$FF,$FD,$DF,$FF,$CA,$1F
 $E828 DEFB $FF,$F3,$EF,$F9,$43,$FF,$FF,$FF,$CF,$9F,$FF,$FE,$00,$01,$F9,$43,$FF,$FF,$FF,$CF,$9F,$FF,$FF,$F3,$EF,$FF,$FF,$FA,$2F,$FF,$CF,$9F
 $E848 DEFB $FF,$F2,$8F,$F9,$F3,$FF,$FF,$FF,$C2,$9F,$FF,$FF,$FF,$FF,$F9,$F3,$FF,$FF,$FF,$C2,$9F,$FF,$FF,$F2,$8F,$FF,$FF,$FB,$EF,$FF,$C2,$9F
 $E868 DEFB $F8,$13,$EC,$04,$54,$00,$00,$3C,$4F,$90,$00,$F8,$00,$00,$08,$54,$00,$00,$3C,$4F,$90,$00,$F8,$13,$EC,$00,$00,$04,$10,$3C,$4F,$90
 $E888 DEFB $F8,$10,$AD,$F5,$F4,$A0,$78,$42,$22,$28,$F0,$F9,$FF,$FF,$09,$F4,$A0,$78,$42,$22,$28,$F0,$F8,$10,$AD,$F0,$00,$07,$F0,$42,$22,$28
 $E8A8 DEFB $F8,$0B,$FA,$1A,$49,$50,$84,$3C,$10,$55,$08,$F8,$00,$00,$08,$49,$50,$84,$3C,$10,$55,$08,$F8,$0B,$FA,$18,$00,$07,$F4,$3C,$10,$55
 $E8C8 DEFB $F8,$04,$B5,$F6,$0A,$A8,$FC,$00,$0F,$A8,$F0,$F8,$FF,$FE,$04,$0A,$A8,$FC,$00,$0F,$A8,$F0,$F8,$04,$B5,$F4,$00,$03,$EA,$00,$0F,$A8
 $E8E8 DEFB $F8,$03,$EA,$EB,$F5,$50,$78,$00,$05,$54,$00,$F8,$00,$00,$03,$F5,$50,$78,$00,$05,$54,$00,$F8,$03,$EA,$E8,$00,$00,$54,$00,$05,$54
 $E908 DEFB $F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Score Image (text)
@label=SCORE_TEXT_IMAGE
b$E928 DEFB $00,$00,$00,$00,$00,$00 ; {#UDGARRAY6,attr=7,scale=4,step=6;(#PC)-(#PC+$2A)-$01-$30;(#PC+$30)-(#PC+$5A)-$01-$30,attr=2(score-text)
 $E92E DEFB $00,$00,$00,$00,$00,$00 ;
 $E934 DEFB $2E,$28,$28,$E8,$EC,$00 ;
 $E93A DEFB $6E,$6C,$6C,$AC,$AA,$00 ;
 $E940 DEFB $AA,$AA,$AA,$EA,$E6,$00 ;
 $E946 DEFB $CE,$E6,$C6,$E6,$E2,$00 ;
 $E94C DEFB $C0,$E2,$C6,$46,$60,$00 ;
 $E952 DEFB $FC,$E0,$C6,$4E,$6C,$00 ;
 $E958 DEFB $7A,$E0,$C6,$54,$6C,$00 ;
 $E95E DEFB $06,$E2,$C6,$58,$60,$00 ;
 $E964 DEFB $E6,$E6,$C6,$E4,$E2,$00 ;
 $E96A DEFB $A6,$AA,$AA,$EA,$E6,$00 ;
 $E970 DEFB $EC,$6C,$6C,$A6,$AA,$00 ;
 $E976 DEFB $E8,$28,$28,$E2,$EC,$00 ;
 $E97C DEFB $00,$00,$00,$00,$00,$00 ;
 $E982 DEFB $00,$00,$00,$00,$00,$00 ; }

; Lives Image (text)
@label=LIVES_TEXT_IMAGE
b$E988 DEFB $00,$00,$00,$00,$00,$00 ; {#UDGARRAY6,attr=7,scale=4,step=6;(#PC)-(#PC+$42)-$01-$30;(#PC+$60)-(#PC+$84)-$01-$30,attr=3(lives-text)
 $E98E DEFB $00,$00,$00,$00,$00,$00 ;
 $E994 DEFB $00,$00,$00,$00,$00,$00 ;
 $E99A DEFB $00,$00,$00,$00,$00,$00 ;
 $E9A0 DEFB $00,$00,$00,$00,$00,$00 ;
 $E9A6 DEFB $00,$00,$00,$00,$00,$00 ;
 $E9AC DEFB $00,$00,$00,$00,$00,$00 ;
 $E9B2 DEFB $00,$00,$00,$00,$00,$00 ;
 $E9B8 DEFB $00,$00,$00,$00,$00,$00 ;
 $E9BE DEFB $00,$00,$00,$00,$00,$00 ;
 $E9C4 DEFB $E0,$38,$EE,$EC,$2E,$00 ;
 $E9CA DEFB $A0,$28,$AA,$AA,$6E,$00 ;
 $E9D0 DEFB $E0,$38,$EE,$E6,$AA,$00 ;
 $E9D6 DEFB $E0,$38,$C6,$E2,$CE,$00 ;
 $E9DC DEFB $40,$10,$C6,$60,$C0,$00 ;
 $E9E2 DEFB $40,$10,$44,$6C,$FC,$00 ;
 $E9E8 DEFB $40,$10,$82,$6C,$7A,$00 ;
 $E9EE DEFB $40,$10,$C6,$60,$06,$00 ;
 $E9F4 DEFB $E6,$38,$6C,$E2,$E6,$00 ;
 $E9FA DEFB $E6,$38,$6C,$E6,$A6,$00 ;
 $EA00 DEFB $BE,$28,$38,$AA,$EC,$00 ;
 $EA06 DEFB $FE,$38,$10,$EC,$E8,$00 ; }

i$EA0C

; Door Buffer
;
; Used by the routines at #R$6600, #R$C300 and #R$F950.
@label=DOOR_BUFFER
b$EA90 DEFB $00,$00,$FF,$FF,$FF,$FF,$FF ; {#UDGARRAY7,scale=4,step=7;(#PC)-(#PC+$238)-$01-$38,$30(door-buffer)
 $EA97 DEFB $00,$00,$88,$0F,$FF,$FF,$FF ;
 $EA9E DEFB $00,$00,$88,$00,$0F,$FF,$FF ;
 $EAA5 DEFB $00,$00,$88,$00,$00,$07,$FF ;
 $EAAC DEFB $00,$00,$88,$00,$00,$00,$07 ;
 $EAB3 DEFB $00,$00,$88,$00,$00,$00,$00 ;
 $EABA DEFB $00,$00,$88,$00,$00,$00,$00 ;
 $EAC1 DEFB $00,$00,$88,$01,$F8,$00,$00 ;
 $EAC8 DEFB $00,$00,$88,$02,$87,$F8,$00 ;
 $EACF DEFB $00,$00,$88,$01,$40,$06,$00 ;
 $EAD6 DEFB $00,$00,$88,$02,$A0,$0A,$00 ;
 $EADD DEFB $00,$00,$88,$01,$51,$FA,$00 ;
 $EAE4 DEFB $00,$00,$88,$02,$A0,$0A,$00 ;
 $EAEB DEFB $00,$00,$88,$01,$50,$0A,$00 ;
 $EAF2 DEFB $00,$00,$88,$02,$A0,$0A,$00 ;
 $EAF9 DEFB $00,$00,$88,$01,$50,$0A,$00 ;
 $EB00 DEFB $00,$00,$88,$02,$A0,$0A,$07 ;
 $EB07 DEFB $00,$00,$88,$01,$50,$0A,$04 ;
 $EB0E DEFB $00,$01,$88,$02,$A0,$0A,$05 ;
 $EB15 DEFB $00,$03,$88,$01,$50,$0A,$05 ;
 $EB1C DEFB $00,$07,$88,$02,$A0,$0A,$04 ;
 $EB23 DEFB $00,$0F,$88,$01,$50,$0A,$04 ;
 $EB2A DEFB $00,$0F,$88,$02,$AF,$E2,$04 ;
 $EB31 DEFB $00,$1F,$88,$01,$7F,$F2,$05 ;
 $EB38 DEFB $00,$1F,$88,$02,$FF,$FA,$05 ;
 $EB3F DEFB $00,$1F,$88,$01,$FF,$FE,$05 ;
 $EB46 DEFB $00,$1F,$88,$00,$00,$00,$06 ;
 $EB4D DEFB $00,$1F,$88,$00,$00,$00,$00 ;
 $EB54 DEFB $00,$1F,$88,$00,$00,$00,$00 ;
 $EB5B DEFB $00,$1F,$88,$03,$FF,$FE,$00 ;
 $EB62 DEFB $00,$FF,$88,$01,$00,$06,$00 ;
 $EB69 DEFB $00,$5F,$88,$02,$80,$0A,$00 ;
 $EB70 DEFB $00,$33,$88,$01,$53,$E2,$00 ;
 $EB77 DEFB $00,$1C,$88,$02,$A0,$0A,$00 ;
 $EB7E DEFB $00,$09,$88,$01,$50,$0A,$00 ;
 $EB85 DEFB $00,$1F,$88,$02,$A0,$0A,$00 ;
 $EB8C DEFB $00,$20,$88,$01,$50,$0A,$00 ;
 $EB93 DEFB $00,$3F,$88,$02,$A0,$0A,$00 ;
 $EB9A DEFB $00,$20,$88,$01,$50,$0A,$00 ;
 $EBA1 DEFB $00,$3E,$88,$02,$A0,$0A,$00 ;
 $EBA8 DEFB $00,$31,$8B,$F1,$50,$0A,$00 ;
 $EBAF DEFB $00,$43,$8A,$12,$A0,$0A,$00 ;
 $EBB6 DEFB $00,$88,$8A,$71,$50,$0A,$00 ;
 $EBBD DEFB $00,$9E,$8A,$92,$A0,$0A,$00 ;
 $EBC4 DEFB $01,$18,$8A,$91,$50,$0A,$00 ;
 $EBCB DEFB $01,$1E,$8A,$92,$A1,$E2,$00 ;
 $EBD2 DEFB $00,$8A,$8A,$91,$7F,$F2,$00 ;
 $EBD9 DEFB $00,$9E,$8A,$72,$BF,$FA,$00 ;
 $EBE0 DEFB $00,$41,$8A,$11,$7F,$FE,$00 ;
 $EBE7 DEFB $00,$3F,$8A,$D2,$FE,$00,$00 ;
 $EBEE DEFB $00,$01,$8A,$D0,$00,$00,$00 ;
 $EBF5 DEFB $00,$01,$8A,$50,$00,$00,$00 ;
 $EBFC DEFB $00,$01,$8A,$50,$00,$00,$00 ;
 $EC03 DEFB $00,$00,$8A,$10,$00,$00,$00 ;
 $EC0A DEFB $00,$00,$8A,$70,$00,$00,$00 ;
 $EC11 DEFB $00,$00,$8B,$80,$00,$00,$00 ;
 $EC18 DEFB $00,$00,$88,$00,$00,$00,$00 ;
 $EC1F DEFB $00,$00,$88,$00,$00,$00,$00 ;
 $EC26 DEFB $00,$00,$88,$00,$03,$FF,$C0 ;
 $EC2D DEFB $00,$00,$88,$01,$FE,$00,$40 ;
 $EC34 DEFB $00,$00,$88,$3F,$00,$01,$40 ;
 $EC3B DEFB $00,$00,$88,$40,$00,$02,$40 ;
 $EC42 DEFB $00,$00,$88,$20,$00,$FD,$40 ;
 $EC49 DEFB $00,$00,$88,$50,$1F,$01,$41 ;
 $EC50 DEFB $00,$00,$88,$2A,$E0,$01,$44 ;
 $EC57 DEFB $00,$00,$88,$55,$00,$01,$45 ;
 $EC5E DEFB $00,$00,$88,$2A,$00,$01,$45 ;
 $EC65 DEFB $00,$00,$88,$55,$00,$01,$44 ;
 $EC6C DEFB $00,$00,$88,$2A,$00,$01,$44 ;
 $EC73 DEFB $00,$00,$88,$55,$00,$01,$44 ;
 $EC7A DEFB $00,$00,$88,$2A,$00,$01,$44 ;
 $EC81 DEFB $00,$00,$88,$55,$00,$01,$45 ;
 $EC88 DEFB $00,$00,$88,$2A,$00,$01,$45 ;
 $EC8F DEFB $00,$00,$88,$55,$00,$01,$46 ;
 $EC96 DEFB $00,$00,$88,$2A,$00,$01,$44 ;
 $EC9D DEFB $00,$00,$88,$55,$00,$00,$40 ;
 $ECA4 DEFB $00,$00,$88,$2A,$00,$00,$40 ;
 $ECAB DEFB $00,$00,$88,$55,$00,$0F,$40 ;
 $ECB2 DEFB $00,$0B,$88,$2A,$01,$FF,$C0 ;
 $ECB9 DEFB $00,$1C,$88,$55,$3F,$FF,$C0 ;
 $ECC0 DEFB $00,$B1,$88,$2F,$FF,$E0,$00 ;
 $ECC7 DEFB $01,$43,$88,$5F,$FC,$00,$00 ;
 $ECCE DEFB $02,$BF,$88,$3F,$00,$00,$00 ;
 $ECD5 DEFB $05,$55,$88,$5C,$00,$00,$07 ;
 $ECDC DEFB $02,$AA,$88,$00,$00,$00,$FF ;
 $ECE3 DEFB $01,$55,$88,$00,$00,$3F,$FF ;
 $ECEA DEFB $00,$00,$88,$00,$3F,$FF,$FF ;
 $ECF1 DEFB $00,$00,$FF,$FF,$FF,$FF,$FF ; }

i$ECF8

; Attribute Data
b$ED00 DEFB $00,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$00,$18,$03,$03,$18,$00,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$38,$00
 $ED20 DEFB $00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$00,$18,$30,$30,$18,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$00
 $ED40 DEFB $00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$00,$18,$30,$30,$18,$00,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$0D,$00
 $ED60 DEFB $04,$18,$18,$18,$18,$18,$18,$18,$18,$18,$04,$04,$18,$18,$18,$18,$18,$18,$18,$18,$18,$04,$04,$18,$18,$18,$18,$18,$18,$18,$18,$18
 $ED80 DEFB $04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18
 $EDA0 DEFB $04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18
 $EDC0 DEFB $04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18
 $EDE0 DEFB $04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18
 $EE00 DEFB $04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18
 $EE20 DEFB $04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18
 $EE40 DEFB $04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18,$04,$04,$18,$30,$30,$30,$30,$30,$30,$30,$18
 $EE60 DEFB $10,$18,$30,$30,$30,$30,$30,$30,$30,$18,$10,$10,$18,$30,$30,$30,$30,$30,$30,$30,$18,$10,$10,$18,$30,$30,$30,$30,$30,$30,$30,$18
 $EE80 DEFB $10,$18,$30,$30,$30,$30,$30,$30,$30,$18,$10,$10,$18,$30,$30,$30,$30,$30,$30,$30,$18,$10,$10,$18,$30,$30,$30,$30,$30,$30,$30,$18
 $EEA0 DEFB $10,$18,$30,$30,$30,$30,$30,$30,$30,$18,$10,$10,$18,$30,$30,$30,$30,$30,$30,$30,$18,$10,$10,$18,$30,$30,$30,$30,$30,$30,$30,$18
 $EEC0 DEFB $10,$18,$30,$30,$30,$30,$30,$30,$30,$18,$10,$10,$18,$30,$30,$30,$30,$30,$30,$30,$18,$10,$10,$18,$30,$30,$30,$30,$30,$30,$30,$18
 $EEE0 DEFB $10,$38,$38,$38,$38,$38,$38,$38,$38,$38,$10,$10,$38,$38,$38,$38,$38,$38,$38,$38,$38,$10,$10,$38,$38,$38,$38,$38,$38,$38,$38,$38
 $EF00 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06
 $EF20 DEFB $06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06,$06
 $EF40 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
 $EF60 DEFB $30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30,$30
 $EF80 DEFB $28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28,$28
 $EFA0 DEFB $03,$03,$03,$03,$03,$03,$05,$05,$05,$05,$05,$05,$05,$05,$05,$03,$03,$03,$03,$03,$03,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
 $EFC0 DEFB $07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07,$05,$05,$05,$05,$05,$05,$05,$05,$05,$05
 $EFE0 DEFB $05,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02,$03,$03,$03,$03,$03,$03,$02,$02,$02,$02,$02,$02,$02,$02,$02,$02

; BANG Frames
@label=BANG_FRAME_1
b$F000 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#BANG(bang-1*)
 $F008 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F010 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F018 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F020 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F028 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F030 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F038 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F040 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F048 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F050 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F058 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F060 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F068 DEFB $00,$00,$00,$62,$52,$00,$00,$00 ;
 $F070 DEFB $00,$00,$00,$55,$55,$00,$00,$00 ;
 $F078 DEFB $00,$00,$00,$22,$24,$00,$00,$00 ;
 $F080 DEFB $00,$00,$00,$55,$55,$00,$00,$00 ;
 $F088 DEFB $00,$00,$00,$65,$52,$00,$00,$00 ;
 $F090 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F098 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F0F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
@label=BANG_FRAME_2
 $F100 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#BANG(bang-2*)
 $F108 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F110 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F118 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F120 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F128 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F130 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F138 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F140 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F148 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F150 DEFB $00,$00,$E8,$28,$EE,$28,$00,$00 ;
 $F158 DEFB $00,$00,$AC,$6C,$AA,$6C,$00,$00 ;
 $F160 DEFB $00,$00,$EA,$AA,$EE,$AA,$00,$00 ;
 $F168 DEFB $00,$00,$E6,$C6,$EE,$E6,$00,$00 ;
 $F170 DEFB $00,$00,$62,$82,$64,$E2,$00,$00 ;
 $F178 DEFB $00,$00,$6C,$44,$74,$E0,$00,$00 ;
 $F180 DEFB $00,$00,$6C,$FE,$5C,$EE,$00,$00 ;
 $F188 DEFB $00,$00,$62,$FE,$4C,$E6,$00,$00 ;
 $F190 DEFB $00,$00,$E6,$C6,$EE,$E6,$00,$00 ;
 $F198 DEFB $00,$00,$EA,$EE,$EE,$AA,$00,$00 ;
 $F1A0 DEFB $00,$00,$AC,$AA,$AA,$6C,$00,$00 ;
 $F1A8 DEFB $00,$00,$E8,$EE,$EE,$28,$00,$00 ;
 $F1B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F1B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F1C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F1C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F1D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F1D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F1E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F1E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F1F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F1F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
@label=BANG_FRAME_3
 $F200 DEFB $FC,$C0,$0C,$C0,$FC,$FC,$0C,$C0 ; {#BANG(bang-3*)
 $F208 DEFB $FC,$E0,$1C,$E0,$FC,$FC,$1C,$E0 ;
 $F210 DEFB $DC,$F0,$3C,$F0,$DC,$EC,$3C,$F0 ;
 $F218 DEFB $EC,$F8,$7C,$F8,$EC,$DC,$7C,$F8 ;
 $F220 DEFB $FC,$DC,$EC,$EC,$FC,$FC,$EC,$EC ;
 $F228 DEFB $FC,$EC,$DC,$DC,$FC,$FC,$DC,$DC ;
 $F230 DEFB $FC,$7C,$F8,$7C,$FC,$FC,$FC,$7C ;
 $F238 DEFB $FC,$3C,$F0,$3C,$FC,$FC,$FC,$3C ;
 $F240 DEFB $3C,$1C,$E0,$1C,$3C,$30,$FC,$1C ;
 $F248 DEFB $3C,$0C,$E0,$1C,$3E,$30,$FC,$0C ;
 $F250 DEFB $3C,$F8,$70,$38,$3F,$30,$FC,$00 ;
 $F258 DEFB $3C,$F0,$30,$30,$3F,$B0,$FC,$00 ;
 $F260 DEFB $3C,$F0,$FF,$FC,$37,$F0,$FC,$FC ;
 $F268 DEFB $3C,$F8,$FF,$FC,$33,$F0,$FC,$FC ;
 $F270 DEFB $3C,$0C,$FF,$FC,$31,$F0,$FC,$7C ;
 $F278 DEFB $3C,$1C,$FF,$FC,$30,$F0,$FC,$3C ;
 $F280 DEFB $FC,$3C,$F8,$7C,$FC,$FC,$FC,$3C ;
 $F288 DEFB $FC,$7C,$F0,$3C,$FC,$FC,$FC,$7C ;
 $F290 DEFB $FC,$EC,$FC,$FC,$FC,$FC,$DC,$EC ;
 $F298 DEFB $FC,$DC,$FC,$FC,$FC,$FC,$EC,$DC ;
 $F2A0 DEFB $DC,$F8,$EC,$DC,$DC,$EC,$7C,$F8 ;
 $F2A8 DEFB $EC,$F0,$DC,$EC,$EC,$DC,$3C,$F0 ;
 $F2B0 DEFB $FC,$E0,$FC,$FC,$FC,$FC,$1C,$E0 ;
 $F2B8 DEFB $FC,$C0,$FC,$FC,$FC,$FC,$0C,$C0 ;
 $F2C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F2C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F2D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F2D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F2E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F2E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F2F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F2F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
@label=BANG_FRAME_4
 $F300 DEFB $40,$40,$04,$C0,$50,$68,$08,$80 ; {#BANG(bang-4*)
 $F308 DEFB $58,$60,$04,$E0,$58,$68,$08,$C0 ;
 $F310 DEFB $58,$60,$2C,$E0,$58,$E8,$28,$40 ;
 $F318 DEFB $68,$70,$6C,$70,$C8,$DC,$7C,$58 ;
 $F320 DEFB $FC,$D8,$EC,$68,$EC,$FC,$6C,$4C ;
 $F328 DEFB $FC,$C8,$CC,$4C,$EC,$FC,$4C,$DC ;
 $F330 DEFB $FC,$68,$EC,$58,$FC,$78,$5C,$F8 ;
 $F338 DEFB $F8,$7C,$FC,$78,$FC,$78,$D8,$F8 ;
 $F340 DEFB $38,$5C,$E8,$58,$BC,$38,$F8,$9C ;
 $F348 DEFB $3C,$0C,$E0,$18,$BC,$38,$78,$9C ;
 $F350 DEFB $3C,$5C,$70,$3C,$BC,$30,$78,$10 ;
 $F358 DEFB $34,$74,$30,$3C,$1E,$B0,$78,$00 ;
 $F360 DEFB $34,$F0,$7C,$F8,$17,$F0,$30,$A4 ;
 $F368 DEFB $34,$F8,$7E,$F8,$33,$F0,$78,$EC ;
 $F370 DEFB $3C,$0C,$7E,$FC,$33,$F0,$78,$E8 ;
 $F378 DEFB $3C,$1C,$FF,$FC,$32,$F0,$F8,$B8 ;
 $F380 DEFB $7C,$38,$FB,$78,$F8,$F8,$F8,$38 ;
 $F388 DEFB $7C,$78,$F1,$38,$F8,$78,$F8,$78 ;
 $F390 DEFB $7C,$7C,$79,$78,$FC,$78,$5C,$EC ;
 $F398 DEFB $FC,$4C,$7C,$7C,$7C,$FC,$6C,$DC ;
 $F3A0 DEFB $DC,$68,$68,$DC,$58,$EC,$6C,$FC ;
 $F3A8 DEFB $EC,$F8,$D8,$6C,$C8,$5C,$38,$F8 ;
 $F3B0 DEFB $7C,$E8,$FC,$F8,$D8,$78,$3C,$F8 ;
 $F3B8 DEFB $7C,$E8,$FC,$78,$F8,$78,$1C,$C8 ;
 $F3C0 DEFB $18,$40,$48,$28,$18,$30,$18,$08 ;
 $F3C8 DEFB $08,$40,$60,$20,$00,$10,$08,$00 ;
 $F3D0 DEFB $00,$00,$20,$00,$00,$00,$08,$00 ;
 $F3D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F3E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F3E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F3F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F3F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
@label=BANG_FRAME_5
 $F400 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#BANG(bang-5*)
 $F408 DEFB $18,$20,$00,$C0,$00,$40,$00,$00 ;
 $F410 DEFB $00,$20,$00,$E0,$10,$60,$08,$00 ;
 $F418 DEFB $28,$70,$04,$20,$40,$54,$08,$40 ;
 $F420 DEFB $28,$50,$44,$28,$24,$F0,$40,$40 ;
 $F428 DEFB $68,$48,$48,$0C,$64,$74,$04,$84 ;
 $F430 DEFB $7C,$E8,$4C,$58,$68,$38,$14,$C8 ;
 $F438 DEFB $38,$F8,$7C,$78,$48,$70,$10,$68 ;
 $F440 DEFB $38,$58,$68,$58,$18,$38,$B0,$08 ;
 $F448 DEFB $18,$08,$60,$10,$1C,$10,$30,$84 ;
 $F450 DEFB $38,$5C,$60,$30,$3C,$10,$38,$84 ;
 $F458 DEFB $14,$74,$20,$20,$9C,$10,$78,$80 ;
 $F460 DEFB $14,$70,$30,$74,$95,$08,$30,$04 ;
 $F468 DEFB $14,$B8,$34,$30,$35,$98,$20,$0C ;
 $F470 DEFB $1C,$8C,$36,$78,$33,$90,$28,$88 ;
 $F478 DEFB $3C,$9C,$35,$F4,$12,$D0,$28,$88 ;
 $F480 DEFB $18,$08,$39,$60,$10,$D8,$B0,$B8 ;
 $F488 DEFB $30,$48,$30,$28,$30,$78,$30,$38 ;
 $F490 DEFB $38,$6C,$F9,$70,$78,$30,$50,$68 ;
 $F498 DEFB $38,$4C,$BD,$78,$70,$38,$68,$48 ;
 $F4A0 DEFB $5C,$00,$68,$D8,$58,$68,$E8,$48 ;
 $F4A8 DEFB $2C,$C8,$58,$68,$48,$48,$B0,$DC ;
 $F4B0 DEFB $38,$00,$70,$30,$50,$50,$A8,$5C ;
 $F4B8 DEFB $7C,$40,$F4,$68,$F8,$70,$0C,$C8 ;
 $F4C0 DEFB $3C,$08,$48,$68,$98,$20,$00,$A8 ;
 $F4C8 DEFB $24,$08,$08,$08,$80,$20,$08,$A8 ;
 $F4D0 DEFB $08,$40,$20,$20,$10,$10,$08,$08 ;
 $F4D8 DEFB $08,$40,$20,$20,$10,$10,$08,$00 ;
 $F4E0 DEFB $00,$00,$20,$00,$00,$10,$00,$00 ;
 $F4E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F4F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F4F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
@label=BANG_FRAME_6
 $F500 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#BANG(bang-6*)
 $F508 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F510 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F518 DEFB $00,$40,$00,$80,$00,$00,$00,$00 ;
 $F520 DEFB $00,$40,$00,$A0,$00,$80,$48,$00 ;
 $F528 DEFB $20,$00,$04,$20,$04,$24,$00,$40 ;
 $F530 DEFB $24,$00,$00,$40,$40,$04,$04,$80 ;
 $F538 DEFB $00,$20,$14,$68,$40,$40,$04,$08 ;
 $F540 DEFB $10,$60,$44,$48,$40,$28,$80,$28 ;
 $F548 DEFB $00,$20,$48,$00,$00,$10,$10,$00 ;
 $F550 DEFB $08,$00,$08,$20,$28,$00,$00,$04 ;
 $F558 DEFB $10,$44,$28,$20,$88,$10,$48,$80 ;
 $F560 DEFB $00,$44,$20,$44,$80,$00,$28,$80 ;
 $F568 DEFB $04,$00,$04,$20,$24,$10,$00,$04 ;
 $F570 DEFB $04,$00,$06,$08,$35,$10,$00,$84 ;
 $F578 DEFB $20,$94,$15,$A4,$01,$00,$08,$80 ;
 $F580 DEFB $08,$84,$19,$20,$00,$08,$80,$80 ;
 $F588 DEFB $28,$04,$00,$08,$00,$48,$20,$18 ;
 $F590 DEFB $28,$08,$A1,$00,$02,$48,$10,$08 ;
 $F598 DEFB $00,$48,$A9,$20,$02,$00,$00,$00 ;
 $F5A0 DEFB $04,$00,$28,$80,$40,$20,$40,$40 ;
 $F5A8 DEFB $04,$4C,$08,$08,$48,$00,$10,$C0 ;
 $F5B0 DEFB $00,$44,$20,$18,$00,$40,$80,$18 ;
 $F5B8 DEFB $14,$04,$A0,$40,$00,$50,$80,$88 ;
 $F5C0 DEFB $50,$40,$00,$40,$90,$10,$28,$00 ;
 $F5C8 DEFB $00,$00,$08,$00,$88,$20,$20,$A0 ;
 $F5D0 DEFB $00,$00,$00,$00,$80,$20,$00,$20 ;
 $F5D8 DEFB $08,$48,$20,$20,$10,$00,$08,$08 ;
 $F5E0 DEFB $08,$48,$20,$28,$00,$10,$08,$08 ;
 $F5E8 DEFB $00,$00,$20,$08,$00,$10,$00,$00 ;
 $F5F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F5F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
; #UDGARRAY*bang-1,10;bang-2;bang-3;bang-3;bang-3;bang-4;bang-5;bang-6(bang-frames)

; Sheriffs Badge
;
@label=BADGE_IMAGE
b$F600 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY8,attr=6,scale=4,step=8;(#PC)-(#PC+$247)-$01-$40(badge)
 $F608 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F610 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F618 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F620 DEFB $00,$00,$00,$03,$C0,$00,$00,$00 ;
 $F628 DEFB $00,$00,$00,$07,$E0,$00,$00,$00 ;
 $F630 DEFB $00,$00,$00,$07,$E0,$00,$00,$00 ;
 $F638 DEFB $00,$00,$00,$05,$A0,$00,$00,$00 ;
 $F640 DEFB $00,$00,$00,$02,$40,$00,$00,$00 ;
 $F648 DEFB $00,$00,$00,$03,$C0,$00,$00,$00 ;
 $F650 DEFB $00,$00,$00,$07,$E0,$00,$00,$00 ;
 $F658 DEFB $00,$00,$00,$07,$E0,$00,$00,$00 ;
 $F660 DEFB $00,$00,$00,$0F,$F0,$00,$00,$00 ;
 $F668 DEFB $00,$00,$00,$0F,$F0,$00,$00,$00 ;
 $F670 DEFB $00,$00,$00,$1F,$F8,$00,$00,$00 ;
 $F678 DEFB $00,$00,$00,$0F,$F8,$00,$00,$00 ;
 $F680 DEFB $00,$00,$00,$15,$F0,$00,$00,$00 ;
 $F688 DEFB $00,$00,$00,$2A,$E8,$00,$00,$00 ;
 $F690 DEFB $00,$00,$00,$15,$54,$00,$00,$00 ;
 $F698 DEFB $00,$00,$00,$20,$04,$00,$00,$00 ;
 $F6A0 DEFB $1C,$00,$00,$1F,$F8,$00,$00,$38 ;
 $F6A8 DEFB $3E,$00,$00,$7F,$FE,$00,$00,$7C ;
 $F6B0 DEFB $3E,$00,$01,$FF,$FF,$80,$00,$7C ;
 $F6B8 DEFB $2A,$F8,$07,$FF,$FF,$E0,$1F,$54 ;
 $F6C0 DEFB $15,$FF,$EF,$FF,$FF,$F7,$FF,$A8 ;
 $F6C8 DEFB $03,$7F,$DF,$FF,$FF,$FB,$FE,$C0 ;
 $F6D0 DEFB $00,$FF,$BF,$FF,$FF,$FD,$FF,$00 ;
 $F6D8 DEFB $00,$7F,$7F,$FF,$FF,$FE,$FE,$00 ;
 $F6E0 DEFB $00,$BE,$FF,$FF,$FF,$FF,$7D,$00 ;
 $F6E8 DEFB $00,$56,$FF,$FF,$FF,$FF,$6A,$00 ;
 $F6F0 DEFB $00,$29,$FF,$FF,$FF,$FF,$94,$00 ;
 $F6F8 DEFB $00,$15,$FF,$FF,$FF,$FF,$A8,$00 ;
 $F700 DEFB $00,$0B,$FF,$FF,$FF,$FF,$D0,$00 ;
 $F708 DEFB $00,$0B,$FF,$FF,$FF,$FF,$D0,$00 ;
 $F710 DEFB $00,$07,$AA,$AA,$AA,$AA,$E0,$00 ;
 $F718 DEFB $00,$07,$FF,$FF,$FF,$FF,$E0,$00 ;
 $F720 DEFB $00,$07,$E6,$D1,$8D,$11,$E0,$00 ;
 $F728 DEFB $00,$07,$DA,$D7,$B5,$77,$E0,$00 ;
 $F730 DEFB $00,$07,$5E,$D7,$B5,$76,$E0,$00 ;
 $F738 DEFB $00,$07,$EE,$13,$B5,$33,$E0,$00 ;
 $F740 DEFB $00,$07,$76,$D7,$8D,$76,$E0,$00 ;
 $F748 DEFB $00,$16,$FA,$D7,$AD,$77,$68,$00 ;
 $F750 DEFB $00,$17,$5A,$D7,$B5,$76,$E8,$00 ;
 $F758 DEFB $00,$36,$E6,$D0,$B5,$77,$6C,$00 ;
 $F760 DEFB $00,$33,$7F,$FF,$FF,$FE,$EC,$00 ;
 $F768 DEFB $00,$7B,$00,$00,$00,$00,$DE,$00 ;
 $F770 DEFB $00,$7B,$AA,$AA,$AA,$AB,$9E,$00 ;
 $F778 DEFB $00,$FD,$FF,$55,$55,$FF,$BF,$00 ;
 $F780 DEFB $01,$FD,$FF,$FF,$FF,$FF,$BF,$80 ;
 $F788 DEFB $01,$FE,$FF,$FF,$FF,$FF,$7F,$80 ;
 $F790 DEFB $03,$FE,$FF,$FF,$FF,$FF,$7F,$C0 ;
 $F798 DEFB $07,$FF,$7F,$FF,$FF,$FE,$FF,$E0 ;
 $F7A0 DEFB $07,$FE,$BF,$FF,$FF,$FD,$7F,$E0 ;
 $F7A8 DEFB $3F,$D5,$5F,$FF,$FF,$FA,$AB,$FC ;
 $F7B0 DEFB $7E,$AA,$0F,$FF,$FF,$F0,$55,$7E ;
 $F7B8 DEFB $7D,$40,$07,$FF,$FF,$E0,$02,$BE ;
 $F7C0 DEFB $28,$00,$01,$FF,$FF,$C0,$00,$1E ;
 $F7C8 DEFB $54,$00,$00,$7F,$FF,$00,$00,$2A ;
 $F7D0 DEFB $28,$00,$00,$0F,$FD,$80,$00,$14 ;
 $F7D8 DEFB $00,$00,$00,$60,$02,$00,$00,$00 ;
 $F7E0 DEFB $00,$00,$00,$5F,$FC,$00,$00,$00 ;
 $F7E8 DEFB $00,$00,$00,$2F,$F8,$00,$00,$00 ;
 $F7F0 DEFB $00,$00,$00,$1F,$F4,$00,$00,$00 ;
 $F7F8 DEFB $00,$00,$00,$0F,$E8,$00,$00,$00 ;
 $F800 DEFB $00,$00,$00,$17,$F0,$00,$00,$00 ;
 $F808 DEFB $00,$00,$00,$0F,$E0,$00,$00,$00 ;
 $F810 DEFB $00,$00,$00,$07,$D0,$00,$00,$00 ;
 $F818 DEFB $00,$00,$00,$0B,$E0,$00,$00,$00 ;
 $F820 DEFB $00,$00,$00,$07,$C0,$00,$00,$00 ;
 $F828 DEFB $00,$00,$00,$02,$A0,$00,$00,$00 ;
 $F830 DEFB $00,$00,$00,$01,$40,$00,$00,$00 ;
 $F838 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F840 DEFB $00,$00,$00,$03,$C0,$00,$00,$00 ;
 $F848 DEFB $00,$00,$00,$07,$E0,$00,$00,$00 ;
 $F850 DEFB $00,$00,$00,$03,$A0,$00,$00,$00 ;
 $F858 DEFB $00,$00,$00,$05,$40,$00,$00,$00 ;
 $F860 DEFB $00,$00,$00,$02,$80,$00,$00,$00 ;
 $F868 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F870 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $F878 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }

; ff
;
; Used by the routine at #R$CD47.
c$F880 LD B,$0C      ;
*$F882 PUSH BC       ;
 $F883 NOP           ;
 $F884 NOP           ;
 $F885 CALL $F894    ;
 $F888 POP BC        ;
 $F889 DJNZ $F882    ;
 $F88B XOR A         ;
 $F88C OUT ($FE),A   ;
 $F88E LD B,$40      ;
*$F890 HALT          ;
 $F891 DJNZ $F890    ;
 $F893 RET           ;
*$F894 LD A,$38      ;
 $F896 NOP           ;
 $F897 NOP           ;
 $F898 CALL $F8B2    ;
 $F89B XOR A         ;
 $F89C OUT ($FE),A   ;
 $F89E LD B,$04      ;
*$F8A0 HALT          ;
 $F8A1 DJNZ $F8A0    ;
 $F8A3 LD A,$07      ;
 $F8A5 NOP           ;
 $F8A6 NOP           ;
 $F8A7 CALL $F8B2    ;
 $F8AA OUT ($FE),A   ;
 $F8AC LD B,$03      ;
*$F8AE HALT          ;
 $F8AF DJNZ $F8AE    ;
 $F8B1 RET           ;
*$F8B2 LD HL,$5860   ;
 $F8B5 LD DE,$5861   ;
 $F8B8 LD BC,$01DF   ;
 $F8BB LD (HL),A     ;
 $F8BC LDIR          ;
 $F8BE RET           ;
 $F8BF NOP           ;
 $F8C0 NOP           ;
 $F8C1 NOP           ;
 $F8C2 NOP           ;
 $F8C3 NOP           ;
 $F8C4 NOP           ;
 $F8C5 NOP           ;
 $F8C6 NOP           ;
 $F8C7 NOP           ;
 $F8C8 NOP           ;
 $F8C9 NOP           ;
 $F8CA NOP           ;
 $F8CB NOP           ;
 $F8CC NOP           ;
 $F8CD NOP           ;
 $F8CE NOP           ;
 $F8CF NOP           ;
 $F8D0 NOP           ;
 $F8D1 NOP           ;
 $F8D2 NOP           ;
 $F8D3 NOP           ;
 $F8D4 NOP           ;
 $F8D5 NOP           ;
 $F8D6 NOP           ;
 $F8D7 NOP           ;
 $F8D8 NOP           ;
 $F8D9 NOP           ;
 $F8DA NOP           ;
 $F8DB NOP           ;
 $F8DC NOP           ;
 $F8DD NOP           ;
 $F8DE NOP           ;
 $F8DF NOP           ;
 $F8E0 NOP           ;
 $F8E1 NOP           ;
 $F8E2 NOP           ;
 $F8E3 NOP           ;
 $F8E4 NOP           ;
 $F8E5 NOP           ;
 $F8E6 NOP           ;
 $F8E7 NOP           ;
 $F8E8 NOP           ;
 $F8E9 NOP           ;
 $F8EA NOP           ;
 $F8EB NOP           ;
 $F8EC NOP           ;
 $F8ED NOP           ;
 $F8EE NOP           ;
 $F8EF NOP           ;
 $F8F0 NOP           ;
 $F8F1 NOP           ;
 $F8F2 NOP           ;
 $F8F3 NOP           ;
 $F8F4 NOP           ;
 $F8F5 NOP           ;
 $F8F6 NOP           ;
 $F8F7 NOP           ;
 $F8F8 NOP           ;
 $F8F9 NOP           ;
 $F8FA NOP           ;
 $F8FB NOP           ;
 $F8FC NOP           ;
 $F8FD NOP           ;
 $F8FE NOP           ;
 $F8FF NOP           ;

; Dollar Sign
;
; These are the scrolling dollar signs in the centre of the header.
@label=DOLLAR_IMAGE
b$F900 DEFB $00,$00  ; {#UDGARRAY2,attr=48,scale=4,step=2;(#PC)-(#PC+$4F)-$01-$10(dollars)
 $F902 DEFB $02,$80  ;
 $F904 DEFB $0F,$C0  ;
 $F906 DEFB $1F,$F0  ;
 $F908 DEFB $1A,$B0  ;
 $F90A DEFB $1A,$80  ;
 $F90C DEFB $1A,$80  ;
 $F90E DEFB $1F,$E0  ;
 $F910 DEFB $0F,$F0  ;
 $F912 DEFB $02,$B0  ;
 $F914 DEFB $02,$B0  ;
 $F916 DEFB $1A,$B0  ;
 $F918 DEFB $1F,$F0  ;
 $F91A DEFB $0F,$E0  ;
 $F91C DEFB $02,$80  ;
 $F91E DEFB $00,$00  ;
 $F920 DEFB $00,$00  ;
 $F922 DEFB $00,$00  ;
 $F924 DEFB $00,$00  ;
 $F926 DEFB $00,$00  ;
 $F928 DEFB $00,$00  ;
 $F92A DEFB $00,$00  ;
 $F92C DEFB $00,$00  ;
 $F92E DEFB $00,$00  ;
 $F930 DEFB $00,$00  ;
 $F932 DEFB $02,$80  ;
 $F934 DEFB $0F,$C0  ;
 $F936 DEFB $1F,$F0  ;
 $F938 DEFB $1A,$B0  ;
 $F93A DEFB $1A,$80  ;
 $F93C DEFB $1A,$80  ;
 $F93E DEFB $1F,$E0  ;
 $F940 DEFB $0F,$F0  ;
 $F942 DEFB $02,$B0  ;
 $F944 DEFB $02,$B0  ;
 $F946 DEFB $1A,$B0  ;
 $F948 DEFB $1F,$F0  ;
 $F94A DEFB $0F,$E0  ;
 $F94C DEFB $02,$80  ;
 $F94E DEFB $00,$00  ; }

; Dollar Sign (scrolling).
@label=DOLLAR_SCROLL
c$F950 NOP           ;
 $F951 NOP           ;
 $F952 NOP           ;
 $F953 NOP           ;
 $F954 NOP           ;
 $F955 NOP           ;
 $F956 NOP           ;
 $F957 NOP           ;
 $F958 NOP           ;
 $F959 NOP           ;
 $F95A NOP           ;
 $F95B NOP           ;
 $F95C NOP           ;
 $F95D NOP           ;
 $F95E NOP           ;
 $F95F NOP           ;
; This entry point is used by the routine at #R$C7C0.
*$F960 LD HL,$5B00   ; {Blanks 254 bytes from #R$5B00 onwards.
 $F963 LD DE,$5B01   ;
 $F966 LD BC,$00FE   ;
 $F969 LD (HL),$00   ;
 $F96B LDIR          ; }
 $F96D LD DE,$F940   ; {Sends #R$F940 to #R$F9C3.
 $F970 NOP           ;
 $F971 NOP           ;
 $F972 CALL $F9C3    ; }
 $F975 LD DE,$0006   ; {#HTML(Makes a noise using the <a href="https://skoolkid.github.io/rom/asm/03B5.html">BEEP</a> routine.)
 $F978 LD HL,$0CF8   ; #TABLE(default,centre)
 $F97B CALL $03B5    ; { =h Pitch | =h Duration }
                     ; { $0CF8 | $0006 }
                     ; TABLE#}
 $F97E LD DE,$F900   ; {Sends #R$F900 to #R$F9C3.
 $F981 NOP           ;
 $F982 NOP           ;
 $F983 CALL $F9C3    ; }
 $F986 LD DE,$0006   ; {#HTML(Makes a noise using the <a href="https://skoolkid.github.io/rom/asm/03B5.html">BEEP</a> routine.)
 $F989 LD HL,$079E   ; #TABLE(default,centre)
 $F98C CALL $03B5    ; { =h Pitch | =h Duration }
                     ; { $079E | $0006 }
                     ; TABLE#}
 $F98F LD DE,$F920   ; {Sends #R$F920 to #R$F9C3.
 $F992 NOP           ;
 $F993 NOP           ;
 $F994 CALL $F9C3    ; }
 $F997 LD DE,$0006   ; {#HTML(Makes a noise using the <a href="https://skoolkid.github.io/rom/asm/03B5.html">BEEP</a> routine.)
 $F99A LD HL,$029E   ; #TABLE(default,centre)
 $F99D CALL $03B5    ; { =h Pitch | =h Duration }
                     ; { $029E | $0006 }
                     ; TABLE#}
 $F9A0 LD DE,$F900   ; {Sends #R$F900 to #R$F9C3.
 $F9A3 NOP           ;
 $F9A4 NOP           ;
 $F9A5 CALL $F9C3    ; }
 $F9A8 LD DE,$0020   ; {#HTML(Makes a noise using the <a href="https://skoolkid.github.io/rom/asm/03B5.html">BEEP</a> routine.)
 $F9AB LD HL,$0209   ; #TABLE(default,centre)
 $F9AE CALL $03B5    ; { =h Pitch | =h Duration }
                     ; { $0209 | $0020 }
                     ; TABLE#}
 $F9B1 LD DE,$F920   ; {Sends #R$F920 to #R$F9C3.
 $F9B4 NOP           ;
 $F9B5 NOP           ;
 $F9B6 CALL $F9C3    ; }
 $F9B9 HALT          ;
 $F9BA LD DE,$5B00   ; {Sends #R$5B00 to #R$F9C3 (blanks the centrepiece).
 $F9BD NOP           ;
 $F9BE NOP           ;
 $F9BF CALL $F9C3    ; }
 $F9C2 RET           ; Return.
; Draws the image to the screen.
@label=DOLLAR_SCROLL_DRAW
*$F9C3 LD HL,$402F   ;
 $F9C6 LD BC,$1002   ;
@label=DOLLAR_SCROLL_DRAW_LOOP
*$F9C9 PUSH BC       ;
 $F9CA PUSH HL       ;
 $F9CB LD B,$00      ;
 $F9CD EX DE,HL      ;
 $F9CE LDIR          ;
 $F9D0 EX DE,HL      ;
 $F9D1 POP HL        ;
 $F9D2 INC H         ;
 $F9D3 LD A,H        ;
 $F9D4 AND $07       ;
 $F9D6 JR NZ,$F9DE   ;
 $F9D8 LD H,$40      ;
 $F9DA LD A,L        ;
 $F9DB ADD A,$20     ;
 $F9DD LD L,A        ;
*$F9DE POP BC        ;
 $F9DF DJNZ $F9C9    ;
 $F9E1 LD B,$01      ;
@label=DOLLAR_SCROLL_HALT_LOOP
*$F9E3 HALT          ;
 $F9E4 DJNZ $F9E3    ;
 $F9E6 RET           ; Return.
 $F9E7 JP $EA90      ;
 $F9EA NOP           ;
 $F9EB NOP           ;
 $F9EC NOP           ;
 $F9ED NOP           ;
 $F9EE NOP           ;
 $F9EF NOP           ;
 $F9F0 NOP           ;
 $F9F1 NOP           ;
 $F9F2 NOP           ;
 $F9F3 NOP           ;
 $F9F4 NOP           ;
 $F9F5 NOP           ;
 $F9F6 NOP           ;
 $F9F7 NOP           ;
 $F9F8 NOP           ;
 $F9F9 NOP           ;
 $F9FA NOP           ;
 $F9FB NOP           ;
 $F9FC NOP           ;
 $F9FD NOP           ;
 $F9FE NOP           ;
 $F9FF NOP           ;

; High Score Entry.
;
; Used by the routine at #R$C7C0.
@label=NEW_HIGH_SCORE
c$FA00 CALL $FA06    ;
 $FA03 JP $FB62      ;
@label=HIGH_SCORE
*$FA06 LD DE,$5B80   ; {Copies $40 bytes of data from #REGhl to #R$5B80.
 $FA09 LD BC,$0040   ;
 $FA0C LDIR          ; }
 $FA0E LD A,$30      ; {Writes "0" ($30 in ASCII) to #R$FB94.
 $FA10 LD ($FB94),A  ; }
 $FA13 CALL $FAD4    ; Call #R$FAD4.
 $FA16 LD HL,$4040   ; {Writes $4040 to #R$FBF0.
 $FA19 LD ($FBF0),HL ; }
 $FA1C PUSH IX       ;
 $FA1E CALL $FC09    ; Call #R$FC09.
 $FA21 LD ($FB57),A  ;
 $FA24 POP IX        ;
 $FA26 CP $1F        ;
 $FA28 LD A,$01      ;
 $FA2A JP Z,$FAB0    ;
 $FA2D LD HL,$4000   ;
 $FA30 LD ($FBF0),HL ;
 $FA33 LD A,($FB57)  ;
 $FA36 CALL $FB19    ;
 $FA39 LD DE,$61EF   ;
 $FA3C PUSH DE       ;
 $FA3D EX DE,HL      ;
 $FA3E AND A         ;
 $FA3F SBC HL,DE     ;
 $FA41 PUSH HL       ;
 $FA42 POP BC        ;
 $FA43 POP HL        ;
 $FA44 LD DE,$61FF   ;
 $FA47 INC BC        ;
 $FA48 LDDR          ;
 $FA4A LD A,($FB57)  ;
 $FA4D DEC A         ;
 $FA4E CALL $FBFF    ;
 $FA51 LD DE,$62F9   ;
 $FA54 PUSH DE       ;
 $FA55 EX DE,HL      ;
 $FA56 AND A         ;
 $FA57 SBC HL,DE     ;
 $FA59 PUSH HL       ;
 $FA5A POP BC        ;
 $FA5B POP HL        ;
 $FA5C LD DE,$62FF   ;
 $FA5F INC BC        ;
 $FA60 LDDR          ;
 $FA62 LD A,($FB57)  ;
 $FA65 CALL $FBFF    ;
 $FA68 DEC HL        ;
 $FA69 EX DE,HL      ;
 $FA6A PUSH IX       ;
 $FA6C POP HL        ;
 $FA6D LD B,$06      ;
*$FA6F LD A,(HL)     ;
 $FA70 ADD A,$30     ;
 $FA72 LD (DE),A     ;
 $FA73 DEC DE        ;
 $FA74 INC HL        ;
 $FA75 DJNZ $FA6F    ;
 $FA77 LD HL,$5BC0   ; {Overwrites the text at #R$5BC0 with spaces to "blank"
 $FA7A LD DE,$5BC1   ; it out ($12 characters).
 $FA7D LD BC,$0011   ;
 $FA80 LD (HL),$20   ;
 $FA82 LDIR          ; }
 $FA84 LD (HL),$FF   ; Set a string termination character ($FF) at the end of
                     ; the string.
 $FA86 CALL $FAD4    ;
 $FA89 LD HL,$FB78   ; {Points to #R$FB78 and sends it to #R$5B80.
 $FA8C LD DE,$4802   ; #TABLE(default,centre)
 $FA8F LD BC,$0703   ; { =h Value | =h Ink | =h Paper | =h Bright }
 $FA92 CALL $5B80    ; { $07 | $07 | $00 | $00 }
                     ; { $03 | $03 | $00 | $00 }
                     ; TABLE#}
 $FA95 CALL $FB26    ;
 $FA98 CALL $FAD4    ;
 $FA9B LD A,($FB57)  ;
 $FA9E CALL $FB19    ;
 $FAA1 EX DE,HL      ;
 $FAA2 LD HL,$5BC0   ;
 $FAA5 LD BC,$0010   ;
 $FAA8 LDIR          ;
 $FAAA SUB $05       ;
 $FAAC JR NC,$FABD   ;
 $FAAE JR $FABC      ;
*$FAB0 LD HL,$FBB5   ; {Points to #R$FBB5 and sends it to #R$5B80.
 $FAB3 LD DE,$4000   ; #TABLE(default,centre)
 $FAB6 LD BC,$0706   ; { =h Value | =h Ink | =h Paper | =h Bright }
 $FAB9 CALL $5B80    ; { $07 | $07 | $00 | $00 }
                     ; { $06 | $06 | $00 | $00 }
                     ; TABLE#}
*$FABC XOR A         ;
*$FABD INC A         ;
 $FABE LD B,$0A      ;
*$FAC0 PUSH BC       ;
 $FAC1 PUSH AF       ;
 $FAC2 CALL $FAE2    ;
 $FAC5 LD DE,$FB94   ;
 $FAC8 CALL $FBD5    ;
 $FACB POP AF        ;
 $FACC POP BC        ;
 $FACD INC A         ;
 $FACE CP $1F        ;
 $FAD0 RET Z         ;
 $FAD1 DJNZ $FAC0    ;
 $FAD3 RET           ;
@label=HIGH_SCORE_CLEAR_SCREEN
*$FAD4 LD HL,$4000   ; {Clears the screen buffer by writing $00 to all 6912
 $FAD7 LD DE,$4001   ; memory locations.
 $FADA LD BC,$1AFF   ;
 $FADD LD (HL),$00   ;
 $FADF LDIR          ;
 $FAE1 RET           ; }
*$FAE2 LD C,A        ;
 $FAE3 LD HL,$FB94   ;
 $FAE6 SUB $0A       ;
 $FAE8 JR C,$FAFA    ;
 $FAEA LD (HL),$31   ;
 $FAEC SUB $0A       ;
 $FAEE JR C,$FAFA    ;
 $FAF0 LD (HL),$32   ;
 $FAF2 SUB $0A       ;
 $FAF4 JR C,$FAFA    ;
 $FAF6 LD (HL),$33   ;
 $FAF8 SUB $0A       ;
*$FAFA ADD A,$0A     ;
 $FAFC INC HL        ;
 $FAFD ADD A,$30     ;
 $FAFF LD (HL),A     ;
 $FB00 LD A,C        ;
 $FB01 CALL $FB19    ;
 $FB04 LD DE,$FB9A   ;
 $FB07 LD BC,$0010   ;
 $FB0A LDIR          ;
 $FB0C INC DE        ;
 $FB0D INC DE        ;
 $FB0E INC DE        ;
 $FB0F INC DE        ;
 $FB10 CALL $FBFF    ;
 $FB13 LD BC,$0006   ;
 $FB16 LDIR          ;
 $FB18 RET           ;
; Works out where in the high score table to place the score.
@label=HIGH_SCORE_POSITION
*$FB19 DEC A         ; {Using #R$6000 as a base, work out where to place the new score.
 $FB1A LD L,A        ; #LIST
 $FB1B LD H,$00      ; { Decrease $1B by one... }
 $FB1D ADD HL,HL     ; { Loads $1A as the low-order byte; #REGhl=$001A }
 $FB1E ADD HL,HL     ; { Times by $10; #REGhl=$1A0 }
 $FB1F ADD HL,HL     ; { Add $6000=#R$61A0 }
 $FB20 ADD HL,HL     ; LIST#
 $FB21 LD DE,$6000   ;
 $FB24 ADD HL,DE     ; }
 $FB25 RET           ; Return.
@label=HIGH_SCORE_SOMETHING
*$FB26 LD HL,$5BC0   ; {Stores #R$5BC0 at #R$FB55.
*$FB29 LD ($FB55),HL ;
 $FB2C CALL $FBF2    ; }
 $FB2F CALL $FB62    ;
 $FB32 LD HL,($FB55) ;
 $FB35 CP $0D        ;
 $FB37 RET Z         ;
 $FB38 CP $0C        ;
 $FB3A JR Z,$FB58    ;
 $FB3C LD C,A        ;
 $FB3D LD A,L        ;
 $FB3E CP $D1        ;
 $FB40 JR NC,$FB29   ;
 $FB42 LD A,C        ;
 $FB43 CP $20        ;
 $FB45 JR Z,$FB51    ;
 $FB47 CP $61        ;
 $FB49 JR C,$FB29    ;
 $FB4B CP $7B        ;
 $FB4D JR NC,$FB29   ;
 $FB4F SUB $20       ;
*$FB51 LD (HL),A     ;
 $FB52 INC HL        ;
 $FB53 JR $FB29      ;
 $FB55 DEFW $0000    ; Cache.
 $FB57 RRA           ;
*$FB58 LD A,L        ;
 $FB59 CP $C1        ;
 $FB5B JR C,$FB29    ;
 $FB5D DEC HL        ;
 $FB5E LD (HL),$20   ;
 $FB60 JR $FB29      ;
; Returns a single keypress.
@label=HIGH_SCORE_INPUT
*$FB62 LD HL,$5C08   ; {#HTML(Keep looping around until <em>any</em> input is detected. This is achieved by writing $00 to
 $FB65 LD (HL),$00   ;                 <a href="https://skoolkid.github.io/rom/asm/5C08.html">LAST_K</a> and looping until it's non-zero.)
@label=HIGH_SCORE_INPUT_LOOP
*$FB67 HALT          ;
 $FB68 LD A,(HL)     ;
 $FB69 AND A         ;
 $FB6A JR Z,$FB67    ; }
 $FB6C PUSH AF       ; Store it on the stack for now.
 $FB6D LD DE,$0010   ; {#HTML(Makes a noise using the <a href="https://skoolkid.github.io/rom/asm/03B5.html">BEEP</a> routine.)
 $FB70 LD HL,$00C0   ; #TABLE(default,centre)
 $FB73 CALL $03B5    ; { =h Pitch | =h Duration }
                     ; { $00C0 | $0010 }
                     ; TABLE#}
 $FB76 POP AF        ; {Return with the keypress in #REGa.
 $FB77 RET           ; }

; High Score Table Name Entry.
@label=HIGH_SCORE_TITLE
t$FB78 DEFM "  WRITE YOUR NAME PLEASE   ",$FF
@label=HIGH_SCORE_TEXT_BUFFER
 $FB94 DEFM "10    PANCHO VILLA        241610",$FF
@label=HIGH_SCORE_SUB_HEAD
 $FBB5 DEFM "     THESE ARE THE BEST        ",$FF

; Routine at FBD5
;
; Used by the routine at #R$FA00.
c$FBD5 LD HL,($FBF0) ;
 $FBD8 LD A,L        ;
 $FBD9 ADD A,$40     ;
 $FBDB CALL C,$FBEA  ;
 $FBDE LD L,A        ;
 $FBDF LD ($FBF0),HL ;
 $FBE2 LD BC,$0705   ;
 $FBE5 EX DE,HL      ;
 $FBE6 CALL $5B80    ;
 $FBE9 RET           ;
*$FBEA LD A,H        ;
 $FBEB ADD A,$08     ;
 $FBED LD H,A        ;
 $FBEE XOR A         ;
 $FBEF RET           ;
 $FBF0 DEFW $50C0    ; Cache
; This entry point is used by the routine at #R$FA00.
*$FBF2 LD HL,$5BC0   ; {Points to #R$5BC0 and sends it to #R$5B80.
 $FBF5 LD DE,$4887   ; #TABLE(default,centre)
 $FBF8 LD BC,$0705   ; { =h Value | =h Ink | =h Paper | =h Bright }
 $FBFB CALL $5B80    ; { $07 | $07 | $00 | $00 }
 $FBFE RET           ; { $05 | $05 | $00 | $00 }
                     ; TABLE#}
; This entry point is used by the routine at #R$FA00.
*$FBFF LD C,A        ;
 $FC00 XOR A         ;
 $FC01 ADD A,C       ;
 $FC02 ADD A,C       ;
 $FC03 ADD A,C       ;
 $FC04 ADD A,A       ;
 $FC05 LD L,A        ;
 $FC06 LD H,$62      ;
 $FC08 RET           ;
; This entry point is used by the routine at #R$FA00.
*$FC09 LD HL,$61FA   ;
 $FC0C LD BC,$0006   ;
 $FC0F LD E,$00      ;
*$FC11 INC E         ;
 $FC12 LD A,E        ;
 $FC13 CP $1F        ;
 $FC15 RET NC        ;
 $FC16 ADD HL,BC     ;
 $FC17 LD A,(IX+$05) ;
 $FC1A ADD A,$30     ;
 $FC1C CP (HL)       ;
 $FC1D JR C,$FC11    ;
 $FC1F JR Z,$FC23    ;
 $FC21 LD A,E        ;
 $FC22 RET           ;
*$FC23 LD A,(IX+$04) ;
 $FC26 ADD A,$30     ;
 $FC28 INC HL        ;
 $FC29 CP (HL)       ;
 $FC2A DEC HL        ;
 $FC2B JR C,$FC11    ;
 $FC2D JR Z,$FC31    ;
 $FC2F LD A,E        ;
 $FC30 RET           ;
*$FC31 LD A,(IX+$03) ;
 $FC34 ADD A,$30     ;
 $FC36 INC HL        ;
 $FC37 INC HL        ;
 $FC38 CP (HL)       ;
 $FC39 DEC HL        ;
 $FC3A DEC HL        ;
 $FC3B JR C,$FC11    ;
 $FC3D JR Z,$FC41    ;
 $FC3F LD A,E        ;
 $FC40 RET           ;
*$FC41 LD A,(IX+$02) ;
 $FC44 ADD A,$30     ;
 $FC46 INC HL        ;
 $FC47 INC HL        ;
 $FC48 INC HL        ;
 $FC49 CP (HL)       ;
 $FC4A DEC HL        ;
 $FC4B DEC HL        ;
 $FC4C DEC HL        ;
 $FC4D JR C,$FC11    ;
 $FC4F JR Z,$FC53    ;
 $FC51 LD A,E        ;
 $FC52 RET           ;
*$FC53 LD A,(IX+$01) ;
 $FC56 ADD A,$30     ;
 $FC58 INC HL        ;
 $FC59 INC HL        ;
 $FC5A INC HL        ;
 $FC5B INC HL        ;
 $FC5C CP (HL)       ;
 $FC5D DEC HL        ;
 $FC5E DEC HL        ;
 $FC5F DEC HL        ;
 $FC60 DEC HL        ;
 $FC61 JR NC,$FC65   ;
 $FC63 JR $FC11      ;
*$FC65 LD A,E        ;
 $FC66 RET           ;

; Unused
u$FC67 DEFB $C3,$90,$EA

i$FC6A

; Data block at FD00
b$FD00 DEFB $A7,$C2,$0F,$FC,$3A,$0A,$FC
 $FD07 DEFB $F6,$01,$D3,$7F,$3A,$0C,$FC
 $FD0E DEFB $CB,$7F,$20,$06,$CD,$54,$1F
 $FD15 DEFB $D2,$30,$FD,$DB,$FB,$E6,$01
 $FD1C DEFB $20,$ED,$79,$D3,$FB,$3A,$0A
 $FD23 DEFB $FC,$E6,$FE,$D3,$7F,$F6,$01
 $FD2A DEFB $D3,$7F,$32,$0A,$FC,$C9,$3A
 $FD31 DEFB $0C,$FC,$E6,$40,$28,$13,$3A
 $FD38 DEFB $0C,$FC,$F6,$80,$32,$0C,$FC
 $FD3F DEFB $CD,$F5,$FE,$CD,$B8,$FE,$3E
 $FD46 DEFB $06,$CD,$03,$FF,$CD,$50,$FD
 $FD4D DEFB $C3,$0A,$0F,$3E,$FF,$32,$0A
 $FD54 DEFB $FC,$D3,$7F,$3A,$0C,$FC,$E6
 $FD5B DEFB $3E,$32,$0C,$FC,$3A,$07,$FC
 $FD62 DEFB $A7,$3A,$0C,$FC,$CB,$EF,$20
 $FD69 DEFB $02,$CB,$AF,$32,$0C,$FC,$FB
 $FD70 DEFB $C9,$4F,$3A,$0C,$FC,$E6,$01
 $FD77 DEFB $28,$1C,$3A,$0C,$FC,$CB,$87
 $FD7E DEFB $32,$0C,$18,$02,$18,$24,$3E
 $FD85 DEFB $FD,$DB,$FE,$1F,$30,$02,$18
 $FD8C DEFB $16,$3E,$BF,$DB,$FE,$1F,$30
 $FD93 DEFB $01,$C9,$11,$80,$5B,$01,$40
 $FD9A DEFB $00,$ED,$B0,$2A,$86,$5B,$36
 $FDA1 DEFB $FF,$C9,$31,$F0,$5F,$18,$14
 $FDA8 DEFB $FB,$00,$00,$00,$00,$00,$00
 $FDAF DEFB $00,$00,$21,$01,$01,$22,$B0
 $FDB6 DEFB $5C,$3E,$00,$CD,$9B,$22,$21
 $FDBD DEFB $00,$40,$11,$01,$40,$01,$FF
 $FDC4 DEFB $1A,$36,$00,$ED,$B0,$CD,$C0
 $FDCB DEFB $C7,$18,$EE,$C3,$90,$EA,$00
 $FDD2 DEFB $00,$00,$00,$00,$00,$00,$00
 $FDD9 DEFB $00,$00,$00,$00,$00,$00,$00
 $FDE0 DEFB $00,$00,$00,$00,$00,$00,$00
 $FDE7 DEFB $00,$00,$00,$00,$00,$00,$00
 $FDEE DEFB $00,$00,$00,$00,$00,$00,$00
 $FDF5 DEFB $00,$00,$00,$00,$00,$00,$00
 $FDFC DEFB $00,$00,$00
 $FDFF DEFB $3A

; Title Screen.
;
; Used by the routine at #R$C7C0.
@label=TITLE_SCREEN
c$FE00 LD DE,$5B80   ;
 $FE03 LD BC,$0040   ;
 $FE06 LDIR          ;
 $FE08 LD A,$01      ;
 $FE0A NOP           ;
 $FE0B NOP           ;
 $FE0C NOP           ;
 $FE0D CALL $FEA4    ;
 $FE10 LD HL,$FEEA   ; {Points to #R$FEEA and sends it to #R$5B80.
 $FE13 LD DE,$402B   ;
 $FE16 LD BC,$0703   ;
 $FE19 CALL $5B80    ; }
 $FE1C LD HL,$FEF4   ; {Points to #R$FEF4 and sends it to #R$FEE4.
 $FE1F LD DE,$40CB   ;
 $FE22 CALL $FEE4    ; }
 $FE25 LD HL,$FEFC   ; Points to #R$FEFC and sends it to #R$FEE4.
 $FE28 LD DE,$482B   ;
 $FE2B CALL $FEE4    ;
 $FE2E LD HL,$FF06   ; Points to #R$FF06 and sends it to #R$FEE4.
 $FE31 LD DE,$488B   ;
 $FE34 CALL $FEE4    ;
 $FE37 LD HL,$FF11   ; Points to #R$FF11 and sends it to #R$FEE4.
 $FE3A LD DE,$48EB   ;
 $FE3D CALL $FEE4    ;
 $FE40 LD HL,$FF19   ; Points to #R$FF19 and sends it to #R$5B80.
 $FE43 LD DE,$5083   ;
 $FE46 LD BC,$0705   ;
 $FE49 CALL $5B80    ;
 $FE4C LD HL,$FF34   ; {Points to #R$FF34 and sends it to #R$5B80.
 $FE4F LD DE,$50C0   ;
 $FE52 LD BC,$0704   ;
 $FE55 CALL $5B80    ; }
; Act on input.
@label=TITLE_SCREEN_INPUT
*$FE58 LD A,($5CB0)  ; {If #R$5CB0 is zero (joystick) then #REGde=$0787 else #REGde=$8707. Then call the subroutine at #R$FE95.
 $FE5B AND A         ; The $07/ $87 correspond to white INK and white INK flashing for the selected control method.
 $FE5C JR Z,$FE63    ; #TABLE(default,centre,centre,centre,centre,centre)
 $FE5E LD DE,$8707   ; { =h Value | =h Ink | =h Paper | =h Bright | =h Flash }
 $FE61 JR $FE66      ; { $07 | $07 | $00 | $00 | $00 }
@label=TS_SELECT_KEMPSTON
*$FE63 LD DE,$0787   ; { $87 | $07 | $00 | $00 | $01 }
@label=TS_CALL_FLASH
*$FE66 CALL $FE95    ; TABLE#}
 $FE69 LD HL,$5CB0   ; Point #REGhl=#R$5CB0.
 $FE6C LD A,$F7      ; {Read keys 1, 2, 3, 4, 5.
 $FE6E IN A,($FE)    ; }
 $FE70 RRA           ; {Jump to #R$FE86 if "1" is pressed.
 $FE71 JR NC,$FE86   ; }
 $FE73 RRA           ; {Jump to #R$FE8B if "2" is pressed.
 $FE74 JR NC,$FE8B   ; }
 $FE76 LD A,$7F      ; {Read keys SPACE, FULL-STOP, M, N, & B.
 $FE78 IN A,($FE)    ; }
 $FE7A BIT 3,A       ; {Jump to #R$FE8F if "N" is pressed.
 $FE7C JR Z,$FE8F    ; }
 $FE7E LD A,$EF      ; {Read keys 0, 9, 8, 7, 6.
 $FE80 IN A,($FE)    ; }
 $FE82 RRA           ; {Return if "0" is pressed, else loop back around to
 $FE83 RET NC        ; #R$FE58.
 $FE84 JR $FE58      ; }
@label=TS_SET_KEYBOARD
*$FE86 LD A,$01      ; {Writes $01 to #R$5CB0 and loop back around to #R$FE58.
 $FE88 LD (HL),A     ;
 $FE89 JR $FE58      ; }
@label=TS_SET_KEMPSTON
*$FE8B XOR A         ; {Writes $00 to #R$5CB0 and loop back around to #R$FE58.
 $FE8C LD (HL),A     ;
 $FE8D JR $FE58      ; }
@label=TS_SELECT_LEVEL
*$FE8F LD HL,$5B80   ; {Jump to #R$6380 with #REGhl=#R$5B80.
 $FE92 JP $6380      ; }
@label=TS_FLASH_TEXT
*$FE95 LD BC,$0020   ; {ggg
 $FE98 LD HL,$592B   ;
 $FE9B LD (HL),D     ;
 $FE9C ADD HL,BC     ;
 $FE9D LD (HL),D     ;
 $FE9E ADD HL,BC     ;
 $FE9F ADD HL,BC     ;
 $FEA0 LD (HL),E     ;
 $FEA1 ADD HL,BC     ;
 $FEA2 LD (HL),E     ; }
 $FEA3 RET           ; Return.
; Draw bandits.
@label=TS_DRAW_BANDIT
*$FEA4 LD HL,$58C1   ; {Sets attributes on the left and right of the screen and
 $FEA7 CALL $FEC3    ; points #REGde at #R$6800.
 $FEAA LD HL,$58D9   ;
 $FEAD CALL $FEC3    ;
 $FEB0 LD HL,$40C1   ;
 $FEB3 CALL $FEB9    ;
 $FEB6 LD HL,$40D9   ;
*$FEB9 LD DE,$6800   ;
 $FEBC LD B,$58      ;
 $FEBE LD C,$06      ; }
 $FEC0 JP $5B92      ; Jump to #R$5B92.
@label=TS_BANDIT_ATTRIBUTES
*$FEC3 LD B,$08      ; {Calls #R$FECE with #REGb=$08 and #REGa=$28.
 $FEC5 LD A,$28      ;
 $FEC7 CALL $FECE    ; }
 $FECA LD B,$03      ; {Calls #R$FEDA with #REGb=$03 and #REGa=$20.
 $FECC LD A,$20      ;
@label=TS_BANDIT_ATTR_LOOP
*$FECE PUSH BC       ; }
 $FECF CALL $FEDA    ;
 $FED2 LD BC,$001B   ;
 $FED5 ADD HL,BC     ;
 $FED6 POP BC        ;
 $FED7 DJNZ $FECE    ;
 $FED9 RET           ; Return.
@label=TS_BANDIT_ATTR_COPY
*$FEDA PUSH HL       ;
 $FEDB POP DE        ;
 $FEDC INC DE        ;
 $FEDD LD BC,$0005   ;
 $FEE0 LD (HL),A     ;
 $FEE1 LDIR          ;
 $FEE3 RET           ; Return.
@label=TITLE_SCREEN_PRINT
*$FEE4 LD BC,$0702   ; {#REGb=$07, #REGc=$02 and jump to #R$5B80.
 $FEE7 JP $5B80      ; }

; Title Screen/ Game Options
@label=TITLE_SCREEN_GAME_NAME
t$FEEA DEFM "WEST BANK",$FF
; Playing Options.
@label=TITLE_SCREEN_PLAY
 $FEF4 DEFM "0 PLAY ",$FF
@label=TITLE_SCREEN_KEYS
 $FEFC DEFM "1 KEYS   ",$FF
@label=TITLE_SCREEN_JOYSTICK
 $FF06 DEFM "2 KEMPSTON",$FF
@label=TITLE_SCREEN_LEVEL
 $FF11 DEFM "N LEVEL",$FF
; Credits.
@label=TITLE_SCREEN_AUTHOR
 $FF19 DEFM " PROGRAM BY ALVARO MATEOS ",$FF
@label=TITLE_SCREEN_COPYRIGHT
 $FF34 DEFM "COPYRIGHT  DINAMIC SOFTWARE 1985",$FF
 $FF55 DEFM $00,$00,$FF

; Gun Shot Mask.
@label=SHOT_MASK_IMAGE
b$FF58 DEFB $00,$00,$00,$00,$00,$00,$05,$D0 ; {#UDGARRAY2,attr=7,scale=4,step=2;(#PC)-(#PC+$01)(shot-mask)
 $FF60 DEFB $04,$10,$05,$D0,$00,$00,$00,$00 ; }

; Gun Shot.
@label=SHOT_IMAGE
b$FF68 DEFB $00,$00,$04,$90,$02,$A0,$30,$0C ; {#UDGARRAY2,attr=7,scale=4,step=2;(#PC)-(#PC+$01)(shot)
 $FF70 DEFB $04,$20,$08,$90,$00,$80,$00,$00 ; }

; Cash Box.
@label=EMPTY_BOX_IMAGE
b$FF78 DEFB $FF,$FF  ; {#UDGARRAY2,attr=13,scale=4,step=2;(#PC)-(#PC+$11)-$01-$10(empty)
 $FF7A DEFB $80,$01  ;
 $FF7C DEFB $80,$01  ;
 $FF7E DEFB $80,$01  ;
 $FF80 DEFB $80,$01  ;
 $FF82 DEFB $80,$01  ;
 $FF84 DEFB $80,$01  ;
 $FF86 DEFB $80,$01  ;
 $FF88 DEFB $80,$01  ;
 $FF8A DEFB $80,$01  ;
 $FF8C DEFB $80,$01  ;
 $FF8E DEFB $80,$01  ;
 $FF90 DEFB $80,$01  ;
 $FF92 DEFB $80,$01  ;
 $FF94 DEFB $80,$01  ;
 $FF96 DEFB $FF,$FF  ; }
@label=DOLLAR_BOX_IMAGE
 $FF98 DEFB $FF,$FF  ; {#UDGARRAY2,attr=13,scale=4,step=2;(#PC)-(#PC+$11)-$01-$10(dollar)
 $FF9A DEFB $80,$01  ;
 $FF9C DEFB $81,$01  ;
 $FF9E DEFB $81,$41  ;
 $FFA0 DEFB $83,$E1  ;
 $FFA2 DEFB $85,$41  ;
 $FFA4 DEFB $85,$41  ;
 $FFA6 DEFB $83,$E1  ;
 $FFA8 DEFB $81,$51  ;
 $FFAA DEFB $81,$51  ;
 $FFAC DEFB $83,$E1  ;
 $FFAE DEFB $81,$41  ;
 $FFB0 DEFB $80,$41  ;
 $FFB2 DEFB $80,$01  ;
 $FFB4 DEFB $80,$01  ;
 $FFB6 DEFB $FF,$FF  ; }

; Lives Graphic
@label=LIVES_IMAGE
b$FFB8 DEFB $00,$00  ; {#UDGARRAY#(2,scale=4,step=2#FOR0,$20,$10||n|;(#PC+n)-(#PC+n+$02)-$01-$10,#PEEK(#EVAL($EFBF+n*2))||)(lives)
 $FFBA DEFB $03,$40  ;
 $FFBC DEFB $03,$C0  ;
 $FFBE DEFB $0C,$70  ;
 $FFC0 DEFB $04,$E0  ;
 $FFC2 DEFB $05,$C0  ;
 $FFC4 DEFB $03,$C0  ;
 $FFC6 DEFB $05,$A0  ;
 $FFC8 DEFB $0C,$30  ;
 $FFCA DEFB $0F,$78  ;
 $FFCC DEFB $0B,$68  ;
 $FFCE DEFB $0B,$E8  ;
 $FFD0 DEFB $0B,$E8  ;
 $FFD2 DEFB $0B,$E8  ;
 $FFD4 DEFB $08,$08  ;
 $FFD6 DEFB $0B,$E8  ;
 $FFD8 DEFB $05,$D0  ;
 $FFDA DEFB $01,$40  ;
 $FFDC DEFB $01,$40  ;
 $FFDE DEFB $01,$40  ;
 $FFE0 DEFB $03,$60  ;
 $FFE2 DEFB $03,$60  ;
 $FFE4 DEFB $03,$60  ;
 $FFE6 DEFB $07,$78  ; }

; Data block at FFE8
b$FFE8 DEFB $56,$01,$E5,$CD,$33,$03,$E1,$77
 $FFF0 DEFB $32,$08,$5C,$FD,$CB,$01,$EE,$C9
 $FFF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
